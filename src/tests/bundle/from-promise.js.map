{
  "version": 3,
  "sources": ["../../examples/bundling/cjs-shims.ts", "../../../node_modules/universalify/index.js", "../../../node_modules/graceful-fs/polyfills.js", "../../../node_modules/graceful-fs/legacy-streams.js", "../../../node_modules/graceful-fs/clone.js", "../../../node_modules/graceful-fs/graceful-fs.js", "../../../node_modules/fs-extra/lib/fs/index.js", "../../../node_modules/fs-extra/lib/mkdirs/utils.js", "../../../node_modules/fs-extra/lib/mkdirs/make-dir.js", "../../../node_modules/fs-extra/lib/mkdirs/index.js", "../../../node_modules/fs-extra/lib/path-exists/index.js", "../../../node_modules/fs-extra/lib/util/utimes.js", "../../../node_modules/fs-extra/lib/util/stat.js", "../../../node_modules/fs-extra/lib/copy/copy.js", "../../../node_modules/fs-extra/lib/copy/copy-sync.js", "../../../node_modules/fs-extra/lib/copy/index.js", "../../../node_modules/fs-extra/lib/remove/index.js", "../../../node_modules/fs-extra/lib/empty/index.js", "../../../node_modules/fs-extra/lib/ensure/file.js", "../../../node_modules/fs-extra/lib/ensure/link.js", "../../../node_modules/fs-extra/lib/ensure/symlink-paths.js", "../../../node_modules/fs-extra/lib/ensure/symlink-type.js", "../../../node_modules/fs-extra/lib/ensure/symlink.js", "../../../node_modules/fs-extra/lib/ensure/index.js", "../../../node_modules/jsonfile/utils.js", "../../../node_modules/jsonfile/index.js", "../../../node_modules/fs-extra/lib/json/jsonfile.js", "../../../node_modules/fs-extra/lib/output-file/index.js", "../../../node_modules/fs-extra/lib/json/output-json.js", "../../../node_modules/fs-extra/lib/json/output-json-sync.js", "../../../node_modules/fs-extra/lib/json/index.js", "../../../node_modules/fs-extra/lib/move/move.js", "../../../node_modules/fs-extra/lib/move/move-sync.js", "../../../node_modules/fs-extra/lib/move/index.js", "../../../node_modules/fs-extra/lib/index.js", "../../../node_modules/picocolors/picocolors.js", "../../../node_modules/source-map-js/lib/base64.js", "../../../node_modules/source-map-js/lib/base64-vlq.js", "../../../node_modules/source-map-js/lib/util.js", "../../../node_modules/source-map-js/lib/array-set.js", "../../../node_modules/source-map-js/lib/mapping-list.js", "../../../node_modules/source-map-js/lib/source-map-generator.js", "../../../node_modules/source-map-js/lib/binary-search.js", "../../../node_modules/source-map-js/lib/quick-sort.js", "../../../node_modules/source-map-js/lib/source-map-consumer.js", "../../../node_modules/source-map-js/lib/source-node.js", "../../../node_modules/source-map-js/source-map.js", "../../examples/bundling/from-promise.bundle.ts", "../../../node_modules/effect/src/index.ts", "../../../node_modules/effect/src/Function.ts", "../../../node_modules/effect/src/Array.ts", "../../../node_modules/effect/src/Either.ts", "../../../node_modules/effect/src/Equivalence.ts", "../../../node_modules/effect/src/internal/doNotation.ts", "../../../node_modules/effect/src/internal/either.ts", "../../../node_modules/effect/src/Equal.ts", "../../../node_modules/effect/src/Hash.ts", "../../../node_modules/effect/src/GlobalValue.ts", "../../../node_modules/effect/src/internal/version.ts", "../../../node_modules/effect/src/Predicate.ts", "../../../node_modules/effect/src/Utils.ts", "../../../node_modules/effect/src/internal/errors.ts", "../../../node_modules/effect/src/Inspectable.ts", "../../../node_modules/effect/src/internal/effectable.ts", "../../../node_modules/effect/src/Pipeable.ts", "../../../node_modules/effect/src/internal/opCodes/effect.ts", "../../../node_modules/effect/src/internal/option.ts", "../../../node_modules/effect/src/internal/array.ts", "../../../node_modules/effect/src/Option.ts", "../../../node_modules/effect/src/Order.ts", "../../../node_modules/effect/src/Tuple.ts", "../../../node_modules/effect/src/Boolean.ts", "../../../node_modules/effect/src/internal/cache.ts", "../../../node_modules/effect/src/Context.ts", "../../../node_modules/effect/src/internal/context.ts", "../../../node_modules/effect/src/Deferred.ts", "../../../node_modules/effect/src/internal/core.ts", "../../../node_modules/effect/src/Chunk.ts", "../../../node_modules/effect/src/Duration.ts", "../../../node_modules/effect/src/FiberId.ts", "../../../node_modules/effect/src/internal/fiberId.ts", "../../../node_modules/effect/src/HashSet.ts", "../../../node_modules/effect/src/internal/hashSet.ts", "../../../node_modules/effect/src/internal/hashMap.ts", "../../../node_modules/effect/src/internal/hashMap/bitwise.ts", "../../../node_modules/effect/src/internal/hashMap/config.ts", "../../../node_modules/effect/src/internal/hashMap/node.ts", "../../../node_modules/effect/src/internal/stack.ts", "../../../node_modules/effect/src/internal/hashMap/array.ts", "../../../node_modules/effect/src/MutableRef.ts", "../../../node_modules/effect/src/HashMap.ts", "../../../node_modules/effect/src/List.ts", "../../../node_modules/effect/src/RuntimeFlagsPatch.ts", "../../../node_modules/effect/src/internal/runtimeFlags.ts", "../../../node_modules/effect/src/internal/differ.ts", "../../../node_modules/effect/src/internal/data.ts", "../../../node_modules/effect/src/internal/differ/contextPatch.ts", "../../../node_modules/effect/src/internal/differ/hashSetPatch.ts", "../../../node_modules/effect/src/internal/differ/readonlyArrayPatch.ts", "../../../node_modules/effect/src/internal/runtimeFlagsPatch.ts", "../../../node_modules/effect/src/internal/blockedRequests.ts", "../../../node_modules/effect/src/internal/cause.ts", "../../../node_modules/effect/src/internal/opCodes/cause.ts", "../../../node_modules/effect/src/internal/deferred.ts", "../../../node_modules/effect/src/internal/opCodes/deferred.ts", "../../../node_modules/effect/src/internal/singleShotGen.ts", "../../../node_modules/effect/src/internal/tracer.ts", "../../../node_modules/effect/src/Exit.ts", "../../../node_modules/effect/src/MutableHashMap.ts", "../../../node_modules/effect/src/MutableQueue.ts", "../../../node_modules/effect/src/MutableList.ts", "../../../node_modules/effect/src/internal/core-effect.ts", "../../../node_modules/effect/src/Clock.ts", "../../../node_modules/effect/src/internal/clock.ts", "../../../node_modules/effect/src/internal/defaultServices.ts", "../../../node_modules/effect/src/internal/configProvider.ts", "../../../node_modules/effect/src/Number.ts", "../../../node_modules/effect/src/RegExp.ts", "../../../node_modules/effect/src/internal/configError.ts", "../../../node_modules/effect/src/internal/opCodes/configError.ts", "../../../node_modules/effect/src/internal/configProvider/pathPatch.ts", "../../../node_modules/effect/src/internal/opCodes/config.ts", "../../../node_modules/effect/src/internal/defaultServices/console.ts", "../../../node_modules/effect/src/internal/random.ts", "../../../node_modules/effect/src/FiberRefs.ts", "../../../node_modules/effect/src/internal/fiberRefs.ts", "../../../node_modules/effect/src/LogLevel.ts", "../../../node_modules/effect/src/LogSpan.ts", "../../../node_modules/effect/src/internal/logSpan.ts", "../../../node_modules/effect/src/Ref.ts", "../../../node_modules/effect/src/internal/ref.ts", "../../../node_modules/effect/src/Readable.ts", "../../../node_modules/effect/src/Tracer.ts", "../../../node_modules/effect/src/internal/fiberRefs/patch.ts", "../../../node_modules/effect/src/internal/metric/label.ts", "../../../node_modules/effect/src/internal/fiberRuntime.ts", "../../../node_modules/effect/src/Effectable.ts", "../../../node_modules/effect/src/ExecutionStrategy.ts", "../../../node_modules/effect/src/internal/executionStrategy.ts", "../../../node_modules/effect/src/FiberRefsPatch.ts", "../../../node_modules/effect/src/FiberStatus.ts", "../../../node_modules/effect/src/internal/fiberStatus.ts", "../../../node_modules/effect/src/Micro.ts", "../../../node_modules/effect/src/Scheduler.ts", "../../../node_modules/effect/src/internal/completedRequestMap.ts", "../../../node_modules/effect/src/internal/concurrency.ts", "../../../node_modules/effect/src/internal/fiber.ts", "../../../node_modules/effect/src/internal/fiberScope.ts", "../../../node_modules/effect/src/internal/fiberMessage.ts", "../../../node_modules/effect/src/internal/logger.ts", "../../../node_modules/effect/src/internal/metric.ts", "../../../node_modules/effect/src/internal/metric/boundaries.ts", "../../../node_modules/effect/src/internal/metric/key.ts", "../../../node_modules/effect/src/internal/metric/keyType.ts", "../../../node_modules/effect/src/internal/metric/registry.ts", "../../../node_modules/effect/src/internal/metric/hook.ts", "../../../node_modules/effect/src/internal/metric/state.ts", "../../../node_modules/effect/src/internal/metric/pair.ts", "../../../node_modules/effect/src/internal/request.ts", "../../../node_modules/effect/src/internal/supervisor.ts", "../../../node_modules/effect/src/SortedSet.ts", "../../../node_modules/effect/src/RedBlackTree.ts", "../../../node_modules/effect/src/internal/redBlackTree.ts", "../../../node_modules/effect/src/internal/redBlackTree/iterator.ts", "../../../node_modules/effect/src/internal/redBlackTree/node.ts", "../../../node_modules/effect/src/internal/supervisor/patch.ts", "../../../node_modules/effect/src/Differ.ts", "../../../node_modules/effect/src/Cause.ts", "../../../node_modules/effect/src/Effect.ts", "../../../node_modules/effect/src/internal/console.ts", "../../../node_modules/effect/src/internal/layer.ts", "../../../node_modules/effect/src/ScheduleDecision.ts", "../../../node_modules/effect/src/internal/schedule/decision.ts", "../../../node_modules/effect/src/ScheduleIntervals.ts", "../../../node_modules/effect/src/internal/schedule/intervals.ts", "../../../node_modules/effect/src/ScheduleInterval.ts", "../../../node_modules/effect/src/internal/schedule/interval.ts", "../../../node_modules/effect/src/Scope.ts", "../../../node_modules/effect/src/internal/effect/circular.ts", "../../../node_modules/effect/src/internal/schedule.ts", "../../../node_modules/effect/src/internal/opCodes/layer.ts", "../../../node_modules/effect/src/internal/runtime.ts", "../../../node_modules/effect/src/Fiber.ts", "../../../node_modules/effect/src/internal/synchronizedRef.ts", "../../../node_modules/effect/src/internal/query.ts", "../../../node_modules/effect/src/Request.ts", "../../../node_modules/effect/src/Data.ts", "../../capture-errors.ts", "../../logic/errors/capture-errors-from-cause.ts", "../../logic/errors/parse-error.ts", "../../types/pretty-error.type.ts", "../../logic/errors/extract-error-details.ts", "../../source-maps/transform-raw-error.ts", "../../logic/spans/split-spans-attributes-by-type.ts", "../../logic/stack/stack-regex.ts", "../../logic/strip-cwd-path.ts", "../../source-maps/maybe-map-sourcemaps.ts", "../../source-maps/get-error-related-sources.ts", "../../source-maps/get-error-location-from-file-path.ts", "../../source-maps/get-source-code.ts", "../../logic/effects/fs/fs-extra.effects.ts", "../../logic/effects/fs/fs-error.ts", "../../source-maps/get-sources-from-map-file.ts", "../../logic/util/big-int-replacer.ts", "../../examples/from-promise.ts", "../../examples/errors/fetch-error.ts", "../../examples/errors/file-error.ts", "../../examples/util/filename.effect.ts"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\n\nglobalThis.require = createRequire(import.meta.url);\nglobalThis.__filename = url.fileURLToPath(import.meta.url);\nglobalThis.__dirname = path.dirname(__filename);\n", "'use strict'\n\nexports.fromCallback = function (fn) {\n  return Object.defineProperty(function (...args) {\n    if (typeof args[args.length - 1] === 'function') fn.apply(this, args)\n    else {\n      return new Promise((resolve, reject) => {\n        args.push((err, res) => (err != null) ? reject(err) : resolve(res))\n        fn.apply(this, args)\n      })\n    }\n  }, 'name', { value: fn.name })\n}\n\nexports.fromPromise = function (fn) {\n  return Object.defineProperty(function (...args) {\n    const cb = args[args.length - 1]\n    if (typeof cb !== 'function') return fn.apply(this, args)\n    else {\n      args.pop()\n      fn.apply(this, args).then(r => cb(null, r), cb)\n    }\n  }, 'name', { value: fn.name })\n}\n", "var constants = require('constants')\n\nvar origCwd = process.cwd\nvar cwd = null\n\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform\n\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\ntry {\n  process.cwd()\n} catch (er) {}\n\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === 'function') {\n  var chdir = process.chdir\n  process.chdir = function (d) {\n    cwd = null\n    chdir.call(process, d)\n  }\n  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir)\n}\n\nmodule.exports = patch\n\nfunction patch (fs) {\n  // (re-)implement some things that are known busted or missing.\n\n  // lchmod, broken prior to 0.6.2\n  // back-port the fix here.\n  if (constants.hasOwnProperty('O_SYMLINK') &&\n      process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n    patchLchmod(fs)\n  }\n\n  // lutimes implementation, or no-op\n  if (!fs.lutimes) {\n    patchLutimes(fs)\n  }\n\n  // https://github.com/isaacs/node-graceful-fs/issues/4\n  // Chown should not fail on einval or eperm if non-root.\n  // It should not fail on enosys ever, as this just indicates\n  // that a fs doesn't support the intended operation.\n\n  fs.chown = chownFix(fs.chown)\n  fs.fchown = chownFix(fs.fchown)\n  fs.lchown = chownFix(fs.lchown)\n\n  fs.chmod = chmodFix(fs.chmod)\n  fs.fchmod = chmodFix(fs.fchmod)\n  fs.lchmod = chmodFix(fs.lchmod)\n\n  fs.chownSync = chownFixSync(fs.chownSync)\n  fs.fchownSync = chownFixSync(fs.fchownSync)\n  fs.lchownSync = chownFixSync(fs.lchownSync)\n\n  fs.chmodSync = chmodFixSync(fs.chmodSync)\n  fs.fchmodSync = chmodFixSync(fs.fchmodSync)\n  fs.lchmodSync = chmodFixSync(fs.lchmodSync)\n\n  fs.stat = statFix(fs.stat)\n  fs.fstat = statFix(fs.fstat)\n  fs.lstat = statFix(fs.lstat)\n\n  fs.statSync = statFixSync(fs.statSync)\n  fs.fstatSync = statFixSync(fs.fstatSync)\n  fs.lstatSync = statFixSync(fs.lstatSync)\n\n  // if lchmod/lchown do not exist, then make them no-ops\n  if (fs.chmod && !fs.lchmod) {\n    fs.lchmod = function (path, mode, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchmodSync = function () {}\n  }\n  if (fs.chown && !fs.lchown) {\n    fs.lchown = function (path, uid, gid, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchownSync = function () {}\n  }\n\n  // on Windows, A/V software can lock the directory, causing this\n  // to fail with an EACCES or EPERM if the directory contains newly\n  // created files.  Try again on failure, for up to 60 seconds.\n\n  // Set the timeout this long because some Windows Anti-Virus, such as Parity\n  // bit9, may lock files for up to a minute, causing npm package install\n  // failures. Also, take care to yield the scheduler. Windows scheduling gives\n  // CPU to a busy looping process, which can cause the program causing the lock\n  // contention to be starved of CPU by node, so the contention doesn't resolve.\n  if (platform === \"win32\") {\n    fs.rename = typeof fs.rename !== 'function' ? fs.rename\n    : (function (fs$rename) {\n      function rename (from, to, cb) {\n        var start = Date.now()\n        var backoff = 0;\n        fs$rename(from, to, function CB (er) {\n          if (er\n              && (er.code === \"EACCES\" || er.code === \"EPERM\" || er.code === \"EBUSY\")\n              && Date.now() - start < 60000) {\n            setTimeout(function() {\n              fs.stat(to, function (stater, st) {\n                if (stater && stater.code === \"ENOENT\")\n                  fs$rename(from, to, CB);\n                else\n                  cb(er)\n              })\n            }, backoff)\n            if (backoff < 100)\n              backoff += 10;\n            return;\n          }\n          if (cb) cb(er)\n        })\n      }\n      if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename)\n      return rename\n    })(fs.rename)\n  }\n\n  // if read() returns EAGAIN, then just try it again.\n  fs.read = typeof fs.read !== 'function' ? fs.read\n  : (function (fs$read) {\n    function read (fd, buffer, offset, length, position, callback_) {\n      var callback\n      if (callback_ && typeof callback_ === 'function') {\n        var eagCounter = 0\n        callback = function (er, _, __) {\n          if (er && er.code === 'EAGAIN' && eagCounter < 10) {\n            eagCounter ++\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n          }\n          callback_.apply(this, arguments)\n        }\n      }\n      return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n    }\n\n    // This ensures `util.promisify` works as it does for native `fs.read`.\n    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read)\n    return read\n  })(fs.read)\n\n  fs.readSync = typeof fs.readSync !== 'function' ? fs.readSync\n  : (function (fs$readSync) { return function (fd, buffer, offset, length, position) {\n    var eagCounter = 0\n    while (true) {\n      try {\n        return fs$readSync.call(fs, fd, buffer, offset, length, position)\n      } catch (er) {\n        if (er.code === 'EAGAIN' && eagCounter < 10) {\n          eagCounter ++\n          continue\n        }\n        throw er\n      }\n    }\n  }})(fs.readSync)\n\n  function patchLchmod (fs) {\n    fs.lchmod = function (path, mode, callback) {\n      fs.open( path\n             , constants.O_WRONLY | constants.O_SYMLINK\n             , mode\n             , function (err, fd) {\n        if (err) {\n          if (callback) callback(err)\n          return\n        }\n        // prefer to return the chmod error, if one occurs,\n        // but still try to close, and report closing errors if they occur.\n        fs.fchmod(fd, mode, function (err) {\n          fs.close(fd, function(err2) {\n            if (callback) callback(err || err2)\n          })\n        })\n      })\n    }\n\n    fs.lchmodSync = function (path, mode) {\n      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)\n\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      var threw = true\n      var ret\n      try {\n        ret = fs.fchmodSync(fd, mode)\n        threw = false\n      } finally {\n        if (threw) {\n          try {\n            fs.closeSync(fd)\n          } catch (er) {}\n        } else {\n          fs.closeSync(fd)\n        }\n      }\n      return ret\n    }\n  }\n\n  function patchLutimes (fs) {\n    if (constants.hasOwnProperty(\"O_SYMLINK\") && fs.futimes) {\n      fs.lutimes = function (path, at, mt, cb) {\n        fs.open(path, constants.O_SYMLINK, function (er, fd) {\n          if (er) {\n            if (cb) cb(er)\n            return\n          }\n          fs.futimes(fd, at, mt, function (er) {\n            fs.close(fd, function (er2) {\n              if (cb) cb(er || er2)\n            })\n          })\n        })\n      }\n\n      fs.lutimesSync = function (path, at, mt) {\n        var fd = fs.openSync(path, constants.O_SYMLINK)\n        var ret\n        var threw = true\n        try {\n          ret = fs.futimesSync(fd, at, mt)\n          threw = false\n        } finally {\n          if (threw) {\n            try {\n              fs.closeSync(fd)\n            } catch (er) {}\n          } else {\n            fs.closeSync(fd)\n          }\n        }\n        return ret\n      }\n\n    } else if (fs.futimes) {\n      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }\n      fs.lutimesSync = function () {}\n    }\n  }\n\n  function chmodFix (orig) {\n    if (!orig) return orig\n    return function (target, mode, cb) {\n      return orig.call(fs, target, mode, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chmodFixSync (orig) {\n    if (!orig) return orig\n    return function (target, mode) {\n      try {\n        return orig.call(fs, target, mode)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n\n  function chownFix (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid, cb) {\n      return orig.call(fs, target, uid, gid, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chownFixSync (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid) {\n      try {\n        return orig.call(fs, target, uid, gid)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n  function statFix (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options, cb) {\n      if (typeof options === 'function') {\n        cb = options\n        options = null\n      }\n      function callback (er, stats) {\n        if (stats) {\n          if (stats.uid < 0) stats.uid += 0x100000000\n          if (stats.gid < 0) stats.gid += 0x100000000\n        }\n        if (cb) cb.apply(this, arguments)\n      }\n      return options ? orig.call(fs, target, options, callback)\n        : orig.call(fs, target, callback)\n    }\n  }\n\n  function statFixSync (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options) {\n      var stats = options ? orig.call(fs, target, options)\n        : orig.call(fs, target)\n      if (stats) {\n        if (stats.uid < 0) stats.uid += 0x100000000\n        if (stats.gid < 0) stats.gid += 0x100000000\n      }\n      return stats;\n    }\n  }\n\n  // ENOSYS means that the fs doesn't support the op. Just ignore\n  // that, because it doesn't matter.\n  //\n  // if there's no getuid, or if getuid() is something other\n  // than 0, and the error is EINVAL or EPERM, then just ignore\n  // it.\n  //\n  // This specific case is a silent failure in cp, install, tar,\n  // and most other unix tools that manage permissions.\n  //\n  // When running as root, or if other types of errors are\n  // encountered, then it's strict.\n  function chownErOk (er) {\n    if (!er)\n      return true\n\n    if (er.code === \"ENOSYS\")\n      return true\n\n    var nonroot = !process.getuid || process.getuid() !== 0\n    if (nonroot) {\n      if (er.code === \"EINVAL\" || er.code === \"EPERM\")\n        return true\n    }\n\n    return false\n  }\n}\n", "var Stream = require('stream').Stream\n\nmodule.exports = legacy\n\nfunction legacy (fs) {\n  return {\n    ReadStream: ReadStream,\n    WriteStream: WriteStream\n  }\n\n  function ReadStream (path, options) {\n    if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n\n    Stream.call(this);\n\n    var self = this;\n\n    this.path = path;\n    this.fd = null;\n    this.readable = true;\n    this.paused = false;\n\n    this.flags = 'r';\n    this.mode = 438; /*=0666*/\n    this.bufferSize = 64 * 1024;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.encoding) this.setEncoding(this.encoding);\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.end === undefined) {\n        this.end = Infinity;\n      } else if ('number' !== typeof this.end) {\n        throw TypeError('end must be a Number');\n      }\n\n      if (this.start > this.end) {\n        throw new Error('start must be <= end');\n      }\n\n      this.pos = this.start;\n    }\n\n    if (this.fd !== null) {\n      process.nextTick(function() {\n        self._read();\n      });\n      return;\n    }\n\n    fs.open(this.path, this.flags, this.mode, function (err, fd) {\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n        return;\n      }\n\n      self.fd = fd;\n      self.emit('open', fd);\n      self._read();\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n\n    Stream.call(this);\n\n    this.path = path;\n    this.fd = null;\n    this.writable = true;\n\n    this.flags = 'w';\n    this.encoding = 'binary';\n    this.mode = 438; /*=0666*/\n    this.bytesWritten = 0;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.start < 0) {\n        throw new Error('start must be >= zero');\n      }\n\n      this.pos = this.start;\n    }\n\n    this.busy = false;\n    this._queue = [];\n\n    if (this.fd === null) {\n      this._open = fs.open;\n      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);\n      this.flush();\n    }\n  }\n}\n", "'use strict'\n\nmodule.exports = clone\n\nvar getPrototypeOf = Object.getPrototypeOf || function (obj) {\n  return obj.__proto__\n}\n\nfunction clone (obj) {\n  if (obj === null || typeof obj !== 'object')\n    return obj\n\n  if (obj instanceof Object)\n    var copy = { __proto__: getPrototypeOf(obj) }\n  else\n    var copy = Object.create(null)\n\n  Object.getOwnPropertyNames(obj).forEach(function (key) {\n    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))\n  })\n\n  return copy\n}\n", "var fs = require('fs')\nvar polyfills = require('./polyfills.js')\nvar legacy = require('./legacy-streams.js')\nvar clone = require('./clone.js')\n\nvar util = require('util')\n\n/* istanbul ignore next - node 0.x polyfill */\nvar gracefulQueue\nvar previousSymbol\n\n/* istanbul ignore else - node 0.x polyfill */\nif (typeof Symbol === 'function' && typeof Symbol.for === 'function') {\n  gracefulQueue = Symbol.for('graceful-fs.queue')\n  // This is used in testing by future versions\n  previousSymbol = Symbol.for('graceful-fs.previous')\n} else {\n  gracefulQueue = '___graceful-fs.queue'\n  previousSymbol = '___graceful-fs.previous'\n}\n\nfunction noop () {}\n\nfunction publishQueue(context, queue) {\n  Object.defineProperty(context, gracefulQueue, {\n    get: function() {\n      return queue\n    }\n  })\n}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\n// Once time initialization\nif (!fs[gracefulQueue]) {\n  // This queue can be shared by multiple loaded instances\n  var queue = global[gracefulQueue] || []\n  publishQueue(fs, queue)\n\n  // Patch fs.close/closeSync to shared queue version, because we need\n  // to retry() whenever a close happens *anywhere* in the program.\n  // This is essential when multiple graceful-fs instances are\n  // in play at the same time.\n  fs.close = (function (fs$close) {\n    function close (fd, cb) {\n      return fs$close.call(fs, fd, function (err) {\n        // This function uses the graceful-fs shared queue\n        if (!err) {\n          resetQueue()\n        }\n\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n      })\n    }\n\n    Object.defineProperty(close, previousSymbol, {\n      value: fs$close\n    })\n    return close\n  })(fs.close)\n\n  fs.closeSync = (function (fs$closeSync) {\n    function closeSync (fd) {\n      // This function uses the graceful-fs shared queue\n      fs$closeSync.apply(fs, arguments)\n      resetQueue()\n    }\n\n    Object.defineProperty(closeSync, previousSymbol, {\n      value: fs$closeSync\n    })\n    return closeSync\n  })(fs.closeSync)\n\n  if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n    process.on('exit', function() {\n      debug(fs[gracefulQueue])\n      require('assert').equal(fs[gracefulQueue].length, 0)\n    })\n  }\n}\n\nif (!global[gracefulQueue]) {\n  publishQueue(global, fs[gracefulQueue]);\n}\n\nmodule.exports = patch(clone(fs))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs)\n    fs.__patched = true;\n}\n\nfunction patch (fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs)\n  fs.gracefulify = patch\n\n  fs.createReadStream = createReadStream\n  fs.createWriteStream = createWriteStream\n  var fs$readFile = fs.readFile\n  fs.readFile = readFile\n  function readFile (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$readFile(path, options, cb)\n\n    function go$readFile (path, options, cb, startTime) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$writeFile = fs.writeFile\n  fs.writeFile = writeFile\n  function writeFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$writeFile(path, data, options, cb)\n\n    function go$writeFile (path, data, options, cb, startTime) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$appendFile = fs.appendFile\n  if (fs$appendFile)\n    fs.appendFile = appendFile\n  function appendFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$appendFile(path, data, options, cb)\n\n    function go$appendFile (path, data, options, cb, startTime) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$copyFile = fs.copyFile\n  if (fs$copyFile)\n    fs.copyFile = copyFile\n  function copyFile (src, dest, flags, cb) {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 0\n    }\n    return go$copyFile(src, dest, flags, cb)\n\n    function go$copyFile (src, dest, flags, cb, startTime) {\n      return fs$copyFile(src, dest, flags, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$readdir = fs.readdir\n  fs.readdir = readdir\n  var noReaddirOptionVersions = /^v[0-5]\\./\n  function readdir (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    var go$readdir = noReaddirOptionVersions.test(process.version)\n      ? function go$readdir (path, options, cb, startTime) {\n        return fs$readdir(path, fs$readdirCallback(\n          path, options, cb, startTime\n        ))\n      }\n      : function go$readdir (path, options, cb, startTime) {\n        return fs$readdir(path, options, fs$readdirCallback(\n          path, options, cb, startTime\n        ))\n      }\n\n    return go$readdir(path, options, cb)\n\n    function fs$readdirCallback (path, options, cb, startTime) {\n      return function (err, files) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([\n            go$readdir,\n            [path, options, cb],\n            err,\n            startTime || Date.now(),\n            Date.now()\n          ])\n        else {\n          if (files && files.sort)\n            files.sort()\n\n          if (typeof cb === 'function')\n            cb.call(this, err, files)\n        }\n      }\n    }\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs)\n    ReadStream = legStreams.ReadStream\n    WriteStream = legStreams.WriteStream\n  }\n\n  var fs$ReadStream = fs.ReadStream\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype)\n    ReadStream.prototype.open = ReadStream$open\n  }\n\n  var fs$WriteStream = fs.WriteStream\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype)\n    WriteStream.prototype.open = WriteStream$open\n  }\n\n  Object.defineProperty(fs, 'ReadStream', {\n    get: function () {\n      return ReadStream\n    },\n    set: function (val) {\n      ReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  Object.defineProperty(fs, 'WriteStream', {\n    get: function () {\n      return WriteStream\n    },\n    set: function (val) {\n      WriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  // legacy names\n  var FileReadStream = ReadStream\n  Object.defineProperty(fs, 'FileReadStream', {\n    get: function () {\n      return FileReadStream\n    },\n    set: function (val) {\n      FileReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  var FileWriteStream = WriteStream\n  Object.defineProperty(fs, 'FileWriteStream', {\n    get: function () {\n      return FileWriteStream\n    },\n    set: function (val) {\n      FileWriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  function ReadStream (path, options) {\n    if (this instanceof ReadStream)\n      return fs$ReadStream.apply(this, arguments), this\n    else\n      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)\n  }\n\n  function ReadStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose)\n          that.destroy()\n\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n        that.read()\n      }\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (this instanceof WriteStream)\n      return fs$WriteStream.apply(this, arguments), this\n    else\n      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)\n  }\n\n  function WriteStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy()\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n      }\n    })\n  }\n\n  function createReadStream (path, options) {\n    return new fs.ReadStream(path, options)\n  }\n\n  function createWriteStream (path, options) {\n    return new fs.WriteStream(path, options)\n  }\n\n  var fs$open = fs.open\n  fs.open = open\n  function open (path, flags, mode, cb) {\n    if (typeof mode === 'function')\n      cb = mode, mode = null\n\n    return go$open(path, flags, mode, cb)\n\n    function go$open (path, flags, mode, cb, startTime) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  return fs\n}\n\nfunction enqueue (elem) {\n  debug('ENQUEUE', elem[0].name, elem[1])\n  fs[gracefulQueue].push(elem)\n  retry()\n}\n\n// keep track of the timeout between retry() calls\nvar retryTimer\n\n// reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\nfunction resetQueue () {\n  var now = Date.now()\n  for (var i = 0; i < fs[gracefulQueue].length; ++i) {\n    // entries that are only a length of 2 are from an older version, don't\n    // bother modifying those since they'll be retried anyway.\n    if (fs[gracefulQueue][i].length > 2) {\n      fs[gracefulQueue][i][3] = now // startTime\n      fs[gracefulQueue][i][4] = now // lastTime\n    }\n  }\n  // call retry to make sure we're actively processing the queue\n  retry()\n}\n\nfunction retry () {\n  // clear the timer and remove it to help prevent unintended concurrency\n  clearTimeout(retryTimer)\n  retryTimer = undefined\n\n  if (fs[gracefulQueue].length === 0)\n    return\n\n  var elem = fs[gracefulQueue].shift()\n  var fn = elem[0]\n  var args = elem[1]\n  // these items may be unset if they were added by an older graceful-fs\n  var err = elem[2]\n  var startTime = elem[3]\n  var lastTime = elem[4]\n\n  // if we don't have a startTime we have no way of knowing if we've waited\n  // long enough, so go ahead and retry this item now\n  if (startTime === undefined) {\n    debug('RETRY', fn.name, args)\n    fn.apply(null, args)\n  } else if (Date.now() - startTime >= 60000) {\n    // it's been more than 60 seconds total, bail now\n    debug('TIMEOUT', fn.name, args)\n    var cb = args.pop()\n    if (typeof cb === 'function')\n      cb.call(null, err)\n  } else {\n    // the amount of time between the last attempt and right now\n    var sinceAttempt = Date.now() - lastTime\n    // the amount of time between when we first tried, and when we last tried\n    // rounded up to at least 1\n    var sinceStart = Math.max(lastTime - startTime, 1)\n    // backoff. wait longer than the total time we've been retrying, but only\n    // up to a maximum of 100ms\n    var desiredDelay = Math.min(sinceStart * 1.2, 100)\n    // it's been long enough since the last retry, do it again\n    if (sinceAttempt >= desiredDelay) {\n      debug('RETRY', fn.name, args)\n      fn.apply(null, args.concat([startTime]))\n    } else {\n      // if we can't do this job yet, push it to the end of the queue\n      // and let the next iteration check again\n      fs[gracefulQueue].push(elem)\n    }\n  }\n\n  // schedule our next run if one isn't already scheduled\n  if (retryTimer === undefined) {\n    retryTimer = setTimeout(retry, 0)\n  }\n}\n", "'use strict'\n// This is adapted from https://github.com/normalize/mz\n// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\n\nconst api = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'close',\n  'copyFile',\n  'fchmod',\n  'fchown',\n  'fdatasync',\n  'fstat',\n  'fsync',\n  'ftruncate',\n  'futimes',\n  'lchmod',\n  'lchown',\n  'link',\n  'lstat',\n  'mkdir',\n  'mkdtemp',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'rename',\n  'rm',\n  'rmdir',\n  'stat',\n  'symlink',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile'\n].filter(key => {\n  // Some commands are not available on some systems. Ex:\n  // fs.cp was added in Node.js v16.7.0\n  // fs.lchown is not available on at least some Linux\n  return typeof fs[key] === 'function'\n})\n\n// Export cloned fs:\nObject.assign(exports, fs)\n\n// Universalify async methods:\napi.forEach(method => {\n  exports[method] = u(fs[method])\n})\n\n// We differ from mz/fs in that we still ship the old, broken, fs.exists()\n// since we are a drop-in replacement for the native module\nexports.exists = function (filename, callback) {\n  if (typeof callback === 'function') {\n    return fs.exists(filename, callback)\n  }\n  return new Promise(resolve => {\n    return fs.exists(filename, resolve)\n  })\n}\n\n// fs.read(), fs.write(), fs.readv(), & fs.writev() need special treatment due to multiple callback args\n\nexports.read = function (fd, buffer, offset, length, position, callback) {\n  if (typeof callback === 'function') {\n    return fs.read(fd, buffer, offset, length, position, callback)\n  }\n  return new Promise((resolve, reject) => {\n    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffer })\n    })\n  })\n}\n\n// Function signature can be\n// fs.write(fd, buffer[, offset[, length[, position]]], callback)\n// OR\n// fs.write(fd, string[, position[, encoding]], callback)\n// We need to handle both cases, so we use ...args\nexports.write = function (fd, buffer, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.write(fd, buffer, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffer })\n    })\n  })\n}\n\n// Function signature is\n// s.readv(fd, buffers[, position], callback)\n// We need to handle the optional arg, so we use ...args\nexports.readv = function (fd, buffers, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.readv(fd, buffers, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.readv(fd, buffers, ...args, (err, bytesRead, buffers) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffers })\n    })\n  })\n}\n\n// Function signature is\n// s.writev(fd, buffers[, position], callback)\n// We need to handle the optional arg, so we use ...args\nexports.writev = function (fd, buffers, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.writev(fd, buffers, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffers })\n    })\n  })\n}\n\n// fs.realpath.native sometimes not available if fs is monkey-patched\nif (typeof fs.realpath.native === 'function') {\n  exports.realpath.native = u(fs.realpath.native)\n} else {\n  process.emitWarning(\n    'fs.realpath.native is not a function. Is fs being monkey-patched?',\n    'Warning', 'fs-extra-WARN0003'\n  )\n}\n", "// Adapted from https://github.com/sindresorhus/make-dir\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict'\nconst path = require('path')\n\n// https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\nmodule.exports.checkPath = function checkPath (pth) {\n  if (process.platform === 'win32') {\n    const pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''))\n\n    if (pathHasInvalidWinCharacters) {\n      const error = new Error(`Path contains invalid characters: ${pth}`)\n      error.code = 'EINVAL'\n      throw error\n    }\n  }\n}\n", "'use strict'\nconst fs = require('../fs')\nconst { checkPath } = require('./utils')\n\nconst getMode = options => {\n  const defaults = { mode: 0o777 }\n  if (typeof options === 'number') return options\n  return ({ ...defaults, ...options }).mode\n}\n\nmodule.exports.makeDir = async (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdir(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n\nmodule.exports.makeDirSync = (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdirSync(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n", "'use strict'\nconst u = require('universalify').fromPromise\nconst { makeDir: _makeDir, makeDirSync } = require('./make-dir')\nconst makeDir = u(_makeDir)\n\nmodule.exports = {\n  mkdirs: makeDir,\n  mkdirsSync: makeDirSync,\n  // alias\n  mkdirp: makeDir,\n  mkdirpSync: makeDirSync,\n  ensureDir: makeDir,\n  ensureDirSync: makeDirSync\n}\n", "'use strict'\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\n\nfunction pathExists (path) {\n  return fs.access(path).then(() => true).catch(() => false)\n}\n\nmodule.exports = {\n  pathExists: u(pathExists),\n  pathExistsSync: fs.existsSync\n}\n", "'use strict'\n\nconst fs = require('../fs')\nconst u = require('universalify').fromPromise\n\nasync function utimesMillis (path, atime, mtime) {\n  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)\n  const fd = await fs.open(path, 'r+')\n\n  let closeErr = null\n\n  try {\n    await fs.futimes(fd, atime, mtime)\n  } finally {\n    try {\n      await fs.close(fd)\n    } catch (e) {\n      closeErr = e\n    }\n  }\n\n  if (closeErr) {\n    throw closeErr\n  }\n}\n\nfunction utimesMillisSync (path, atime, mtime) {\n  const fd = fs.openSync(path, 'r+')\n  fs.futimesSync(fd, atime, mtime)\n  return fs.closeSync(fd)\n}\n\nmodule.exports = {\n  utimesMillis: u(utimesMillis),\n  utimesMillisSync\n}\n", "'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst u = require('universalify').fromPromise\n\nfunction getStats (src, dest, opts) {\n  const statFunc = opts.dereference\n    ? (file) => fs.stat(file, { bigint: true })\n    : (file) => fs.lstat(file, { bigint: true })\n  return Promise.all([\n    statFunc(src),\n    statFunc(dest).catch(err => {\n      if (err.code === 'ENOENT') return null\n      throw err\n    })\n  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))\n}\n\nfunction getStatsSync (src, dest, opts) {\n  let destStat\n  const statFunc = opts.dereference\n    ? (file) => fs.statSync(file, { bigint: true })\n    : (file) => fs.lstatSync(file, { bigint: true })\n  const srcStat = statFunc(src)\n  try {\n    destStat = statFunc(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return { srcStat, destStat: null }\n    throw err\n  }\n  return { srcStat, destStat }\n}\n\nasync function checkPaths (src, dest, funcName, opts) {\n  const { srcStat, destStat } = await getStats(src, dest, opts)\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return { srcStat, destStat }\n}\n\nfunction checkPathsSync (src, dest, funcName, opts) {\n  const { srcStat, destStat } = getStatsSync(src, dest, opts)\n\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return { srcStat, destStat }\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nasync function checkParentPaths (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n\n  let destStat\n  try {\n    destStat = await fs.stat(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return checkParentPaths(src, srcStat, destParent, funcName)\n}\n\nfunction checkParentPathsSync (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n  let destStat\n  try {\n    destStat = fs.statSync(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName)\n}\n\nfunction areIdentical (srcStat, destStat) {\n  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i)\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i)\n  return srcArr.every((cur, i) => destArr[i] === cur)\n}\n\nfunction errMsg (src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`\n}\n\nmodule.exports = {\n  // checkPaths\n  checkPaths: u(checkPaths),\n  checkPathsSync,\n  // checkParent\n  checkParentPaths: u(checkParentPaths),\n  checkParentPathsSync,\n  // Misc\n  isSrcSubdir,\n  areIdentical\n}\n", "'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { mkdirs } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { utimesMillis } = require('../util/utimes')\nconst stat = require('../util/stat')\n\nasync function copy (src, dest, opts = {}) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0001'\n    )\n  }\n\n  const { srcStat, destStat } = await stat.checkPaths(src, dest, 'copy', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'copy')\n\n  const include = await runFilter(src, dest, opts)\n\n  if (!include) return\n\n  // check if the parent of dest exists, and create it if it doesn't exist\n  const destParent = path.dirname(dest)\n  const dirExists = await pathExists(destParent)\n  if (!dirExists) {\n    await mkdirs(destParent)\n  }\n\n  await getStatsAndPerformCopy(destStat, src, dest, opts)\n}\n\nasync function runFilter (src, dest, opts) {\n  if (!opts.filter) return true\n  return opts.filter(src, dest)\n}\n\nasync function getStatsAndPerformCopy (destStat, src, dest, opts) {\n  const statFn = opts.dereference ? fs.stat : fs.lstat\n  const srcStat = await statFn(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n\n  if (\n    srcStat.isFile() ||\n    srcStat.isCharacterDevice() ||\n    srcStat.isBlockDevice()\n  ) return onFile(srcStat, destStat, src, dest, opts)\n\n  if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nasync function onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n\n  if (opts.overwrite) {\n    await fs.unlink(dest)\n    return copyFile(srcStat, src, dest, opts)\n  }\n  if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nasync function copyFile (srcStat, src, dest, opts) {\n  await fs.copyFile(src, dest)\n  if (opts.preserveTimestamps) {\n    // Make sure the file is writable before setting the timestamp\n    // otherwise open fails with EPERM when invoked with 'r+'\n    // (through utimes call)\n    if (fileIsNotWritable(srcStat.mode)) {\n      await makeFileWritable(dest, srcStat.mode)\n    }\n\n    // Set timestamps and mode correspondingly\n\n    // Note that The initial srcStat.atime cannot be trusted\n    // because it is modified by the read(2) system call\n    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n    const updatedSrcStat = await fs.stat(src)\n    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n  }\n\n  return fs.chmod(dest, srcStat.mode)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return fs.chmod(dest, srcMode | 0o200)\n}\n\nasync function onDir (srcStat, destStat, src, dest, opts) {\n  // the dest directory might not exist, create it\n  if (!destStat) {\n    await fs.mkdir(dest)\n  }\n\n  const items = await fs.readdir(src)\n\n  // loop through the files in the current directory to copy everything\n  await Promise.all(items.map(async item => {\n    const srcItem = path.join(src, item)\n    const destItem = path.join(dest, item)\n\n    // skip the item if it is matches by the filter function\n    const include = await runFilter(srcItem, destItem, opts)\n    if (!include) return\n\n    const { destStat } = await stat.checkPaths(srcItem, destItem, 'copy', opts)\n\n    // If the item is a copyable file, `getStatsAndPerformCopy` will copy it\n    // If the item is a directory, `getStatsAndPerformCopy` will call `onDir` recursively\n    return getStatsAndPerformCopy(destStat, srcItem, destItem, opts)\n  }))\n\n  if (!destStat) {\n    await fs.chmod(dest, srcStat.mode)\n  }\n}\n\nasync function onLink (destStat, src, dest, opts) {\n  let resolvedSrc = await fs.readlink(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n  if (!destStat) {\n    return fs.symlink(resolvedSrc, dest)\n  }\n\n  let resolvedDest = null\n  try {\n    resolvedDest = await fs.readlink(dest)\n  } catch (e) {\n    // dest exists and is a regular file or directory,\n    // Windows may throw UNKNOWN error. If dest already exists,\n    // fs throws error anyway, so no need to guard against it here.\n    if (e.code === 'EINVAL' || e.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest)\n    throw e\n  }\n  if (opts.dereference) {\n    resolvedDest = path.resolve(process.cwd(), resolvedDest)\n  }\n  if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n  }\n\n  // do not copy if src is a subdir of dest since unlinking\n  // dest in this case would result in removing src contents\n  // and therefore a broken symlink would be created.\n  if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n  }\n\n  // copy the link\n  await fs.unlink(dest)\n  return fs.symlink(resolvedSrc, dest)\n}\n\nmodule.exports = copy\n", "'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdirsSync = require('../mkdirs').mkdirsSync\nconst utimesMillisSync = require('../util/utimes').utimesMillisSync\nconst stat = require('../util/stat')\n\nfunction copySync (src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts = opts || {}\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0002'\n    )\n  }\n\n  const { srcStat, destStat } = stat.checkPathsSync(src, dest, 'copy', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy')\n  if (opts.filter && !opts.filter(src, dest)) return\n  const destParent = path.dirname(dest)\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent)\n  return getStats(destStat, src, dest, opts)\n}\n\nfunction getStats (destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync\n  const srcStat = statSync(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isFile() ||\n           srcStat.isCharacterDevice() ||\n           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nfunction mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest)\n    return copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nfunction copyFile (srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest)\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest)\n  return setDestMode(dest, srcStat.mode)\n}\n\nfunction handleTimestamps (srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode)\n  return setDestTimestamps(src, dest)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return setDestMode(dest, srcMode | 0o200)\n}\n\nfunction setDestMode (dest, srcMode) {\n  return fs.chmodSync(dest, srcMode)\n}\n\nfunction setDestTimestamps (src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  const updatedSrcStat = fs.statSync(src)\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts)\n  return copyDir(src, dest, opts)\n}\n\nfunction mkDirAndCopy (srcMode, src, dest, opts) {\n  fs.mkdirSync(dest)\n  copyDir(src, dest, opts)\n  return setDestMode(dest, srcMode)\n}\n\nfunction copyDir (src, dest, opts) {\n  fs.readdirSync(src).forEach(item => copyDirItem(item, src, dest, opts))\n}\n\nfunction copyDirItem (item, src, dest, opts) {\n  const srcItem = path.join(src, item)\n  const destItem = path.join(dest, item)\n  if (opts.filter && !opts.filter(srcItem, destItem)) return\n  const { destStat } = stat.checkPathsSync(srcItem, destItem, 'copy', opts)\n  return getStats(destStat, srcItem, destItem, opts)\n}\n\nfunction onLink (destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest)\n  } else {\n    let resolvedDest\n    try {\n      resolvedDest = fs.readlinkSync(dest)\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)\n      throw err\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest)\n    }\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n    }\n    return copyLink(resolvedSrc, dest)\n  }\n}\n\nfunction copyLink (resolvedSrc, dest) {\n  fs.unlinkSync(dest)\n  return fs.symlinkSync(resolvedSrc, dest)\n}\n\nmodule.exports = copySync\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nmodule.exports = {\n  copy: u(require('./copy')),\n  copySync: require('./copy-sync')\n}\n", "'use strict'\n\nconst fs = require('graceful-fs')\nconst u = require('universalify').fromCallback\n\nfunction remove (path, callback) {\n  fs.rm(path, { recursive: true, force: true }, callback)\n}\n\nfunction removeSync (path) {\n  fs.rmSync(path, { recursive: true, force: true })\n}\n\nmodule.exports = {\n  remove: u(remove),\n  removeSync\n}\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst remove = require('../remove')\n\nconst emptyDir = u(async function emptyDir (dir) {\n  let items\n  try {\n    items = await fs.readdir(dir)\n  } catch {\n    return mkdir.mkdirs(dir)\n  }\n\n  return Promise.all(items.map(item => remove.remove(path.join(dir, item))))\n})\n\nfunction emptyDirSync (dir) {\n  let items\n  try {\n    items = fs.readdirSync(dir)\n  } catch {\n    return mkdir.mkdirsSync(dir)\n  }\n\n  items.forEach(item => {\n    item = path.join(dir, item)\n    remove.removeSync(item)\n  })\n}\n\nmodule.exports = {\n  emptyDirSync,\n  emptydirSync: emptyDirSync,\n  emptyDir,\n  emptydir: emptyDir\n}\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\n\nasync function createFile (file) {\n  let stats\n  try {\n    stats = await fs.stat(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n\n  let dirStats = null\n  try {\n    dirStats = await fs.stat(dir)\n  } catch (err) {\n    // if the directory doesn't exist, make it\n    if (err.code === 'ENOENT') {\n      await mkdir.mkdirs(dir)\n      await fs.writeFile(file, '')\n      return\n    } else {\n      throw err\n    }\n  }\n\n  if (dirStats.isDirectory()) {\n    await fs.writeFile(file, '')\n  } else {\n    // parent is not a directory\n    // This is just to cause an internal ENOTDIR error to be thrown\n    await fs.readdir(dir)\n  }\n}\n\nfunction createFileSync (file) {\n  let stats\n  try {\n    stats = fs.statSync(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir)\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir)\n    else throw err\n  }\n\n  fs.writeFileSync(file, '')\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync\n}\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { areIdentical } = require('../util/stat')\n\nasync function createLink (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = await fs.lstat(dstpath)\n  } catch {\n    // ignore error\n  }\n\n  let srcStat\n  try {\n    srcStat = await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  if (dstStat && areIdentical(srcStat, dstStat)) return\n\n  const dir = path.dirname(dstpath)\n\n  const dirExists = await pathExists(dir)\n\n  if (!dirExists) {\n    await mkdir.mkdirs(dir)\n  }\n\n  await fs.link(srcpath, dstpath)\n}\n\nfunction createLinkSync (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = fs.lstatSync(dstpath)\n  } catch {}\n\n  try {\n    const srcStat = fs.lstatSync(srcpath)\n    if (dstStat && areIdentical(srcStat, dstStat)) return\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  const dir = path.dirname(dstpath)\n  const dirExists = fs.existsSync(dir)\n  if (dirExists) return fs.linkSync(srcpath, dstpath)\n  mkdir.mkdirsSync(dir)\n\n  return fs.linkSync(srcpath, dstpath)\n}\n\nmodule.exports = {\n  createLink: u(createLink),\n  createLinkSync\n}\n", "'use strict'\n\nconst path = require('path')\nconst fs = require('../fs')\nconst { pathExists } = require('../path-exists')\n\nconst u = require('universalify').fromPromise\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nasync function symlinkPaths (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    try {\n      await fs.lstat(srcpath)\n    } catch (err) {\n      err.message = err.message.replace('lstat', 'ensureSymlink')\n      throw err\n    }\n\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n\n  const exists = await pathExists(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  try {\n    await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureSymlink')\n    throw err\n  }\n\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    const exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n  const exists = fs.existsSync(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  const srcExists = fs.existsSync(srcpath)\n  if (!srcExists) throw new Error('relative srcpath does not exist')\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nmodule.exports = {\n  symlinkPaths: u(symlinkPaths),\n  symlinkPathsSync\n}\n", "'use strict'\n\nconst fs = require('../fs')\nconst u = require('universalify').fromPromise\n\nasync function symlinkType (srcpath, type) {\n  if (type) return type\n\n  let stats\n  try {\n    stats = await fs.lstat(srcpath)\n  } catch {\n    return 'file'\n  }\n\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nfunction symlinkTypeSync (srcpath, type) {\n  if (type) return type\n\n  let stats\n  try {\n    stats = fs.lstatSync(srcpath)\n  } catch {\n    return 'file'\n  }\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nmodule.exports = {\n  symlinkType: u(symlinkType),\n  symlinkTypeSync\n}\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\n\nconst { mkdirs, mkdirsSync } = require('../mkdirs')\n\nconst { symlinkPaths, symlinkPathsSync } = require('./symlink-paths')\nconst { symlinkType, symlinkTypeSync } = require('./symlink-type')\n\nconst { pathExists } = require('../path-exists')\n\nconst { areIdentical } = require('../util/stat')\n\nasync function createSymlink (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = await fs.lstat(dstpath)\n  } catch { }\n\n  if (stats && stats.isSymbolicLink()) {\n    const [srcStat, dstStat] = await Promise.all([\n      fs.stat(srcpath),\n      fs.stat(dstpath)\n    ])\n\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = await symlinkPaths(srcpath, dstpath)\n  srcpath = relative.toDst\n  const toType = await symlinkType(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n\n  if (!(await pathExists(dir))) {\n    await mkdirs(dir)\n  }\n\n  return fs.symlink(srcpath, dstpath, toType)\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch { }\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n", "'use strict'\n\nconst { createFile, createFileSync } = require('./file')\nconst { createLink, createLinkSync } = require('./link')\nconst { createSymlink, createSymlinkSync } = require('./symlink')\n\nmodule.exports = {\n  // file\n  createFile,\n  createFileSync,\n  ensureFile: createFile,\n  ensureFileSync: createFileSync,\n  // link\n  createLink,\n  createLinkSync,\n  ensureLink: createLink,\n  ensureLinkSync: createLinkSync,\n  // symlink\n  createSymlink,\n  createSymlinkSync,\n  ensureSymlink: createSymlink,\n  ensureSymlinkSync: createSymlinkSync\n}\n", "function stringify (obj, { EOL = '\\n', finalEOL = true, replacer = null, spaces } = {}) {\n  const EOF = finalEOL ? EOL : ''\n  const str = JSON.stringify(obj, replacer, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOF\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  return content.replace(/^\\uFEFF/, '')\n}\n\nmodule.exports = { stringify, stripBom }\n", "let _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\nconst universalify = require('universalify')\nconst { stringify, stripBom } = require('./utils')\n\nasync function _readFile (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  let data = await universalify.fromCallback(fs.readFile)(file, options)\n\n  data = stripBom(data)\n\n  let obj\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n\n  return obj\n}\n\nconst readFile = universalify.fromPromise(_readFile)\n\nfunction readFileSync (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  try {\n    let content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nasync function _writeFile (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n\n  await universalify.fromCallback(fs.writeFile)(file, str, options)\n}\n\nconst writeFile = universalify.fromPromise(_writeFile)\n\nfunction writeFileSync (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n}\n\nmodule.exports = jsonfile\n", "'use strict'\n\nconst jsonFile = require('jsonfile')\n\nmodule.exports = {\n  // jsonfile exports\n  readJson: jsonFile.readFile,\n  readJsonSync: jsonFile.readFileSync,\n  writeJson: jsonFile.writeFile,\n  writeJsonSync: jsonFile.writeFileSync\n}\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst pathExists = require('../path-exists').pathExists\n\nasync function outputFile (file, data, encoding = 'utf-8') {\n  const dir = path.dirname(file)\n\n  if (!(await pathExists(dir))) {\n    await mkdir.mkdirs(dir)\n  }\n\n  return fs.writeFile(file, data, encoding)\n}\n\nfunction outputFileSync (file, ...args) {\n  const dir = path.dirname(file)\n  if (!fs.existsSync(dir)) {\n    mkdir.mkdirsSync(dir)\n  }\n\n  fs.writeFileSync(file, ...args)\n}\n\nmodule.exports = {\n  outputFile: u(outputFile),\n  outputFileSync\n}\n", "'use strict'\n\nconst { stringify } = require('jsonfile/utils')\nconst { outputFile } = require('../output-file')\n\nasync function outputJson (file, data, options = {}) {\n  const str = stringify(data, options)\n\n  await outputFile(file, str, options)\n}\n\nmodule.exports = outputJson\n", "'use strict'\n\nconst { stringify } = require('jsonfile/utils')\nconst { outputFileSync } = require('../output-file')\n\nfunction outputJsonSync (file, data, options) {\n  const str = stringify(data, options)\n\n  outputFileSync(file, str, options)\n}\n\nmodule.exports = outputJsonSync\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nconst jsonFile = require('./jsonfile')\n\njsonFile.outputJson = u(require('./output-json'))\njsonFile.outputJsonSync = require('./output-json-sync')\n// aliases\njsonFile.outputJSON = jsonFile.outputJson\njsonFile.outputJSONSync = jsonFile.outputJsonSync\njsonFile.writeJSON = jsonFile.writeJson\njsonFile.writeJSONSync = jsonFile.writeJsonSync\njsonFile.readJSON = jsonFile.readJson\njsonFile.readJSONSync = jsonFile.readJsonSync\n\nmodule.exports = jsonFile\n", "'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { copy } = require('../copy')\nconst { remove } = require('../remove')\nconst { mkdirp } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst stat = require('../util/stat')\n\nasync function move (src, dest, opts = {}) {\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, 'move', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'move')\n\n  // If the parent of dest is not root, make sure it exists before proceeding\n  const destParent = path.dirname(dest)\n  const parsedParentPath = path.parse(destParent)\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent)\n  }\n\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nasync function doRename (src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest)\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.')\n    }\n  }\n\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err\n    }\n    await moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nasync function moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n\n  await copy(src, dest, opts)\n  return remove(src)\n}\n\nmodule.exports = move\n", "'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copySync = require('../copy').copySync\nconst removeSync = require('../remove').removeSync\nconst mkdirpSync = require('../mkdirs').mkdirpSync\nconst stat = require('../util/stat')\n\nfunction moveSync (src, dest, opts) {\n  opts = opts || {}\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, 'move', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'move')\n  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest))\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase) {\n  if (isChangingCase) return rename(src, dest, overwrite)\n  if (overwrite) {\n    removeSync(dest)\n    return rename(src, dest, overwrite)\n  }\n  if (fs.existsSync(dest)) throw new Error('dest already exists.')\n  return rename(src, dest, overwrite)\n}\n\nfunction rename (src, dest, overwrite) {\n  try {\n    fs.renameSync(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') throw err\n    return moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nfunction moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n  copySync(src, dest, opts)\n  return removeSync(src)\n}\n\nmodule.exports = moveSync\n", "'use strict'\n\nconst u = require('universalify').fromPromise\nmodule.exports = {\n  move: u(require('./move')),\n  moveSync: require('./move-sync')\n}\n", "'use strict'\n\nmodule.exports = {\n  // Export promiseified graceful-fs:\n  ...require('./fs'),\n  // Export extra methods:\n  ...require('./copy'),\n  ...require('./empty'),\n  ...require('./ensure'),\n  ...require('./json'),\n  ...require('./mkdirs'),\n  ...require('./move'),\n  ...require('./output-file'),\n  ...require('./path-exists'),\n  ...require('./remove')\n}\n", "let argv = process.argv || [],\n\tenv = process.env\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(require != null && require(\"tty\").isatty(1) && env.TERM !== \"dumb\") ||\n\t\t\"CI\" in env)\n\nlet formatter =\n\t(open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input\n\t\tlet index = string.indexOf(close, open.length)\n\t\treturn ~index\n\t\t\t? open + replaceClose(string, close, replace, index) + close\n\t\t\t: open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet result = \"\"\n\tlet cursor = 0\n\tdo {\n\t\tresult += string.substring(cursor, index) + replace\n\t\tcursor = index + close.length\n\t\tindex = string.indexOf(close, cursor)\n\t} while (~index)\n\treturn result + string.substring(cursor)\n}\n\nlet createColors = (enabled = isColorSupported) => {\n\tlet init = enabled ? formatter : () => String\n\treturn {\n\t\tisColorSupported: enabled,\n\t\treset: init(\"\\x1b[0m\", \"\\x1b[0m\"),\n\t\tbold: init(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\"),\n\t\tdim: init(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\"),\n\t\titalic: init(\"\\x1b[3m\", \"\\x1b[23m\"),\n\t\tunderline: init(\"\\x1b[4m\", \"\\x1b[24m\"),\n\t\tinverse: init(\"\\x1b[7m\", \"\\x1b[27m\"),\n\t\thidden: init(\"\\x1b[8m\", \"\\x1b[28m\"),\n\t\tstrikethrough: init(\"\\x1b[9m\", \"\\x1b[29m\"),\n\t\tblack: init(\"\\x1b[30m\", \"\\x1b[39m\"),\n\t\tred: init(\"\\x1b[31m\", \"\\x1b[39m\"),\n\t\tgreen: init(\"\\x1b[32m\", \"\\x1b[39m\"),\n\t\tyellow: init(\"\\x1b[33m\", \"\\x1b[39m\"),\n\t\tblue: init(\"\\x1b[34m\", \"\\x1b[39m\"),\n\t\tmagenta: init(\"\\x1b[35m\", \"\\x1b[39m\"),\n\t\tcyan: init(\"\\x1b[36m\", \"\\x1b[39m\"),\n\t\twhite: init(\"\\x1b[37m\", \"\\x1b[39m\"),\n\t\tgray: init(\"\\x1b[90m\", \"\\x1b[39m\"),\n\t\tbgBlack: init(\"\\x1b[40m\", \"\\x1b[49m\"),\n\t\tbgRed: init(\"\\x1b[41m\", \"\\x1b[49m\"),\n\t\tbgGreen: init(\"\\x1b[42m\", \"\\x1b[49m\"),\n\t\tbgYellow: init(\"\\x1b[43m\", \"\\x1b[49m\"),\n\t\tbgBlue: init(\"\\x1b[44m\", \"\\x1b[49m\"),\n\t\tbgMagenta: init(\"\\x1b[45m\", \"\\x1b[49m\"),\n\t\tbgCyan: init(\"\\x1b[46m\", \"\\x1b[49m\"),\n\t\tbgWhite: init(\"\\x1b[47m\", \"\\x1b[49m\"),\n\t}\n}\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\nvar MAX_CACHED_INPUTS = 32;\n\n/**\n * Takes some function `f(input) -> result` and returns a memoized version of\n * `f`.\n *\n * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The\n * memoization is a dumb-simple, linear least-recently-used cache.\n */\nfunction lruMemoize(f) {\n  var cache = [];\n\n  return function(input) {\n    for (var i = 0; i < cache.length; i++) {\n      if (cache[i].input === input) {\n        var temp = cache[0];\n        cache[0] = cache[i];\n        cache[i] = temp;\n        return cache[0].result;\n      }\n    }\n\n    var result = f(input);\n\n    cache.unshift({\n      input,\n      result,\n    });\n\n    if (cache.length > MAX_CACHED_INPUTS) {\n      cache.pop();\n    }\n\n    return result;\n  };\n}\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nvar normalize = lruMemoize(function normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n  // Split the path into parts between `/` characters. This is much faster than\n  // using `.split(/\\/+/g)`.\n  var parts = [];\n  var start = 0;\n  var i = 0;\n  while (true) {\n    start = i;\n    i = path.indexOf(\"/\", start);\n    if (i === -1) {\n      parts.push(path.slice(start));\n      break;\n    } else {\n      parts.push(path.slice(start, i));\n      while (i < path.length && path[i] === \"/\") {\n        i++;\n      }\n    }\n  }\n\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n});\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\nfunction compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   \u201Csources\u201D entry.  This value is prepended to the individual\n    //   entries in the \u201Csource\u201D field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   \u201CsourceRoot\u201D, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._ignoreInvalidMapping = util.getArg(aArgs, 'ignoreInvalidMapping', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator(Object.assign(generatorOps || {}, {\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    }));\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      if (this._validateMapping(generated, original, source, name) === false) {\n        return;\n      }\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n      var message = 'original.line and original.column are not numbers -- you probably meant to omit ' +\n      'the original mapping entirely and only map the generated position. If so, pass ' +\n      'null for the original mapping instead of an object with empty or null values.'\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message);\n      }\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      var message = 'Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      });\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message)\n      }\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\nfunction SortTemplate(comparator) {\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot, false) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n  return doQuickSort;\n}\n\nfunction cloneSort(comparator) {\n  let template = SortTemplate.toString();\n  let templateFn = new Function(`return ${template}`)();\n  return templateFn(comparator);\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\n\nlet sortCache = new WeakMap();\nexports.quickSort = function (ary, comparator, start = 0) {\n  let doQuickSort = sortCache.get(comparator);\n  if (doQuickSort === void 0) {\n    doQuickSort = cloneSort(comparator);\n    sortCache.set(comparator, doQuickSort);\n  }\n  doQuickSort(ary, comparator, start, ary.length - 1);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    var boundCallback = aCallback.bind(context);\n    var names = this._names;\n    var sources = this._sources;\n    var sourceMapURL = this._sourceMapURL;\n\n    for (var i = 0, n = mappings.length; i < n; i++) {\n      var mapping = mappings[i];\n      var source = mapping.source === null ? null : sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, sourceMapURL);\n      boundCallback({\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : names.at(mapping.name)\n      });\n    }\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\nconst compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;\nfunction sortGenerated(array, start) {\n  let l = array.length;\n  let n = array.length - start;\n  if (n <= 1) {\n    return;\n  } else if (n == 2) {\n    let a = array[start];\n    let b = array[start + 1];\n    if (compareGenerated(a, b) > 0) {\n      array[start] = b;\n      array[start + 1] = a;\n    }\n  } else if (n < 20) {\n    for (let i = start; i < l; i++) {\n      for (let j = i; j > start; j--) {\n        let a = array[j - 1];\n        let b = array[j];\n        if (compareGenerated(a, b) <= 0) {\n          break;\n        }\n        array[j - 1] = b;\n        array[j] = a;\n      }\n    }\n  } else {\n    quickSort(array, compareGenerated, start);\n  }\n}\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    let subarrayStart = 0;\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n\n        sortGenerated(generatedMappings, subarrayStart);\n        subarrayStart = generatedMappings.length;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = [];\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          let currentSource = mapping.source;\n          while (originalMappings.length <= currentSource) {\n            originalMappings.push(null);\n          }\n          if (originalMappings[currentSource] === null) {\n            originalMappings[currentSource] = [];\n          }\n          originalMappings[currentSource].push(mapping);\n        }\n      }\n    }\n\n    sortGenerated(generatedMappings, subarrayStart);\n    this.__generatedMappings = generatedMappings;\n\n    for (var i = 0; i < originalMappings.length; i++) {\n      if (originalMappings[i] != null) {\n        quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);\n      }\n    }\n    this.__originalMappings = [].concat(...originalMappings);\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content || content === '') {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n", "import { Effect, pipe } from 'effect';\n\nimport { captureErrors } from '../../capture-errors.js';\nimport { bigIntReplacer } from '../../logic/util/big-int-replacer.js';\nimport fromPromiseTask from '../from-promise.js';\n\nEffect.runPromise(\n  pipe(\n    fromPromiseTask,\n    Effect.sandbox,\n    Effect.catchAll((e) =>\n      Effect.gen(function* () {\n        const errors = yield* captureErrors(e);\n\n        return yield* Effect.fail(JSON.stringify(errors, bigIntReplacer, 2));\n      }),\n    ),\n  ),\n).catch(console.error);\n", "/**\n * @since 2.0.0\n */\n\nexport {\n  /**\n   * @since 2.0.0\n   */\n  absurd,\n  /**\n   * @since 2.0.0\n   */\n  flow,\n  /**\n   * @since 2.0.0\n   */\n  hole,\n  /**\n   * @since 2.0.0\n   */\n  identity,\n  /**\n   * @since 2.0.0\n   */\n  pipe,\n  /**\n   * @since 2.0.0\n   */\n  unsafeCoerce\n} from \"./Function.js\"\n\n/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Array from \"./Array.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `BigDecimal` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for `Equivalence` and `Order`.\n *\n * A `BigDecimal` allows storing any real number to arbitrary precision; which avoids common floating point errors\n * (such as 0.1 + 0.2 \u2260 0.3) at the cost of complexity.\n *\n * Internally, `BigDecimal` uses a `BigInt` object, paired with a 64-bit integer which determines the position of the\n * decimal point. Therefore, the precision *is not* actually arbitrary, but limited to 2<sup>63</sup> decimal places.\n *\n * It is not recommended to convert a floating point number to a decimal directly, as the floating point representation\n * may be unexpected.\n *\n * @since 2.0.0\n */\nexport * as BigDecimal from \"./BigDecimal.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `bigint` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nexport * as BigInt from \"./BigInt.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `boolean` type in TypeScript.\n * It includes functions for basic boolean operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nexport * as Boolean from \"./Boolean.js\"\n\n/**\n * This module provides types and utility functions to create and work with branded types,\n * which are TypeScript types with an added type tag to prevent accidental usage of a value in the wrong context.\n *\n * The `refined` and `nominal` functions are both used to create branded types in TypeScript.\n * The main difference between them is that `refined` allows for validation of the data, while `nominal` does not.\n *\n * The `nominal` function is used to create a new branded type that has the same underlying type as the input, but with a different name.\n * This is useful when you want to distinguish between two values of the same type that have different meanings.\n * The `nominal` function does not perform any validation of the input data.\n *\n * On the other hand, the `refined` function is used to create a new branded type that has the same underlying type as the input,\n * but with a different name, and it also allows for validation of the input data.\n * The `refined` function takes a predicate that is used to validate the input data.\n * If the input data fails the validation, a `BrandErrors` is returned, which provides information about the specific validation failure.\n *\n * @since 2.0.0\n */\nexport * as Brand from \"./Brand.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Cache from \"./Cache.js\"\n\n/**\n * The `Effect<A, E, R>` type is polymorphic in values of type `E` and we can\n * work with any error type that we want. However, there is a lot of information\n * that is not inside an arbitrary `E` value. So as a result, an `Effect` needs\n * somewhere to store things like unexpected errors or defects, stack and\n * execution traces, causes of fiber interruptions, and so forth.\n *\n * Effect-TS is very strict about preserving the full information related to a\n * failure. It captures all type of errors into the `Cause` data type. `Effect`\n * uses the `Cause<E>` data type to store the full story of failure. So its\n * error model is lossless. It doesn't throw information related to the failure\n * result. So we can figure out exactly what happened during the operation of\n * our effects.\n *\n * It is important to note that `Cause` is an underlying data type representing\n * errors occuring within an `Effect` workflow. Thus, we don't usually deal with\n * `Cause`s directly. Even though it is not a data type that we deal with very\n * often, the `Cause` of a failing `Effect` workflow can be accessed at any\n * time, which gives us total access to all parallel and sequential errors in\n * occurring within our codebase.\n *\n * @since 2.0.0\n */\nexport * as Cause from \"./Cause.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Channel from \"./Channel.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ChildExecutorDecision from \"./ChildExecutorDecision.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Chunk from \"./Chunk.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Clock from \"./Clock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Config from \"./Config.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ConfigError from \"./ConfigError.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ConfigProvider from \"./ConfigProvider.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ConfigProviderPathPatch from \"./ConfigProviderPathPatch.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Console from \"./Console.js\"\n\n/**\n * This module provides a data structure called `Context` that can be used for dependency injection in effectful\n * programs. It is essentially a table mapping `Tag`s to their implementations (called `Service`s), and can be used to\n * manage dependencies in a type-safe way. The `Context` data structure is essentially a way of providing access to a set\n * of related services that can be passed around as a single unit. This module provides functions to create, modify, and\n * query the contents of a `Context`, as well as a number of utility types for working with tags and services.\n *\n * @since 2.0.0\n */\nexport * as Context from \"./Context.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Cron from \"./Cron.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Data from \"./Data.js\"\n\n/**\n * @since 3.6.0\n */\nexport * as DateTime from \"./DateTime.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as DefaultServices from \"./DefaultServices.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Deferred from \"./Deferred.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Differ from \"./Differ.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Duration from \"./Duration.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Effect from \"./Effect.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Effectable from \"./Effectable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Either from \"./Either.js\"\n\n/**\n * This module provides encoding & decoding functionality for:\n *\n * - base64 (RFC4648)\n * - base64 (URL)\n * - hex\n *\n * @since 2.0.0\n */\nexport * as Encoding from \"./Encoding.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Equal from \"./Equal.js\"\n\n/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nexport * as Equivalence from \"./Equivalence.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ExecutionStrategy from \"./ExecutionStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Exit from \"./Exit.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Fiber from \"./Fiber.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberHandle from \"./FiberHandle.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberId from \"./FiberId.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberMap from \"./FiberMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberRef from \"./FiberRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberRefs from \"./FiberRefs.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberRefsPatch from \"./FiberRefsPatch.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberSet from \"./FiberSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberStatus from \"./FiberStatus.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Function from \"./Function.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as GlobalValue from \"./GlobalValue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as GroupBy from \"./GroupBy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as HKT from \"./HKT.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Hash from \"./Hash.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as HashMap from \"./HashMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as HashSet from \"./HashSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Inspectable from \"./Inspectable.js\"\n\n/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Iterable from \"./Iterable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as KeyedPool from \"./KeyedPool.js\"\n\n/**\n * A `Layer<ROut, E, RIn>` describes how to build one or more services in your\n * application. Services can be injected into effects via\n * `Effect.provideService`. Effects can require services via `Effect.service`.\n *\n * Layer can be thought of as recipes for producing bundles of services, given\n * their dependencies (other services).\n *\n * Construction of services can be effectful and utilize resources that must be\n * acquired and safely released when the services are done being utilized.\n *\n * By default layers are shared, meaning that if the same layer is used twice\n * the layer will only be allocated a single time.\n *\n * Because of their excellent composition properties, layers are the idiomatic\n * way in Effect-TS to create services that depend on other services.\n *\n * @since 2.0.0\n */\nexport * as Layer from \"./Layer.js\"\n\n/**\n * A data type for immutable linked lists representing ordered collections of elements of type `A`.\n *\n * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.\n *\n * **Performance**\n *\n * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.\n * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.\n *\n * @since 2.0.0\n */\nexport * as List from \"./List.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as LogLevel from \"./LogLevel.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as LogSpan from \"./LogSpan.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Logger from \"./Logger.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ManagedRuntime from \"./ManagedRuntime.js\"\n\n/**\n * @since 1.0.0\n */\nexport * as Match from \"./Match.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MergeDecision from \"./MergeDecision.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MergeState from \"./MergeState.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MergeStrategy from \"./MergeStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Metric from \"./Metric.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricBoundaries from \"./MetricBoundaries.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricHook from \"./MetricHook.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricKey from \"./MetricKey.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricKeyType from \"./MetricKeyType.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricLabel from \"./MetricLabel.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricPair from \"./MetricPair.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricPolling from \"./MetricPolling.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricRegistry from \"./MetricRegistry.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricState from \"./MetricState.js\"\n\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */\nexport * as Micro from \"./Micro.js\"\n\n/**\n * @since 2.0.0\n *\n * Enables low level framework authors to run on their own isolated effect version\n */\nexport * as ModuleVersion from \"./ModuleVersion.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableHashMap from \"./MutableHashMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableHashSet from \"./MutableHashSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableList from \"./MutableList.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableQueue from \"./MutableQueue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableRef from \"./MutableRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as NonEmptyIterable from \"./NonEmptyIterable.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `number` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nexport * as Number from \"./Number.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Option from \"./Option.js\"\n\n/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nexport * as Order from \"./Order.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Ordering from \"./Ordering.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Pipeable from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Pool from \"./Pool.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Predicate from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as PrimaryKey from \"./PrimaryKey.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as PubSub from \"./PubSub.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Queue from \"./Queue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Random from \"./Random.js\"\n\n/**\n * Limits the number of calls to a resource to a maximum amount in some interval.\n *\n * @since 2.0.0\n */\nexport * as RateLimiter from \"./RateLimiter.js\"\n\n/**\n * @since 3.5.0\n */\nexport * as RcMap from \"./RcMap.js\"\n\n/**\n * @since 3.5.0\n */\nexport * as RcRef from \"./RcRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Readable from \"./Readable.js\"\n\n/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Record from \"./Record.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RedBlackTree from \"./RedBlackTree.js\"\n\n/**\n * The Redacted module provides functionality for handling sensitive information\n * securely within your application. By using the `Redacted` data type, you can\n * ensure that sensitive values are not accidentally exposed in logs or error\n * messages.\n *\n * @since 3.3.0\n */\nexport * as Redacted from \"./Redacted.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Ref from \"./Ref.js\"\n\n/**\n * This module provides utility functions for working with RegExp in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as RegExp from \"./RegExp.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Reloadable from \"./Reloadable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Request from \"./Request.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RequestBlock from \"./RequestBlock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RequestResolver from \"./RequestResolver.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Resource from \"./Resource.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Runtime from \"./Runtime.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RuntimeFlagsPatch from \"./RuntimeFlagsPatch.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as STM from \"./STM.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Schedule from \"./Schedule.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScheduleDecision from \"./ScheduleDecision.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScheduleInterval from \"./ScheduleInterval.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScheduleIntervals from \"./ScheduleIntervals.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Scheduler from \"./Scheduler.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Scope from \"./Scope.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScopedCache from \"./ScopedCache.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScopedRef from \"./ScopedRef.js\"\n\n/**\n * @since 2.0.0\n * @deprecated\n */\nexport * as Secret from \"./Secret.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SingleProducerAsyncInput from \"./SingleProducerAsyncInput.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Sink from \"./Sink.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SortedMap from \"./SortedMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SortedSet from \"./SortedSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Stream from \"./Stream.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as StreamEmit from \"./StreamEmit.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as StreamHaltStrategy from \"./StreamHaltStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Streamable from \"./Streamable.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `string` type in TypeScript.\n * It includes functions for basic string manipulation, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nexport * as String from \"./String.js\"\n\n/**\n * This module provides utility functions for working with structs in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Struct from \"./Struct.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Subscribable from \"./Subscribable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SubscriptionRef from \"./SubscriptionRef.js\"\n\n/**\n * A `Supervisor<T>` is allowed to supervise the launching and termination of\n * fibers, producing some visible value of type `T` from the supervision.\n *\n * @since 2.0.0\n */\nexport * as Supervisor from \"./Supervisor.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Symbol from \"./Symbol.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SynchronizedRef from \"./SynchronizedRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TArray from \"./TArray.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TDeferred from \"./TDeferred.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TMap from \"./TMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TPriorityQueue from \"./TPriorityQueue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TPubSub from \"./TPubSub.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TQueue from \"./TQueue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TRandom from \"./TRandom.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TReentrantLock from \"./TReentrantLock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TRef from \"./TRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TSemaphore from \"./TSemaphore.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TSet from \"./TSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Take from \"./Take.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestAnnotation from \"./TestAnnotation.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestAnnotationMap from \"./TestAnnotationMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestAnnotations from \"./TestAnnotations.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestClock from \"./TestClock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestConfig from \"./TestConfig.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestContext from \"./TestContext.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestLive from \"./TestLive.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestServices from \"./TestServices.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestSized from \"./TestSized.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Tracer from \"./Tracer.js\"\n\n/**\n * A `Trie` is used for locating specific `string` keys from within a set.\n *\n * It works similar to `HashMap`, but with keys required to be `string`.\n * This constraint unlocks some performance optimizations and new methods to get string prefixes (e.g. `keysWithPrefix`, `longestPrefixOf`).\n *\n * Prefix search is also the main feature that makes a `Trie` more suited than `HashMap` for certain usecases.\n *\n * A `Trie` is often used to store a dictionary (list of words) that can be searched\n * in a manner that allows for efficient generation of completion lists\n * (e.g. predict the rest of a word a user is typing).\n *\n * A `Trie` has O(n) lookup time where `n` is the size of the key,\n * or even less than `n` on search misses.\n *\n * @since 2.0.0\n */\nexport * as Trie from \"./Trie.js\"\n\n/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Tuple from \"./Tuple.js\"\n\n/**\n * A collection of types that are commonly used types.\n *\n * @since 2.0.0\n */\nexport * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as UpstreamPullRequest from \"./UpstreamPullRequest.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as UpstreamPullStrategy from \"./UpstreamPullStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Utils from \"./Utils.js\"\n", "/**\n * @since 2.0.0\n */\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface FunctionTypeLambda extends TypeLambda {\n  readonly type: (a: this[\"In\"]) => this[\"Target\"]\n}\n\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = (input: unknown): input is Function => typeof input === \"function\"\n\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * @param arity - Either the arity of the uncurried function or a predicate\n *                which determines if the function is being used in a data-first\n *                or data-last style.\n * @param body - The definition of the uncurried function.\n *\n * @example\n * import { dual, pipe } from \"effect/Function\"\n *\n * // Exampe using arity to determine data-first or data-last style\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * // Example using a predicate to determine data-first or data-last style\n * const sum2: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * @since 2.0.0\n */\nexport const dual: {\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(\n    arity: Parameters<DataFirst>[\"length\"],\n    body: DataFirst\n  ): DataLast & DataFirst\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(\n    isDataFirst: (args: IArguments) => boolean,\n    body: DataFirst\n  ): DataLast & DataFirst\n} = function(arity, body) {\n  if (typeof arity === \"function\") {\n    return function() {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments)\n      }\n      return ((self: any) => body(self, ...arguments)) as any\n    }\n  }\n\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`)\n\n    case 2:\n      return function(a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b)\n        }\n        return function(self: any) {\n          return body(self, a)\n        }\n      }\n\n    case 3:\n      return function(a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c)\n        }\n        return function(self: any) {\n          return body(self, a, b)\n        }\n      }\n\n    case 4:\n      return function(a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d)\n        }\n        return function(self: any) {\n          return body(self, a, b, c)\n        }\n      }\n\n    case 5:\n      return function(a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e)\n        }\n        return function(self: any) {\n          return body(self, a, b, c, d)\n        }\n      }\n\n    default:\n      return function() {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments)\n        }\n        const args = arguments\n        return function(self: any) {\n          return body(self, ...args)\n        }\n      }\n  }\n}\n/**\n * Apply a function to a given value.\n *\n * @param a - The value that the function will be applied to.\n * @param self - The function to be applied to a value.\n *\n * @example\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n *\n * @since 2.0.0\n */\nexport const apply = <A>(a: A) => <B>(self: (a: A) => B): B => self(a)\n\n/**\n * A lazy argument.\n *\n * @example\n * import { LazyArg, constant } from \"effect/Function\"\n *\n * const constNull: LazyArg<null> = constant(null)\n *\n * @since 2.0.0\n */\nexport interface LazyArg<A> {\n  (): A\n}\n\n/**\n * @example\n * import { FunctionN } from \"effect/Function\"\n *\n * const sum: FunctionN<[number, number], number> = (a, b) => a + b\n *\n * @since 2.0.0\n */\nexport interface FunctionN<A extends ReadonlyArray<unknown>, B> {\n  (...args: A): B\n}\n\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @param a - The input argument.\n *\n * @example\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n *\n * @since 2.0.0\n */\nexport const identity = <A>(a: A): A => a\n\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n *\n * @since 2.0.0\n */\nexport const satisfies = <A>() => <B extends A>(b: B) => b\n\n/**\n * Casts the result to the specified type.\n *\n * @param a - The value to be casted to the target type.\n *\n * @example\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n *\n * @since 2.0.0\n */\nexport const unsafeCoerce: <A, B>(a: A) => B = identity as any\n\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @param value - The constant value to be returned.\n *\n * @example\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constant = <A>(value: A): LazyArg<A> => () => value\n\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n *\n * @since 2.0.0\n */\nexport const constTrue: LazyArg<boolean> = constant(true)\n\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n *\n * @since 2.0.0\n */\nexport const constFalse: LazyArg<boolean> = constant(false)\n\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constNull: LazyArg<null> = constant(null)\n\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n *\n * @since 2.0.0\n */\nexport const constUndefined: LazyArg<undefined> = constant(undefined)\n\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n *\n * @since 2.0.0\n */\nexport const constVoid: LazyArg<void> = constUndefined\n\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @param f - A curried function that takes multiple arguments.\n *\n * @example\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n *\n * @since 2.0.0\n */\nexport const flip = <A extends Array<unknown>, B extends Array<unknown>, C>(\n  f: (...a: A) => (...b: B) => C\n): (...b: B) => (...a: A) => C =>\n(...b) =>\n(...a) => f(...a)(...b)\n\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @param ab - A function that maps from `A` to `B`.\n * @param bc - A function that maps from `B` to `C`.\n *\n * @example\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n *\n * @since 2.0.0\n */\nexport const compose: {\n  <B, C>(bc: (b: B) => C): <A>(self: (a: A) => B) => (a: A) => C\n  <A, B, C>(self: (a: A) => B, bc: (b: B) => C): (a: A) => C\n} = dual(2, <A, B, C>(ab: (a: A) => B, bc: (b: B) => C): (a: A) => C => (a) => bc(ab(a)))\n\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nexport const absurd = <A>(_: never): A => {\n  throw new Error(\"Called `absurd` function which should be uncallable\")\n}\n\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n *\n * @since 2.0.0\n */\nexport const tupled = <A extends ReadonlyArray<unknown>, B>(f: (...a: A) => B): (a: A) => B => (a) => f(...a)\n\n/**\n * Inverse function of `tupled`\n *\n * @example\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n *\n * @since 2.0.0\n */\nexport const untupled = <A extends ReadonlyArray<unknown>, B>(f: (a: A) => B): (...a: A) => B => (...a) => f(a)\n\n/**\n * Pipes the value of an expression into a pipeline of functions.\n *\n * This is useful in combination with data-last functions as a simulation of methods:\n *\n * ```\n * as.map(f).filter(g) -> pipe(as, map(f), filter(g))\n * ```\n *\n * @example\n * import { pipe } from \"effect/Function\"\n * // Alternatively, you can use the following import syntax, as `pipe` is also conveniently exported from the `effect` entry point:\n * // import { pipe } from \"effect\"\n *\n * const length = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n * const decrement = (n: number): number => n - 1\n *\n * assert.deepStrictEqual(pipe(length(\"hello\"), double, decrement), 9)\n *\n * @since 2.0.0\n */\nexport function pipe<A>(a: A): A\nexport function pipe<A, B>(a: A, ab: (a: A) => B): B\nexport function pipe<A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C\nexport function pipe<A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D\nexport function pipe<A, B, C, D, E>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): E\nexport function pipe<A, B, C, D, E, F>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): F\nexport function pipe<A, B, C, D, E, F, G>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): G\nexport function pipe<A, B, C, D, E, F, G, H>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): H\nexport function pipe<A, B, C, D, E, F, G, H, I>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): I\nexport function pipe<A, B, C, D, E, F, G, H, I, J>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): J\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K\n): K\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L\n): L\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M\n): M\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N\n): N\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O\n): O\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P\n): P\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q\n): Q\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R\n): R\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S\n): S\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S,\n  st: (s: S) => T\n): T\nexport function pipe(\n  a: unknown,\n  ab?: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return a\n    case 2:\n      return ab!(a)\n    case 3:\n      return bc!(ab!(a))\n    case 4:\n      return cd!(bc!(ab!(a)))\n    case 5:\n      return de!(cd!(bc!(ab!(a))))\n    case 6:\n      return ef!(de!(cd!(bc!(ab!(a)))))\n    case 7:\n      return fg!(ef!(de!(cd!(bc!(ab!(a))))))\n    case 8:\n      return gh!(fg!(ef!(de!(cd!(bc!(ab!(a)))))))\n    case 9:\n      return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab!(a))))))))\n    default: {\n      let ret = arguments[0]\n      for (let i = 1; i < arguments.length; i++) {\n        ret = arguments[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.\n *\n * See also [`pipe`](#pipe).\n *\n * @example\n * import { flow } from \"effect/Function\"\n *\n * const len = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n *\n * const f = flow(len, double)\n *\n * assert.strictEqual(f('aaa'), 6)\n *\n * @since 2.0.0\n */\nexport function flow<A extends ReadonlyArray<unknown>, B>(ab: (...a: A) => B): (...a: A) => B\nexport function flow<A extends ReadonlyArray<unknown>, B, C>(ab: (...a: A) => B, bc: (b: B) => C): (...a: A) => C\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D\n): (...a: A) => D\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): (...a: A) => E\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): (...a: A) => F\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): (...a: A) => G\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G, H>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): (...a: A) => H\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G, H, I>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): (...a: A) => I\nexport function flow<A extends ReadonlyArray<unknown>, B, C, D, E, F, G, H, I, J>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): (...a: A) => J\nexport function flow(\n  ab: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function,\n  ij?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return ab\n    case 2:\n      return function(this: unknown) {\n        return bc!(ab.apply(this, arguments))\n      }\n    case 3:\n      return function(this: unknown) {\n        return cd!(bc!(ab.apply(this, arguments)))\n      }\n    case 4:\n      return function(this: unknown) {\n        return de!(cd!(bc!(ab.apply(this, arguments))))\n      }\n    case 5:\n      return function(this: unknown) {\n        return ef!(de!(cd!(bc!(ab.apply(this, arguments)))))\n      }\n    case 6:\n      return function(this: unknown) {\n        return fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))\n      }\n    case 7:\n      return function(this: unknown) {\n        return gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))\n      }\n    case 8:\n      return function(this: unknown) {\n        return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))))\n      }\n    case 9:\n      return function(this: unknown) {\n        return ij!(hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))))\n      }\n  }\n  return\n}\n\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nexport const hole: <T>() => T = unsafeCoerce(absurd)\n\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @param _ - The first argument to be discarded.\n * @param b - The second argument to be returned.\n *\n * @example\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n *\n * @since 2.0.0\n */\nexport const SK = <A, B>(_: A, b: B): B => b\n", "/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { Either as array_ } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as readonlyArray from \"./internal/array.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as EffectIterable from \"./Iterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isBoolean } from \"./Predicate.js\"\nimport * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyArrayTypeLambda extends TypeLambda {\n  readonly type: ReadonlyArray<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyReadonlyArray<A> = readonly [A, ...Array<A>]\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyArray<A> = [A, ...Array<A>]\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <Elements extends NonEmptyArray<any>>(\n  ...elements: Elements\n): NonEmptyArray<Elements[number]> => elements\n\n/**\n * Creates a new `Array` of the specified length.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * assert.deepStrictEqual(result.length, 3)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const allocate = <A = never>(n: number): Array<A | undefined> => new Array(n)\n\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Array\"\n *\n * assert.deepStrictEqual(makeBy(5, n => n * 2), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = <A>(n: number, f: (i: number) => A): NonEmptyArray<A> => {\n  const max = Math.max(1, Math.floor(n))\n  const out = new Array(max)\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i)\n  }\n  return out as NonEmptyArray<A>\n}\n\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from \"effect/Array\"\n *\n * assert.deepStrictEqual(range(1, 3), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyArray<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : [start]\n\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  (n: number): <A>(a: A) => NonEmptyArray<A>\n  <A>(a: A, n: number): NonEmptyArray<A>\n} = dual(2, <A>(a: A, n: number): NonEmptyArray<A> => makeBy(n, () => a))\n\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const set = new Set([1, 2, 3])\n * const result = Array.fromIterable(set)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Array<A> =>\n  Array.isArray(collection) ? collection : Array.from(collection)\n\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.ensure(\"a\"), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\"]), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"])\n *\n * @category constructors\n * @since 3.3.0\n */\nexport const ensure = <A>(self: ReadonlyArray<A> | A): Array<A> => Array.isArray(self) ? self : [self as A]\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.fromRecord(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord: <K extends string, A>(self: Readonly<Record<K, A>>) => Array<[K, A]> = Record.toEntries\n\n/**\n * Converts an `Option` to an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Array.fromOption(Option.some(1)), [1])\n * assert.deepStrictEqual(Array.fromOption(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromOption: <A>(self: Option<A>) => Array<A> = O.toArray\n\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(match([]), \"empty\")\n * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty())\n\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(matchLeft([]), \"empty\")\n * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchLeft: {\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (head: A, tail: Array<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty())\n\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * assert.deepStrictEqual(matchRight([]), \"empty\")\n * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchRight: {\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (init: Array<A>, last: A) => C\n  }\n): B | C =>\n  isNonEmptyReadonlyArray(self) ?\n    onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) :\n    onEmpty())\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [2, 3, 4];\n * const result = Array.prepend(original, 1);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <B>(head: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B> => [head, ...self])\n\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const prefix = [0, 1];\n * const array = [2, 3];\n * const result = Array.prependAll(array, prefix);\n * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(that).concat(fromIterable(self))\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [1, 2, 3];\n * const result = Array.append(original, 4);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <B>(last: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, last: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Array<A | B> => [...self, last])\n\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).concat(fromIterable(that))\n)\n\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const out: NonEmptyArray<B> = [b]\n  let i = 0\n  for (const a of self) {\n    out[i + 1] = f(out[i], a)\n    i++\n  }\n  return out\n})\n\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scanRight: {\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const input = fromIterable(self)\n  const out: NonEmptyArray<B> = new Array(input.length + 1) as any\n  out[input.length] = b\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i])\n  }\n  return out\n})\n\n/**\n * Determine if `unknown` is an Array.\n *\n * @param self - The value to check.\n *\n * @example\n * import { isArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isArray(null), false);\n * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isArray: {\n  (self: unknown): self is Array<unknown>\n  <T>(self: T): self is Extract<T, ReadonlyArray<any>>\n} = Array.isArray\n\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyArray([]), true);\n * assert.deepStrictEqual(isEmptyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyArray = <A>(self: Array<A>): self is [] => self.length === 0\n\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyArray([]), true);\n * assert.deepStrictEqual(isEmptyReadonlyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is readonly [] = isEmptyArray as any\n\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isNonEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyArray: <A>(self: Array<A>) => self is NonEmptyArray<A> = readonlyArray.isNonEmptyArray\n\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isNonEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A> =\n  readonlyArray.isNonEmptyArray\n\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const length = <A>(self: ReadonlyArray<A>): number => self.length\n\nconst isOutOfBound = <A>(i: number, as: ReadonlyArray<A>): boolean => i < 0 || i >= as.length\n\nconst clamp = <A>(i: number, as: ReadonlyArray<A>): number => Math.floor(Math.min(Math.max(0, i), as.length))\n\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const get: {\n  (index: number): <A>(self: ReadonlyArray<A>) => Option<A>\n  <A>(self: ReadonlyArray<A>, index: number): Option<A>\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): Option<A> => {\n  const i = Math.floor(index)\n  return isOutOfBound(i, self) ? O.none() : O.some(self[i])\n})\n\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  (index: number): <A>(self: ReadonlyArray<A>) => A\n  <A>(self: ReadonlyArray<A>, index: number): A\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): A => {\n  const i = Math.floor(index)\n  if (isOutOfBound(i, self)) {\n    throw new Error(`Index ${i} out of bounds`)\n  }\n  return self[i]\n})\n\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, [2, 3, 4]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unprepend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [firstElement: A, remainingElements: Array<A>] => [headNonEmpty(self), tailNonEmpty(self)]\n\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [[1, 2, 3], 4])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unappend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [arrayWithoutLastElement: Array<A>, lastElement: A] => [initNonEmpty(self), lastNonEmpty(self)]\n\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head: <A>(self: ReadonlyArray<A>) => Option<A> = get(0)\n\n/**\n * Get the first element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 1)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const headNonEmpty: <A>(self: NonEmptyReadonlyArray<A>) => A = unsafeGet(0)\n\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const last = <A>(self: ReadonlyArray<A>): Option<A> =>\n  isNonEmptyReadonlyArray(self) ? O.some(lastNonEmpty(self)) : O.none()\n\n/**\n * Get the last element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 4)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const lastNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): A => self[self.length - 1]\n\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tail = <A>(self: Iterable<A>): Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? O.some(tailNonEmpty(input)) : O.none()\n}\n\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [2, 3, 4])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tailNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(1)\n\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const init = <A>(self: Iterable<A>): Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? O.some(initNonEmpty(input)) : O.none()\n}\n\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const initNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(0, -1)\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.take(numbers, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, clamp(n, input))\n})\n\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.takeRight(numbers, 3)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeRight: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  const i = clamp(n, input)\n  return i === 0 ? [] : input.slice(-i)\n})\n\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 3, 2, 4, 1, 2]\n * const result = Array.takeWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [1, 3, 2])\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n  let i = 0\n  const out: Array<A> = []\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    out.push(a)\n    i++\n  }\n  return out\n})\n\nconst spanIndex = <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number => {\n  let i = 0\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const span: {\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: Iterable<A>) => [init: Array<B>, rest: Array<Exclude<A, B>>]\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [init: Array<A>, rest: Array<A>]\n  <A, B extends A>(\n    self: Iterable<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [init: Array<B>, rest: Array<Exclude<A, B>>]\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>] =>\n    splitAt(self, spanIndex(self, predicate))\n)\n\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.drop(numbers, 2)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(clamp(n, input), input.length)\n})\n\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropRight(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropRight: {\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, input.length - clamp(n, input))\n})\n\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropWhile: {\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> =>\n    fromIterable(self).slice(spanIndex(self, predicate))\n)\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [5, 3, 8, 9]\n * const result = Array.findFirstIndex(numbers, x => x > 5)\n * assert.deepStrictEqual(result, Option.some(2))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<number>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number> => {\n  let i = 0\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return O.some(i)\n    }\n    i++\n  }\n  return O.none()\n})\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 3, 8, 9]\n * const result = Array.findLastIndex(numbers, x => x < 5)\n * assert.deepStrictEqual(result, Option.some(1))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<number>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number> => {\n  const input = fromIterable(self)\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return O.some(i)\n    }\n  }\n  return O.none()\n})\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findFirst(numbers, x => x > 3)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = EffectIterable.findFirst\n\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findLast(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    const input = fromIterable(self)\n    for (let i = input.length - 1; i >= 0; i--) {\n      const a = input[i]\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          return O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          return o\n        }\n      }\n    }\n    return O.none()\n  }\n)\n\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'e']\n * const result = Array.insertAt(letters, 3, 'd')\n * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n *\n * @since 2.0.0\n */\nexport const insertAt: {\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option<NonEmptyArray<A | B>>\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<NonEmptyArray<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Option<NonEmptyArray<A | B>> => {\n  const out: Array<A | B> = Array.from(self)\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return O.none()\n  }\n  out.splice(i, 0, b)\n  return O.some(out) as any\n})\n\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.replace(1, 'z')(letters)\n * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n *\n * @since 2.0.0\n */\nexport const replace: {\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Array<A | B>\n  <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B> => modify(self, i, () => b))\n\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.replaceOption(numbers, 1, 4)\n * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option<Array<A | B>>\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<Array<A | B>>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<Array<A | B>> => modifyOption(self, i, () => b)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modify(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6, 4])\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <A, B>(i: number, f: (a: A) => B): (self: Iterable<A>) => Array<A | B>\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B> =>\n    O.getOrElse(modifyOption(self, i, f), () => Array.from(self))\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n *\n * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  <A, B>(i: number, f: (a: A) => B): (self: Iterable<A>) => Option<Array<A | B>>\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option<Array<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option<Array<A | B>> => {\n  const out = Array.from(self)\n  if (isOutOfBound(i, out)) {\n    return O.none()\n  }\n  const next = f(out[i])\n  // @ts-expect-error\n  out[i] = next\n  return O.some(out)\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.remove(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * const outOfBoundsResult = Array.remove(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n *\n * @since 2.0.0\n */\nexport const remove: {\n  (i: number): <A>(self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, i: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, i: number): Array<A> => {\n  const out = Array.from(self)\n  if (isOutOfBound(i, out)) {\n    return out\n  }\n  out.splice(i, 1)\n  return out\n})\n\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.reverse(numbers)\n * assert.deepStrictEqual(result, [4, 3, 2, 1])\n *\n * @category elements\n * @since 2.0.0\n */\nexport const reverse = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  Array.from(self).reverse() as any\n\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sort: {\n  <B>(\n    O: Order.Order<B>\n  ): <A extends B, S extends ReadonlyArray<A> | Iterable<A>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A extends B, B>(self: NonEmptyReadonlyArray<A>, O: Order.Order<B>): NonEmptyArray<A>\n  <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A>\n} = dual(2, <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A> => {\n  const out = Array.from(self)\n  out.sort(O)\n  return out\n})\n\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const strings = [\"aaa\", \"b\", \"cc\"]\n * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const sortWith: {\n  <S extends Iterable<any> | NonEmptyReadonlyArray<any>, B>(\n    f: (a: ReadonlyArray.Infer<S>) => B,\n    order: Order.Order<B>\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B, O: Order.Order<B>): NonEmptyArray<A>\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A> => sort(self, Order.mapInput(order, f))\n)\n\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = Array.sortBy(\n *   Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *   Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n * )(users)\n *\n * assert.deepStrictEqual(result, [\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Charlie\", age: 30 }\n * ])\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sortBy = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  ...orders: ReadonlyArray<Order.Order<ReadonlyArray.Infer<S>>>\n) => {\n  const sortByAll = sort(Order.combineAll(orders))\n  return (\n    self: S\n  ): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input) as any\n    }\n    return [] as any\n  }\n}\n\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = ['a', 'b']\n * const result = Array.zip(array1, array2)\n * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  <B>(that: NonEmptyReadonlyArray<B>): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<[A, B]>\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<[A, B]>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<[A, B]>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [4, 5, 6]\n * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n * assert.deepStrictEqual(result, [5, 7, 9])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  <B, A, C>(that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<C>\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Array<C>\n  <A, B, C>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): NonEmptyArray<C>\n  <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C> => {\n  const as = fromIterable(self)\n  const bs = fromIterable(that)\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out: NonEmptyArray<C> = [f(headNonEmpty(as), headNonEmpty(bs))]\n    const len = Math.min(as.length, bs.length)\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * assert.deepStrictEqual(result, [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport const unzip: <S extends Iterable<readonly [any, any]> | NonEmptyReadonlyArray<readonly [any, any]>>(\n  self: S\n) => S extends NonEmptyReadonlyArray<readonly [infer A, infer B]> ? [NonEmptyArray<A>, NonEmptyArray<B>]\n  : S extends Iterable<readonly [infer A, infer B]> ? [Array<A>, Array<B>]\n  : never = (<A, B>(self: Iterable<readonly [A, B]>): [Array<A>, Array<B>] => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const fa: NonEmptyArray<A> = [input[0][0]]\n      const fb: NonEmptyArray<B> = [input[0][1]]\n      for (let i = 1; i < input.length; i++) {\n        fa[i] = input[i][0]\n        fb[i] = input[i][1]\n      }\n      return [fa, fb]\n    }\n    return [[], []]\n  }) as any\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.intersperse(numbers, 0)\n * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  <B>(\n    middle: B\n  ): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, middle: B): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, middle: B): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Array<A | B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const out: NonEmptyArray<A | B> = [headNonEmpty(input)]\n    const tail = tailNonEmpty(input)\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle)\n      }\n      out.push(tail[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyHead: {\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A) => B\n  ): NonEmptyArray<A | B> => [f(headNonEmpty(self)), ...tailNonEmpty(self)]\n)\n\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyHead: {\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyHead(self, () => b)\n)\n\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyLast: {\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B> =>\n    append(initNonEmpty(self), f(lastNonEmpty(self)))\n)\n\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyLast: {\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyLast(self, () => b)\n)\n\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.rotate(letters, 2)\n * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n *\n * @since 2.0.0\n */\nexport const rotate: {\n  (n: number): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<A>\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length\n    const m = Math.round(n) % len\n    if (isOutOfBound(Math.abs(m), input) || m === 0) {\n      return copy(input)\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m)\n      return appendAll(s, f)\n    } else {\n      return rotate(self, m - len)\n    }\n  }\n  return []\n})\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = containsNumber(3)(numbers)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.contains('c')(letters)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  <A>(a: A): (self: Iterable<A>) => boolean\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n *\n * @since 2.0.0\n */\nexport const chop: {\n  <S extends Iterable<any>, B>(\n    f: (as: NonEmptyReadonlyArray<ReadonlyArray.Infer<S>>) => readonly [B, ReadonlyArray<ReadonlyArray.Infer<S>>]\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): NonEmptyArray<B>\n  <A, B>(\n    self: Iterable<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): Array<B>\n} = dual(2, <A, B>(\n  self: Iterable<A>,\n  f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n): Array<B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input)\n    const out: NonEmptyArray<B> = [b]\n    let next: ReadonlyArray<A> = rest\n    while (readonlyArray.isNonEmptyArray(next)) {\n      const [b, rest] = f(next)\n      out.push(b)\n      next = rest\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitAt(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitAt: {\n  (n: number): <A>(self: Iterable<A>) => [beforeIndex: Array<A>, fromIndex: Array<A>]\n  <A>(self: Iterable<A>, n: number): [beforeIndex: Array<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: Iterable<A>, n: number): [Array<A>, Array<A>] => {\n  const input = Array.from(self)\n  const _n = Math.floor(n)\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n)\n    }\n    return [[], input]\n  }\n  return [input, []]\n})\n\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  (n: number): <A>(self: NonEmptyReadonlyArray<A>) => [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, n: number): [NonEmptyArray<A>, Array<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [copy(self), []] :\n    [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)]\n})\n\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n * const result = Array.split(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number) => {\n  const input = fromIterable(self)\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)))\n})\n\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitWhere(numbers, n => n > 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Iterable<A>) => [beforeMatch: Array<A>, fromMatch: Array<A>]\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>] =>\n    span(self, (a: A, i: number) => !predicate(a, i))\n)\n\n/**\n * Copies an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const copy = Array.copy(numbers)\n * assert.deepStrictEqual(copy, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const copy: {\n  <A>(self: NonEmptyReadonlyArray<A>): NonEmptyArray<A>\n  <A>(self: ReadonlyArray<A>): Array<A>\n} = (<A>(self: ReadonlyArray<A>): Array<A> => self.slice()) as any\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chunksOf(numbers, 2)\n * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  (\n    n: number\n  ): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.With<S, NonEmptyArray<ReadonlyArray.Infer<S>>>\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<NonEmptyArray<A>>\n  <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n))\n  }\n  return []\n})\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>>\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>> =>\n    chop(self, (as) => {\n      const h = headNonEmpty(as)\n      const out: NonEmptyArray<A> = [h]\n      let i = 1\n      for (; i < as.length; i++) {\n        const a = as[i]\n        if (isEquivalent(a, h)) {\n          out.push(a)\n        } else {\n          break\n        }\n      }\n      return [out, as.slice(i)]\n    })\n)\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * assert.deepStrictEqual(result, [[1, 1], [2, 2, 2], [3], [1]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n * const result = Array.groupBy(people, person => person.group)\n * assert.deepStrictEqual(result, {\n *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n *   B: [{ name: \"Bob\", group: \"B\" }]\n * })\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  <A, K extends string | symbol>(\n    f: (a: A) => K\n  ): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  <A, K extends string | symbol>(\n    self: Iterable<A>,\n    f: (a: A) => K\n  ): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n * assert.deepStrictEqual(union, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const unionWith: {\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T,\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<T>) => boolean\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  <A, B>(\n    self: Iterable<A>,\n    that: NonEmptyReadonlyArray<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>, isEquivalent: (self: A, that: B) => boolean): Array<A | B>\n} = dual(3, <A>(self: Iterable<A>, that: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const a = fromIterable(self)\n  const b = fromIterable(that)\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent)\n      return dedupe(appendAll(a, b))\n    }\n    return a\n  }\n  return b\n})\n\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const result = Array.union(array1, array2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const union: {\n  <T extends Iterable<any>>(\n    that: T\n  ): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: ReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: ReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B> => unionWith(self, that, _equivalence))\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * assert.deepStrictEqual(result, [{ id: 1 }, { id: 3 }])\n *\n * @since 2.0.0\n */\nexport const intersectionWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => has(that, a))\n  )\n}\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [3, 4, 1]\n * const result = Array.intersection(array1, array2)\n * assert.deepStrictEqual(result, [1, 3])\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<A & B>\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A & B>\n} = intersectionWith(_equivalence)\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => !has(that, a))\n  )\n}\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.difference(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const difference: {\n  <A>(that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A>\n} = differenceWith(_equivalence)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Array<A> = () => []\n\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyArray<A> => [a]\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyArray {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Iterable<any>> = S extends ReadonlyArray<infer A> ? A\n    : S extends Iterable<infer A> ? A\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Iterable<any>, A> = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends ReadonlyArray<ReadonlyArray<any>>> = T extends\n    NonEmptyReadonlyArray<NonEmptyReadonlyArray<infer A>> ? NonEmptyArray<A>\n    : T extends ReadonlyArray<ReadonlyArray<infer A>> ? Array<A>\n    : never\n}\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  <S extends ReadonlyArray<any>, B>(\n    f: (a: ReadonlyArray.Infer<S>, i: number) => B\n  ): (self: S) => ReadonlyArray.With<S, B>\n  <S extends ReadonlyArray<any>, B>(self: S, f: (a: ReadonlyArray.Infer<S>, i: number) => B): ReadonlyArray.With<S, B>\n} = dual(2, <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => B): Array<B> => self.map(f))\n\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  <S extends ReadonlyArray<any>, T extends ReadonlyArray<any>>(\n    f: (a: ReadonlyArray.Infer<S>, i: number) => T\n  ): (self: S) => ReadonlyArray.AndNonEmpty<S, T, ReadonlyArray.Infer<T>>\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A, i: number) => NonEmptyReadonlyArray<B>): NonEmptyArray<B>\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B> => {\n    if (isEmptyReadonlyArray(self)) {\n      return []\n    }\n    const out: Array<B> = []\n    for (let i = 0; i < self.length; i++) {\n      const inner = f(self[i], i)\n      for (let j = 0; j < inner.length; j++) {\n        out.push(inner[j])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const nestedArrays = [[1, 2], [], [3, 4], [], [5, 6]]\n * const result = Array.flatten(nestedArrays)\n *\n * assert.deepStrictEqual(result, [1, 2, 3, 4, 5, 6]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <S extends ReadonlyArray<ReadonlyArray<any>>>(self: S) => ReadonlyArray.Flatten<S> = flatMap(\n  identity\n) as any\n\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5];\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMap(data, evenSquares);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Array<B>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B> => {\n    const as = fromIterable(self)\n    const out: Array<B> = []\n    for (let i = 0; i < as.length; i++) {\n      const o = f(as[i], i)\n      if (O.isSome(o)) {\n        out.push(o.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [2, 4, 5];\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMapWhile(data, toSquareTillOdd);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Array<B>\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>) => {\n  let i = 0\n  const out: Array<B> = []\n  for (const a of self) {\n    const b = f(a, i)\n    if (O.isSome(b)) {\n      out.push(b.value)\n    } else {\n      break\n    }\n    i++\n  }\n  return out\n})\n\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * @example\n * import { Array, Either } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5]\n * const isEven = (x: number) => x % 2 === 0\n * const partitioned = Array.partitionMap(data, x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n *\n * assert.deepStrictEqual(partitioned, [\n *   [1, 3, 5],\n *   [2, 4]\n * ])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A, i: number) => array_<C, B>): (self: Iterable<A>) => [left: Array<B>, right: Array<C>]\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => array_<C, B>): [left: Array<B>, right: Array<C>]\n} = dual(\n  2,\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => array_<C, B>): [left: Array<B>, right: Array<C>] => {\n    const left: Array<B> = []\n    const right: Array<C> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const e = f(as[i], i)\n      if (E.isLeft(e)) {\n        left.push(e.left)\n      } else {\n        right.push(e.right)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getSomes([Option.some(1), Option.none(), Option.some(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\n\nexport const getSomes: <T extends Iterable<Option<X>>, X = any>(\n  self: T\n) => Array<Option.Value<ReadonlyArray.Infer<T>>> = filterMap(identity as any)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <T extends Iterable<array_<any, any>>>(self: T): Array<array_.Left<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (E.isLeft(a)) {\n      out.push(a.left)\n    }\n  }\n\n  return out\n}\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <T extends Iterable<array_<any, any>>>(\n  self: T\n): Array<array_.Right<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (E.isRight(a)) {\n      out.push(a.right)\n    }\n  }\n\n  return out\n}\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n    const as = fromIterable(self)\n    const out: Array<A> = []\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        out.push(as[i])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (\n    self: Iterable<A>\n  ) => [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Iterable<A>) => [excluded: Array<A>, satisfying: Array<A>]\n  <A, B extends A>(\n    self: Iterable<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>] => {\n    const left: Array<A> = []\n    const right: Array<A> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        right.push(as[i])\n      } else {\n        left.push(as[i])\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.partition(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, [[1, 3], [2, 4]])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <T extends Iterable<array_<any, any>>>(\n  self: T\n) => [Array<array_.Left<ReadonlyArray.Infer<T>>>, Array<array_.Right<ReadonlyArray.Infer<T>>>] = partitionMap(\n  identity\n)\n\n/**\n * Reduces an array from the left.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <B, A>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduce((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Reduces an array from the right.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Lifts a predicate into an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * assert.deepStrictEqual(to(1), [])\n * assert.deepStrictEqual(to(2), [2])\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Array<B>\n  <A>(predicate: Predicate<A>): <B extends A>(b: B) => Array<B>\n} = <A>(predicate: Predicate<A>) => <B extends A>(b: B): Array<B> => predicate(b) ? [b] : []\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftOption = <A extends Array<unknown>, B>(\n  f: (...a: A) => Option<B>\n) =>\n(...a: A): Array<B> => fromOption(f(...a))\n\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(a: A): Array<NonNullable<A>> => a == null ? empty() : [a as NonNullable<A>]\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftNullable = <A extends Array<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Array<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n * assert.deepStrictEqual(result, [1, 3])\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  <A, B>(f: (a: A) => B | null | undefined): (self: ReadonlyArray<A>) => Array<NonNullable<B>>\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>> =>\n    flatMap(self, (a) => fromNullable(f(a)))\n)\n\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * assert.deepStrictEqual(result1, [42])\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * assert.deepStrictEqual(result2, [])\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftEither = <A extends Array<unknown>, E, B>(\n  f: (...a: A) => array_<B, E>\n) =>\n(...a: A): Array<B> => {\n  const e = f(...a)\n  return E.isLeft(e) ? [] : [e.right]\n}\n\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: ReadonlyArray<A>) => self is ReadonlyArray<B>\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => boolean\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B>\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B> =>\n    self.every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A>\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A>\n} = dual(\n  2,\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A> =>\n    self.some(predicate)\n)\n\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.extend(numbers, as => as.length)\n * assert.deepStrictEqual(result, [3, 2, 1])\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n *\n * @since 2.0.0\n */\nexport const extend: {\n  <A, B>(f: (as: ReadonlyArray<A>) => B): (self: ReadonlyArray<A>) => Array<B>\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B> => self.map((_, i, as) => f(as.slice(i)))\n)\n\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const min = Array.min([3, 1, 2], Order.number)\n * assert.deepStrictEqual(min, 1)\n *\n * @since 2.0.0\n */\nexport const min: {\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.min(O)))\n\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const max = Array.max([3, 1, 2], Order.number)\n * assert.deepStrictEqual(max, 3)\n *\n * @since 2.0.0\n */\nexport const max: {\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.max(O)))\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option<readonly [A, B]>): Array<A> => {\n  const out: Array<A> = []\n  let next: B = b\n  let o: Option<readonly [A, B]>\n  while (O.isSome(o = f(next))) {\n    const [a, b] = o.value\n    out.push(a)\n    next = b\n  }\n  return out\n}\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getOrder: <A>(O: Order.Order<A>) => Order.Order<ReadonlyArray<A>> = Order.array\n\n/**\n * Creates an equivalence relation for arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers1 = [1, 2, 3]\n * const numbers2 = [1, 2, 3]\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * assert.deepStrictEqual(eq(numbers1, numbers2), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence: <A>(\n  isEquivalent: Equivalence.Equivalence<A>\n) => Equivalence.Equivalence<ReadonlyArray<A>> = Equivalence.array\n\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => fromIterable(self).forEach((a, i) => f(a, i)))\n\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 2, 3, 3, 3]\n * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeWith: {\n  <S extends Iterable<any>>(\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<S>) => boolean\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<A>\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const out: NonEmptyArray<A> = [headNonEmpty(input)]\n      const rest = tailNonEmpty(input)\n      for (const r of rest) {\n        if (out.every((a) => !isEquivalent(r, a))) {\n          out.push(r)\n        }\n      }\n      return out\n    }\n    return []\n  }\n)\n\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nexport const dedupe = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  dedupeWith(self, Equal.equivalence()) as any\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Array<A>\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const out: Array<A> = []\n  let lastA: O.Option<A> = O.none()\n  for (const a of self) {\n    if (O.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a)\n      lastA = O.some(a)\n    }\n  }\n  return out\n})\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacent(numbers)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Array<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * assert.deepStrictEqual(joined, \"a-b-c\")\n *\n * @since 2.0.0\n * @category folding\n */\nexport const join: {\n  (sep: string): (self: Iterable<string>) => string\n  (self: Iterable<string>, sep: string): string\n} = dual(2, (self: Iterable<string>, sep: string): string => fromIterable(self).join(sep))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  <S, A, B>(\n    s: S,\n    f: (s: S, a: A, i: number) => readonly [S, B]\n  ): (self: Iterable<A>) => [state: S, mappedArray: Array<B>]\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => readonly [S, B]): [state: S, mappedArray: Array<B>]\n} = dual(\n  3,\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => [S, B]): [state: S, mappedArray: Array<B>] => {\n    let i = 0\n    let s1 = s\n    const out: Array<B> = []\n    for (const a of self) {\n      const r = f(s1, a, i)\n      s1 = r[0]\n      out.push(r[1])\n      i++\n    }\n    return [s1, out]\n  }\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  <A, B, C>(that: ReadonlyArray<B>, f: (a: A, b: B) => C): (self: ReadonlyArray<A>) => Array<C>\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(\n  3,\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesian(array1, array2)\n * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  <B>(that: ReadonlyArray<B>): <A>(self: ReadonlyArray<A>) => Array<[A, B]>\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const Do: ReadonlyArray<{}> = of({})\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bind: {\n  <A extends object, N extends string, B>(\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => ReadonlyArray<B>\n  ): (\n    self: ReadonlyArray<A>\n  ) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => ReadonlyArray<B>\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<ReadonlyArrayTypeLambda>(map, flatMap) as any\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bindTo: {\n  <N extends string>(tag: N): <A>(self: ReadonlyArray<A>) => Array<{ [K in N]: A }>\n  <A, N extends string>(self: ReadonlyArray<A>, tag: N): Array<{ [K in N]: A }>\n} = doNotation.bindTo<ReadonlyArrayTypeLambda>(map) as any\n\nconst let_: {\n  <N extends string, B, A extends object>(\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): (self: ReadonlyArray<A>) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <N extends string, A extends object, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<ReadonlyArrayTypeLambda>(map) as any\n\nexport {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link Do}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  let_ as let\n}\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isFunction } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Either<R, L = never> = Left<L, R> | Right<L, R>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = either.TypeId\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Left<out L, out R> extends Pipeable, Inspectable {\n  readonly _tag: \"Left\"\n  readonly _op: \"Left\"\n  readonly left: L\n  readonly [TypeId]: {\n    readonly _R: Covariant<R>\n    readonly _L: Covariant<L>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Right<out L, out R> extends Pipeable, Inspectable {\n  readonly _tag: \"Right\"\n  readonly _op: \"Right\"\n  readonly right: R\n  readonly [TypeId]: {\n    readonly _R: Covariant<R>\n    readonly _L: Covariant<L>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Either?: () => A[Unify.typeSymbol] extends Either<infer R0, infer L0> | infer _ ? Either<R0, L0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EitherTypeLambda extends TypeLambda {\n  readonly type: Either<this[\"Target\"], this[\"Out1\"]>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Either {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Left<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Right<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _A : never\n}\n\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const right: <R>(right: R) => Either<R> = either.right\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const left: <L>(left: L) => Either<never, L> = either.left\n\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromNullable: {\n  <R, L>(onNullable: (right: R) => L): (self: R) => Either<NonNullable<R>, L>\n  <R, L>(self: R, onNullable: (right: R) => L): Either<NonNullable<R>, L>\n} = dual(\n  2,\n  <R, L>(self: R, onNullable: (right: R) => L): Either<NonNullable<R>, L> =>\n    self == null ? left(onNullable(self)) : right(self as NonNullable<R>)\n)\n\n/**\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromOption: {\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either<R, L>\n  <R, L>(self: Option<R>, onNone: () => L): Either<R, L>\n} = either.fromOption\n\nconst try_: {\n  <R, L>(\n    options: {\n      readonly try: LazyArg<R>\n      readonly catch: (error: unknown) => L\n    }\n  ): Either<R, L>\n  <R>(evaluate: LazyArg<R>): Either<R, unknown>\n} = (<R, L>(\n  evaluate: LazyArg<R> | {\n    readonly try: LazyArg<R>\n    readonly catch: (error: unknown) => L\n  }\n) => {\n  if (isFunction(evaluate)) {\n    try {\n      return right(evaluate())\n    } catch (e) {\n      return left(e)\n    }\n  } else {\n    try {\n      return right(evaluate.try())\n    } catch (e) {\n      return left(evaluate.catch(e))\n    }\n  }\n}) as any\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Either` value, translating any\n   * thrown exceptions into typed failed eithers creating with `Either.left`.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  try_ as try\n}\n\n/**\n * Tests if a value is a `Either`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEither: (input: unknown) => input is Either<unknown, unknown> = either.isEither\n\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isLeft: <R, L>(self: Either<R, L>) => self is Left<L, R> = either.isLeft\n\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRight: <R, L>(self: Either<R, L>) => self is Right<L, R> = either.isRight\n\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * Alias of {@link toOption}.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <R, L>({ left, right }: {\n  right: Equivalence.Equivalence<R>\n  left: Equivalence.Equivalence<L>\n}): Equivalence.Equivalence<Either<R, L>> =>\n  Equivalence.make((x, y) =>\n    isLeft(x) ?\n      isLeft(y) && left(x.left, y.left) :\n      isRight(y) && right(x.right, y.right)\n  )\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  <L, L2, R, R2>(options: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): (self: Either<R, L>) => Either<R2, L2>\n  <L, R, L2, R2>(self: Either<R, L>, options: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): Either<R2, L2>\n} = dual(\n  2,\n  <L, R, L2, R2>(self: Either<R, L>, { onLeft, onRight }: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): Either<R2, L2> => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right))\n)\n\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @param self - The input `Either` value to map.\n * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapLeft: {\n  <L, L2>(f: (left: L) => L2): <R>(self: Either<R, L>) => Either<R, L2>\n  <R, L, L2>(self: Either<R, L>, f: (left: L) => L2): Either<R, L2>\n} = dual(\n  2,\n  <R, L1, L2>(self: Either<R, L1>, f: (left: L1) => L2): Either<R, L2> =>\n    isLeft(self) ? left(f(self.left)) : right(self.right)\n)\n\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @param self - An `Either` to map\n * @param f - The function to map over the value of the `Either`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  <R, R2>(f: (right: R) => R2): <L>(self: Either<R, L>) => Either<R2, L>\n  <R, L, R2>(self: Either<R, L>, f: (right: R) => R2): Either<R2, L>\n} = dual(\n  2,\n  <R1, L, R2>(self: Either<R1, L>, f: (right: R1) => R2): Either<R2, L> =>\n    isRight(self) ? right(f(self.right)) : left(self.left)\n)\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <L, B, R, C = B>(options: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): (self: Either<R, L>) => B | C\n  <R, L, B, C = B>(self: Either<R, L>, options: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): B | C\n} = dual(\n  2,\n  <R, L, B, C = B>(self: Either<R, L>, { onLeft, onRight }: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): B | C => isLeft(self) ? onLeft(self.left) : onRight(self.right)\n)\n\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     0,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  <A, B extends A, E>(refinement: Refinement<NoInfer<A>, B>, orLeftWith: (a: NoInfer<A>) => E): (a: A) => Either<B, E>\n  <A, E>(\n    predicate: Predicate<NoInfer<A>>,\n    orLeftWith: (a: NoInfer<A>) => E\n  ): (a: A) => Either<A, E>\n  <A, E, B extends A>(\n    self: A,\n    refinement: Refinement<A, B>,\n    orLeftWith: (a: A) => E\n  ): Either<B, E>\n  <A, E>(\n    self: A,\n    predicate: Predicate<NoInfer<A>>,\n    orLeftWith: (a: NoInfer<A>) => E\n  ): Either<A, E>\n} = dual(\n  3,\n  <A, E>(a: A, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<A, E> =>\n    predicate(a) ? right(a) : left(orLeftWith(a))\n)\n\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrLeft: {\n  <R, B extends R, L2>(\n    refinement: Refinement<NoInfer<R>, B>,\n    orLeftWith: (right: NoInfer<R>) => L2\n  ): <L>(self: Either<R, L>) => Either<B, L2 | L>\n  <R, L2>(\n    predicate: Predicate<NoInfer<R>>,\n    orLeftWith: (right: NoInfer<R>) => L2\n  ): <L>(self: Either<R, L>) => Either<R, L2 | L>\n  <R, L, B extends R, L2>(\n    self: Either<R, L>,\n    refinement: Refinement<R, B>,\n    orLeftWith: (right: R) => L2\n  ): Either<B, L | L2>\n  <R, L, E2>(self: Either<R, L>, predicate: Predicate<R>, orLeftWith: (right: R) => E2): Either<R, L | E2>\n} = dual(3, <R, L, E2>(\n  self: Either<R, L>,\n  predicate: Predicate<R>,\n  orLeftWith: (right: R) => E2\n): Either<R, L | E2> => flatMap(self, (r) => predicate(r) ? right(r) : left(orLeftWith(r))))\n\n/**\n * @category getters\n * @since 2.0.0\n */\nexport const merge: <R, L>(self: Either<R, L>) => L | R = match({\n  onLeft: identity,\n  onRight: identity\n})\n\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  <L, R2>(onLeft: (left: L) => R2): <R>(self: Either<R, L>) => R2 | R\n  <R, L, R2>(self: Either<R, L>, onLeft: (left: L) => R2): R | R2\n} = dual(\n  2,\n  <R, L, B>(self: Either<R, L>, onLeft: (left: L) => B): R | B => isLeft(self) ? onLeft(self.left) : self.right\n)\n\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <R, L>(self: Either<R, L>) => R | null = getOrElse(constNull)\n\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <R, L>(self: Either<R, L>) => R | undefined = getOrElse(constUndefined)\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Either` to extract the value from.\n * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  <L>(onLeft: (left: L) => unknown): <A>(self: Either<A, L>) => A\n  <R, L>(self: Either<R, L>, onLeft: (left: L) => unknown): R\n} = dual(2, <R, L>(self: Either<R, L>, onLeft: (left: L) => unknown): R => {\n  if (isRight(self)) {\n    return self.right\n  }\n  throw onLeft(self.left)\n})\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Either` to extract the value from.\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrow: <R, L>(self: Either<R, L>) => R = getOrThrowWith(() =>\n  new Error(\"getOrThrow called on a Left\")\n)\n\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @param self - The input `Either` value to check and potentially return.\n * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  <L, R2, L2>(that: (left: L) => Either<R2, L2>): <R>(self: Either<R, L>) => Either<R | R2, L2>\n  <R, L, R2, L2>(self: Either<R, L>, that: (left: L) => Either<R2, L2>): Either<R | R2, L2>\n} = dual(\n  2,\n  <R1, L1, R2, L2>(self: Either<R1, L1>, that: (left: L1) => Either<R2, L2>): Either<R1 | R2, L2> =>\n    isLeft(self) ? that(self.left) : right(self.right)\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  <R, R2, L2>(f: (right: R) => Either<R2, L2>): <L>(self: Either<R, L>) => Either<R2, L | L2>\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2>): Either<R2, L | L2>\n} = dual(\n  2,\n  <R1, L1, R2, L2>(self: Either<R1, L1>, f: (right: R1) => Either<R2, L2>): Either<R2, L1 | L2> =>\n    isLeft(self) ? left(self.left) : f(self.right)\n)\n\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  <R, R2, L2>(f: (right: R) => Either<R2, L2>): <L>(self: Either<R, L>) => Either<R2, L | L2>\n  <R2, L2>(f: Either<R2, L2>): <L, R1>(self: Either<R1, L>) => Either<R2, L | L2>\n  <R, R2>(f: (right: R) => R2): <L>(self: Either<R, L>) => Either<R2, L>\n  <R2>(right: NotFunction<R2>): <R1, L>(self: Either<R1, L>) => Either<R2, L>\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2>): Either<R2, L | L2>\n  <R, L, R2, L2>(self: Either<R, L>, f: Either<R2, L2>): Either<R2, L | L2>\n  <R, L, R2>(self: Either<R, L>, f: (right: R) => R2): Either<R2, L>\n  <R, L, R2>(self: Either<R, L>, f: NotFunction<R2>): Either<R2, L>\n} = dual(\n  2,\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2> | Either<R2, L2>): Either<R2, L | L2> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isEither(b) ? b : right(b)\n    })\n)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  <R2, L2, R, B>(\n    that: Either<R2, L2>,\n    f: (right: R, right2: R2) => B\n  ): <L>(self: Either<R, L>) => Either<B, L2 | L>\n  <R, L, R2, L2, B>(\n    self: Either<R, L>,\n    that: Either<R2, L2>,\n    f: (right: R, right2: R2) => B\n  ): Either<B, L | L2>\n} = dual(\n  3,\n  <R, L, R2, L2, B>(self: Either<R, L>, that: Either<R2, L2>, f: (right: R, right2: R2) => B): Either<B, L | L2> =>\n    flatMap(self, (r) => map(that, (r2) => f(r, r2)))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  <R, L2>(that: Either<R, L2>): <R2, L>(self: Either<(right: R) => R2, L>) => Either<R2, L | L2>\n  <R, R2, L, L2>(self: Either<(right: R) => R2, L>, that: Either<R, L2>): Either<R2, L | L2>\n} = dual(\n  2,\n  <R, R2, L, L2>(self: Either<(right: R) => R2, L>, that: Either<R, L2>): Either<R2, L | L2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @param fields - the struct of `Either`s to be sequenced.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Either<any, any>> | Record<string, Either<any, any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Either<any, any>>] ? Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer R, any>] ? R : never },\n    I[number] extends never ? never : [I[number]] extends [Either<any, infer L>] ? L : never\n  >\n  : [I] extends [Iterable<Either<infer R, infer L>>] ? Either<Array<R>, L>\n  : Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer R, any>] ? R : never },\n    I[keyof I] extends never ? never : [I[keyof I]] extends [Either<any, infer L>] ? L : never\n  > = (\n    input: Iterable<Either<any, any>> | Record<string, Either<any, any>>\n  ): Either<any, any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Either<any, any>> = []\n      for (const e of (input as Iterable<Either<any, any>>)) {\n        if (isLeft(e)) {\n          return e\n        }\n        out.push(e.right)\n      }\n      return right(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const e = input[key]\n      if (isLeft(e)) {\n        return e\n      }\n      out[key] = e.right\n    }\n    return right(out)\n  }\n\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip = <R, L>(self: Either<R, L>): Either<L, R> => isLeft(self) ? right(self.left) : left(self.right)\n\nconst adapter = Gen.adapter<EitherTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<EitherTypeLambda, Gen.Adapter<EitherTypeLambda>> = (...args) => {\n  const f = (args.length === 1)\n    ? args[0]\n    : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorYieldResult<any> | IteratorReturnResult<any> = iterator.next()\n  if (state.done) {\n    return right(state.value) as any\n  } else {\n    let current = state.value\n    if (Gen.isGenKind(current)) {\n      current = current.value\n    } else {\n      current = Gen.yieldWrapGet(current)\n    }\n    if (isLeft(current)) {\n      return current\n    }\n    while (!state.done) {\n      state = iterator.next(current.right as never)\n      if (!state.done) {\n        current = state.value\n        if (Gen.isGenKind(current)) {\n          current = current.value\n        } else {\n          current = Gen.yieldWrapGet(current)\n        }\n        if (isLeft(current)) {\n          return current\n        }\n      }\n    }\n    return right(state.value)\n  }\n}\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Either<{}> = right({})\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  <N extends string, A extends object, B, L2>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Either<B, L2>\n  ): <L1>(self: Either<A, L1>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, L1 | L2>\n  <A extends object, L1, N extends string, B, L2>(\n    self: Either<A, L1>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Either<B, L2>\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, L1 | L2>\n} = doNotation.bind<EitherTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  <N extends string>(name: N): <R, L>(self: Either<R, L>) => Either<{ [K in N]: R }, L>\n  <R, L, N extends string>(self: Either<R, L>, name: N): Either<{ [K in N]: R }, L>\n} = doNotation.bindTo<EitherTypeLambda>(map)\n\nconst let_: {\n  <N extends string, R extends object, B>(\n    name: Exclude<N, keyof R>,\n    f: (r: R) => B\n  ): <L>(self: Either<R, L>) => Either<{ [K in N | keyof R]: K extends keyof R ? R[K] : B }, L>\n  <R extends object, L, N extends string, B>(\n    self: Either<R, L>,\n    name: Exclude<N, keyof R>,\n    f: (r: R) => B\n  ): Either<{ [K in N | keyof R]: K extends keyof R ? R[K] : B }, L>\n} = doNotation.let_<EitherTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n", "/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Equivalence<in A> {\n  (self: A, that: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EquivalenceTypeLambda extends TypeLambda {\n  readonly type: Equivalence<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(isEquivalent: (self: A, that: A) => boolean): Equivalence<A> => (self: A, that: A): boolean =>\n  self === that || isEquivalent(self, that)\n\nconst isStrictEquivalent = (x: unknown, y: unknown) => x === y\n\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict: <A>() => Equivalence<A> = () => isStrictEquivalent\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Equivalence<string> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Equivalence<number> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Equivalence<boolean> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Equivalence<bigint> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol: Equivalence<symbol> = strict()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  <A>(that: Equivalence<A>): (self: Equivalence<A>) => Equivalence<A>\n  <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A> => make((x, y) => self(x, y) && that(x, y)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  <A>(collection: Iterable<Equivalence<A>>): (self: Equivalence<A>) => Equivalence<A>\n  <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  make((x, y) => {\n    if (!self(x, y)) {\n      return false\n    }\n    for (const equivalence of collection) {\n      if (!equivalence(x, y)) {\n        return false\n      }\n    }\n    return true\n  }))\n\nconst isAlwaysEquivalent: Equivalence<unknown> = (_x, _y) => true\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  combineMany(isAlwaysEquivalent, collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Equivalence<A>) => Equivalence<B>\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B>\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B> => make((x, y) => self(f(x), f(y)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Equivalence<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Equivalence<B>): <A>(self: Equivalence<A>) => Equivalence<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> // readonly because invariant\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> =>\n    make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Equivalence<A>>): Equivalence<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n\n    let collectionLength = 0\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false\n      }\n      collectionLength++\n    }\n    return true\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Equivalence<A>,\n  collection: Iterable<Equivalence<A>>\n): Equivalence<readonly [A, ...Array<A>]> /* readonly because invariant */ => {\n  const equivalence = all(collection)\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)))\n}\n\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Equivalence<any>>>(\n  ...elements: T\n): Equivalence<Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(item: Equivalence<A>): Equivalence<ReadonlyArray<A>> =>\n  make((self, that) => {\n    if (self.length !== that.length) {\n      return false\n    }\n\n    for (let i = 0; i < self.length; i++) {\n      const isEq = item(self[i], that[i])\n      if (!isEq) {\n        return false\n      }\n    }\n\n    return true\n  })\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends Record<string, Equivalence<any>>>(\n  fields: R\n): Equivalence<{ readonly [K in keyof R]: [R[K]] extends [Equivalence<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n}\n", "import { dual } from \"../Function.js\"\nimport type { Kind, TypeLambda } from \"../HKT.js\"\n\ntype Map<F extends TypeLambda> = {\n  <A, B>(f: (a: A) => B): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n  <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => B): Kind<F, R, O, E, B>\n}\n\ntype FlatMap<F extends TypeLambda> = {\n  <A, R2, O2, E2, B>(\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n  <R1, O1, E1, A, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n}\n\n/** @internal */\nexport const let_ = <F extends TypeLambda>(\n  map: Map<F>\n): {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): <R, O, E>(\n    self: Kind<F, R, O, E, A>\n  ) => Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n  <R, O, E, A extends object, N extends string, B>(\n    self: Kind<F, R, O, E, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n} =>\n  dual(3, <R, O, E, A extends object, N extends string, B>(\n    self: Kind<F, R, O, E, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }> =>\n    map(self, (a) => Object.assign({}, a, { [name]: f(a) }) as any))\n\n/** @internal */\nexport const bindTo = <F extends TypeLambda>(map: Map<F>): {\n  <N extends string>(\n    name: N\n  ): <R, O, E, A>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, { [K in N]: A }>\n  <R, O, E, A, N extends string>(\n    self: Kind<F, R, O, E, A>,\n    name: N\n  ): Kind<F, R, O, E, { [K in N]: A }>\n} =>\n  dual(2, <R, O, E, A, N extends string>(\n    self: Kind<F, R, O, E, A>,\n    name: N\n  ): Kind<F, R, O, E, { [K in N]: A }> => map(self, (a) => ({ [name]: a } as { [K in N]: A })))\n\n/** @internal */\nexport const bind = <F extends TypeLambda>(map: Map<F>, flatMap: FlatMap<F>): {\n  <N extends string, A extends object, R2, O2, E2, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): <R1, O1, E1>(\n    self: Kind<F, R1, O1, E1, A>\n  ) => Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n  <R1, O1, E1, A extends object, N extends string, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n} =>\n  dual(3, <R1, O1, E1, A, N extends string, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }> =>\n    flatMap(self, (a) =>\n      map(f(a), (b) => Object.assign({}, a, { [name]: b }) as { [K in keyof A | N]: K extends keyof A ? A[K] : B })))\n", "/**\n * @since 2.0.0\n */\n\nimport type * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type { Option } from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/**\n * @internal\n */\nexport const TypeId: Either.TypeId = Symbol.for(\"effect/Either\") as Either.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _R: (_: never) => _\n  },\n  [NodeInspectSymbol]<L, R>(this: Either.Either<R, L>) {\n    return this.toJSON()\n  },\n  toString<L, R>(this: Either.Left<L, R>) {\n    return format(this.toJSON())\n  }\n}\n\nconst RightProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [Equal.symbol]<L, R>(this: Either.Right<L, R>, that: unknown): boolean {\n    return isEither(that) && isRight(that) && Equal.equals(this.right, that.right)\n  },\n  [Hash.symbol]<L, R>(this: Either.Right<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.right))\n  },\n  toJSON<L, R>(this: Either.Right<L, R>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: toJSON(this.right)\n    }\n  }\n})\n\nconst LeftProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [Equal.symbol]<L, R>(this: Either.Left<L, R>, that: unknown): boolean {\n    return isEither(that) && isLeft(that) && Equal.equals(this.left, that.left)\n  },\n  [Hash.symbol]<L, R>(this: Either.Left<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.left))\n  },\n  toJSON<E, A>(this: Either.Left<E, A>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: toJSON(this.left)\n    }\n  }\n})\n\n/** @internal */\nexport const isEither = (input: unknown): input is Either.Either<unknown, unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isLeft = <R, L>(ma: Either.Either<R, L>): ma is Either.Left<L, R> => ma._tag === \"Left\"\n\n/** @internal */\nexport const isRight = <R, L>(ma: Either.Either<R, L>): ma is Either.Right<L, R> => ma._tag === \"Right\"\n\n/** @internal */\nexport const left = <L>(left: L): Either.Either<never, L> => {\n  const a = Object.create(LeftProto)\n  a.left = left\n  return a\n}\n\n/** @internal */\nexport const right = <R>(right: R): Either.Either<R> => {\n  const a = Object.create(RightProto)\n  a.right = right\n  return a\n}\n\n/** @internal */\nexport const getLeft = <R, L>(\n  self: Either.Either<R, L>\n): Option<L> => (isRight(self) ? option.none : option.some(self.left))\n\n/** @internal */\nexport const getRight = <R, L>(\n  self: Either.Either<R, L>\n): Option<R> => (isLeft(self) ? option.none : option.some(self.right))\n\n/** @internal */\nexport const fromOption: {\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either.Either<R, L>\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L>\n} = dual(\n  2,\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L> =>\n    option.isNone(self) ? left(onNone()) : right(self.value)\n)\n", "/**\n * @since 2.0.0\n */\nimport type { Equivalence } from \"./Equivalence.js\"\nimport * as Hash from \"./Hash.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Equal\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Equal extends Hash.Hash {\n  [symbol](that: Equal): boolean\n}\n\n/**\n * @since 2.0.0\n * @category equality\n */\nexport function equals<B>(that: B): <A>(self: A) => boolean\nexport function equals<A, B>(self: A, that: B): boolean\nexport function equals(): any {\n  if (arguments.length === 1) {\n    return (self: unknown) => compareBoth(self, arguments[0])\n  }\n  return compareBoth(arguments[0], arguments[1])\n}\n\nfunction compareBoth(self: unknown, that: unknown): boolean {\n  if (self === that) {\n    return true\n  }\n  const selfType = typeof self\n  if (selfType !== typeof that) {\n    return false\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (Hash.hash(self) === Hash.hash(that) && self[symbol](that)) {\n          return true\n        } else {\n          return structuralRegionState.enabled && structuralRegionState.tester\n            ? structuralRegionState.tester(self, that)\n            : false\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString()\n      }\n    }\n    if (structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]))\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self as any)\n        const keysThat = Object.keys(that as any)\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n            }\n          }\n          return true\n        }\n      }\n      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n    }\n  }\n\n  return structuralRegionState.enabled && structuralRegionState.tester\n    ? structuralRegionState.tester(self, that)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = (u: unknown): u is Equal => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence: <A>() => Equivalence<A> = () => equals\n", "/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/** @internal */\nconst randomHashCache = globalValue(\n  Symbol.for(\"effect/Hash/randomHashCache\"),\n  () => new WeakMap<object, number>()\n)\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Hash\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Hash {\n  [symbol](): number\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash: <A>(self: A) => number = <A>(self: A) => {\n  if (structuralRegionState.enabled === true) {\n    return 0\n  }\n\n  switch (typeof self) {\n    case \"number\":\n      return number(self)\n    case \"bigint\":\n      return string(self.toString(10))\n    case \"boolean\":\n      return string(String(self))\n    case \"symbol\":\n      return string(String(self))\n    case \"string\":\n      return string(self)\n    case \"undefined\":\n      return string(\"undefined\")\n    case \"function\":\n    case \"object\": {\n      if (self === null) {\n        return string(\"null\")\n      } else if (self instanceof Date) {\n        return hash(self.toISOString())\n      } else if (isHash(self)) {\n        return self[symbol]()\n      } else {\n        return random(self)\n      }\n    }\n    default:\n      throw new Error(\n        `BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`\n      )\n  }\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random: <A extends object>(self: A) => number = (self) => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)))\n  }\n  return randomHashCache.get(self)!\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine: (b: number) => (self: number) => number = (b) => (self) => (self * 53) ^ b\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = (n: number): number => (n & 0xbfffffff) | ((n >>> 1) & 0x40000000)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = (u: unknown): u is Hash => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = (n: number) => {\n  if (n !== n || n === Infinity) {\n    return 0\n  }\n  let h = n | 0\n  if (h !== n) {\n    h ^= n * 0xffffffff\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = (str: string) => {\n  let h = 5381, i = str.length\n  while (i) {\n    h = (h * 33) ^ str.charCodeAt(--i)\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = <A extends object>(o: A, keys: ReadonlyArray<keyof A>) => {\n  let h = 12289\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]! as string), combine(hash((o as any)[keys[i]!])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = <A extends object>(o: A) =>\n  structureKeys(o, Object.keys(o) as unknown as ReadonlyArray<keyof A>)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = <A>(arr: ReadonlyArray<A>) => {\n  let h = 6151\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached: {\n  (self: object): (hash: number) => number\n  (self: object, hash: number): number\n} = function() {\n  if (arguments.length === 1) {\n    const self = arguments[0] as object\n    return function(hash: number) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash\n        },\n        enumerable: false\n      })\n      return hash\n    } as any\n  }\n  const self = arguments[0] as object\n  const hash = arguments[1] as number\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash\n    },\n    enumerable: false\n  })\n\n  return hash\n}\n", "/**\n * @since 2.0.0\n */\nimport * as version from \"./internal/version.js\"\n\nconst globalStoreId = Symbol.for(`effect/GlobalValue/globalStoreId/${version.getCurrentVersion()}`)\n\nif (!(globalStoreId in globalThis)) {\n  ;(globalThis as any)[globalStoreId] = new Map()\n}\n\nconst globalStore = (globalThis as any)[globalStoreId] as Map<unknown, any>\n\n/**\n * @since 2.0.0\n */\nexport const globalValue = <A>(id: unknown, compute: () => A): A => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute())\n  }\n  return globalStore.get(id)!\n}\n", "let moduleVersion = \"3.6.1\"\n\nexport const getCurrentVersion = () => moduleVersion\n\nexport const setCurrentVersion = (version: string) => {\n  moduleVersion = version\n}\n", "/**\n * @since 2.0.0\n */\nimport { dual, isFunction as isFunction_ } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { TupleOf, TupleOfAtLeast } from \"./Types.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Predicate<in A> {\n  (a: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface PredicateTypeLambda extends TypeLambda {\n  readonly type: Predicate<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Refinement<in A, out B extends A> {\n  (a: A): a is B\n}\n\n/**\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Predicate {\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Predicate<infer _A>] ? _A : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Predicate<any>\n}\n\n/**\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Refinement {\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Refinement<infer _A, infer _>] ? _A : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Out<T extends Any> = [T] extends [Refinement<infer _, infer _B>] ? _B : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Refinement<any, any>\n}\n\n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n * @param f - a function to transform `B` to `A`.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Predicate<A>) => Predicate<B>\n  <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B>\n} = dual(2, <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B> => (b) => self(f(b)))\n\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n *\n * @example\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOf: {\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOf<N, T>\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T> => self.length === n)\n\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n *\n * @example\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOfAtLeast: {\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOfAtLeast<N, T>\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T> => self.length >= n)\n\n/**\n * Tests if a value is `truthy`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTruthy = (input: unknown) => !!input\n\n/**\n * Tests if a value is a `Set`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSet = (input: unknown): input is Set<unknown> => input instanceof Set\n\n/**\n * Tests if a value is a `Map`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isMap = (input: unknown): input is Map<unknown, unknown> => input instanceof Map\n\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString = (input: unknown): input is string => typeof input === \"string\"\n\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber = (input: unknown): input is number => typeof input === \"number\"\n\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean = (input: unknown): input is boolean => typeof input === \"boolean\"\n\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt = (input: unknown): input is bigint => typeof input === \"bigint\"\n\n/**\n * Tests if a value is a `symbol`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSymbol = (input: unknown): input is symbol => typeof input === \"symbol\"\n\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction: (input: unknown) => input is Function = isFunction_\n\n/**\n * Tests if a value is `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUndefined = (input: unknown): input is undefined => input === undefined\n\n/**\n * Tests if a value is not `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotUndefined = <A>(input: A): input is Exclude<A, undefined> => input !== undefined\n\n/**\n * Tests if a value is `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNull = (input: unknown): input is null => input === null\n\n/**\n * Tests if a value is not `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNull = <A>(input: A): input is Exclude<A, null> => input !== null\n\n/**\n * A guard that always fails.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNever: (input: unknown) => input is never = (_: unknown): _ is never => false\n\n/**\n * A guard that always succeeds.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUnknown: (input: unknown) => input is unknown = (_): _ is unknown => true\n\nconst isRecordOrArray = (input: unknown) => typeof input === \"object\" && input !== null\n\n/**\n * Tests if a value is an `object`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isObject = (input: unknown): input is object => isRecordOrArray(input) || isFunction(input)\n\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @param property - The field to check within the object.\n * @param self - The value to examine.\n *\n * @category guards\n * @since 2.0.0\n */\nexport const hasProperty: {\n  <P extends PropertyKey>(property: P): (self: unknown) => self is { [K in P]: unknown }\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown }\n} = dual(\n  2,\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown } =>\n    isObject(self) && (property in self)\n)\n\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @param input - The value to test.\n * @param tag - The tag to test for.\n *\n * @example\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTagged: {\n  <K extends string>(tag: K): (self: unknown) => self is { _tag: K }\n  <K extends string>(self: unknown, tag: K): self is { _tag: K }\n} = dual(\n  2,\n  <K extends string>(self: unknown, tag: K): self is { _tag: K } => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag\n)\n\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNullable = <A>(input: A): input is Extract<A, null | undefined> => input === null || input === undefined\n\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNullable = <A>(input: A): input is NonNullable<A> => input !== null && input !== undefined\n\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isError = (input: unknown): input is Error => input instanceof Error\n\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUint8Array = (input: unknown): input is Uint8Array => input instanceof Uint8Array\n\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isDate = (input: unknown): input is Date => input instanceof Date\n\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isIterable = (input: unknown): input is Iterable<unknown> => hasProperty(input, Symbol.iterator)\n\n/**\n * A guard that succeeds when the input is a record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRecord = (input: unknown): input is { [x: string | symbol]: unknown } =>\n  isRecordOrArray(input) && !Array.isArray(input)\n\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isReadonlyRecord: (\n  input: unknown\n) => input is { readonly [x: string | symbol]: unknown } = isRecord\n\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isPromise = (\n  input: unknown\n): input is Promise<unknown> =>\n  hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch)\n\n/**\n * @category guards\n * @since 2.0.0\n */\nexport const isPromiseLike = (\n  input: unknown\n): input is PromiseLike<unknown> => hasProperty(input, \"then\") && isFunction(input.then)\n\n/**\n * @since 2.0.0\n */\nexport const compose: {\n  <A, B extends A, C extends B>(bc: Refinement<B, C>): (ab: Refinement<A, B>) => Refinement<A, C>\n  <A, B extends A>(bc: Predicate<NoInfer<B>>): (ab: Refinement<A, B>) => Refinement<A, B>\n  <A, B extends A, C extends B>(ab: Refinement<A, B>, bc: Refinement<B, C>): Refinement<A, C>\n  <A, B extends A>(ab: Refinement<A, B>, bc: Predicate<NoInfer<B>>): Refinement<A, B>\n} = dual(\n  2,\n  <A, B extends A, C extends B>(ab: Refinement<A, B>, bc: Refinement<B, C>): Refinement<A, C> => (a): a is C =>\n    ab(a) && bc(a)\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product =\n  <A, B>(self: Predicate<A>, that: Predicate<B>): Predicate<readonly [A, B]> /* readonly because contravariant */ =>\n  ([a, b]) => self(a) && that(b)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(\n  collection: Iterable<Predicate<A>>\n): Predicate<ReadonlyArray<A>> => {\n  return (as) => {\n    let collectionIndex = 0\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false\n      }\n      collectionIndex++\n    }\n    return true\n  }\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Predicate<A>,\n  collection: Iterable<Predicate<A>>\n): Predicate<readonly [A, ...Array<A>]> /* readonly because contravariant */ => {\n  const rest = all(collection)\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail)\n}\n\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```\n * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n * ```\n *\n * @since 2.0.0\n */\nexport const tuple: {\n  <T extends ReadonlyArray<Predicate.Any>>(\n    ...elements: T\n  ): [Extract<T[number], Refinement.Any>] extends [never] ? Predicate<{ readonly [I in keyof T]: Predicate.In<T[I]> }>\n    : Refinement<\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.In<T[I]> : Predicate.In<T[I]> },\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.Out<T[I]> : Predicate.In<T[I]> }\n    >\n} = (...elements: ReadonlyArray<Predicate.Any>) => all(elements) as any\n\n/**\n * ```\n * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: \u0421; ... }>\n * ```\n *\n * @since 2.0.0\n */\nexport const struct: {\n  <R extends Record<string, Predicate.Any>>(\n    fields: R\n  ): [Extract<R[keyof R], Refinement.Any>] extends [never] ?\n    Predicate<{ readonly [K in keyof R]: Predicate.In<R[K]> }> :\n    Refinement<\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.In<R[K]> : Predicate.In<R[K]> },\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.Out<R[K]> : Predicate.In<R[K]> }\n    >\n} = (<R extends Record<string, Predicate.Any>>(fields: R) => {\n  const keys = Object.keys(fields)\n  return (a: Record<string, unknown>) => {\n    for (const key of keys) {\n      if (!fields[key](a[key])) {\n        return false\n      }\n    }\n    return true\n  }\n}) as any\n\n/**\n * Negates the result of a given predicate.\n *\n * @param self - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = <A>(self: Predicate<A>): Predicate<A> => (a) => !self(a)\n\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B | C>\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B | C>\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) || that(a))\n\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B & C>\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B & C>\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) && that(a))\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) !== that(a))\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) === that(a))\n\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  <A>(consequent: Predicate<A>): (antecedent: Predicate<A>) => Predicate<A>\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A> => (a) => antecedent(a) ? consequent(a) : true\n)\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) || that(a))\n)\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) && that(a))\n)\n\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const every = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a: A) => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const some = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a) => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true\n    }\n  }\n  return false\n}\n", "/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { Kind, TypeLambda } from \"./HKT.js\"\nimport { getBugErrorMessage } from \"./internal/errors.js\"\nimport { isNullable, isObject } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId: unique symbol = Symbol.for(\"effect/Gen/GenKind\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type GenKindTypeId = typeof GenKindTypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface GenKind<F extends TypeLambda, R, O, E, A> extends Variance<F, R, O, E> {\n  readonly value: Kind<F, R, O, E, A>\n\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A>\n}\n\n/**\n * @category predicates\n * @since 3.0.6\n */\nexport const isGenKind = (u: unknown): u is GenKind<any, any, any, any, any> => isObject(u) && GenKindTypeId in u\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl<F extends TypeLambda, R, O, E, A> implements GenKind<F, R, O, E, A> {\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly value: Kind<F, R, O, E, A>\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return (_: R) => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return (_: never): O => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return (_: never): E => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  readonly [GenKindTypeId]: typeof GenKindTypeId = GenKindTypeId;\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A> {\n    return new SingleShotGen<GenKind<F, R, O, E, A>, A>(this as any)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  private called = false\n\n  constructor(readonly self: T) {}\n\n  /**\n   * @since 2.0.0\n   */\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = <F extends TypeLambda, R, O, E, A>(\n  kind: Kind<F, R, O, E, A>\n): GenKind<F, R, O, E, A> => new GenKindImpl(kind)\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Variance<in out F extends TypeLambda, in R, out O, out E> {\n  readonly [GenKindTypeId]: GenKindTypeId\n  readonly _F: Types.Invariant<F>\n  readonly _R: Types.Contravariant<R>\n  readonly _O: Types.Covariant<O>\n  readonly _E: Types.Covariant<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Gen<F extends TypeLambda, Z> {\n  <Self, K extends Variance<F, any, any, any> | YieldWrap<Kind<F, any, any, any, any>>, A>(\n    ...args:\n      | [\n        self: Self,\n        body: (this: Self, resume: Z) => Generator<K, A, never>\n      ]\n      | [\n        body: (resume: Z) => Generator<K, A, never>\n      ]\n  ): Kind<\n    F,\n    [K] extends [Variance<F, infer R, any, any>] ? R\n      : [K] extends [YieldWrap<Kind<F, infer R, any, any, any>>] ? R\n      : never,\n    [K] extends [Variance<F, any, infer O, any>] ? O\n      : [K] extends [YieldWrap<Kind<F, any, infer O, any, any>>] ? O\n      : never,\n    [K] extends [Variance<F, any, any, infer E>] ? E\n      : [K] extends [YieldWrap<Kind<F, any, any, infer E, any>>] ? E\n      : never,\n    A\n  >\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Adapter<Z extends TypeLambda> {\n  <_R, _O, _E, _A>(\n    self: Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, _R, _O, _E, _A>(a: A, ab: (a: A) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, _R, _O, _E, _A>(a: A, ab: (a: A) => B, bc: (b: B) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n}\n\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter: <F extends TypeLambda>() => Adapter<F> = () => (function() {\n  let x = arguments[0]\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x)\n  }\n  return new GenKindImpl(x) as any\n})\n\nconst defaultIncHi = 0x14057b7e\nconst defaultIncLo = 0xf767814f\nconst MUL_HI = 0x5851f42d >>> 0\nconst MUL_LO = 0x4c957f2d >>> 0\nconst BIT_53 = 9007199254740992.0\nconst BIT_27 = 134217728.0\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type PCGRandomState = [number, number, number, number]\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type OptionalNumber = number | null | undefined\n\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  private _state!: Int32Array\n\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seed - The low 32 bits of the seed (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seed?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param inc - The low 32 bits of the incrementer (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seedHi: OptionalNumber, seedLo: OptionalNumber, inc?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param incHi - The high 32 bits of the incrementer.\n   * @param incLo - The low 32 bits of the incrementer.\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(\n    seedHi: OptionalNumber,\n    seedLo: OptionalNumber,\n    incHi: OptionalNumber,\n    incLo: OptionalNumber\n  )\n  constructor(\n    seedHi?: OptionalNumber,\n    seedLo?: OptionalNumber,\n    incHi?: OptionalNumber,\n    incLo?: OptionalNumber\n  ) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = (Math.random() * 0xffffffff) >>> 0\n      seedHi = 0\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi\n      seedHi = 0\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo\n      incHi = this._state ? this._state[2] : defaultIncHi\n    } else if (isNullable(incLo)) {\n      incLo = <number> incHi\n      incHi = 0\n    }\n\n    this._state = new Int32Array([0, 0, (<number> incHi) >>> 0, ((incLo || 0) | 1) >>> 0])\n    this._next()\n    add64(\n      this._state,\n      this._state[0]!,\n      this._state[1]!,\n      (<number> seedHi) >>> 0,\n      (<number> seedLo) >>> 0\n    )\n    this._next()\n    return this\n  }\n\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState(): PCGRandomState {\n    return [this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!]\n  }\n\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state: PCGRandomState) {\n    this._state[0] = state[0]\n    this._state[1] = state[1]\n    this._state[2] = state[2]\n    this._state[3] = state[3] | 1\n  }\n\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max: number) {\n    if (!max) {\n      return this._next()\n    }\n    max = max >>> 0\n    if ((max & (max - 1)) === 0) {\n      return this._next() & (max - 1) // fast path for power of 2\n    }\n\n    let num = 0\n    const skew = (-max >>> 0) % max >>> 0\n    for (num = this._next(); num < skew; num = this._next()) {\n      // this loop will rarely execute more than twice,\n      // and is intentionally empty\n    }\n    return num % max\n  }\n\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0\n    const lo = (this._next() & 0x07ffffff) * 1.0\n    return (hi * BIT_27 + lo) / BIT_53\n  }\n\n  /** @internal */\n  private _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0]! >>> 0\n    const oldLo = this._state[1]! >>> 0\n\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO)\n    add64(this._state, this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!)\n\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18\n    let xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0\n    xsHi = (xsHi ^ oldHi) >>> 0\n    xsLo = (xsLo ^ oldLo) >>> 0\n    const xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27\n    const rot2 = ((-rot >>> 0) & 31) >>> 0\n    return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0\n  }\n}\n\nfunction mul64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let c1 = ((aLo >>> 16) * (bLo & 0xffff)) >>> 0\n  let c0 = ((aLo & 0xffff) * (bLo >>> 16)) >>> 0\n\n  let lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0\n  let hi = ((aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16))) >>> 0\n\n  c0 = (c0 << 16) >>> 0\n  lo = (lo + c0) >>> 0\n  if ((lo >>> 0) < (c0 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  c1 = (c1 << 16) >>> 0\n  lo = (lo + c1) >>> 0\n  if ((lo >>> 0) < (c1 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  hi = (hi + Math.imul(aLo, bHi)) >>> 0\n  hi = (hi + Math.imul(aHi, bLo)) >>> 0\n\n  out[0] = hi\n  out[1] = lo\n}\n\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let hi = (aHi + bHi) >>> 0\n  const lo = (aLo + bLo) >>> 0\n  if ((lo >>> 0) < (aLo >>> 0)) {\n    hi = (hi + 1) | 0\n  }\n  out[0] = hi\n  out[1] = lo\n}\n\n/**\n * @since 3.0.6\n */\nexport const YieldWrapTypeId: unique symbol = Symbol.for(\"effect/Utils/YieldWrap\")\n\n/**\n * @since 3.0.6\n */\nexport class YieldWrap<T> {\n  /**\n   * @since 3.0.6\n   */\n  readonly #value: T\n  constructor(value: T) {\n    this.#value = value\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId](): T {\n    return this.#value\n  }\n}\n\n/**\n * @since 3.0.6\n */\nexport function yieldWrapGet<T>(self: YieldWrap<T>): T {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]()\n  }\n  throw new Error(getBugErrorMessage(\"yieldWrapGet\"))\n}\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegionState = globalValue(\n  \"effect/Utils/isStructuralRegion\",\n  (): { enabled: boolean; tester: ((a: unknown, b: unknown) => boolean) | undefined } => ({\n    enabled: false,\n    tester: undefined\n  })\n)\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegion = <A>(body: () => A, tester?: (a: unknown, b: unknown) => boolean): A => {\n  const current = structuralRegionState.enabled\n  const currentTester = structuralRegionState.tester\n  structuralRegionState.enabled = true\n  if (tester) {\n    structuralRegionState.tester = tester\n  }\n  try {\n    return body()\n  } finally {\n    structuralRegionState.enabled = current\n    structuralRegionState.tester = currentTester\n  }\n}\n\nconst tracingFunction = (name: string) => {\n  const wrap = {\n    [name]<A>(body: () => A) {\n      return body()\n    }\n  }\n  return function<A>(fn: () => A): A {\n    return wrap[name](fn)\n  }\n}\n\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nexport const internalCall = tracingFunction(\"effect_internal_function\")\n", "/**\n * @since 2.0.0\n */\n\n/** @internal */\nexport const getBugErrorMessage = (message: string) =>\n  `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`\n", "/**\n * @since 2.0.0\n */\n\nimport { hasProperty, isFunction } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NodeInspectSymbol = typeof NodeInspectSymbol\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Inspectable {\n  toString(): string\n  toJSON(): unknown\n  [NodeInspectSymbol](): unknown\n}\n\n/**\n * @since 2.0.0\n */\nexport const toJSON = (x: unknown): unknown => {\n  if (\n    hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) &&\n    x[\"toJSON\"].length === 0\n  ) {\n    return x.toJSON()\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON)\n  }\n  return x\n}\n\n/**\n * @since 2.0.0\n */\nexport const format = (x: unknown): string => JSON.stringify(x, null, 2)\n\n/**\n * @since 2.0.0\n */\nexport const BaseProto: Inspectable = {\n  toJSON() {\n    return toJSON(this)\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport abstract class Class {\n  /**\n   * @since 2.0.0\n   */\n  abstract toJSON(): unknown\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u: unknown, whitespace: number | string | undefined = 2): string => {\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u)\n  } catch (_) {\n    return String(u)\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj: unknown, whitespace?: number | string | undefined): string => {\n  let cache: Array<unknown> = []\n  const retVal = JSON.stringify(\n    obj,\n    (_key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // circular reference\n          : cache.push(value) && value\n        : value,\n    whitespace\n  )\n  ;(cache as any) = undefined\n  return retVal\n}\n", "import type * as Channel from \"../Channel.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Effectable from \"../Effectable.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport { SingleShotGen, YieldWrap } from \"../Utils.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\"effect/Stream\") as Stream.StreamTypeId\n\n/** @internal */\nexport const SinkTypeId: Sink.SinkTypeId = Symbol.for(\"effect/Sink\") as Sink.SinkTypeId\n\n/** @internal */\nexport const ChannelTypeId: Channel.ChannelTypeId = Symbol.for(\"effect/Channel\") as Channel.ChannelTypeId\n\n/** @internal */\nexport const effectVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _,\n\n  _V: version.getCurrentVersion()\n}\n\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _L: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: (_: never) => _,\n  /* c8 ignore next */\n  _InErr: (_: unknown) => _,\n  /* c8 ignore next */\n  _InElem: (_: unknown) => _,\n  /* c8 ignore next */\n  _InDone: (_: unknown) => _,\n  /* c8 ignore next */\n  _OutErr: (_: never) => _,\n  /* c8 ignore next */\n  _OutElem: (_: never) => _,\n  /* c8 ignore next */\n  _OutDone: (_: never) => _\n}\n\n/** @internal */\nexport const EffectPrototype: Effect.Effect<never> & Equal.Equal = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [Equal.symbol](that: any) {\n    return this === that\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.random(this))\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const StructuralPrototype: Equal.Equal = {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.structure(this))\n  },\n  [Equal.symbol](this: Equal.Equal, that: Equal.Equal) {\n    const selfKeys = Object.keys(this)\n    const thatKeys = Object.keys(that as object)\n    if (selfKeys.length !== thatKeys.length) {\n      return false\n    }\n    for (const key of selfKeys) {\n      if (!(key in (that as object) && Equal.equals((this as any)[key], (that as any)[key]))) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/** @internal */\nexport const CommitPrototype: Effect.Effect<never> = {\n  ...EffectPrototype,\n  _op: OpCodes.OP_COMMIT\n} as any\n\n/** @internal */\nexport const StructuralCommitPrototype: Effect.Effect<never> = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n} as any\n\n/** @internal */\nexport const Base: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = CommitPrototype\n  return Base as any\n})()\n\n/** @internal */\nexport const StructuralBase: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype\n  return Base as any\n})()\n", "/**\n * @since 2.0.0\n */\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Pipeable {\n  pipe<A, B>(this: A, ab: (_: A) => B): B\n  pipe<A, B, C>(this: A, ab: (_: A) => B, bc: (_: B) => C): C\n  pipe<A, B, C, D>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D): D\n  pipe<A, B, C, D, E>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D, de: (_: D) => E): E\n  pipe<A, B, C, D, E, F>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F\n  ): F\n  pipe<A, B, C, D, E, F, G>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G\n  ): G\n  pipe<A, B, C, D, E, F, G, H>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H\n  ): H\n  pipe<A, B, C, D, E, F, G, H, I>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I\n  ): I\n  pipe<A, B, C, D, E, F, G, H, I, J>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J\n  ): J\n  pipe<A, B, C, D, E, F, G, H, I, J, K>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K\n  ): K\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L\n  ): L\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M\n  ): M\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N\n  ): N\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O\n  ): O\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P\n  ): P\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q\n  ): Q\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R\n  ): R\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S\n  ): S\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T\n  ): T\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n}\n\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = <A>(self: A, args: IArguments): unknown => {\n  switch (args.length) {\n    case 1:\n      return args[0](self)\n    case 2:\n      return args[1](args[0](self))\n    case 3:\n      return args[2](args[1](args[0](self)))\n    case 4:\n      return args[3](args[2](args[1](args[0](self))))\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))))\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))))\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))))\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))))\n    default: {\n      let ret = self\n      for (let i = 0, len = args.length; i < len; i++) {\n        ret = args[i](ret)\n      }\n      return ret\n    }\n  }\n}\n", "/** @internal */\nexport type OP_ASYNC = typeof OP_ASYNC\n\n/** @internal */\nexport const OP_ASYNC = \"Async\" as const\n\n/** @internal */\nexport type OP_COMMIT = typeof OP_COMMIT\n\n/** @internal */\nexport const OP_COMMIT = \"Commit\" as const\n\n/** @internal */\nexport type OP_FAILURE = typeof OP_FAILURE\n\n/** @internal */\nexport const OP_FAILURE = \"Failure\" as const\n\n/** @internal */\nexport type OP_ON_FAILURE = typeof OP_ON_FAILURE\n\n/** @internal */\nexport const OP_ON_FAILURE = \"OnFailure\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS = typeof OP_ON_SUCCESS\n\n/** @internal */\nexport const OP_ON_SUCCESS = \"OnSuccess\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS_AND_FAILURE = typeof OP_ON_SUCCESS_AND_FAILURE\n\n/** @internal */\nexport const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\" as const\n\n/** @internal */\nexport type OP_SUCCESS = typeof OP_SUCCESS\n\n/** @internal */\nexport const OP_SUCCESS = \"Success\" as const\n\n/** @internal */\nexport type OP_SYNC = typeof OP_SYNC\n\n/** @internal */\nexport const OP_SYNC = \"Sync\" as const\n\n/** @internal */\nexport const OP_TAG = \"Tag\" as const\n\n/** @internal */\nexport type OP_TAG = typeof OP_TAG\n\n/** @internal */\nexport type OP_UPDATE_RUNTIME_FLAGS = typeof OP_UPDATE_RUNTIME_FLAGS\n\n/** @internal */\nexport const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\" as const\n\n/** @internal */\nexport type OP_WHILE = typeof OP_WHILE\n\n/** @internal */\nexport const OP_WHILE = \"While\" as const\n\n/** @internal */\nexport type OP_WITH_RUNTIME = typeof OP_WITH_RUNTIME\n\n/** @internal */\nexport const OP_WITH_RUNTIME = \"WithRuntime\" as const\n\n/** @internal */\nexport type OP_YIELD = typeof OP_YIELD\n\n/** @internal */\nexport const OP_YIELD = \"Yield\" as const\n\n/** @internal */\nexport type OP_REVERT_FLAGS = typeof OP_REVERT_FLAGS\n\n/** @internal */\nexport const OP_REVERT_FLAGS = \"RevertFlags\" as const\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\n\nconst TypeId: Option.TypeId = Symbol.for(\"effect/Option\") as Option.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  [NodeInspectSymbol]<A>(this: Option.Option<A>) {\n    return this.toJSON()\n  },\n  toString<A>(this: Option.Option<A>) {\n    return format(this.toJSON())\n  }\n}\n\nconst SomeProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [Equal.symbol]<A>(this: Option.Some<A>, that: unknown): boolean {\n    return isOption(that) && isSome(that) && Equal.equals(this.value, that.value)\n  },\n  [Hash.symbol]<A>(this: Option.Some<A>) {\n    return Hash.cached(this, Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value)))\n  },\n  toJSON<A>(this: Option.Some<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: toJSON(this.value)\n    }\n  }\n})\n\nconst NoneHash = Hash.hash(\"None\")\nconst NoneProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [Equal.symbol]<A>(this: Option.None<A>, that: unknown): boolean {\n    return isOption(that) && isNone(that)\n  },\n  [Hash.symbol]<A>(this: Option.None<A>) {\n    return NoneHash\n  },\n  toJSON<A>(this: Option.None<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    }\n  }\n})\n\n/** @internal */\nexport const isOption = (input: unknown): input is Option.Option<unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isNone = <A>(fa: Option.Option<A>): fa is Option.None<A> => fa._tag === \"None\"\n\n/** @internal */\nexport const isSome = <A>(fa: Option.Option<A>): fa is Option.Some<A> => fa._tag === \"Some\"\n\n/** @internal */\nexport const none: Option.Option<never> = Object.create(NoneProto)\n\n/** @internal */\nexport const some = <A>(value: A): Option.Option<A> => {\n  const a = Object.create(SomeProto)\n  a.value = value\n  return a\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"../Array.js\"\n\n/** @internal */\nexport const isNonEmptyArray = <A>(self: ReadonlyArray<A>): self is NonEmptyArray<A> => self.length > 0\n", "/**\n * @since 2.0.0\n */\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity, isFunction } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Order } from \"./Order.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Option<A> = None<A> | Some<A>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Option\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface None<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"None\"\n  readonly _op: \"None\"\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Some<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Some\"\n  readonly _op: \"Some\"\n  readonly value: A\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface OptionUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Option?: () => A[Unify.typeSymbol] extends Option<infer A0> | infer _ ? Option<A0> : never\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Option {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends Option<any>> = [T] extends [Option<infer _A>] ? _A : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface OptionUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OptionTypeLambda extends TypeLambda {\n  readonly type: Option<this[\"Target\"]>\n}\n\n/**\n * Creates a new `Option` that represents the absence of a value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const none = <A = never>(): Option<A> => option.none\n\n/**\n * Creates a new `Option` that wraps the given value.\n *\n * @param value - The value to wrap.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const some: <A>(value: A) => Option<A> = option.some\n\n/**\n * Tests if a value is a `Option`.\n *\n * @param input - The value to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isOption(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isOption(Option.none()), true)\n * assert.deepStrictEqual(Option.isOption({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isOption: (input: unknown) => input is Option<unknown> = option.isOption\n\n/**\n * Determine if a `Option` is a `None`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isNone(Option.some(1)), false)\n * assert.deepStrictEqual(Option.isNone(Option.none()), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNone: <A>(self: Option<A>) => self is None<A> = option.isNone\n\n/**\n * Determine if a `Option` is a `Some`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isSome(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isSome(Option.none()), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSome: <A>(self: Option<A>) => self is Some<A> = option.isSome\n\n/**\n * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n * function when passed the `Option`'s value.\n *\n * @param self - The `Option` to match\n * @param onNone - The value to be returned if the `Option` is `None`\n * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a some containing 1'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <B, A, C = B>(options: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): (self: Option<A>) => B | C\n  <A, B, C = B>(self: Option<A>, options: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C\n} = dual(\n  2,\n  <A, B, C = B>(self: Option<A>, { onNone, onSome }: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C => isNone(self) ? onNone() : onSome(self.value)\n)\n\n/**\n * Returns a type guard from a `Option` returning function.\n * This function ensures that a type guard definition is type-safe.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parsePositive = (n: number): Option.Option<number> =>\n *   n > 0 ? Option.some(n) : Option.none()\n *\n * const isPositive = Option.toRefinement(parsePositive)\n *\n * assert.deepStrictEqual(isPositive(1), true)\n * assert.deepStrictEqual(isPositive(-1), false)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toRefinement = <A, B extends A>(f: (a: A) => Option<B>): (a: A) => a is B => (a: A): a is B => isSome(f(a))\n\n/**\n * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`\n * if the `Iterable` is not empty, otherwise returns `None`.\n *\n * @param collection - The `Iterable` to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromIterable([1, 2, 3]), Option.some(1))\n * assert.deepStrictEqual(Option.fromIterable([]), Option.none())\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Option<A> => {\n  for (const a of collection) {\n    return some(a)\n  }\n  return none()\n}\n\n/**\n * Converts a `Either` to an `Option` discarding the error.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Option.getRight(Either.left('err')), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getLeft(Either.right(\"ok\")), Option.none())\n * assert.deepStrictEqual(Option.getLeft(Either.left(\"a\")), Option.some(\"a\"))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n *\n * @param self - The `Option` to get the value of.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => B | A\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B => isNone(self) ? onNone() : self.value\n)\n\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.none()\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<B | A>\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B> => isNone(self) ? that() : self\n)\n\n/**\n * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseSome: {\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => Option<B | A>\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B> => isNone(self) ? some(onNone()) : self\n)\n\n/**\n * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n * which contains information about which of the two `Option`s has been chosen.\n *\n * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The second `Option` to be considered if the first `Option` is `None`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseEither: {\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<Either<B, A>>\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>> =>\n    isNone(self) ? map(that(), either.right) : map(self, either.left)\n)\n\n/**\n * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.\n *\n * @param collection - An iterable collection of `Option` to be searched.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.firstSomeOf([Option.none(), Option.some(1), Option.some(2)]), Option.some(1))\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const firstSomeOf = <T, C extends Iterable<Option<T>> = Iterable<Option<T>>>(\n  collection: C\n): [C] extends [Iterable<Option<infer A>>] ? Option<A> : never => {\n  let out: Option<unknown> = none()\n  for (out of collection) {\n    if (isSome(out)) {\n      return out as any\n    }\n  }\n  return out as any\n}\n\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @param nullableValue - The nullable value to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromNullable(undefined), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(null), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(1), Option.some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(\n  nullableValue: A\n): Option<\n  NonNullable<A>\n> => (nullableValue == null ? none() : some(nullableValue as NonNullable<A>))\n\n/**\n * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * assert.deepStrictEqual(parseOption('1'), Option.some(1))\n * assert.deepStrictEqual(parseOption('not a number'), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftNullable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Option<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrNull(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrNull(Option.none()), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <A>(self: Option<A>) => A | null = getOrElse(constNull)\n\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrUndefined(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrUndefined(Option.none()), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A>(self: Option<A>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.\n *\n * This function is useful for any function that might throw an exception, allowing the developer to handle\n * the exception in a more functional way.\n *\n * @param f - the function that can throw exceptions.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * assert.deepStrictEqual(parse(\"1\"), Option.some(1))\n * assert.deepStrictEqual(parse(\"\"), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftThrowable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B\n): (...a: A) => Option<B> =>\n(...a) => {\n  try {\n    return some(f(...a))\n  } catch (e) {\n    return none()\n  }\n}\n\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Option` to extract the value from.\n * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  (onNone: () => unknown): <A>(self: Option<A>) => A\n  <A>(self: Option<A>, onNone: () => unknown): A\n} = dual(2, <A>(self: Option<A>, onNone: () => unknown): A => {\n  if (isSome(self)) {\n    return self.value\n  }\n  throw onNone()\n})\n\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Option` to extract the value from.\n * @throws `Error(\"getOrThrow called on a None\")`\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrow: <A>(self: Option<A>) => A = getOrThrowWith(() => new Error(\"getOrThrow called on a None\"))\n\n/**\n * Maps the `Some` side of an `Option` value to a new `Option` value.\n *\n * @param self - An `Option` to map\n * @param f - The function to map over the value of the `Option`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B> => isNone(self) ? none() : some(f(self.value))\n)\n\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const as: {\n  <B>(b: B): <X>(self: Option<X>) => Option<B>\n} = dual(2, <X, B>(self: Option<X>, b: B): Option<B> => map(self, () => b))\n\n/**\n * Maps the `Some` value of this `Option` to the `void` constant value.\n *\n * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asVoid: <_>(self: Option<_>) => Option<void> = as(undefined)\n\nconst void_: Option<void> = some(undefined)\nexport {\n  /**\n   * @since 2.0.0\n   */\n  void_ as void\n}\n\n/**\n * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  <B>(f: Option<B>): <A>(self: Option<A>) => Option<B>\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  <B>(f: NotFunction<B>): <A>(self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n  <A, B>(self: Option<A>, f: Option<B>): Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n  <A, B>(self: Option<A>, f: NotFunction<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B> | Option<B>): Option<B> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isOption(b) ? b : some(b)\n    })\n)\n\n/**\n * This is `flatMap` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee1),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee2),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.none()\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  <A, B>(f: (a: A) => B | null | undefined): (self: Option<A>) => Option<NonNullable<B>>\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>> =>\n    isNone(self) ? none() : fromNullable(f(self.value))\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <A>(self: Option<Option<A>>) => Option<A> = flatMap(identity)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipRight: {\n  <B>(that: Option<B>): <_>(self: Option<_>) => Option<B>\n  <X, B>(self: Option<X>, that: Option<B>): Option<B>\n} = dual(2, <X, B>(self: Option<X>, that: Option<B>): Option<B> => flatMap(self, () => that))\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const composeK: {\n  <B, C>(bfc: (b: B) => Option<C>): <A>(afb: (a: A) => Option<B>) => (a: A) => Option<C>\n  <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>): (a: A) => Option<C>\n} = dual(2, <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>) => (a: A): Option<C> => flatMap(afb(a), bfc))\n\n/**\n * Sequences the specified `that` `Option` but ignores its value.\n *\n * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n *\n * @param that - The `Option` that will be ignored in the chain and discarded\n * @param self - The `Option` we care about\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipLeft: {\n  <_>(that: Option<_>): <A>(self: Option<A>) => Option<A>\n  <A, X>(self: Option<A>, that: Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, that: Option<X>): Option<A> => tap(self, () => that))\n\n/**\n * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n * unless `f` returns `None`, in which case it returns `None`.\n *\n * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n *\n * @param f - Function to apply to the value of the `Option` if it is `Some`\n * @param self - The `Option` to apply the function to\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const tap: {\n  <A, X>(f: (a: A) => Option<X>): (self: Option<A>) => Option<A>\n  <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A> => flatMap(self, (a) => map(f(a), () => a)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = <A, B>(self: Option<A>, that: Option<B>): Option<[A, B]> =>\n  isSome(self) && isSome(that) ? some([self.value, that.value]) : none()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Option<A>,\n  collection: Iterable<Option<A>>\n): Option<[A, ...Array<A>]> => {\n  if (isNone(self)) {\n    return none()\n  }\n  const out: [A, ...Array<A>] = [self.value]\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none()\n    }\n    out.push(o.value)\n  }\n  return some(out)\n}\n\n/**\n * Takes a structure of `Option`s and returns an `Option` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Option` will contain an array.\n *\n * @param fields - the struct of `Option`s to be sequenced.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.all([Option.some(1), Option.some(2)]), Option.some([1, 2]))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.some(\"hello\") }), Option.some({ a: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.none() }), Option.none())\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Option<any>> | Record<string, Option<any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Option<any>>] ? Option<\n    { -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }\n  >\n  : [I] extends [Iterable<Option<infer A>>] ? Option<Array<A>>\n  : Option<{ -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }> = (\n    input: Iterable<Option<any>> | Record<string, Option<any>>\n  ): Option<any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Option<any>> = []\n      for (const o of (input as Iterable<Option<any>>)) {\n        if (isNone(o)) {\n          return none()\n        }\n        out.push(o.value)\n      }\n      return some(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const o = input[key]\n      if (isNone(o)) {\n        return none()\n      }\n      out[key] = o.value\n    }\n    return some(out)\n  }\n\n/**\n * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n *\n * @param self - The left-hand side of the zip operation\n * @param that - The right-hand side of the zip operation\n * @param f - The function used to combine the values of the two `Option`s\n *\n * @example\n * import { Option } from \"effect\"\n *\n * type Complex = [real: number, imaginary: number]\n *\n * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n *\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n *\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  <B, A, C>(that: Option<B>, f: (a: A, b: B) => C): (self: Option<A>) => Option<C>\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C>\n} = dual(\n  3,\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C> =>\n    map(product(self, that), ([a, b]) => f(a, b))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  <A>(that: Option<A>): <B>(self: Option<(a: A) => B>) => Option<B>\n  <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B>\n} = dual(2, <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B> => zipWith(self, that, (f, a) => f(a)))\n\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n *\n * @param self - The Iterable of `Option<A>` to be reduced.\n * @param b - The initial value of the accumulator.\n * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceCompact: {\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<Option<A>>) => B\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B => {\n    let out: B = b\n    for (const oa of self) {\n      if (isSome(oa)) {\n        out = f(out, oa.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Transforms an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, the value is wrapped in an array.\n *\n * @param self - The `Option` to convert to an array.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.toArray(Option.some(1)), [1])\n * assert.deepStrictEqual(Option.toArray(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: Option<A>): Array<A> => isNone(self) ? [] : [self.value]\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Option<A>) => [left: Option<B>, right: Option<C>]\n  <A, B, C>(self: Option<A>, f: (a: A) => Either<C, B>): [left: Option<B>, right: Option<C>]\n} = dual(2, <A, B, C>(\n  self: Option<A>,\n  f: (a: A) => Either<C, B>\n): [excluded: Option<B>, satisfying: Option<C>] => {\n  if (isNone(self)) {\n    return [none(), none()]\n  }\n  const e = f(self.value)\n  return either.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)]\n})\n\n/**\n * Maps over the value of an `Option` and filters out `None`s.\n *\n * Useful when in addition to filtering you also want to change the type of the `Option`.\n *\n * @param self - The `Option` to map over.\n * @param f - A function to apply to the value of the `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @param predicate - A predicate function to apply to the `Option` value.\n * @param fb - The `Option` to filter.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * // predicate\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n *\n * // refinement\n * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => Option<A>\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): Option<B>\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A>\n} = dual(\n  2,\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A> =>\n    filterMap(self, (b) => (predicate(b) ? option.some(b) : option.none))\n)\n\n/**\n * @example\n * import { Option, Number } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.none()), true)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.some(1)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.none()), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(2)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(1)), true)\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Option<A>> =>\n  Equivalence.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value))\n\n/**\n * The `Order` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Order` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * const O = Option.getOrder(Number.Order)\n * assert.deepStrictEqual(O(Option.none(), Option.none()), 0)\n * assert.deepStrictEqual(O(Option.none(), Option.some(1)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.none()), 1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(2)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(1)), 0)\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const getOrder = <A>(O: Order<A>): Order<Option<A>> =>\n  order.make((self, that) => isSome(self) ? (isSome(that) ? O(self.value, that.value) : 1) : -1)\n\n/**\n * Lifts a binary function into `Option`.\n *\n * @param f - The function to lift.\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const lift2 = <A, B, C>(f: (a: A, b: B) => C): {\n  (that: Option<B>): (self: Option<A>) => Option<C>\n  (self: Option<A>, that: Option<B>): Option<C>\n} => dual(2, (self: Option<A>, that: Option<B>): Option<C> => zipWith(self, that, f))\n\n/**\n * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n * if the predicate returns `false`.\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getOption = Option.liftPredicate((n: number) => n >= 0)\n *\n * assert.deepStrictEqual(getOption(-1), Option.none())\n * assert.deepStrictEqual(getOption(1), Option.some(1))\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>\n  <B extends A, A = B>(predicate: Predicate<A>): (b: B) => Option<B>\n  <A, B extends A>(\n    self: A,\n    refinement: Refinement<A, B>\n  ): Option<B>\n  <B extends A, A = B>(\n    self: B,\n    predicate: Predicate<A>\n  ): Option<B>\n} = dual(\n  2,\n  <B extends A, A = B>(b: B, predicate: Predicate<A>): Option<B> => predicate(b) ? some(b) : none()\n)\n\n/**\n * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.\n *\n * @param equivalent - An `Equivalence` instance to compare values of the `Option`.\n * @param self - The `Option` to apply the comparison to.\n * @param a - The value to compare against the `Option`.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.containsWith(Number.Equivalence)(2)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.containsWith(Number.Equivalence)(2)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.containsWith(Number.Equivalence)(2)), false)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Option<A>) => boolean\n  (self: Option<A>, a: A): boolean\n} => dual(2, (self: Option<A>, a: A): boolean => isNone(self) ? false : isEquivalent(self.value, a))\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  <A>(a: A): (self: Option<A>) => boolean\n  <A>(self: Option<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Check if a value in an `Option` type meets a certain predicate.\n *\n * @param self - The `Option` to check.\n * @param predicate - The condition to check.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n *\n * @since 2.0.0\n */\nexport const exists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => self is Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => boolean\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B>\n  <A>(self: Option<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B> =>\n    isNone(self) ? false : refinement(self.value)\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  <N extends string>(name: N): <A>(self: Option<A>) => Option<{ [K in N]: A }>\n  <A, N extends string>(self: Option<A>, name: N): Option<{ [K in N]: A }>\n} = doNotation.bindTo<OptionTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<OptionTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Option<B>\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Option<B>\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<OptionTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Option<{}> = some({})\n\nconst adapter = Gen.adapter<OptionTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<OptionTypeLambda, Gen.Adapter<OptionTypeLambda>> = (...args) => {\n  let f: any\n  if (args.length === 1) {\n    f = args[0]\n  } else {\n    f = args[1].bind(args[0])\n  }\n  const iterator = f(adapter)\n  let state: IteratorYieldResult<any> | IteratorReturnResult<any> = iterator.next()\n  if (state.done) {\n    return some(state.value)\n  } else {\n    let current = state.value\n    if (Gen.isGenKind(current)) {\n      current = current.value\n    } else {\n      current = Gen.yieldWrapGet(current)\n    }\n    if (isNone(current)) {\n      return current\n    }\n    while (!state.done) {\n      state = iterator.next(current.value as never)\n      if (!state.done) {\n        current = state.value\n        if (Gen.isGenKind(current)) {\n          current = current.value\n        } else {\n          current = Gen.yieldWrapGet(current)\n        }\n        if (isNone(current)) {\n          return current\n        }\n      }\n    }\n    return some(state.value)\n  }\n}\n", "/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Order<in A> {\n  (self: A, that: A): -1 | 0 | 1\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OrderTypeLambda extends TypeLambda {\n  readonly type: Order<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(\n  compare: (self: A, that: A) => -1 | 0 | 1\n): Order<A> =>\n(self, that) => self === that ? 0 : compare(self, that)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Order<string> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Order<number> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Order<boolean> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Order<bigint> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @since 2.0.0\n */\nexport const reverse = <A>(O: Order<A>): Order<A> => make((self, that) => O(that, self))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  <A>(that: Order<A>): (self: Order<A>) => Order<A>\n  <A>(self: Order<A>, that: Order<A>): Order<A>\n} = dual(2, <A>(self: Order<A>, that: Order<A>): Order<A> =>\n  make((a1, a2) => {\n    const out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    return that(a1, a2)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<A>\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A>\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A> =>\n  make((a1, a2) => {\n    let out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    for (const O of collection) {\n      out = O(a1, a2)\n      if (out !== 0) {\n        return out\n      }\n    }\n    return out\n  }))\n\n/**\n * @since 2.0.0\n */\nexport const empty = <A>(): Order<A> => make(() => 0)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Order<A>>): Order<A> => combineMany(empty(), collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Order<A>) => Order<B>\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B>\n} = dual(\n  2,\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B> => make((b1, b2) => self(f(b1), f(b2)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Order<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Order<B>): <A>(self: Order<A>) => Order<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> // readonly because invariant\n} = dual(2, <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> =>\n  make(([xa, xb], [ya, yb]) => {\n    const o = self(xa, ya)\n    return o !== 0 ? o : that(xb, yb)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Order<A>>): Order<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n    let collectionLength = 0\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      const o = O(x[collectionLength], y[collectionLength])\n      if (o !== 0) {\n        return o\n      }\n      collectionLength++\n    }\n    return 0\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<readonly [A, ...Array<A>]> // readonly because invariant\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> // readonly because invariant\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> => {\n  const O = all(collection)\n  return make((x, y) => {\n    const o = self(x[0], y[0])\n    return o !== 0 ? o : O(x.slice(1), y.slice(1))\n  })\n})\n\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Order<any>>>(\n  ...elements: T\n): Order<Readonly<{ [I in keyof T]: [T[I]] extends [Order<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(O: Order<A>): Order<ReadonlyArray<A>> =>\n  make((self, that) => {\n    const aLen = self.length\n    const bLen = that.length\n    const len = Math.min(aLen, bLen)\n    for (let i = 0; i < len; i++) {\n      const o = O(self[i], that[i])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return number(aLen, bLen)\n  })\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends { readonly [x: string]: Order<any> }>(\n  fields: R\n): Order<{ [K in keyof R]: [R[K]] extends [Order<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return 0\n  })\n}\n\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === -1)\n\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === 1)\n\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== 1)\n\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== -1)\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) < 1 ? self : that)\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) > -1 ? self : that)\n\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => A\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): A\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): A => min(O)(options.maximum, max(O)(options.minimum, self))\n  )\n\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => boolean\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): boolean\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): boolean => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)\n  )\n", "/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as order from \"./Order.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface TupleTypeLambda extends TypeLambda {\n  readonly type: [this[\"Out1\"], this[\"Target\"]]\n}\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @param elements - The list of elements to create the tuple from.\n *\n * @example\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A extends ReadonlyArray<any>>(...elements: A): A => elements\n\n/**\n * Return the first element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getFirst = <L, R>(self: readonly [L, R]): L => self[0]\n\n/**\n * Return the second element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getSecond = <L, R>(self: readonly [L, R]): R => self[1]\n\n/**\n * Transforms both elements of a tuple using the given functions.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n * @param g - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  <L1, L2, R1, R2>(options: {\n    readonly onFirst: (e: L1) => L2\n    readonly onSecond: (a: R1) => R2\n  }): (self: readonly [L1, R1]) => [L2, R2]\n  <L1, R1, L2, R2>(self: readonly [L1, R1], options: {\n    readonly onFirst: (e: L1) => L2\n    readonly onSecond: (a: R1) => R2\n  }): [L2, R2]\n} = dual(\n  2,\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    { onFirst, onSecond }: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2] => [onFirst(self[0]), onSecond(self[1])]\n)\n\n/**\n * Transforms the first component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n *\n * @example\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapFirst: {\n  <L1, L2>(f: (left: L1) => L2): <R>(self: readonly [L1, R]) => [L2, R]\n  <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R]\n} = dual(2, <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R] => [f(self[0]), self[1]])\n\n/**\n * Transforms the second component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapSecond: {\n  <R1, R2>(f: (right: R1) => R2): <L>(self: readonly [L, R1]) => [L, R2]\n  <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2]\n} = dual(2, <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2] => [self[0], f(self[1])])\n\n/**\n * Swaps the two elements of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n *\n * @since 2.0.0\n */\nexport const swap = <L, R>(self: readonly [L, R]): [R, L] => [self[1], self[0]]\n\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getEquivalence: <T extends ReadonlyArray<Equivalence.Equivalence<any>>>(\n  ...isEquivalents: T\n) => Equivalence.Equivalence<\n  Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence.Equivalence<infer A>] ? A : never }>\n> = Equivalence.tuple\n\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getOrder: <T extends ReadonlyArray<order.Order<any>>>(\n  ...elements: T\n) => order.Order<{ [I in keyof T]: [T[I]] extends [order.Order<infer A>] ? A : never }> = order.tuple\n\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendElement: {\n  <B>(that: B): <A extends ReadonlyArray<unknown>>(self: A) => [...A, B]\n  <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B]\n} = dual(2, <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B] => [...self, that])\n\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @param self - A tuple from which to retrieve the element.\n * @param index - The index of the element to retrieve.\n *\n * @example\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n *\n * @category getters\n * @since 3.4.0\n */\nexport const at: {\n  <N extends number>(index: N): <A extends ReadonlyArray<unknown>>(self: A) => A[N]\n  <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N]\n} = dual(2, <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N] => self[index])\n\nexport {\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n   *\n   * @example\n   * import { isTupleOf } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOf,\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n   *\n   * @example\n   * import { isTupleOfAtLeast } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOfAtLeast\n} from \"./Predicate.js\"\n", "/**\n * This module provides utility functions and type class instances for working with the `boolean` type in TypeScript.\n * It includes functions for basic boolean operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nimport * as equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport * as order from \"./Order.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean: (input: unknown) => input is boolean = predicate.isBoolean\n\n/**\n * This function returns the result of either of the given functions depending on the value of the boolean parameter.\n * It is useful when you have to run one of two functions depending on the boolean value.\n *\n * @param value - the boolean value that decides which function will be executed.\n * @param onFalse - a lazy evaluation function that will be executed when the `value` is `false`.\n * @param onTrue - a lazy evaluation function that will be executed when the `value` is `true`.\n *\n * @example\n * import { Boolean } from \"effect\"\n *\n * assert.deepStrictEqual(Boolean.match(true, { onFalse: () => \"It's false!\", onTrue: () => \"It's true!\" }), \"It's true!\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  <A, B = A>(options: {\n    readonly onFalse: LazyArg<A>\n    readonly onTrue: LazyArg<B>\n  }): (value: boolean) => A | B\n  <A, B>(value: boolean, options: {\n    readonly onFalse: LazyArg<A>\n    readonly onTrue: LazyArg<B>\n  }): A | B\n} = dual(2, <A, B>(value: boolean, options: {\n  readonly onFalse: LazyArg<A>\n  readonly onTrue: LazyArg<B>\n}): A | B => value ? options.onTrue() : options.onFalse())\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<boolean> = equivalence.boolean\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<boolean> = order.boolean\n\n/**\n * Negates the given boolean: `!self`\n *\n * @example\n * import { not } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(not(true), false)\n * assert.deepStrictEqual(not(false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = (self: boolean): boolean => !self\n\n/**\n * Combines two boolean using AND: `self && that`.\n *\n * @example\n * import { and } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(and(true, true), true)\n * assert.deepStrictEqual(and(true, false), false)\n * assert.deepStrictEqual(and(false, true), false)\n * assert.deepStrictEqual(and(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => self && that)\n\n/**\n * Combines two boolean using NAND: `!(self && that)`.\n *\n * @example\n * import { nand } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(nand(true, true), false)\n * assert.deepStrictEqual(nand(true, false), true)\n * assert.deepStrictEqual(nand(false, true), true)\n * assert.deepStrictEqual(nand(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !(self && that))\n\n/**\n * Combines two boolean using OR: `self || that`.\n *\n * @example\n * import { or } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(or(true, true), true)\n * assert.deepStrictEqual(or(true, false), true)\n * assert.deepStrictEqual(or(false, true), true)\n * assert.deepStrictEqual(or(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => self || that)\n\n/**\n * Combines two booleans using NOR: `!(self || that)`.\n *\n * @example\n * import { nor } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(nor(true, true), false)\n * assert.deepStrictEqual(nor(true, false), false)\n * assert.deepStrictEqual(nor(false, true), false)\n * assert.deepStrictEqual(nor(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !(self || that))\n\n/**\n * Combines two booleans using XOR: `(!self && that) || (self && !that)`.\n *\n * @example\n * import { xor } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(xor(true, true), false)\n * assert.deepStrictEqual(xor(true, false), true)\n * assert.deepStrictEqual(xor(false, true), true)\n * assert.deepStrictEqual(xor(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => (!self && that) || (self && !that))\n\n/**\n * Combines two booleans using EQV (aka XNOR): `!xor(self, that)`.\n *\n * @example\n * import { eqv } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(eqv(true, true), true)\n * assert.deepStrictEqual(eqv(true, false), false)\n * assert.deepStrictEqual(eqv(false, true), false)\n * assert.deepStrictEqual(eqv(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !xor(self, that))\n\n/**\n * Combines two booleans using an implication: `(!self || that)`.\n *\n * @example\n * import { implies } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(implies(true, true), true)\n * assert.deepStrictEqual(implies(true, false), false)\n * assert.deepStrictEqual(implies(false, true), true)\n * assert.deepStrictEqual(implies(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  (that: boolean): (self: boolean) => boolean\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self, that) => self ? that : true)\n\n/**\n * This utility function is used to check if all the elements in a collection of boolean values are `true`.\n *\n * @param collection - An iterable collection of booleans.\n *\n * @example\n * import { every } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(every([true, true, true]), true)\n * assert.deepStrictEqual(every([true, false, true]), false)\n *\n * @since 2.0.0\n */\nexport const every = (collection: Iterable<boolean>): boolean => {\n  for (const b of collection) {\n    if (!b) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * This utility function is used to check if at least one of the elements in a collection of boolean values is `true`.\n *\n * @param collection - An iterable collection of booleans.\n *\n * @example\n * import { some } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(some([true, false, true]), true)\n * assert.deepStrictEqual(some([false, false, false]), false)\n *\n * @since 2.0.0\n */\nexport const some = (collection: Iterable<boolean>): boolean => {\n  for (const b of collection) {\n    if (b) {\n      return true\n    }\n  }\n  return false\n}\n", "import type * as Cache from \"../Cache.js\"\nimport type * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Exit from \"../Exit.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as MutableHashMap from \"../MutableHashMap.js\"\nimport * as MutableQueue from \"../MutableQueue.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as Data from \"./data.js\"\nimport { none } from \"./fiberId.js\"\nimport * as fiberRuntime from \"./fiberRuntime.js\"\n\n/**\n * A `MapValue` represents a value in the cache. A value may either be\n * `Pending` with a `Promise` that will contain the result of computing the\n * lookup function, when it is available, or `Complete` with an `Exit` value\n * that contains the result of computing the lookup function.\n *\n * @internal\n */\nexport type MapValue<Key, Value, Error> =\n  | Complete<Key, Value, Error>\n  | Pending<Key, Value, Error>\n  | Refreshing<Key, Value, Error>\n\n/** @internal */\nexport interface Complete<out Key, out Value, out Error> {\n  readonly _tag: \"Complete\"\n  readonly key: MapKey<Key>\n  readonly exit: Exit.Exit<Value, Error>\n  readonly entryStats: Cache.EntryStats\n  readonly timeToLiveMillis: number\n}\n\n/** @internal */\nexport interface Pending<out Key, in out Value, in out Error> {\n  readonly _tag: \"Pending\"\n  readonly key: MapKey<Key>\n  readonly deferred: Deferred.Deferred<Value, Error>\n}\n\n/** @internal */\nexport interface Refreshing<out Key, in out Value, in out Error> {\n  readonly _tag: \"Refreshing\"\n  readonly deferred: Deferred.Deferred<Value, Error>\n  readonly complete: Complete<Key, Value, Error>\n}\n\n/** @internal */\nexport const complete = <Key, Value, Error>(\n  key: MapKey<Key>,\n  exit: Exit.Exit<Value, Error>,\n  entryStats: Cache.EntryStats,\n  timeToLiveMillis: number\n): MapValue<Key, Value, Error> =>\n  Data.struct({\n    _tag: \"Complete\" as const,\n    key,\n    exit,\n    entryStats,\n    timeToLiveMillis\n  })\n\n/** @internal */\nexport const pending = <Key, Value, Error>(\n  key: MapKey<Key>,\n  deferred: Deferred.Deferred<Value, Error>\n): MapValue<Key, Value, Error> =>\n  Data.struct({\n    _tag: \"Pending\" as const,\n    key,\n    deferred\n  })\n\n/** @internal */\nexport const refreshing = <Key, Value, Error>(\n  deferred: Deferred.Deferred<Value, Error>,\n  complete: Complete<Key, Value, Error>\n): MapValue<Key, Value, Error> =>\n  Data.struct({\n    _tag: \"Refreshing\" as const,\n    deferred,\n    complete\n  })\n\n/** @internal */\nexport const MapKeyTypeId = Symbol.for(\"effect/Cache/MapKey\")\n\n/** @internal */\nexport type MapKeyTypeId = typeof MapKeyTypeId\n\n/**\n * A `MapKey` represents a key in the cache. It contains mutable references\n * to the previous key and next key in the `KeySet` to support an efficient\n * implementation of a sorted set of keys.\n *\n * @internal\n */\nexport interface MapKey<out K> extends Equal.Equal {\n  readonly [MapKeyTypeId]: MapKeyTypeId\n  readonly current: K\n  previous: MapKey<K> | undefined // mutable by design\n  next: MapKey<K> | undefined // mutable by design\n}\n\nclass MapKeyImpl<out K> implements MapKey<K> {\n  readonly [MapKeyTypeId]: MapKeyTypeId = MapKeyTypeId\n  previous: MapKey<K> | undefined = undefined\n  next: MapKey<K> | undefined = undefined\n  constructor(readonly current: K) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(this.current),\n      Hash.combine(Hash.hash(this.previous)),\n      Hash.combine(Hash.hash(this.next)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    if (this === that) {\n      return true\n    }\n    return isMapKey(that) &&\n      Equal.equals(this.current, that.current) &&\n      Equal.equals(this.previous, that.previous) &&\n      Equal.equals(this.next, that.next)\n  }\n}\n\n/** @internal */\nexport const makeMapKey = <K>(current: K): MapKey<K> => new MapKeyImpl(current)\n\n/** @internal */\nexport const isMapKey = (u: unknown): u is MapKey<unknown> => hasProperty(u, MapKeyTypeId)\n\n/**\n * A `KeySet` is a sorted set of keys in the cache ordered by last access.\n * For efficiency, the set is implemented in terms of a doubly linked list\n * and is not safe for concurrent access.\n *\n * @internal\n */\nexport interface KeySet<in out K> {\n  head: MapKey<K> | undefined // mutable by design\n  tail: MapKey<K> | undefined // mutable by design\n  /**\n   * Adds the specified key to the set.\n   */\n  add(key: MapKey<K>): void\n  /**\n   * Removes the lowest priority key from the set.\n   */\n  remove(): MapKey<K> | undefined\n}\n\nclass KeySetImpl<in out K> implements KeySet<K> {\n  head: MapKey<K> | undefined = undefined\n  tail: MapKey<K> | undefined = undefined\n  add(key: MapKey<K>): void {\n    if (key !== this.tail) {\n      if (this.tail === undefined) {\n        this.head = key\n        this.tail = key\n      } else {\n        const previous = key.previous\n        const next = key.next\n        if (next !== undefined) {\n          key.next = undefined\n          if (previous !== undefined) {\n            previous.next = next\n            next.previous = previous\n          } else {\n            this.head = next\n            this.head.previous = undefined\n          }\n        }\n        this.tail.next = key\n        key.previous = this.tail\n        this.tail = key\n      }\n    }\n  }\n  remove(): MapKey<K> | undefined {\n    const key = this.head\n    if (key !== undefined) {\n      const next = key.next\n      if (next !== undefined) {\n        key.next = undefined\n        this.head = next\n        this.head.previous = undefined\n      } else {\n        this.head = undefined\n        this.tail = undefined\n      }\n    }\n    return key\n  }\n}\n\n/** @internal */\nexport const makeKeySet = <K>(): KeySet<K> => new KeySetImpl<K>()\n\n/**\n * The `CacheState` represents the mutable state underlying the cache.\n *\n * @internal\n */\nexport interface CacheState<in out Key, in out Value, in out Error> {\n  map: MutableHashMap.MutableHashMap<Key, MapValue<Key, Value, Error>> // mutable by design\n  keys: KeySet<Key> // mutable by design\n  accesses: MutableQueue.MutableQueue<MapKey<Key>> // mutable by design\n  updating: MutableRef.MutableRef<boolean> // mutable by design\n  hits: number // mutable by design\n  misses: number // mutable by design\n}\n\n/**\n * Constructs a new `CacheState` from the specified values.\n *\n * @internal\n */\nexport const makeCacheState = <Key, Value, Error>(\n  map: MutableHashMap.MutableHashMap<Key, MapValue<Key, Value, Error>>,\n  keys: KeySet<Key>,\n  accesses: MutableQueue.MutableQueue<MapKey<Key>>,\n  updating: MutableRef.MutableRef<boolean>,\n  hits: number,\n  misses: number\n): CacheState<Key, Value, Error> => ({\n  map,\n  keys,\n  accesses,\n  updating,\n  hits,\n  misses\n})\n\n/**\n * Constructs an initial cache state.\n *\n * @internal\n */\nexport const initialCacheState = <Key, Value, Error>(): CacheState<Key, Value, Error> =>\n  makeCacheState(\n    MutableHashMap.empty(),\n    makeKeySet(),\n    MutableQueue.unbounded(),\n    MutableRef.make(false),\n    0,\n    0\n  )\n\n/** @internal */\nconst CacheSymbolKey = \"effect/Cache\"\n\n/** @internal */\nexport const CacheTypeId: Cache.CacheTypeId = Symbol.for(\n  CacheSymbolKey\n) as Cache.CacheTypeId\n\nconst cacheVariance = {\n  /* c8 ignore next */\n  _Key: (_: any) => _,\n  /* c8 ignore next */\n  _Error: (_: never) => _,\n  /* c8 ignore next */\n  _Value: (_: never) => _\n}\n\n/** @internal */\nexport const makeCacheStats = (\n  options: {\n    readonly hits: number\n    readonly misses: number\n    readonly size: number\n  }\n): Cache.CacheStats => options\n\n/** @internal */\nexport const makeEntryStats = (loadedMillis: number): Cache.EntryStats => ({\n  loadedMillis\n})\n\nclass CacheImpl<in out Key, in out Value, in out Error> implements Cache.Cache<Key, Value, Error> {\n  readonly [CacheTypeId] = cacheVariance\n  readonly cacheState: CacheState<Key, Value, Error>\n  constructor(\n    readonly capacity: number,\n    readonly context: Context.Context<any>,\n    readonly fiberId: FiberId.FiberId,\n    readonly lookup: Cache.Lookup<Key, Value, Error, any>,\n    readonly timeToLive: (exit: Exit.Exit<Value, Error>) => Duration.DurationInput\n  ) {\n    this.cacheState = initialCacheState()\n  }\n\n  get(key: Key): Effect.Effect<Value, Error> {\n    return core.map(this.getEither(key), Either.merge)\n  }\n\n  get cacheStats(): Effect.Effect<Cache.CacheStats> {\n    return core.sync(() =>\n      makeCacheStats({\n        hits: this.cacheState.hits,\n        misses: this.cacheState.misses,\n        size: MutableHashMap.size(this.cacheState.map)\n      })\n    )\n  }\n\n  getOption(key: Key): Effect.Effect<Option.Option<Value>, Error> {\n    return core.suspend(() =>\n      Option.match(MutableHashMap.get(this.cacheState.map, key), {\n        onNone: () => {\n          const mapKey = makeMapKey(key)\n          this.trackAccess(mapKey)\n          this.trackMiss()\n          return core.succeed(Option.none<Value>())\n        },\n        onSome: (value) => this.resolveMapValue(value)\n      })\n    )\n  }\n\n  getOptionComplete(key: Key): Effect.Effect<Option.Option<Value>> {\n    return core.suspend(() =>\n      Option.match(MutableHashMap.get(this.cacheState.map, key), {\n        onNone: () => {\n          const mapKey = makeMapKey(key)\n          this.trackAccess(mapKey)\n          this.trackMiss()\n          return core.succeed(Option.none<Value>())\n        },\n        onSome: (value) => this.resolveMapValue(value, true) as Effect.Effect<Option.Option<Value>>\n      })\n    )\n  }\n\n  contains(key: Key): Effect.Effect<boolean> {\n    return core.sync(() => MutableHashMap.has(this.cacheState.map, key))\n  }\n\n  entryStats(key: Key): Effect.Effect<Option.Option<Cache.EntryStats>> {\n    return core.sync(() => {\n      const option = MutableHashMap.get(this.cacheState.map, key)\n      if (Option.isSome(option)) {\n        switch (option.value._tag) {\n          case \"Complete\": {\n            const loaded = option.value.entryStats.loadedMillis\n            return Option.some(makeEntryStats(loaded))\n          }\n          case \"Pending\": {\n            return Option.none()\n          }\n          case \"Refreshing\": {\n            const loaded = option.value.complete.entryStats.loadedMillis\n            return Option.some(makeEntryStats(loaded))\n          }\n        }\n      }\n      return Option.none()\n    })\n  }\n\n  getEither(key: Key): Effect.Effect<Either.Either<Value, Value>, Error> {\n    return core.suspend((): Effect.Effect<Either.Either<Value, Value>, Error> => {\n      const k = key\n      let mapKey: MapKey<Key> | undefined = undefined\n      let deferred: Deferred.Deferred<Value, Error> | undefined = undefined\n      let value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n      if (value === undefined) {\n        deferred = Deferred.unsafeMake<Value, Error>(this.fiberId)\n        mapKey = makeMapKey(k)\n        if (MutableHashMap.has(this.cacheState.map, k)) {\n          value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n        } else {\n          MutableHashMap.set(this.cacheState.map, k, pending(mapKey, deferred))\n        }\n      }\n      if (value === undefined) {\n        this.trackAccess(mapKey!)\n        this.trackMiss()\n        return core.map(this.lookupValueOf(key, deferred!), Either.right)\n      } else {\n        return core.flatMap(\n          this.resolveMapValue(value),\n          Option.match({\n            onNone: () => this.getEither(key),\n            onSome: (value) => core.succeed(Either.left(value))\n          })\n        )\n      }\n    })\n  }\n\n  invalidate(key: Key): Effect.Effect<void> {\n    return core.sync(() => {\n      MutableHashMap.remove(this.cacheState.map, key)\n    })\n  }\n\n  invalidateWhen(key: Key, when: (value: Value) => boolean): Effect.Effect<void> {\n    return core.sync(() => {\n      const value = MutableHashMap.get(this.cacheState.map, key)\n      if (Option.isSome(value) && value.value._tag === \"Complete\") {\n        if (value.value.exit._tag === \"Success\") {\n          if (when(value.value.exit.value)) {\n            MutableHashMap.remove(this.cacheState.map, key)\n          }\n        }\n      }\n    })\n  }\n\n  get invalidateAll(): Effect.Effect<void> {\n    return core.sync(() => {\n      this.cacheState.map = MutableHashMap.empty()\n    })\n  }\n\n  refresh(key: Key): Effect.Effect<void, Error> {\n    return effect.clockWith((clock) =>\n      core.suspend(() => {\n        const k = key\n        const deferred: Deferred.Deferred<Value, Error> = Deferred.unsafeMake(this.fiberId)\n        let value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n        if (value === undefined) {\n          if (MutableHashMap.has(this.cacheState.map, k)) {\n            value = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n          } else {\n            MutableHashMap.set(this.cacheState.map, k, pending(makeMapKey(k), deferred))\n          }\n        }\n        if (value === undefined) {\n          return core.asVoid(this.lookupValueOf(key, deferred))\n        } else {\n          switch (value._tag) {\n            case \"Complete\": {\n              if (this.hasExpired(clock, value.timeToLiveMillis)) {\n                const found = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n                if (Equal.equals(found, value)) {\n                  MutableHashMap.remove(this.cacheState.map, k)\n                }\n                return core.asVoid(this.get(key))\n              }\n              // Only trigger the lookup if we're still the current value, `completedResult`\n              return pipe(\n                this.lookupValueOf(key, deferred),\n                effect.when(() => {\n                  const current = Option.getOrUndefined(MutableHashMap.get(this.cacheState.map, k))\n                  if (Equal.equals(current, value)) {\n                    const mapValue = refreshing(deferred, value as Complete<Key, Value, Error>)\n                    MutableHashMap.set(this.cacheState.map, k, mapValue)\n                    return true\n                  }\n                  return false\n                }),\n                core.asVoid\n              )\n            }\n            case \"Pending\": {\n              return Deferred.await(value.deferred)\n            }\n            case \"Refreshing\": {\n              return Deferred.await(value.deferred)\n            }\n          }\n        }\n      })\n    )\n  }\n\n  set(key: Key, value: Value): Effect.Effect<void> {\n    return effect.clockWith((clock) =>\n      core.sync(() => {\n        const now = clock.unsafeCurrentTimeMillis()\n        const k = key\n        const lookupResult = Exit.succeed(value)\n        const mapValue = complete(\n          makeMapKey(k),\n          lookupResult,\n          makeEntryStats(now),\n          now + Duration.toMillis(Duration.decode(this.timeToLive(lookupResult)))\n        )\n        MutableHashMap.set(\n          this.cacheState.map,\n          k,\n          mapValue as Complete<Key, Value, Error>\n        )\n      })\n    )\n  }\n\n  get size(): Effect.Effect<number> {\n    return core.sync(() => {\n      return MutableHashMap.size(this.cacheState.map)\n    })\n  }\n\n  get values(): Effect.Effect<Array<Value>> {\n    return core.sync(() => {\n      const values: Array<Value> = []\n      for (const entry of this.cacheState.map) {\n        if (entry[1]._tag === \"Complete\" && entry[1].exit._tag === \"Success\") {\n          values.push(entry[1].exit.value)\n        }\n      }\n      return values\n    })\n  }\n\n  get entries(): Effect.Effect<Array<[Key, Value]>> {\n    return core.sync(() => {\n      const values: Array<[Key, Value]> = []\n      for (const entry of this.cacheState.map) {\n        if (entry[1]._tag === \"Complete\" && entry[1].exit._tag === \"Success\") {\n          values.push([entry[0], entry[1].exit.value])\n        }\n      }\n      return values\n    })\n  }\n\n  get keys(): Effect.Effect<Array<Key>> {\n    return core.sync(() => {\n      const keys: Array<Key> = []\n      for (const entry of this.cacheState.map) {\n        if (entry[1]._tag === \"Complete\" && entry[1].exit._tag === \"Success\") {\n          keys.push(entry[0])\n        }\n      }\n      return keys\n    })\n  }\n\n  resolveMapValue(\n    value: MapValue<Key, Value, Error>,\n    ignorePending = false\n  ): Effect.Effect<Option.Option<Value>, Error> {\n    return effect.clockWith((clock) => {\n      switch (value._tag) {\n        case \"Complete\": {\n          this.trackAccess(value.key)\n          if (this.hasExpired(clock, value.timeToLiveMillis)) {\n            MutableHashMap.remove(this.cacheState.map, value.key.current)\n            return core.succeed(Option.none<Value>())\n          }\n          this.trackHit()\n          return core.map(value.exit, Option.some)\n        }\n        case \"Pending\": {\n          this.trackAccess(value.key)\n          this.trackHit()\n          if (ignorePending) {\n            return core.succeed(Option.none<Value>())\n          }\n          return core.map(Deferred.await(value.deferred), Option.some)\n        }\n        case \"Refreshing\": {\n          this.trackAccess(value.complete.key)\n          this.trackHit()\n          if (this.hasExpired(clock, value.complete.timeToLiveMillis)) {\n            if (ignorePending) {\n              return core.succeed(Option.none<Value>())\n            }\n            return core.map(Deferred.await(value.deferred), Option.some)\n          }\n          return core.map(value.complete.exit, Option.some)\n        }\n      }\n    })\n  }\n\n  trackHit(): void {\n    this.cacheState.hits = this.cacheState.hits + 1\n  }\n\n  trackMiss(): void {\n    this.cacheState.misses = this.cacheState.misses + 1\n  }\n\n  trackAccess(key: MapKey<Key>): void {\n    MutableQueue.offer(this.cacheState.accesses, key)\n    if (MutableRef.compareAndSet(this.cacheState.updating, false, true)) {\n      let loop = true\n      while (loop) {\n        const key = MutableQueue.poll(this.cacheState.accesses, MutableQueue.EmptyMutableQueue)\n        if (key === MutableQueue.EmptyMutableQueue) {\n          loop = false\n        } else {\n          this.cacheState.keys.add(key)\n        }\n      }\n      let size = MutableHashMap.size(this.cacheState.map)\n      loop = size > this.capacity\n      while (loop) {\n        const key = this.cacheState.keys.remove()\n        if (key !== undefined) {\n          if (MutableHashMap.has(this.cacheState.map, key.current)) {\n            MutableHashMap.remove(this.cacheState.map, key.current)\n            size = size - 1\n            loop = size > this.capacity\n          }\n        } else {\n          loop = false\n        }\n      }\n      MutableRef.set(this.cacheState.updating, false)\n    }\n  }\n\n  hasExpired(clock: Clock.Clock, timeToLiveMillis: number): boolean {\n    return clock.unsafeCurrentTimeMillis() > timeToLiveMillis\n  }\n\n  lookupValueOf(\n    input: Key,\n    deferred: Deferred.Deferred<Value, Error>\n  ): Effect.Effect<Value, Error> {\n    return effect.clockWith((clock) =>\n      core.suspend(() => {\n        const key = input\n        return pipe(\n          this.lookup(input),\n          core.provideContext(this.context),\n          core.exit,\n          core.flatMap((exit) => {\n            const now = clock.unsafeCurrentTimeMillis()\n            const stats = makeEntryStats(now)\n            const value = complete(\n              makeMapKey(key),\n              exit,\n              stats,\n              now + Duration.toMillis(Duration.decode(this.timeToLive(exit)))\n            )\n            MutableHashMap.set(this.cacheState.map, key, value)\n            return core.zipRight(\n              Deferred.done(deferred, exit),\n              exit\n            )\n          }),\n          core.onInterrupt(() =>\n            core.zipRight(\n              Deferred.interrupt(deferred),\n              core.sync(() => {\n                MutableHashMap.remove(this.cacheState.map, key)\n              })\n            )\n          )\n        )\n      })\n    )\n  }\n}\n\n/** @internal */\nexport const make = <Key, Value, Error = never, Environment = never>(\n  options: {\n    readonly capacity: number\n    readonly timeToLive: Duration.DurationInput\n    readonly lookup: Cache.Lookup<Key, Value, Error, Environment>\n  }\n): Effect.Effect<Cache.Cache<Key, Value, Error>, never, Environment> => {\n  const timeToLive = Duration.decode(options.timeToLive)\n  return makeWith({\n    capacity: options.capacity,\n    lookup: options.lookup,\n    timeToLive: () => timeToLive\n  })\n}\n\n/** @internal */\nexport const makeWith = <Key, Value, Error = never, Environment = never>(\n  options: {\n    readonly capacity: number\n    readonly lookup: Cache.Lookup<Key, Value, Error, Environment>\n    readonly timeToLive: (exit: Exit.Exit<Value, Error>) => Duration.DurationInput\n  }\n): Effect.Effect<Cache.Cache<Key, Value, Error>, never, Environment> =>\n  core.map(\n    fiberRuntime.all([core.context<Environment>(), core.fiberId]),\n    ([context, fiberId]) =>\n      new CacheImpl(\n        options.capacity,\n        context,\n        fiberId,\n        options.lookup,\n        (exit) => Duration.decode(options.timeToLive(exit))\n      )\n  )\n\n/** @internal */\nexport const unsafeMakeWith = <Key, Value, Error = never>(\n  capacity: number,\n  lookup: Cache.Lookup<Key, Value, Error>,\n  timeToLive: (exit: Exit.Exit<Value, Error>) => Duration.DurationInput\n): Cache.Cache<Key, Value, Error> =>\n  new CacheImpl<Key, Value, Error>(\n    capacity,\n    Context.empty() as Context.Context<any>,\n    none,\n    lookup,\n    (exit) => Duration.decode(timeToLive(exit))\n  )\n", "/**\n * This module provides a data structure called `Context` that can be used for dependency injection in effectful\n * programs. It is essentially a table mapping `Tag`s to their implementations (called `Service`s), and can be used to\n * manage dependencies in a type-safe way. The `Context` data structure is essentially a way of providing access to a set\n * of related services that can be passed around as a single unit. This module provides functions to create, modify, and\n * query the contents of a `Context`, as well as a number of utility types for working with tags and services.\n *\n * @since 2.0.0\n */\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/context.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\nconst TagTypeId: unique symbol = internal.TagTypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TagTypeId = typeof TagTypeId\n\n/**\n * @since 3.5.9\n * @category models\n */\nexport interface Tag<in out Id, in out Value> extends Pipeable, Inspectable {\n  readonly _tag: \"Tag\"\n  readonly _op: \"Tag\"\n  readonly Service: Value\n  readonly Identifier: Id\n  readonly [TagTypeId]: {\n    readonly _Service: Types.Invariant<Value>\n    readonly _Identifier: Types.Invariant<Id>\n  }\n  of(self: Value): Value\n  context(self: Value): Context<Id>\n  readonly stack?: string | undefined\n  readonly key: string\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: TagUnify<this>\n  [Unify.ignoreSymbol]?: TagUnifyIgnore\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClassShape<Id, Shape> {\n  readonly [TagTypeId]: TagTypeId\n  readonly Type: Shape\n  readonly Id: Id\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClass<Self, Id, Type> extends Tag<Self, Type> {\n  new(_: never): TagClassShape<Id, Type>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Tag?: () => A[Unify.typeSymbol] extends Tag<infer I0, infer S0> | infer _ ? Tag<I0, S0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnifyIgnore {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   */\n  export type Service<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<any, infer A> ? A\n    : T extends TagClassShape<any, infer A> ? A\n    : never\n  /**\n   * @since 2.0.0\n   */\n  export type Identifier<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<infer A, any> ? A\n    : T extends TagClassShape<any, any> ? T\n    : never\n}\n\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @param key - A key that will be used to compare tags.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const GenericTag: <Identifier, Service = Identifier>(key: string) => Tag<Identifier, Service> =\n  internal.makeGenericTag\n\nconst TypeId: unique symbol = internal.TypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ValidTagsById<R> = R extends infer S ? Tag<S, any> : never\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Context<in Services> extends Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Services: Types.Contravariant<Services>\n  }\n  readonly unsafeMap: Map<string, any>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMake: <Services>(unsafeMap: Map<string, any>) => Context<Services> = internal.makeContext\n\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @param input - The value to be checked if it is a `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isContext: (input: unknown) => input is Context<never> = internal.isContext\n\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @param input - The value to be checked if it is a `Tag`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isTag: (input: unknown) => input is Tag<any, any> = internal.isTag\n\n/**\n * Returns an empty `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: () => Context<never> = internal.empty\n\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <T extends Tag<any, any>>(tag: T, service: Tag.Service<T>) => Context<Tag.Identifier<T>> =\n  internal.make\n\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const add: {\n  <T extends Tag<any, any>>(\n    tag: T,\n    service: Tag.Service<T>\n  ): <Services>(self: Context<Services>) => Context<Services | Tag.Identifier<T>>\n  <Services, T extends Tag<any, any>>(\n    self: Context<Services>,\n    tag: T,\n    service: Tag.Service<T>\n  ): Context<Services | Tag.Identifier<T>>\n} = internal.add\n\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  <Services, T extends ValidTagsById<Services>>(tag: T): (self: Context<Services>) => Tag.Service<T>\n  <Services, T extends ValidTagsById<Services>>(self: Context<Services>, tag: T): Tag.Service<T>\n} = internal.get\n\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => S\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): S\n} = internal.unsafeGet\n\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOption: {\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => Option<S>\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): Option<S>\n} = internal.getOption\n\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @param self - The first `Context` to merge.\n * @param that - The second `Context` to merge.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const merge: {\n  <R1>(that: Context<R1>): <Services>(self: Context<Services>) => Context<R1 | Services>\n  <Services, R1>(self: Context<Services>, that: Context<R1>): Context<Services | R1>\n} = internal.merge\n\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @param self - The `Context` to prune services from.\n * @param tags - The list of `Tag`s to be included in the new `Context`.\n *\n * @example\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n */\nexport const pick: <Services, S extends Array<ValidTagsById<Services>>>(\n  ...tags: S\n) => (self: Context<Services>) => Context<{ [k in keyof S]: Tag.Identifier<S[k]> }[number]> = internal.pick\n\n/**\n * @since 2.0.0\n */\nexport const omit: <Services, S extends Array<ValidTagsById<Services>>>(\n  ...tags: S\n) => (self: Context<Services>) => Context<Exclude<Services, { [k in keyof S]: Tag.Identifier<S[k]> }[keyof S]>> =\n  internal.omit\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag: <const Id extends string>(id: Id) => <Self, Shape>() => TagClass<Self, Id, Shape> = internal.Tag\n", "import type * as C from \"../Context.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as O from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as STM from \"../STM.js\"\nimport { EffectPrototype, effectVariance } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/** @internal */\nexport const TagTypeId: C.TagTypeId = Symbol.for(\"effect/Context/Tag\") as C.TagTypeId\n\n/** @internal */\nconst STMSymbolKey = \"effect/STM\"\n\n/** @internal */\nexport const STMTypeId: STM.STMTypeId = Symbol.for(\n  STMSymbolKey\n) as STM.STMTypeId\n\n/** @internal */\nexport const TagProto: any = {\n  ...EffectPrototype,\n  _tag: \"Tag\",\n  _op: \"Tag\",\n  [STMTypeId]: effectVariance,\n  [TagTypeId]: {\n    _Service: (_: unknown) => _,\n    _Identifier: (_: unknown) => _\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON<I, A>(this: C.Tag<I, A>) {\n    return {\n      _id: \"Tag\",\n      key: this.key,\n      stack: this.stack\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  of<Service>(self: Service): Service {\n    return self\n  },\n  context<Identifier, Service>(\n    this: C.Tag<Identifier, Service>,\n    self: Service\n  ): C.Context<Identifier> {\n    return make(this, self)\n  }\n}\n\n/** @internal */\nexport const makeGenericTag = <Identifier, Service = Identifier>(key: string): C.Tag<Identifier, Service> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n  const tag = Object.create(TagProto)\n  Object.defineProperty(tag, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  tag.key = key\n  return tag\n}\n\n/** @internal */\nexport const Tag = <const Id extends string>(id: Id) => <Self, Shape>(): C.TagClass<Self, Id, Shape> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n\n  function TagClass() {}\n  Object.setPrototypeOf(TagClass, TagProto)\n  TagClass.key = id\n  Object.defineProperty(TagClass, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  return TagClass as any\n}\n\n/** @internal */\nexport const TypeId: C.TypeId = Symbol.for(\"effect/Context\") as C.TypeId\n\n/** @internal */\nexport const ContextProto: Omit<C.Context<unknown>, \"unsafeMap\"> = {\n  [TypeId]: {\n    _Services: (_: unknown) => _\n  },\n  [Equal.symbol]<A>(this: C.Context<A>, that: unknown): boolean {\n    if (isContext(that)) {\n      if (this.unsafeMap.size === that.unsafeMap.size) {\n        for (const k of this.unsafeMap.keys()) {\n          if (!that.unsafeMap.has(k) || !Equal.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n            return false\n          }\n        }\n        return true\n      }\n    }\n    return false\n  },\n  [Hash.symbol]<A>(this: C.Context<A>): number {\n    return Hash.cached(this, Hash.number(this.unsafeMap.size))\n  },\n  pipe<A>(this: C.Context<A>) {\n    return pipeArguments(this, arguments)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: C.Context<A>) {\n    return {\n      _id: \"Context\",\n      services: Array.from(this.unsafeMap).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return (this as any).toJSON()\n  }\n}\n\n/** @internal */\nexport const makeContext = <Services>(unsafeMap: Map<string, any>): C.Context<Services> => {\n  const context = Object.create(ContextProto)\n  context.unsafeMap = unsafeMap\n  return context\n}\n\nconst serviceNotFoundError = (tag: C.Tag<any, any>) => {\n  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`)\n  if (tag.stack) {\n    const lines = tag.stack.split(\"\\n\")\n    if (lines.length > 2) {\n      const afterAt = lines[2].match(/at (.*)/)\n      if (afterAt) {\n        error.message = error.message + ` (defined at ${afterAt[1]})`\n      }\n    }\n  }\n  if (error.stack) {\n    const lines = error.stack.split(\"\\n\")\n    lines.splice(1, 3)\n    error.stack = lines.join(\"\\n\")\n  }\n  return error\n}\n\n/** @internal */\nexport const isContext = (u: unknown): u is C.Context<never> => hasProperty(u, TypeId)\n\n/** @internal */\nexport const isTag = (u: unknown): u is C.Tag<any, any> => hasProperty(u, TagTypeId)\n\nconst _empty = makeContext(new Map())\n\n/** @internal */\nexport const empty = (): C.Context<never> => _empty\n\n/** @internal */\nexport const make = <T extends C.Tag<any, any>>(\n  tag: T,\n  service: C.Tag.Service<T>\n): C.Context<C.Tag.Identifier<T>> => makeContext(new Map([[tag.key, service]]))\n\n/** @internal */\nexport const add = dual<\n  <T extends C.Tag<any, any>>(\n    tag: T,\n    service: C.Tag.Service<T>\n  ) => <Services>(\n    self: C.Context<Services>\n  ) => C.Context<Services | C.Tag.Identifier<T>>,\n  <Services, T extends C.Tag<any, any>>(\n    self: C.Context<Services>,\n    tag: T,\n    service: C.Tag.Service<T>\n  ) => C.Context<Services | C.Tag.Identifier<T>>\n>(3, (self, tag, service) => {\n  const map = new Map(self.unsafeMap)\n  map.set(tag.key, service)\n  return makeContext(map)\n})\n\n/** @internal */\nexport const unsafeGet = dual<\n  <S, I>(tag: C.Tag<I, S>) => <Services>(self: C.Context<Services>) => S,\n  <Services, S, I>(self: C.Context<Services>, tag: C.Tag<I, S>) => S\n>(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    throw serviceNotFoundError(tag as any)\n  }\n  return self.unsafeMap.get(tag.key)! as any\n})\n\n/** @internal */\nexport const get: {\n  <Services, T extends C.ValidTagsById<Services>>(tag: T): (self: C.Context<Services>) => C.Tag.Service<T>\n  <Services, T extends C.ValidTagsById<Services>>(self: C.Context<Services>, tag: T): C.Tag.Service<T>\n} = unsafeGet\n\n/** @internal */\nexport const getOption = dual<\n  <S, I>(tag: C.Tag<I, S>) => <Services>(self: C.Context<Services>) => O.Option<S>,\n  <Services, S, I>(self: C.Context<Services>, tag: C.Tag<I, S>) => O.Option<S>\n>(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return option.none\n  }\n  return option.some(self.unsafeMap.get(tag.key)! as any)\n})\n\n/** @internal */\nexport const merge = dual<\n  <R1>(that: C.Context<R1>) => <Services>(self: C.Context<Services>) => C.Context<Services | R1>,\n  <Services, R1>(self: C.Context<Services>, that: C.Context<R1>) => C.Context<Services | R1>\n>(2, (self, that) => {\n  const map = new Map(self.unsafeMap)\n  for (const [tag, s] of that.unsafeMap) {\n    map.set(tag, s)\n  }\n  return makeContext(map)\n})\n\n/** @internal */\nexport const pick =\n  <Services, S extends Array<C.ValidTagsById<Services>>>(...tags: S) =>\n  (self: C.Context<Services>): C.Context<\n    { [k in keyof S]: C.Tag.Identifier<S[k]> }[number]\n  > => {\n    const tagSet = new Set<string>(tags.map((_) => _.key))\n    const newEnv = new Map()\n    for (const [tag, s] of self.unsafeMap.entries()) {\n      if (tagSet.has(tag)) {\n        newEnv.set(tag, s)\n      }\n    }\n    return makeContext<{ [k in keyof S]: C.Tag.Identifier<S[k]> }[number]>(newEnv)\n  }\n\n/** @internal */\nexport const omit =\n  <Services, S extends Array<C.ValidTagsById<Services>>>(...tags: S) =>\n  (self: C.Context<Services>): C.Context<\n    Exclude<Services, { [k in keyof S]: C.Tag.Identifier<S[k]> }[keyof S]>\n  > => {\n    const newEnv = new Map(self.unsafeMap)\n    for (const tag of tags) {\n      newEnv.delete(tag.key)\n    }\n    return makeContext(newEnv)\n  }\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as internal from \"./internal/deferred.js\"\nimport type * as MutableRef from \"./MutableRef.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const DeferredTypeId: unique symbol = internal.DeferredTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type DeferredTypeId = typeof DeferredTypeId\n\n/**\n * A `Deferred` represents an asynchronous variable that can be set exactly\n * once, with the ability for an arbitrary number of fibers to suspend (by\n * calling `Deferred.await`) and automatically resume when the variable is set.\n *\n * `Deferred` can be used for building primitive actions whose completions\n * require the coordinated action of multiple fibers, and for building\n * higher-level concurrent or asynchronous structures.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Deferred<in out A, in out E = never> extends Deferred.Variance<A, E>, Pipeable {\n  /** @internal */\n  readonly state: MutableRef.MutableRef<internal.State<A, E>>\n  /** @internal */\n  readonly blockingOn: FiberId.FiberId\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Deferred {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in out A, in out E> {\n    readonly [DeferredTypeId]: {\n      readonly _A: Types.Invariant<A>\n      readonly _E: Types.Invariant<E>\n    }\n  }\n}\n\n/**\n * Creates a new `Deferred`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A, E = never>() => Effect.Effect<Deferred<A, E>> = core.deferredMake\n\n/**\n * Creates a new `Deferred` from the specified `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeAs: <A, E = never>(fiberId: FiberId.FiberId) => Effect.Effect<Deferred<A, E>> = core.deferredMakeAs\n\nconst _await: <A, E>(self: Deferred<A, E>) => Effect.Effect<A, E> = core.deferredAwait\n\nexport {\n  /**\n   * Retrieves the value of the `Deferred`, suspending the fiber running the\n   * workflow until the result is available.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  _await as await\n}\n\n/**\n * Completes the deferred with the result of the specified effect. If the\n * deferred has already been completed, the method will produce false.\n *\n * Note that `Deferred.completeWith` will be much faster, so consider using\n * that if you do not need to memoize the result of the specified effect.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const complete: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = core.deferredComplete\n\n/**\n * Completes the deferred with the result of the specified effect. If the\n * deferred has already been completed, the method will produce false.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const completeWith: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = core.deferredCompleteWith\n\n/**\n * Exits the `Deferred` with the specified `Exit` value, which will be\n * propagated to all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const done: {\n  <A, E>(exit: Exit.Exit<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, exit: Exit.Exit<A, E>): Effect.Effect<boolean>\n} = core.deferredDone\n\n/**\n * Fails the `Deferred` with the specified error, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fail: {\n  <E>(error: E): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, error: E): Effect.Effect<boolean>\n} = core.deferredFail\n\n/**\n * Fails the `Deferred` with the specified error, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failSync: {\n  <E>(evaluate: LazyArg<E>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<E>): Effect.Effect<boolean>\n} = core.deferredFailSync\n\n/**\n * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failCause: {\n  <E>(cause: Cause.Cause<E>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, cause: Cause.Cause<E>): Effect.Effect<boolean>\n} = core.deferredFailCause\n\n/**\n * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failCauseSync: {\n  <E>(evaluate: LazyArg<Cause.Cause<E>>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<Cause.Cause<E>>): Effect.Effect<boolean>\n} = core.deferredFailCauseSync\n\n/**\n * Kills the `Deferred` with the specified defect, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const die: {\n  (defect: unknown): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, defect: unknown): Effect.Effect<boolean>\n} = core.deferredDie\n\n/**\n * Kills the `Deferred` with the specified defect, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dieSync: {\n  (evaluate: LazyArg<unknown>): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<unknown>): Effect.Effect<boolean>\n} = core.deferredDieSync\n\n/**\n * Completes the `Deferred` with interruption. This will interrupt all fibers\n * waiting on the value of the `Deferred` with the `FiberId` of the fiber\n * calling this method.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interrupt: <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean> = core.deferredInterrupt\n\n/**\n * Completes the `Deferred` with interruption. This will interrupt all fibers\n * waiting on the value of the `Deferred` with the specified `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWith: {\n  (fiberId: FiberId.FiberId): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, fiberId: FiberId.FiberId): Effect.Effect<boolean>\n} = core.deferredInterruptWith\n\n/**\n * Returns `true` if this `Deferred` has already been completed with a value or\n * an error, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isDone: <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean> = core.deferredIsDone\n\n/**\n * Returns a `Some<Effect<A, E, R>>` from the `Deferred` if this `Deferred` has\n * already been completed, `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A, E>(\n  self: Deferred<A, E>\n) => Effect.Effect<Option.Option<Effect.Effect<A, E>>> = core.deferredPoll\n\n/**\n * Completes the `Deferred` with the specified value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const succeed: {\n  <A>(value: A): <E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, value: A): Effect.Effect<boolean>\n} = core.deferredSucceed\n\n/**\n * Completes the `Deferred` with the specified lazily evaluated value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const sync: {\n  <A>(evaluate: LazyArg<A>): <E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<A>): Effect.Effect<boolean>\n} = core.deferredSync\n\n/**\n * Unsafely creates a new `Deferred` from the specified `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A, E = never>(fiberId: FiberId.FiberId) => Deferred<A, E> = core.deferredUnsafeMake\n\n/**\n * Unsafely exits the `Deferred` with the specified `Exit` value, which will be\n * propagated to all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeDone: <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>) => void = core.deferredUnsafeDone\n", "import { internalCall } from \"effect/Utils\"\nimport * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Deferred from \"../Deferred.js\"\nimport type * as Differ from \"../Differ.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport type * as HashSet from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as List from \"../List.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport type * as LogSpan from \"../LogSpan.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, isObject, isPromiseLike, type Predicate, type Refinement } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as BlockedRequests from \"../RequestBlock.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { NoInfer, NotFunction } from \"../Types.js\"\nimport { YieldWrap } from \"../Utils.js\"\nimport * as _blockedRequests from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as deferred from \"./deferred.js\"\nimport * as internalDiffer from \"./differ.js\"\nimport { effectVariance, StructuralCommitPrototype } from \"./effectable.js\"\nimport { getBugErrorMessage } from \"./errors.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\nimport type * as fiberScope from \"./fiberScope.js\"\nimport * as DeferredOpCodes from \"./opCodes/deferred.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\nimport { SingleShotGen } from \"./singleShotGen.js\"\nimport * as internalTracer from \"./tracer.js\"\n\n// -----------------------------------------------------------------------------\n// Effect\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst EffectErrorSymbolKey = \"effect/EffectError\"\n\n/** @internal */\nexport const EffectErrorTypeId = Symbol.for(EffectErrorSymbolKey)\n\n/** @internal */\nexport type EffectErrorTypeId = typeof EffectErrorTypeId\n\n/** @internal */\nexport interface EffectError<out E> {\n  readonly [EffectErrorTypeId]: EffectErrorTypeId\n  readonly _tag: \"EffectError\"\n  readonly cause: Cause.Cause<E>\n}\n\n/** @internal */\nexport const isEffectError = (u: unknown): u is EffectError<unknown> => hasProperty(u, EffectErrorTypeId)\n\n/** @internal */\nexport const makeEffectError = <E>(cause: Cause.Cause<E>): EffectError<E> => ({\n  [EffectErrorTypeId]: EffectErrorTypeId,\n  _tag: \"EffectError\",\n  cause\n})\n\n/**\n * @internal\n */\nexport const blocked = <A, E>(\n  blockedRequests: BlockedRequests.RequestBlock,\n  _continue: Effect.Effect<A, E>\n): Effect.Blocked<A, E> => {\n  const effect = new EffectPrimitive(\"Blocked\") as any\n  effect.effect_instruction_i0 = blockedRequests\n  effect.effect_instruction_i1 = _continue\n  return effect\n}\n\n/**\n * @internal\n */\nexport const runRequestBlock = (\n  blockedRequests: BlockedRequests.RequestBlock\n): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(\"RunBlocked\") as any\n  effect.effect_instruction_i0 = blockedRequests\n  return effect\n}\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport type Primitive =\n  | Async\n  | Commit\n  | Failure\n  | OnFailure\n  | OnSuccess\n  | OnStep\n  | OnSuccessAndFailure\n  | Success\n  | Sync\n  | UpdateRuntimeFlags\n  | While\n  | WithRuntime\n  | Yield\n  | OpTag\n  | Blocked\n  | RunBlocked\n  | Either.Either<any, any>\n  | Option.Option<any>\n\n/** @internal */\nexport type Continuation =\n  | OnSuccess\n  | OnStep\n  | OnSuccessAndFailure\n  | OnFailure\n  | While\n  | RevertFlags\n\n/** @internal */\nexport class RevertFlags {\n  readonly _op = OpCodes.OP_REVERT_FLAGS\n  constructor(\n    readonly patch: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    readonly op: Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }\n  ) {\n  }\n}\n\nclass EffectPrimitive {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {}\n  [Equal.symbol](this: {}, that: unknown) {\n    return this === that\n  }\n  [Hash.symbol](this: {}) {\n    return Hash.cached(this, Hash.random(this))\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Effect\",\n      _op: this._op,\n      effect_instruction_i0: toJSON(this.effect_instruction_i0),\n      effect_instruction_i1: toJSON(this.effect_instruction_i1),\n      effect_instruction_i2: toJSON(this.effect_instruction_i2)\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nclass EffectPrimitiveFailure {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {\n    // @ts-expect-error\n    this._tag = _op\n  }\n  [Equal.symbol](this: {}, that: unknown) {\n    return exitIsExit(that) && that._op === \"Failure\" &&\n      // @ts-expect-error\n      Equal.equals(this.effect_instruction_i0, that.effect_instruction_i0)\n  }\n  [Hash.symbol](this: {}) {\n    return pipe(\n      // @ts-expect-error\n      Hash.string(this._tag),\n      // @ts-expect-error\n      Hash.combine(Hash.hash(this.effect_instruction_i0)),\n      Hash.cached(this)\n    )\n  }\n  get cause() {\n    return this.effect_instruction_i0\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Exit\",\n      _tag: this._op,\n      cause: (this.cause as any).toJSON()\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nclass EffectPrimitiveSuccess {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {\n    // @ts-expect-error\n    this._tag = _op\n  }\n  [Equal.symbol](this: {}, that: unknown) {\n    return exitIsExit(that) && that._op === \"Success\" &&\n      // @ts-expect-error\n      Equal.equals(this.effect_instruction_i0, that.effect_instruction_i0)\n  }\n  [Hash.symbol](this: {}) {\n    return pipe(\n      // @ts-expect-error\n      Hash.string(this._tag),\n      // @ts-expect-error\n      Hash.combine(Hash.hash(this.effect_instruction_i0)),\n      Hash.cached(this)\n    )\n  }\n  get value() {\n    return this.effect_instruction_i0\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Exit\",\n      _tag: this._op,\n      value: toJSON(this.value)\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nexport type Op<Tag extends string, Body = {}> = Effect.Effect<never> & Body & {\n  readonly _op: Tag\n}\n\n/** @internal */\nexport interface Async extends\n  Op<OpCodes.OP_ASYNC, {\n    effect_instruction_i0(resume: (effect: Primitive) => void): void\n    readonly effect_instruction_i1: FiberId.FiberId\n  }>\n{}\n\n/** @internal */\nexport interface Blocked<out E = any, out A = any> extends\n  Op<\"Blocked\", {\n    readonly effect_instruction_i0: BlockedRequests.RequestBlock\n    readonly effect_instruction_i1: Effect.Effect<A, E>\n  }>\n{}\n\n/** @internal */\nexport interface RunBlocked extends\n  Op<\"RunBlocked\", {\n    readonly effect_instruction_i0: BlockedRequests.RequestBlock\n  }>\n{}\n\n/** @internal */\nexport interface Failure extends\n  Op<OpCodes.OP_FAILURE, {\n    readonly effect_instruction_i0: Cause.Cause<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface OpTag extends Op<OpCodes.OP_TAG, {}> {}\n\n/** @internal */\nexport interface Commit extends\n  Op<OpCodes.OP_COMMIT, {\n    commit(): Effect.Effect<unknown, unknown, unknown>\n  }>\n{}\n\n/** @internal */\nexport interface OnFailure extends\n  Op<OpCodes.OP_ON_FAILURE, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: Cause.Cause<unknown>): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface OnSuccess extends\n  Op<OpCodes.OP_ON_SUCCESS, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: unknown): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface OnStep extends Op<\"OnStep\", { readonly effect_instruction_i0: Primitive }> {}\n\n/** @internal */\nexport interface OnSuccessAndFailure extends\n  Op<OpCodes.OP_ON_SUCCESS_AND_FAILURE, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: Cause.Cause<unknown>): Primitive\n    effect_instruction_i2(a: unknown): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface Success extends\n  Op<OpCodes.OP_SUCCESS, {\n    readonly effect_instruction_i0: unknown\n  }>\n{}\n\n/** @internal */\nexport interface Sync extends\n  Op<OpCodes.OP_SYNC, {\n    effect_instruction_i0(): unknown\n  }>\n{}\n\n/** @internal */\nexport interface UpdateRuntimeFlags extends\n  Op<OpCodes.OP_UPDATE_RUNTIME_FLAGS, {\n    readonly effect_instruction_i0: RuntimeFlagsPatch.RuntimeFlagsPatch\n    readonly effect_instruction_i1?: (oldRuntimeFlags: RuntimeFlags.RuntimeFlags) => Primitive\n  }>\n{}\n\n/** @internal */\nexport interface While extends\n  Op<OpCodes.OP_WHILE, {\n    effect_instruction_i0(): boolean\n    effect_instruction_i1(): Primitive\n    effect_instruction_i2(a: unknown): void\n  }>\n{}\n\n/** @internal */\nexport interface WithRuntime extends\n  Op<OpCodes.OP_WITH_RUNTIME, {\n    effect_instruction_i0(fiber: FiberRuntime.FiberRuntime<unknown, unknown>, status: FiberStatus.Running): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface Yield extends Op<OpCodes.OP_YIELD> {}\n\n/** @internal */\nexport const isEffect = (u: unknown): u is Effect.Effect<unknown, unknown, unknown> => hasProperty(u, EffectTypeId)\n\n/* @internal */\nexport const withFiberRuntime = <A, E = never, R = never>(\n  withRuntime: (fiber: FiberRuntime.FiberRuntime<A, E>, status: FiberStatus.Running) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_WITH_RUNTIME) as any\n  effect.effect_instruction_i0 = withRuntime\n  return effect\n}\n\n/* @internal */\nexport const acquireUseRelease: {\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n  ): Effect.Effect<A2, E | E2, R | R2 | R3>\n} = dual(3, <A, E, R, A2, E2, R2, X, R3>(\n  acquire: Effect.Effect<A, E, R>,\n  use: (a: A) => Effect.Effect<A2, E2, R2>,\n  release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n): Effect.Effect<A2, E | E2, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(exit(suspend(() => restore(use(a)))), (exit): Effect.Effect<A2, E | E2, R | R2 | R3> => {\n          return suspend(() => release(a, exit)).pipe(\n            matchCauseEffect({\n              onFailure: (cause) => {\n                switch (exit._tag) {\n                  case OpCodes.OP_FAILURE:\n                    return failCause(internalCause.parallel(exit.effect_instruction_i0, cause))\n                  case OpCodes.OP_SUCCESS:\n                    return failCause(cause)\n                }\n              },\n              onSuccess: () => exit\n            })\n          )\n        })\n    )\n  ))\n\n/* @internal */\nexport const as: {\n  <B>(value: B): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, value: B): Effect.Effect<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, value: B): Effect.Effect<B, E, R> => flatMap(self, () => succeed(value))\n)\n\n/* @internal */\nexport const asVoid = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, E, R> => as(self, void 0)\n\n/* @internal */\nexport const custom: {\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (\n      this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }\n    ) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n} = function() {\n  const wrapper = new EffectPrimitive(OpCodes.OP_COMMIT) as any\n  switch (arguments.length) {\n    case 2: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.commit = arguments[1]\n      break\n    }\n    case 3: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.effect_instruction_i1 = arguments[1]\n      wrapper.commit = arguments[2]\n      break\n    }\n    case 4: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.effect_instruction_i1 = arguments[1]\n      wrapper.effect_instruction_i2 = arguments[2]\n      wrapper.commit = arguments[3]\n      break\n    }\n    default: {\n      throw new Error(getBugErrorMessage(\"you're not supposed to end up here\"))\n    }\n  }\n  return wrapper\n}\n\n/* @internal */\nexport const unsafeAsync = <A, E = never, R = never>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_ASYNC) as any\n  let cancelerRef: Effect.Effect<void, never, R> | void = undefined\n  effect.effect_instruction_i0 = (resume: (_: Effect.Effect<A, E, R>) => void) => {\n    cancelerRef = register(resume)\n  }\n  effect.effect_instruction_i1 = blockingOn\n  return cancelerRef !== undefined ?\n    onInterrupt(effect, (_) => cancelerRef!) :\n    effect\n}\n\n/* @internal */\nexport const async = <A, E = never, R = never>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void,\n    signal: AbortSignal\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => {\n  return custom(register, function() {\n    let backingResume: ((_: Effect.Effect<A, E, R>) => void) | undefined = undefined\n    let pendingEffect: Effect.Effect<A, E, R> | undefined = undefined\n    function proxyResume(effect: Effect.Effect<A, E, R>) {\n      if (backingResume) {\n        backingResume(effect)\n      } else if (pendingEffect === undefined) {\n        pendingEffect = effect\n      }\n    }\n    const effect = new EffectPrimitive(OpCodes.OP_ASYNC) as any\n    effect.effect_instruction_i0 = (resume: (_: Effect.Effect<A, E, R>) => void) => {\n      backingResume = resume\n      if (pendingEffect) {\n        resume(pendingEffect)\n      }\n    }\n    effect.effect_instruction_i1 = blockingOn\n    let cancelerRef: Effect.Effect<void, never, R> | void = undefined\n    let controllerRef: AbortController | void = undefined\n    if (this.effect_instruction_i0.length !== 1) {\n      controllerRef = new AbortController()\n      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume, controllerRef!.signal))\n    } else {\n      cancelerRef = internalCall(() => (this.effect_instruction_i0 as any)(proxyResume))\n    }\n    return (cancelerRef || controllerRef) ?\n      onInterrupt(effect, (_) => {\n        if (controllerRef) {\n          controllerRef.abort()\n        }\n        return cancelerRef ?? void_\n      }) :\n      effect\n  })\n}\n\n/* @internal */\nexport const catchAllCause = dual<\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2 | A, E2, R2 | R>\n>(2, (self, f) => {\n  const effect = new EffectPrimitive(OpCodes.OP_ON_FAILURE) as any\n  effect.effect_instruction_i0 = self\n  effect.effect_instruction_i1 = f\n  return effect\n})\n\n/* @internal */\nexport const catchAll: {\n  <E, A2, E2, R2>(\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R> => matchEffect(self, { onFailure: f, onSuccess: succeed })\n)\n\n/* @internal */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A | A2, E | E2, R | R2>\n} = dual(3, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate<E>,\n  f: (e: E) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E | E2, R | R2> =>\n  catchAllCause(self, (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return predicate(either.left) ? f(either.left) : failCause(cause)\n      case \"Right\":\n        return failCause(either.right)\n    }\n  }))\n\n/* @internal */\nexport const catchSome = dual<\n  <E, A2, E2, R2>(\n    pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Effect.Effect<A2 | A, E | E2, R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n) =>\n  catchAllCause(self, (cause): Effect.Effect<A2 | A, E | E2, R2 | R> => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return pipe(pf(either.left), Option.getOrElse(() => failCause(cause)))\n      case \"Right\":\n        return failCause(either.right)\n    }\n  }))\n\n/* @internal */\nexport const checkInterruptible = <A, E, R>(\n  f: (isInterruptible: boolean) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => withFiberRuntime((_, status) => f(_runtimeFlags.interruption(status.runtimeFlags)))\n\nconst spanSymbol = Symbol.for(\"effect/SpanAnnotation\")\nconst originalSymbol = Symbol.for(\"effect/OriginalAnnotation\")\n\n/* @internal */\nexport const originalInstance = <E>(obj: E): E => {\n  if (hasProperty(obj, originalSymbol)) {\n    // @ts-expect-error\n    return obj[originalSymbol]\n  }\n  return obj\n}\n\n/* @internal */\nconst capture = <E>(obj: E & object, span: Option.Option<Tracer.Span>): E => {\n  if (Option.isSome(span)) {\n    return new Proxy(obj, {\n      has(target, p) {\n        return p === spanSymbol || p === originalSymbol || p in target\n      },\n      get(target, p) {\n        if (p === spanSymbol) {\n          return span.value\n        }\n        if (p === originalSymbol) {\n          return obj\n        }\n        // @ts-expect-error\n        return target[p]\n      }\n    })\n  }\n  return obj\n}\n\n/* @internal */\nexport const die = (defect: unknown): Effect.Effect<never> =>\n  isObject(defect) && !(spanSymbol in defect) ?\n    withFiberRuntime((fiber) => failCause(internalCause.die(capture(defect, currentSpanFromFiber(fiber)))))\n    : failCause(internalCause.die(defect))\n\n/* @internal */\nexport const dieMessage = (message: string): Effect.Effect<never> =>\n  failCauseSync(() => internalCause.die(new RuntimeException(message)))\n\n/* @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Effect.Effect<never> => flatMap(sync(evaluate), die)\n\n/* @internal */\nexport const either = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Either.Either<A, E>, never, R> =>\n  matchEffect(self, {\n    onFailure: (e) => succeed(Either.left(e)),\n    onSuccess: (a) => succeed(Either.right(a))\n  })\n\n/* @internal */\nexport const exit = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Exit.Exit<A, E>, never, R> =>\n  matchCause(self, {\n    onFailure: exitFailCause,\n    onSuccess: exitSucceed\n  })\n\n/* @internal */\nexport const fail = <E>(error: E): Effect.Effect<never, E> =>\n  isObject(error) && !(spanSymbol in error) ?\n    withFiberRuntime((fiber) => failCause(internalCause.fail(capture(error, currentSpanFromFiber(fiber)))))\n    : failCause(internalCause.fail(error))\n\n/* @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Effect.Effect<never, E> => flatMap(sync(evaluate), fail)\n\n/* @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Effect.Effect<never, E> => {\n  const effect = new EffectPrimitiveFailure(OpCodes.OP_FAILURE) as any\n  effect.effect_instruction_i0 = cause\n  return effect\n}\n\n/* @internal */\nexport const failCauseSync = <E>(\n  evaluate: LazyArg<Cause.Cause<E>>\n): Effect.Effect<never, E> => flatMap(sync(evaluate), failCause)\n\n/* @internal */\nexport const fiberId: Effect.Effect<FiberId.FiberId> = withFiberRuntime((state) => succeed(state.id()))\n\n/* @internal */\nexport const fiberIdWith = <A, E, R>(\n  f: (descriptor: FiberId.Runtime) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => withFiberRuntime((state) => f(state.id()))\n\n/* @internal */\nexport const flatMap = dual<\n  <A, B, E1, R1>(\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E1 | E, R1 | R>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ) => Effect.Effect<B, E | E1, R | R1>\n>(\n  2,\n  (self, f) => {\n    const effect = new EffectPrimitive(OpCodes.OP_ON_SUCCESS) as any\n    effect.effect_instruction_i0 = self\n    effect.effect_instruction_i1 = f\n    return effect\n  }\n)\n\n/* @internal */\nexport const andThen: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n} = dual(2, (self, f) =>\n  flatMap(self, (a) => {\n    const b = typeof f === \"function\" ? (f as any)(a) : f\n    if (isEffect(b)) {\n      return b\n    } else if (isPromiseLike(b)) {\n      return async<any, Cause.UnknownException>((resume) => {\n        b.then((a) => resume(succeed(a)), (e) => resume(fail(new UnknownException(e))))\n      })\n    }\n    return succeed(b)\n  }))\n\n/* @internal */\nexport const step = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Exit.Exit<A, E> | Effect.Blocked<A, E>, never, R> => {\n  const effect = new EffectPrimitive(\"OnStep\") as any\n  effect.effect_instruction_i0 = self\n  return effect\n}\n\n/* @internal */\nexport const flatten = <A, E1, R1, E, R>(\n  self: Effect.Effect<Effect.Effect<A, E1, R1>, E, R>\n): Effect.Effect<A, E | E1, R | R1> => flatMap(self, identity)\n\n/* @internal */\nexport const flip = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<E, A, R> =>\n  matchEffect(self, { onFailure: succeed, onSuccess: fail })\n\n/* @internal */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect.Effect<A2 | A3, never, R>\n} = dual(2, <A, E, R, A2, A3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => A2\n    readonly onSuccess: (a: A) => A3\n  }\n): Effect.Effect<A2 | A3, never, R> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => succeed(options.onFailure(cause)),\n    onSuccess: (a) => succeed(options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(2, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n    readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  }\n): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_ON_SUCCESS_AND_FAILURE) as any\n  effect.effect_instruction_i0 = self\n  effect.effect_instruction_i1 = options.onFailure\n  effect.effect_instruction_i2 = options.onSuccess\n  return effect\n})\n\n/* @internal */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(2, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n    readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  }\n): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const defects = internalCause.defects(cause)\n      if (defects.length > 0) {\n        return failCause(internalCause.electFailures(cause))\n      }\n      const failures = internalCause.failures(cause)\n      if (failures.length > 0) {\n        return options.onFailure(Chunk.unsafeHead(failures))\n      }\n      return failCause(cause as Cause.Cause<never>)\n    },\n    onSuccess: options.onSuccess\n  }))\n\n/* @internal */\nexport const forEachSequential: {\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>): (self: Iterable<A>) => Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<Array<B>, E, R>\n} = dual(\n  2,\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<Array<B>, E, R> =>\n    suspend(() => {\n      const arr = Arr.fromIterable(self)\n      const ret = Arr.allocate<B>(arr.length)\n      let i = 0\n      return as(\n        whileLoop({\n          while: () => i < arr.length,\n          body: () => f(arr[i], i),\n          step: (b) => {\n            ret[i++] = b\n          }\n        }),\n        ret as Array<B>\n      )\n    })\n)\n\n/* @internal */\nexport const forEachSequentialDiscard: {\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<void, E, R>\n} = dual(\n  2,\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<void, E, R> =>\n    suspend(() => {\n      const arr = Arr.fromIterable(self)\n      let i = 0\n      return whileLoop({\n        while: () => i < arr.length,\n        body: () => f(arr[i], i),\n        step: () => {\n          i++\n        }\n      })\n    })\n)\n\n/* @internal */\nexport const if_ = dual<\n  <A1, E1, R1, A2, E2, R2>(\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ) => <E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean\n  ) => Effect.Effect<A1 | A2, E | E1 | E2, R | R1 | R2>,\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean,\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ) => Effect.Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n>(\n  (args) => typeof args[0] === \"boolean\" || isEffect(args[0]),\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean,\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ): Effect.Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R> =>\n    isEffect(self)\n      ? flatMap(self, (b): Effect.Effect<A1 | A2, E1 | E2, R1 | R2> => (b ? options.onTrue() : options.onFalse()))\n      : self\n      ? options.onTrue()\n      : options.onFalse()\n)\n\n/* @internal */\nexport const interrupt: Effect.Effect<never> = flatMap(fiberId, (fiberId) => interruptWith(fiberId))\n\n/* @internal */\nexport const interruptWith = (fiberId: FiberId.FiberId): Effect.Effect<never> =>\n  failCause(internalCause.interrupt(fiberId))\n\n/* @internal */\nexport const interruptible = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = RuntimeFlagsPatch.enable(_runtimeFlags.Interruption)\n  effect.effect_instruction_i1 = () => self\n  return effect\n}\n\n/* @internal */\nexport const interruptibleMask = <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect.Effect<AX, EX, RX>) => Effect.Effect<AX, EX, RX>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  custom(f, function() {\n    const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n    effect.effect_instruction_i0 = RuntimeFlagsPatch.enable(_runtimeFlags.Interruption)\n    effect.effect_instruction_i1 = (oldFlags: RuntimeFlags.RuntimeFlags) =>\n      _runtimeFlags.interruption(oldFlags)\n        ? internalCall(() => this.effect_instruction_i0(interruptible))\n        : internalCall(() => this.effect_instruction_i0(uninterruptible))\n    return effect\n  })\n\n/* @internal */\nexport const intoDeferred: {\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<boolean, never, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect.Effect<boolean, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Effect.Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect.Effect<boolean, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(\n        exit(restore(self)),\n        (exit) => deferredDone(deferred, exit)\n      )\n    )\n)\n\n/* @internal */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R> =>\n    flatMap(self, (a) => sync(() => f(a)))\n)\n\n/* @internal */\nexport const mapBoth: {\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R>\n  <A, E, R, E2, A2>(\n    self: Effect.Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect.Effect<A2, E2, R>\n} = dual(2, <A, E, R, E2, A2>(\n  self: Effect.Effect<A, E, R>,\n  options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n): Effect.Effect<A2, E2, R> =>\n  matchEffect(self, {\n    onFailure: (e) => failSync(() => options.onFailure(e)),\n    onSuccess: (a) => sync(() => options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => {\n        const either = internalCause.failureOrCause(cause)\n        switch (either._tag) {\n          case \"Left\": {\n            return failSync(() => f(either.left))\n          }\n          case \"Right\": {\n            return failCause(either.right)\n          }\n        }\n      },\n      onSuccess: succeed\n    })\n)\n\n/* @internal */\nexport const onError: {\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  onExit(self, (exit) => exitIsSuccess(exit) ? void_ : cleanup(exit.effect_instruction_i0)))\n\n/* @internal */\nexport const onExit: {\n  <A, E, X, R2>(\n    cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  uninterruptibleMask((restore) =>\n    matchCauseEffect(restore(self), {\n      onFailure: (cause1) => {\n        const result = exitFailCause(cause1)\n        return matchCauseEffect(cleanup(result), {\n          onFailure: (cause2) => exitFailCause(internalCause.sequential(cause1, cause2)),\n          onSuccess: () => result\n        })\n      },\n      onSuccess: (success) => {\n        const result = exitSucceed(success)\n        return zipRight(cleanup(result), result)\n      }\n    })\n  ))\n\n/* @internal */\nexport const onInterrupt: {\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  onExit(\n    self,\n    exitMatch({\n      onFailure: (cause) =>\n        internalCause.isInterruptedOnly(cause)\n          ? asVoid(cleanup(internalCause.interruptors(cause)))\n          : void_,\n      onSuccess: () => void_\n    })\n  ))\n\n/* @internal */\nexport const orElse: {\n  <A2, E2, R2>(\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E2, R2 | R> => attemptOrElse(self, that, succeed)\n)\n\n/* @internal */\nexport const orDie = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, never, R> => orDieWith(self, identity)\n\n/* @internal */\nexport const orDieWith: {\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, never, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, f: (error: E) => unknown): Effect.Effect<A, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Effect.Effect<A, E, R>, f: (error: E) => unknown): Effect.Effect<A, never, R> =>\n    matchEffect(self, {\n      onFailure: (e) => die(f(e)),\n      onSuccess: succeed\n    })\n)\n\n/* @internal */\nexport const partitionMap = <A, A1, A2>(\n  elements: Iterable<A>,\n  f: (a: A) => Either.Either<A2, A1>\n): [left: Array<A1>, right: Array<A2>] =>\n  Arr.fromIterable(elements).reduceRight(\n    ([lefts, rights], current) => {\n      const either = f(current)\n      switch (either._tag) {\n        case \"Left\": {\n          return [[either.left, ...lefts], rights]\n        }\n        case \"Right\": {\n          return [lefts, [either.right, ...rights]]\n        }\n      }\n    },\n    [Arr.empty<A1>(), Arr.empty<A2>()]\n  )\n\n/* @internal */\nexport const runtimeFlags: Effect.Effect<RuntimeFlags.RuntimeFlags> = withFiberRuntime((_, status) =>\n  succeed(status.runtimeFlags)\n)\n\n/* @internal */\nexport const succeed = <A>(value: A): Effect.Effect<A> => {\n  const effect = new EffectPrimitiveSuccess(OpCodes.OP_SUCCESS) as any\n  effect.effect_instruction_i0 = value\n  return effect\n}\n\n/* @internal */\nexport const suspend = <A, E, R>(effect: LazyArg<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> =>\n  flatMap(sync(effect), identity)\n\n/* @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Effect.Effect<A> => {\n  const effect = new EffectPrimitive(OpCodes.OP_SYNC) as any\n  effect.effect_instruction_i0 = evaluate\n  return effect\n}\n\n/* @internal */\nexport const tap = dual<\n  {\n    <A, X>(\n      f: (a: NoInfer<A>) => X\n    ): <E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, X, E1, R1>(\n      f: (a: NoInfer<A>) => Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): <E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => Effect.Effect<A, E | E1, R | R1>\n    <X>(\n      f: NotFunction<X>\n    ): <A, E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <X, E1, R1>(\n      f: Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): <A, E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => Effect.Effect<A, E | E1, R | R1>\n  },\n  {\n    <A, E, R, X>(\n      self: Effect.Effect<A, E, R>,\n      f: (a: NoInfer<A>) => X\n    ): [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, E, R, X, E1, R1>(\n      self: Effect.Effect<A, E, R>,\n      f: (a: NoInfer<A>) => Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): Effect.Effect<A, E | E1, R | R1>\n    <A, E, R, X>(\n      self: Effect.Effect<A, E, R>,\n      f: NotFunction<X>\n    ): [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, E, R, X, E1, R1>(\n      self: Effect.Effect<A, E, R>,\n      f: Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): Effect.Effect<A, E | E1, R | R1>\n  }\n>(\n  (args) => args.length === 3 || args.length === 2 && !(isObject(args[1]) && \"onlyEffect\" in args[1]),\n  <A, E, R, X>(self: Effect.Effect<A, E, R>, f: X) =>\n    flatMap(self, (a) => {\n      const b = typeof f === \"function\" ? (f as any)(a) : f\n      if (isEffect(b)) {\n        return as(b, a)\n      } else if (isPromiseLike(b)) {\n        return async<any, Cause.UnknownException>((resume) => {\n          b.then((_) => resume(succeed(a)), (e) => resume(fail(new UnknownException(e))))\n        })\n      }\n      return succeed(a)\n    })\n)\n\n/* @internal */\nexport const transplant = <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect.Effect<A2, E2, R2>) => Effect.Effect<A2, E2, R2>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  withFiberRuntime<A, E, R>((state) => {\n    const scopeOverride = state.getFiberRef(currentForkScopeOverride)\n    const scope = pipe(scopeOverride, Option.getOrElse(() => state.scope()))\n    return f(fiberRefLocally(currentForkScopeOverride, Option.some(scope)))\n  })\n\n/* @internal */\nexport const attemptOrElse: {\n  <A2, E2, R2, A, A3, E3, R3>(\n    that: LazyArg<Effect.Effect<A2, E2, R2>>,\n    onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>,\n    onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3>\n} = dual(3, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  that: LazyArg<Effect.Effect<A2, E2, R2>>,\n  onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n): Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const defects = internalCause.defects(cause)\n      if (defects.length > 0) {\n        return failCause(Option.getOrThrow(internalCause.keepDefectsAndElectFailures(cause)))\n      }\n      return that()\n    },\n    onSuccess\n  }))\n\n/* @internal */\nexport const uninterruptible: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = RuntimeFlagsPatch.disable(_runtimeFlags.Interruption)\n  effect.effect_instruction_i1 = () => self\n  return effect\n}\n\n/* @internal */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect.Effect<AX, EX, RX>) => Effect.Effect<AX, EX, RX>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  custom(f, function() {\n    const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n    effect.effect_instruction_i0 = RuntimeFlagsPatch.disable(_runtimeFlags.Interruption)\n    effect.effect_instruction_i1 = (oldFlags: RuntimeFlags.RuntimeFlags) =>\n      _runtimeFlags.interruption(oldFlags)\n        ? internalCall(() => this.effect_instruction_i0(interruptible))\n        : internalCall(() => this.effect_instruction_i0(uninterruptible))\n    return effect\n  })\n\nconst void_: Effect.Effect<void> = succeed(void 0)\nexport {\n  /* @internal */\n  void_ as void\n}\n\n/* @internal */\nexport const updateRuntimeFlags = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = patch\n  effect.effect_instruction_i1 = void 0\n  return effect\n}\n\n/* @internal */\nexport const whenEffect: {\n  <E, R>(\n    condition: Effect.Effect<boolean, E, R>\n  ): <A, E2, R2>(\n    effect: Effect.Effect<A, E2, R2>\n  ) => Effect.Effect<Option.Option<A>, E | E2, R | R2>\n  <A, E2, R2, E, R>(\n    self: Effect.Effect<A, E2, R2>,\n    condition: Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E | E2, R | R2>\n} = dual(2, <A, E2, R2, E, R>(\n  self: Effect.Effect<A, E2, R2>,\n  condition: Effect.Effect<boolean, E, R>\n): Effect.Effect<Option.Option<A>, E | E2, R | R2> =>\n  flatMap(condition, (b) => {\n    if (b) {\n      return pipe(self, map(Option.some))\n    }\n    return succeed(Option.none())\n  }))\n\n/* @internal */\nexport const whileLoop = <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect.Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n): Effect.Effect<void, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_WHILE) as any\n  effect.effect_instruction_i0 = options.while\n  effect.effect_instruction_i1 = options.body\n  effect.effect_instruction_i2 = options.step\n  return effect\n}\n\n/* @internal */\nexport const withConcurrency = dual<\n  (concurrency: number | \"unbounded\") => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, concurrency: number | \"unbounded\") => Effect.Effect<A, E, R>\n>(2, (self, concurrency) => fiberRefLocally(self, currentConcurrency, concurrency))\n\n/* @internal */\nexport const withRequestBatching = dual<\n  (requestBatching: boolean) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, requestBatching: boolean) => Effect.Effect<A, E, R>\n>(2, (self, requestBatching) => fiberRefLocally(self, currentRequestBatching, requestBatching))\n\n/* @internal */\nexport const withRuntimeFlags = dual<\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect.Effect<A, E, R>\n>(2, (self, update) => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = update\n  effect.effect_instruction_i1 = () => self\n  return effect\n})\n\n/** @internal */\nexport const withTracerEnabled = dual<\n  (enabled: boolean) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean) => Effect.Effect<A, E, R>\n>(2, (effect, enabled) =>\n  fiberRefLocally(\n    effect,\n    currentTracerEnabled,\n    enabled\n  ))\n\n/** @internal */\nexport const withTracerTiming = dual<\n  (enabled: boolean) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean) => Effect.Effect<A, E, R>\n>(2, (effect, enabled) =>\n  fiberRefLocally(\n    effect,\n    currentTracerTimingEnabled,\n    enabled\n  ))\n\n/* @internal */\nexport const yieldNow = (options?: {\n  readonly priority?: number | undefined\n}): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(OpCodes.OP_YIELD) as any\n  return typeof options?.priority !== \"undefined\" ?\n    withSchedulingPriority(effect, options.priority) :\n    effect\n}\n\n/* @internal */\nexport const zip = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<[A, A2], E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => [a, b])))\n\n/* @internal */\nexport const zipFlatten: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A extends ReadonlyArray<any>, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[...A, A2], E | E2, R | R2>\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<[...A, A2], E | E2, R | R2>\n} = dual(2, <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<[...A, A2], E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => [...a, b])))\n\n/* @internal */\nexport const zipLeft: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A, E | E2, R | R2>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<A, E | E2, R | R2> => flatMap(self, (a) => as(that, a)))\n\n/* @internal */\nexport const zipRight: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2, E | E2, R | R2>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<A2, E | E2, R | R2> => flatMap(self, () => that))\n\n/* @internal */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E2, R | R2>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B\n  ): Effect.Effect<B, E | E2, R | R2>\n} = dual(3, <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B\n): Effect.Effect<B, E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => f(a, b))))\n\n/* @internal */\nexport const never: Effect.Effect<never> = async<never>(() => {\n  const interval = setInterval(() => {\n    //\n  }, 2 ** 31 - 1)\n  return sync(() => clearInterval(interval))\n})\n\n// -----------------------------------------------------------------------------\n// Fiber\n// -----------------------------------------------------------------------------\n\n/* @internal */\nexport const interruptFiber = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Exit.Exit<A, E>> =>\n  flatMap(fiberId, (fiberId) => pipe(self, interruptAsFiber(fiberId)))\n\n/* @internal */\nexport const interruptAsFiber = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Fiber.Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>>,\n  <A, E>(self: Fiber.Fiber<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<Exit.Exit<A, E>>\n>(2, (self, fiberId) => flatMap(self.interruptAsFork(fiberId), () => self.await))\n\n// -----------------------------------------------------------------------------\n// LogLevel\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const logLevelAll: LogLevel.LogLevel = {\n  _tag: \"All\",\n  syslog: 0,\n  label: \"ALL\",\n  ordinal: Number.MIN_SAFE_INTEGER,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelFatal: LogLevel.LogLevel = {\n  _tag: \"Fatal\",\n  syslog: 2,\n  label: \"FATAL\",\n  ordinal: 50000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelError: LogLevel.LogLevel = {\n  _tag: \"Error\",\n  syslog: 3,\n  label: \"ERROR\",\n  ordinal: 40000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelWarning: LogLevel.LogLevel = {\n  _tag: \"Warning\",\n  syslog: 4,\n  label: \"WARN\",\n  ordinal: 30000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelInfo: LogLevel.LogLevel = {\n  _tag: \"Info\",\n  syslog: 6,\n  label: \"INFO\",\n  ordinal: 20000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelDebug: LogLevel.LogLevel = {\n  _tag: \"Debug\",\n  syslog: 7,\n  label: \"DEBUG\",\n  ordinal: 10000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelTrace: LogLevel.LogLevel = {\n  _tag: \"Trace\",\n  syslog: 7,\n  label: \"TRACE\",\n  ordinal: 0,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelNone: LogLevel.LogLevel = {\n  _tag: \"None\",\n  syslog: 7,\n  label: \"OFF\",\n  ordinal: Number.MAX_SAFE_INTEGER,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const allLogLevels: ReadonlyArray<LogLevel.LogLevel> = [\n  logLevelAll,\n  logLevelTrace,\n  logLevelDebug,\n  logLevelInfo,\n  logLevelWarning,\n  logLevelError,\n  logLevelFatal,\n  logLevelNone\n]\n\n// -----------------------------------------------------------------------------\n// FiberRef\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst FiberRefSymbolKey = \"effect/FiberRef\"\n\n/** @internal */\nexport const FiberRefTypeId: FiberRef.FiberRefTypeId = Symbol.for(\n  FiberRefSymbolKey\n) as FiberRef.FiberRefTypeId\n\nconst fiberRefVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/* @internal */\nexport const fiberRefGet = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<A> =>\n  fiberRefModify(self, (a) => [a, a] as const)\n\n/* @internal */\nexport const fiberRefGetAndSet = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<A>\n>(2, (self, value) => fiberRefModify(self, (v) => [v, value] as const))\n\n/* @internal */\nexport const fiberRefGetAndUpdate = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, (self, f) => fiberRefModify(self, (v) => [v, f(v)] as const))\n\n/* @internal */\nexport const fiberRefGetAndUpdateSome = dual<\n  <A>(\n    pf: (a: A) => Option.Option<A>\n  ) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(\n    self: FiberRef.FiberRef<A>,\n    pf: (a: A) => Option.Option<A>\n  ) => Effect.Effect<A>\n>(2, (self, pf) => fiberRefModify(self, (v) => [v, Option.getOrElse(pf(v), () => v)] as const))\n\n/* @internal */\nexport const fiberRefGetWith = dual<\n  <B, E, R, A>(f: (a: A) => Effect.Effect<B, E, R>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, E, R>(self: FiberRef.FiberRef<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>\n>(2, (self, f) => flatMap(fiberRefGet(self), f))\n\n/* @internal */\nexport const fiberRefSet = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void>\n>(2, (self, value) => fiberRefModify(self, () => [void 0, value] as const))\n\n/* @internal */\nexport const fiberRefDelete = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<void> =>\n  withFiberRuntime((state) => {\n    state.unsafeDeleteFiberRef(self)\n    return void_\n  })\n\n/* @internal */\nexport const fiberRefReset = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<void> => fiberRefSet(self, self.initial)\n\n/* @internal */\nexport const fiberRefModify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: FiberRef.FiberRef<A>) => Effect.Effect<B>,\n  <A, B>(self: FiberRef.FiberRef<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, <A, B>(\n  self: FiberRef.FiberRef<A>,\n  f: (a: A) => readonly [B, A]\n): Effect.Effect<B> =>\n  withFiberRuntime((state) => {\n    const [b, a] = f(state.getFiberRef(self) as A)\n    state.setFiberRef(self, a)\n    return succeed(b)\n  }))\n\n/* @internal */\nexport const fiberRefModifySome = <A, B>(\n  self: FiberRef.FiberRef<A>,\n  def: B,\n  f: (a: A) => Option.Option<readonly [B, A]>\n): Effect.Effect<B> => fiberRefModify(self, (v) => Option.getOrElse(f(v), () => [def, v] as const))\n\n/* @internal */\nexport const fiberRefUpdate = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void>\n>(2, (self, f) => fiberRefModify(self, (v) => [void 0, f(v)] as const))\n\n/* @internal */\nexport const fiberRefUpdateSome = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<void>\n>(2, (self, pf) => fiberRefModify(self, (v) => [void 0, Option.getOrElse(pf(v), () => v)] as const))\n\n/* @internal */\nexport const fiberRefUpdateAndGet = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, (self, f) =>\n  fiberRefModify(self, (v) => {\n    const result = f(v)\n    return [result, result] as const\n  }))\n\n/* @internal */\nexport const fiberRefUpdateSomeAndGet = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, (self, pf) =>\n  fiberRefModify(self, (v) => {\n    const result = Option.getOrElse(pf(v), () => v)\n    return [result, result] as const\n  }))\n\n// circular\n/** @internal */\nconst RequestResolverSymbolKey = \"effect/RequestResolver\"\n\n/** @internal */\nexport const RequestResolverTypeId: RequestResolver.RequestResolverTypeId = Symbol.for(\n  RequestResolverSymbolKey\n) as RequestResolver.RequestResolverTypeId\n\nconst requestResolverVariance = {\n  /* c8 ignore next */\n  _A: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nexport class RequestResolverImpl<in A, out R> implements RequestResolver.RequestResolver<A, R> {\n  readonly [RequestResolverTypeId] = requestResolverVariance\n  constructor(\n    readonly runAll: (\n      requests: Array<Array<Request.Entry<A>>>\n    ) => Effect.Effect<void, never, R>,\n    readonly target?: unknown\n  ) {\n  }\n  [Hash.symbol](): number {\n    return Hash.cached(this, this.target ? Hash.hash(this.target) : Hash.random(this))\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return this.target ?\n      isRequestResolver(that) && Equal.equals(this.target, (that as RequestResolverImpl<any, any>).target) :\n      this === that\n  }\n  identified(...ids: Array<unknown>): RequestResolver.RequestResolver<A, R> {\n    return new RequestResolverImpl(this.runAll, Chunk.fromIterable(ids))\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isRequestResolver = (u: unknown): u is RequestResolver.RequestResolver<unknown, unknown> =>\n  hasProperty(u, RequestResolverTypeId)\n\n// end\n\n/** @internal */\nexport const resolverLocally = dual<\n  <A>(\n    self: FiberRef.FiberRef<A>,\n    value: A\n  ) => <R, B extends Request.Request<any, any>>(\n    use: RequestResolver.RequestResolver<B, R>\n  ) => RequestResolver.RequestResolver<B, R>,\n  <R, B extends Request.Request<any, any>, A>(\n    use: RequestResolver.RequestResolver<B, R>,\n    self: FiberRef.FiberRef<A>,\n    value: A\n  ) => RequestResolver.RequestResolver<B, R>\n>(3, <R, B extends Request.Request<any, any>, A>(\n  use: RequestResolver.RequestResolver<B, R>,\n  self: FiberRef.FiberRef<A>,\n  value: A\n): RequestResolver.RequestResolver<B, R> =>\n  new RequestResolverImpl<B, R>(\n    (requests) =>\n      fiberRefLocally(\n        use.runAll(requests),\n        self,\n        value\n      ),\n    Chunk.make(\"Locally\", use, self, value)\n  ))\n\n/** @internal */\nexport const requestBlockLocally = <A>(\n  self: BlockedRequests.RequestBlock,\n  ref: FiberRef.FiberRef<A>,\n  value: A\n): BlockedRequests.RequestBlock => _blockedRequests.reduce(self, LocallyReducer(ref, value))\n\nconst LocallyReducer = <A>(\n  ref: FiberRef.FiberRef<A>,\n  value: A\n): BlockedRequests.RequestBlock.Reducer<BlockedRequests.RequestBlock> => ({\n  emptyCase: () => _blockedRequests.empty,\n  parCase: (left, right) => _blockedRequests.par(left, right),\n  seqCase: (left, right) => _blockedRequests.seq(left, right),\n  singleCase: (dataSource, blockedRequest) =>\n    _blockedRequests.single(\n      resolverLocally(dataSource, ref, value),\n      blockedRequest as any\n    )\n})\n\n/* @internal */\nexport const fiberRefLocally: {\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect.Effect<B, E, R>\n} = dual(\n  3,\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect.Effect<B, E, R> =>\n    acquireUseRelease(\n      zipLeft(fiberRefGet(self), fiberRefSet(self, value)),\n      () => use,\n      (oldValue) => fiberRefSet(self, oldValue)\n    )\n)\n\n/* @internal */\nexport const fiberRefLocallyWith = dual<\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => <B, E, R>(use: Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>,\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<B, E, R>\n>(3, (use, self, f) => fiberRefGetWith(self, (a) => fiberRefLocally(use, self, f(a))))\n\n/** @internal */\nexport const fiberRefUnsafeMake = <Value>(\n  initial: Value,\n  options?: {\n    readonly fork?: ((a: Value) => Value) | undefined\n    readonly join?: ((left: Value, right: Value) => Value) | undefined\n  }\n): FiberRef.FiberRef<Value> =>\n  fiberRefUnsafeMakePatch(initial, {\n    differ: internalDiffer.update(),\n    fork: options?.fork ?? identity,\n    join: options?.join\n  })\n\n/** @internal */\nexport const fiberRefUnsafeMakeHashSet = <A>(\n  initial: HashSet.HashSet<A>\n): FiberRef.FiberRef<HashSet.HashSet<A>> => {\n  const differ = internalDiffer.hashSet<A>()\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeReadonlyArray = <A>(\n  initial: ReadonlyArray<A>\n): FiberRef.FiberRef<ReadonlyArray<A>> => {\n  const differ = internalDiffer.readonlyArray(internalDiffer.update<A>())\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeContext = <A>(\n  initial: Context.Context<A>\n): FiberRef.FiberRef<Context.Context<A>> => {\n  const differ = internalDiffer.environment<A>()\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakePatch = <Value, Patch>(\n  initial: Value,\n  options: {\n    readonly differ: Differ.Differ<Value, Patch>\n    readonly fork: Patch\n    readonly join?: ((oldV: Value, newV: Value) => Value) | undefined\n  }\n): FiberRef.FiberRef<Value> => ({\n  [FiberRefTypeId]: fiberRefVariance,\n  initial,\n  diff: (oldValue, newValue) => options.differ.diff(oldValue, newValue),\n  combine: (first, second) => options.differ.combine(first as Patch, second as Patch),\n  patch: (patch) => (oldValue) => options.differ.patch(patch as Patch, oldValue),\n  fork: options.fork,\n  join: options.join ?? ((_, n) => n),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const fiberRefUnsafeMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> =>\n  fiberRefUnsafeMakePatch(initial, {\n    differ: _runtimeFlags.differ,\n    fork: _runtimeFlags.differ.empty\n  })\n\n/** @internal */\nexport const currentContext: FiberRef.FiberRef<Context.Context<never>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentContext\"),\n  () => fiberRefUnsafeMakeContext(Context.empty())\n)\n\n/** @internal */\nexport const currentSchedulingPriority: FiberRef.FiberRef<number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentSchedulingPriority\"),\n  () => fiberRefUnsafeMake(0)\n)\n\n/** @internal */\nexport const currentMaxOpsBeforeYield: FiberRef.FiberRef<number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentMaxOpsBeforeYield\"),\n  () => fiberRefUnsafeMake(2048)\n)\n\n/** @internal */\nexport const currentLogAnnotations: FiberRef.FiberRef<HashMap.HashMap<string, unknown>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogAnnotation\"),\n  () => fiberRefUnsafeMake(HashMap.empty())\n)\n\n/** @internal */\nexport const currentLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogLevel\"),\n  () => fiberRefUnsafeMake<LogLevel.LogLevel>(logLevelInfo)\n)\n\n/** @internal */\nexport const currentLogSpan: FiberRef.FiberRef<List.List<LogSpan.LogSpan>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogSpan\"),\n  () => fiberRefUnsafeMake(List.empty<LogSpan.LogSpan>())\n)\n\n/** @internal */\nexport const withSchedulingPriority = dual<\n  (priority: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, priority: number) => Effect.Effect<A, E, R>\n>(2, (self, scheduler) => fiberRefLocally(self, currentSchedulingPriority, scheduler))\n\n/** @internal */\nexport const withMaxOpsBeforeYield = dual<\n  (priority: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, priority: number) => Effect.Effect<A, E, R>\n>(2, (self, scheduler) => fiberRefLocally(self, currentMaxOpsBeforeYield, scheduler))\n\n/** @internal */\nexport const currentConcurrency: FiberRef.FiberRef<\"unbounded\" | number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentConcurrency\"),\n  () => fiberRefUnsafeMake<\"unbounded\" | number>(\"unbounded\")\n)\n\n/**\n * @internal\n */\nexport const currentRequestBatching = globalValue(\n  Symbol.for(\"effect/FiberRef/currentRequestBatching\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentUnhandledErrorLogLevel: FiberRef.FiberRef<Option.Option<LogLevel.LogLevel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentUnhandledErrorLogLevel\"),\n  () => fiberRefUnsafeMake(Option.some<LogLevel.LogLevel>(logLevelDebug))\n)\n\n/** @internal */\nexport const withUnhandledErrorLogLevel = dual<\n  (level: Option.Option<LogLevel.LogLevel>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, level: Option.Option<LogLevel.LogLevel>) => Effect.Effect<A, E, R>\n>(2, (self, level) => fiberRefLocally(self, currentUnhandledErrorLogLevel, level))\n\n/** @internal */\nexport const currentMetricLabels: FiberRef.FiberRef<ReadonlyArray<MetricLabel.MetricLabel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentMetricLabels\"),\n  () => fiberRefUnsafeMakeReadonlyArray(Arr.empty())\n)\n\n/* @internal */\nexport const metricLabels: Effect.Effect<ReadonlyArray<MetricLabel.MetricLabel>> = fiberRefGet(\n  currentMetricLabels\n)\n\n/** @internal */\nexport const currentForkScopeOverride: FiberRef.FiberRef<Option.Option<fiberScope.FiberScope>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentForkScopeOverride\"),\n  () =>\n    fiberRefUnsafeMake(Option.none(), {\n      fork: () => Option.none() as Option.Option<fiberScope.FiberScope>,\n      join: (parent, _) => parent\n    })\n)\n\n/** @internal */\nexport const currentInterruptedCause: FiberRef.FiberRef<Cause.Cause<never>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentInterruptedCause\"),\n  () =>\n    fiberRefUnsafeMake(internalCause.empty, {\n      fork: () => internalCause.empty,\n      join: (parent, _) => parent\n    })\n)\n\n/** @internal */\nexport const currentTracerEnabled: FiberRef.FiberRef<boolean> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerEnabled\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentTracerTimingEnabled: FiberRef.FiberRef<boolean> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerTiming\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentTracerSpanAnnotations: FiberRef.FiberRef<HashMap.HashMap<string, unknown>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerSpanAnnotations\"),\n  () => fiberRefUnsafeMake(HashMap.empty())\n)\n\n/** @internal */\nexport const currentTracerSpanLinks: FiberRef.FiberRef<Chunk.Chunk<Tracer.SpanLink>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerSpanLinks\"),\n  () => fiberRefUnsafeMake(Chunk.empty())\n)\n\n// -----------------------------------------------------------------------------\n// Scope\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const ScopeTypeId: Scope.ScopeTypeId = Symbol.for(\"effect/Scope\") as Scope.ScopeTypeId\n\n/** @internal */\nexport const CloseableScopeTypeId: Scope.CloseableScopeTypeId = Symbol.for(\n  \"effect/CloseableScope\"\n) as Scope.CloseableScopeTypeId\n\n/* @internal */\nexport const scopeAddFinalizer = (\n  self: Scope.Scope,\n  finalizer: Effect.Effect<unknown>\n): Effect.Effect<void> => self.addFinalizer(() => asVoid(finalizer))\n\n/* @internal */\nexport const scopeAddFinalizerExit = (\n  self: Scope.Scope,\n  finalizer: Scope.Scope.Finalizer\n): Effect.Effect<void> => self.addFinalizer(finalizer)\n\n/* @internal */\nexport const scopeClose = (\n  self: Scope.Scope.Closeable,\n  exit: Exit.Exit<unknown, unknown>\n): Effect.Effect<void> => self.close(exit)\n\n/* @internal */\nexport const scopeFork = (\n  self: Scope.Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n): Effect.Effect<Scope.Scope.Closeable> => self.fork(strategy)\n\n// -----------------------------------------------------------------------------\n// Cause\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const causeSquash = <E>(self: Cause.Cause<E>): unknown => {\n  return causeSquashWith(identity)(self)\n}\n\n/** @internal */\nexport const causeSquashWith = dual<\n  <E>(f: (error: E) => unknown) => (self: Cause.Cause<E>) => unknown,\n  <E>(self: Cause.Cause<E>, f: (error: E) => unknown) => unknown\n>(2, (self, f) => {\n  const option = pipe(self, internalCause.failureOption, Option.map(f))\n  switch (option._tag) {\n    case \"None\": {\n      return pipe(\n        internalCause.defects(self),\n        Chunk.head,\n        Option.match({\n          onNone: () => {\n            const interrupts = Arr.fromIterable(internalCause.interruptors(self)).flatMap((fiberId) =>\n              Arr.fromIterable(FiberId.ids(fiberId)).map((id) => `#${id}`)\n            )\n            return new InterruptedException(interrupts ? `Interrupted by fibers: ${interrupts.join(\", \")}` : void 0)\n          },\n          onSome: identity\n        })\n      )\n    }\n    case \"Some\": {\n      return option.value\n    }\n  }\n})\n\n// -----------------------------------------------------------------------------\n// Errors\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const YieldableError: new(message?: string, options?: ErrorOptions) => Cause.YieldableError = (function() {\n  class YieldableError extends globalThis.Error {\n    commit() {\n      return fail(this)\n    }\n    toJSON() {\n      return { ...this }\n    }\n    [NodeInspectSymbol]() {\n      if (this.toString !== globalThis.Error.prototype.toString) {\n        return this.stack ? `${this.toString()}\\n${this.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : this.toString()\n      } else if (\"Bun\" in globalThis) {\n        return internalCause.pretty(internalCause.fail(this), { renderErrorCause: true })\n      }\n      return this\n    }\n  }\n  Object.assign(YieldableError.prototype, StructuralCommitPrototype)\n  return YieldableError as any\n})()\n\nconst makeException = <T extends { _tag: string; message?: string }>(\n  proto: Omit<T, keyof Cause.YieldableError | \"_tag\">,\n  tag: T[\"_tag\"]\n): new(message?: string | undefined) => T => {\n  class Base extends YieldableError {\n    readonly _tag = tag\n  }\n  Object.assign(Base.prototype, proto)\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/** @internal */\nexport const RuntimeExceptionTypeId: Cause.RuntimeExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/RuntimeException\"\n) as Cause.RuntimeExceptionTypeId\n\n/** @internal */\nexport const RuntimeException = makeException<Cause.RuntimeException>({\n  [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}, \"RuntimeException\")\n\n/** @internal */\nexport const isRuntimeException = (u: unknown): u is Cause.RuntimeException => hasProperty(u, RuntimeExceptionTypeId)\n\n/** @internal */\nexport const InterruptedExceptionTypeId: Cause.InterruptedExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/InterruptedException\"\n) as Cause.InterruptedExceptionTypeId\n\n/** @internal */\nexport const InterruptedException = makeException<Cause.InterruptedException>({\n  [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}, \"InterruptedException\")\n\n/** @internal */\nexport const isInterruptedException = (u: unknown): u is Cause.InterruptedException =>\n  hasProperty(u, InterruptedExceptionTypeId)\n\n/** @internal */\nexport const IllegalArgumentExceptionTypeId: Cause.IllegalArgumentExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/IllegalArgument\"\n) as Cause.IllegalArgumentExceptionTypeId\n\n/** @internal */\nexport const IllegalArgumentException = makeException<Cause.IllegalArgumentException>({\n  [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}, \"IllegalArgumentException\")\n\n/** @internal */\nexport const isIllegalArgumentException = (u: unknown): u is Cause.IllegalArgumentException =>\n  hasProperty(u, IllegalArgumentExceptionTypeId)\n\n/** @internal */\nexport const NoSuchElementExceptionTypeId: Cause.NoSuchElementExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/NoSuchElement\"\n) as Cause.NoSuchElementExceptionTypeId\n\n/** @internal */\nexport const NoSuchElementException = makeException<Cause.NoSuchElementException>({\n  [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}, \"NoSuchElementException\")\n\n/** @internal */\nexport const isNoSuchElementException = (u: unknown): u is Cause.NoSuchElementException =>\n  hasProperty(u, NoSuchElementExceptionTypeId)\n\n/** @internal */\nexport const InvalidPubSubCapacityExceptionTypeId: Cause.InvalidPubSubCapacityExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/InvalidPubSubCapacityException\"\n) as Cause.InvalidPubSubCapacityExceptionTypeId\n\n/** @internal */\nexport const InvalidPubSubCapacityException = makeException<Cause.InvalidPubSubCapacityException>({\n  [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}, \"InvalidPubSubCapacityException\")\n\n/** @internal */\nexport const ExceededCapacityExceptionTypeId: Cause.ExceededCapacityExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/ExceededCapacityException\"\n) as Cause.ExceededCapacityExceptionTypeId\n\n/** @internal */\nexport const ExceededCapacityException = makeException<Cause.ExceededCapacityException>({\n  [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}, \"ExceededCapacityException\")\n\n/** @internal */\nexport const isExceededCapacityException = (u: unknown): u is Cause.ExceededCapacityException =>\n  hasProperty(u, ExceededCapacityExceptionTypeId)\n\n/** @internal */\nexport const isInvalidCapacityError = (u: unknown): u is Cause.InvalidPubSubCapacityException =>\n  hasProperty(u, InvalidPubSubCapacityExceptionTypeId)\n\n/** @internal */\nexport const TimeoutExceptionTypeId: Cause.TimeoutExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/Timeout\"\n) as Cause.TimeoutExceptionTypeId\n\n/** @internal */\nexport const TimeoutException = makeException<Cause.TimeoutException>({\n  [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}, \"TimeoutException\")\n/** @internal */\nexport const timeoutExceptionFromDuration = (duration: Duration.DurationInput): Cause.TimeoutException =>\n  new TimeoutException(`Operation timed out before the specified duration of '${Duration.format(duration)}' elapsed`)\n\n/** @internal */\nexport const isTimeoutException = (u: unknown): u is Cause.TimeoutException => hasProperty(u, TimeoutExceptionTypeId)\n\n/** @internal */\nexport const UnknownExceptionTypeId: Cause.UnknownExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/UnknownException\"\n) as Cause.UnknownExceptionTypeId\n\n/** @internal */\nexport const UnknownException: new(cause: unknown, message?: string | undefined) => Cause.UnknownException =\n  (function() {\n    class UnknownException extends YieldableError {\n      readonly _tag = \"UnknownException\"\n      readonly error: unknown\n      constructor(readonly cause: unknown, message?: string) {\n        super(message ?? \"An unknown error occurred\", { cause })\n        this.error = cause\n      }\n    }\n    Object.assign(UnknownException.prototype, {\n      [UnknownExceptionTypeId]: UnknownExceptionTypeId,\n      name: \"UnknownException\"\n    })\n    return UnknownException as any\n  })()\n\n/** @internal */\nexport const isUnknownException = (u: unknown): u is Cause.UnknownException => hasProperty(u, UnknownExceptionTypeId)\n\n// -----------------------------------------------------------------------------\n// Exit\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const exitIsExit = (u: unknown): u is Exit.Exit<unknown, unknown> =>\n  isEffect(u) && \"_tag\" in u && (u._tag === \"Success\" || u._tag === \"Failure\")\n\n/** @internal */\nexport const exitIsFailure = <A, E>(self: Exit.Exit<A, E>): self is Exit.Failure<A, E> => self._tag === \"Failure\"\n\n/** @internal */\nexport const exitIsSuccess = <A, E>(self: Exit.Exit<A, E>): self is Exit.Success<A, E> => self._tag === \"Success\"\n\n/** @internal */\nexport const exitIsInterrupted = <A, E>(self: Exit.Exit<A, E>): boolean => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return internalCause.isInterrupted(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return false\n  }\n}\n\n/** @internal */\nexport const exitAs = dual<\n  <A2>(value: A2) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E>,\n  <A, E, A2>(self: Exit.Exit<A, E>, value: A2) => Exit.Exit<A2, E>\n>(2, <A, E, A2>(self: Exit.Exit<A, E>, value: A2): Exit.Exit<A2, E> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return exitFailCause(self.effect_instruction_i0)\n    }\n    case OpCodes.OP_SUCCESS: {\n      return exitSucceed(value) as Exit.Exit<A2, E>\n    }\n  }\n})\n\n/** @internal */\nexport const exitAsVoid = <A, E>(self: Exit.Exit<A, E>): Exit.Exit<void, E> => exitAs(self, void 0)\n\n/** @internal */\nexport const exitCauseOption = <A, E>(self: Exit.Exit<A, E>): Option.Option<Cause.Cause<E>> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return Option.some(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return Option.none()\n  }\n}\n\n/** @internal */\nexport const exitCollectAll = <A, E>(\n  exits: Iterable<Exit.Exit<A, E>>,\n  options?: {\n    readonly parallel?: boolean | undefined\n  }\n): Option.Option<Exit.Exit<Array<A>, E>> =>\n  exitCollectAllInternal(exits, options?.parallel ? internalCause.parallel : internalCause.sequential)\n\n/** @internal */\nexport const exitDie = (defect: unknown): Exit.Exit<never> =>\n  exitFailCause(internalCause.die(defect)) as Exit.Exit<never>\n\n/** @internal */\nexport const exitExists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit.Exit<A, E>) => self is Exit.Exit<B>\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit.Exit<A, E>) => boolean\n  <A, E, B extends A>(self: Exit.Exit<A, E>, refinement: Refinement<A, B>): self is Exit.Exit<B>\n  <A, E>(self: Exit.Exit<A, E>, predicate: Predicate<A>): boolean\n} = dual(2, <A, E, B extends A>(self: Exit.Exit<A, E>, refinement: Refinement<A, B>): self is Exit.Exit<B> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return false\n    case OpCodes.OP_SUCCESS:\n      return refinement(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitFail = <E>(error: E): Exit.Exit<never, E> =>\n  exitFailCause(internalCause.fail(error)) as Exit.Exit<never, E>\n\n/** @internal */\nexport const exitFailCause = <E>(cause: Cause.Cause<E>): Exit.Exit<never, E> => {\n  const effect = new EffectPrimitiveFailure(OpCodes.OP_FAILURE) as any\n  effect.effect_instruction_i0 = cause\n  return effect\n}\n\n/** @internal */\nexport const exitFlatMap = dual<\n  <A, A2, E2>(f: (a: A) => Exit.Exit<A2, E2>) => <E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, E2, A2>(self: Exit.Exit<A, E>, f: (a: A) => Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, <A, E, E2, A2>(self: Exit.Exit<A, E>, f: (a: A) => Exit.Exit<A2, E2>): Exit.Exit<A2, E | E2> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return exitFailCause(self.effect_instruction_i0)\n    }\n    case OpCodes.OP_SUCCESS: {\n      return f(self.effect_instruction_i0)\n    }\n  }\n})\n\n/** @internal */\nexport const exitFlatMapEffect: {\n  <A, E, A2, E2, R>(\n    f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  ): (self: Exit.Exit<A, E>) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  <A, E, A2, E2, R>(\n    self: Exit.Exit<A, E>,\n    f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  ): Effect.Effect<Exit.Exit<A2, E>, E2, R>\n} = dual(2, <A, E, A2, E2, R>(\n  self: Exit.Exit<A, E>,\n  f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n): Effect.Effect<Exit.Exit<A2, E>, E2, R> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return succeed(exitFailCause(self.effect_instruction_i0))\n    }\n    case OpCodes.OP_SUCCESS: {\n      return f(self.effect_instruction_i0)\n    }\n  }\n})\n\n/** @internal */\nexport const exitFlatten = <A, E, E2>(\n  self: Exit.Exit<Exit.Exit<A, E>, E2>\n): Exit.Exit<A, E | E2> => pipe(self, exitFlatMap(identity))\n\n/** @internal */\nexport const exitForEachEffect: {\n  <A, B, E2, R>(\n    f: (a: A) => Effect.Effect<B, E2, R>\n  ): <E>(self: Exit.Exit<A, E>) => Effect.Effect<Exit.Exit<B, E | E2>, never, R>\n  <A, E, B, E2, R>(\n    self: Exit.Exit<A, E>,\n    f: (a: A) => Effect.Effect<B, E2, R>\n  ): Effect.Effect<Exit.Exit<B, E | E2>, never, R>\n} = dual(2, <A, E, B, E2, R>(\n  self: Exit.Exit<A, E>,\n  f: (a: A) => Effect.Effect<B, E2, R>\n): Effect.Effect<Exit.Exit<B, E | E2>, never, R> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return succeed(exitFailCause(self.effect_instruction_i0))\n    }\n    case OpCodes.OP_SUCCESS: {\n      return exit(f(self.effect_instruction_i0))\n    }\n  }\n})\n\n/** @internal */\nexport const exitFromEither = <R, L>(either: Either.Either<R, L>): Exit.Exit<R, L> => {\n  switch (either._tag) {\n    case \"Left\":\n      return exitFail(either.left)\n    case \"Right\":\n      return exitSucceed(either.right)\n  }\n}\n\n/** @internal */\nexport const exitFromOption = <A>(option: Option.Option<A>): Exit.Exit<A, void> => {\n  switch (option._tag) {\n    case \"None\":\n      return exitFail(void 0)\n    case \"Some\":\n      return exitSucceed(option.value)\n  }\n}\n\n/** @internal */\nexport const exitGetOrElse = dual<\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2) => <A>(self: Exit.Exit<A, E>) => A | A2,\n  <A, E, A2>(self: Exit.Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2) => A | A2\n>(2, (self, orElse) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return orElse(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return self.effect_instruction_i0\n  }\n})\n\n/** @internal */\nexport const exitInterrupt = (fiberId: FiberId.FiberId): Exit.Exit<never> =>\n  exitFailCause(internalCause.interrupt(fiberId))\n\n/** @internal */\nexport const exitMap = dual<\n  <A, B>(f: (a: A) => B) => <E>(self: Exit.Exit<A, E>) => Exit.Exit<B, E>,\n  <A, E, B>(self: Exit.Exit<A, E>, f: (a: A) => B) => Exit.Exit<B, E>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(f(self.effect_instruction_i0))\n  }\n})\n\n/** @internal */\nexport const exitMapBoth = dual<\n  <E, A, E2, A2>(\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => (self: Exit.Exit<A, E>) => Exit.Exit<A2, E2>,\n  <A, E, E2, A2>(\n    self: Exit.Exit<A, E>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => Exit.Exit<A2, E2>\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(pipe(self.effect_instruction_i0, internalCause.map(onFailure)))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(onSuccess(self.effect_instruction_i0))\n  }\n})\n\n/** @internal */\nexport const exitMapError = dual<\n  <E, E2>(f: (e: E) => E2) => <A>(self: Exit.Exit<A, E>) => Exit.Exit<A, E2>,\n  <A, E, E2>(self: Exit.Exit<A, E>, f: (e: E) => E2) => Exit.Exit<A, E2>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(pipe(self.effect_instruction_i0, internalCause.map(f)))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMapErrorCause = dual<\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => <A>(self: Exit.Exit<A, E>) => Exit.Exit<A, E2>,\n  <E, A, E2>(self: Exit.Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => Exit.Exit<A, E2>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(f(self.effect_instruction_i0))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMatch = dual<\n  <E, A, Z1, Z2>(options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Z1\n    readonly onSuccess: (a: A) => Z2\n  }) => (self: Exit.Exit<A, E>) => Z1 | Z2,\n  <A, E, Z1, Z2>(self: Exit.Exit<A, E>, options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Z1\n    readonly onSuccess: (a: A) => Z2\n  }) => Z1 | Z2\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return onFailure(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return onSuccess(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMatchEffect = dual<\n  <E, A2, E2, R, A, A3, E3, R2>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ) => (self: Exit.Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>,\n  <A, E, A2, E2, R, A3, E3, R2>(\n    self: Exit.Exit<A, E>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return onFailure(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return onSuccess(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitSucceed = <A>(value: A): Exit.Exit<A> => {\n  const effect = new EffectPrimitiveSuccess(OpCodes.OP_SUCCESS) as any\n  effect.effect_instruction_i0 = value\n  return effect\n}\n\n/** @internal */\nexport const exitVoid: Exit.Exit<void> = exitSucceed(void 0)\n\n/** @internal */\nexport const exitZip = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<[A, A2], E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, a2) => [a, a2],\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipLeft = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, _) => a,\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipRight = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (_, a2) => a2,\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipPar = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<[A, A2], E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, a2) => [a, a2],\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipParLeft = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, _) => a,\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipParRight = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (_, a2) => a2,\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipWith = dual<\n  <B, E2, A, C, E>(\n    that: Exit.Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ) => (self: Exit.Exit<A, E>) => Exit.Exit<C, E | E2>,\n  <A, E, B, E2, C>(\n    self: Exit.Exit<A, E>,\n    that: Exit.Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ) => Exit.Exit<C, E | E2>\n>(3, (\n  self,\n  that,\n  { onFailure, onSuccess }\n) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      switch (that._tag) {\n        case OpCodes.OP_SUCCESS:\n          return exitFailCause(self.effect_instruction_i0)\n        case OpCodes.OP_FAILURE: {\n          return exitFailCause(onFailure(self.effect_instruction_i0, that.effect_instruction_i0))\n        }\n      }\n    }\n    case OpCodes.OP_SUCCESS: {\n      switch (that._tag) {\n        case OpCodes.OP_SUCCESS:\n          return exitSucceed(onSuccess(self.effect_instruction_i0, that.effect_instruction_i0))\n        case OpCodes.OP_FAILURE:\n          return exitFailCause(that.effect_instruction_i0)\n      }\n    }\n  }\n})\n\nconst exitCollectAllInternal = <A, E>(\n  exits: Iterable<Exit.Exit<A, E>>,\n  combineCauses: (causeA: Cause.Cause<E>, causeB: Cause.Cause<E>) => Cause.Cause<E>\n): Option.Option<Exit.Exit<Array<A>, E>> => {\n  const list = Chunk.fromIterable(exits)\n  if (!Chunk.isNonEmpty(list)) {\n    return Option.none()\n  }\n  return pipe(\n    Chunk.tailNonEmpty(list),\n    Arr.reduce(\n      pipe(Chunk.headNonEmpty(list), exitMap<A, Chunk.Chunk<A>>(Chunk.of)),\n      (accumulator, current) =>\n        pipe(\n          accumulator,\n          exitZipWith(current, {\n            onSuccess: (list, value) => pipe(list, Chunk.prepend(value)),\n            onFailure: combineCauses\n          })\n        )\n    ),\n    exitMap(Chunk.reverse),\n    exitMap((chunk) => Chunk.toReadonlyArray(chunk) as Array<A>),\n    Option.some\n  )\n}\n\n// -----------------------------------------------------------------------------\n// Deferred\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const deferredUnsafeMake = <A, E = never>(fiberId: FiberId.FiberId): Deferred.Deferred<A, E> => ({\n  [deferred.DeferredTypeId]: deferred.deferredVariance,\n  state: MutableRef.make(deferred.pending([])),\n  blockingOn: fiberId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/* @internal */\nexport const deferredMake = <A, E = never>(): Effect.Effect<Deferred.Deferred<A, E>> =>\n  flatMap(fiberId, (id) => deferredMakeAs<A, E>(id))\n\n/* @internal */\nexport const deferredMakeAs = <A, E = never>(fiberId: FiberId.FiberId): Effect.Effect<Deferred.Deferred<A, E>> =>\n  sync(() => deferredUnsafeMake<A, E>(fiberId))\n\n/* @internal */\nexport const deferredAwait = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<A, E> =>\n  async<A, E>((resume) => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return resume(state.effect)\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        // we can push here as the internal state is mutable\n        state.joiners.push(resume)\n        return deferredInterruptJoiner(self, resume)\n      }\n    }\n  }, self.blockingOn)\n\n/* @internal */\nexport const deferredComplete: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = dual(\n  2,\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean> =>\n    intoDeferred(effect, self)\n)\n\n/* @internal */\nexport const deferredCompleteWith = dual<\n  <A, E>(effect: Effect.Effect<A, E>) => (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>) => Effect.Effect<boolean>\n>(2, (self, effect) =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return false\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        MutableRef.set(self.state, deferred.done(effect))\n        for (let i = 0, len = state.joiners.length; i < len; i++) {\n          state.joiners[i](effect)\n        }\n        return true\n      }\n    }\n  }))\n\n/* @internal */\nexport const deferredDone = dual<\n  <A, E>(exit: Exit.Exit<A, E>) => (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, exit: Exit.Exit<A, E>) => Effect.Effect<boolean>\n>(2, (self, exit) => deferredCompleteWith(self, exit))\n\n/* @internal */\nexport const deferredFail = dual<\n  <E>(error: E) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, error: E) => Effect.Effect<boolean>\n>(2, (self, error) => deferredCompleteWith(self, fail(error)))\n\n/* @internal */\nexport const deferredFailSync = dual<\n  <E>(evaluate: LazyArg<E>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<E>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, failSync(evaluate)))\n\n/* @internal */\nexport const deferredFailCause = dual<\n  <E>(cause: Cause.Cause<E>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, cause: Cause.Cause<E>) => Effect.Effect<boolean>\n>(2, (self, cause) => deferredCompleteWith(self, failCause(cause)))\n\n/* @internal */\nexport const deferredFailCauseSync = dual<\n  <E>(evaluate: LazyArg<Cause.Cause<E>>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<Cause.Cause<E>>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, failCauseSync(evaluate)))\n\n/* @internal */\nexport const deferredDie = dual<\n  (defect: unknown) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, defect: unknown) => Effect.Effect<boolean>\n>(2, (self, defect) => deferredCompleteWith(self, die(defect)))\n\n/* @internal */\nexport const deferredDieSync = dual<\n  (evaluate: LazyArg<unknown>) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<unknown>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, dieSync(evaluate)))\n\n/* @internal */\nexport const deferredInterrupt = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<boolean> =>\n  flatMap(fiberId, (fiberId) => deferredCompleteWith(self, interruptWith(fiberId)))\n\n/* @internal */\nexport const deferredInterruptWith = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<boolean>\n>(2, (self, fiberId) => deferredCompleteWith(self, interruptWith(fiberId)))\n\n/* @internal */\nexport const deferredIsDone = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<boolean> =>\n  sync(() => MutableRef.get(self.state)._tag === DeferredOpCodes.OP_STATE_DONE)\n\n/* @internal */\nexport const deferredPoll = <A, E>(\n  self: Deferred.Deferred<A, E>\n): Effect.Effect<Option.Option<Effect.Effect<A, E>>> =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return Option.some(state.effect)\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        return Option.none()\n      }\n    }\n  })\n\n/* @internal */\nexport const deferredSucceed = dual<\n  <A>(value: A) => <E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, value: A) => Effect.Effect<boolean>\n>(2, (self, value) => deferredCompleteWith(self, succeed(value)))\n\n/* @internal */\nexport const deferredSync = dual<\n  <A>(evaluate: LazyArg<A>) => <E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<A>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, sync(evaluate)))\n\n/** @internal */\nexport const deferredUnsafeDone = <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): void => {\n  const state = MutableRef.get(self.state)\n  if (state._tag === DeferredOpCodes.OP_STATE_PENDING) {\n    MutableRef.set(self.state, deferred.done(effect))\n    for (let i = 0, len = state.joiners.length; i < len; i++) {\n      state.joiners[i](effect)\n    }\n  }\n}\n\nconst deferredInterruptJoiner = <A, E>(\n  self: Deferred.Deferred<A, E>,\n  joiner: (effect: Effect.Effect<A, E>) => void\n): Effect.Effect<void> =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    if (state._tag === DeferredOpCodes.OP_STATE_PENDING) {\n      const index = state.joiners.indexOf(joiner)\n      if (index >= 0) {\n        // we can splice here as the internal state is mutable\n        state.joiners.splice(index, 1)\n      }\n    }\n  })\n\n// -----------------------------------------------------------------------------\n// Context\n// -----------------------------------------------------------------------------\n\nconst constContext = fiberRefGet(currentContext)\n\n/* @internal */\nexport const context = <R>(): Effect.Effect<Context.Context<R>, never, R> => constContext as any\n\n/* @internal */\nexport const contextWith = <R0, A>(\n  f: (context: Context.Context<R0>) => A\n): Effect.Effect<A, never, R0> => map(context<R0>(), f)\n\n/* @internal */\nexport const contextWithEffect = <R0, A, E, R>(\n  f: (context: Context.Context<R0>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | R0> => flatMap(context<R0>(), f)\n\n/* @internal */\nexport const provideContext = dual<\n  <R>(context: Context.Context<R>) => <A, E>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, context: Context.Context<R>) => Effect.Effect<A, E>\n>(2, <A, E, R>(self: Effect.Effect<A, E, R>, context: Context.Context<R>) =>\n  fiberRefLocally(\n    currentContext,\n    context\n  )(self as Effect.Effect<A, E>))\n\n/* @internal */\nexport const provideSomeContext = dual<\n  <R>(context: Context.Context<R>) => <A, E, R1>(self: Effect.Effect<A, E, R1>) => Effect.Effect<A, E, Exclude<R1, R>>,\n  <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Context.Context<R>) => Effect.Effect<A, E, Exclude<R1, R>>\n>(2, <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Context.Context<R>) =>\n  fiberRefLocallyWith(\n    currentContext,\n    (parent) => Context.merge(parent, context)\n  )(self as Effect.Effect<A, E>))\n\n/* @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (context: Context.Context<R0>) => Context.Context<R>\n  ) => <A, E>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R0>,\n  <A, E, R, R0>(\n    self: Effect.Effect<A, E, R>,\n    f: (context: Context.Context<R0>) => Context.Context<R>\n  ) => Effect.Effect<A, E, R0>\n>(2, <A, E, R, R0>(\n  self: Effect.Effect<A, E, R>,\n  f: (context: Context.Context<R0>) => Context.Context<R>\n) => contextWithEffect((context: Context.Context<R0>) => provideContext(self, f(context))))\n\n// -----------------------------------------------------------------------------\n// Tracing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const currentSpanFromFiber = <A, E>(fiber: Fiber.RuntimeFiber<A, E>): Option.Option<Tracer.Span> => {\n  const span = fiber.getFiberRef(currentContext).unsafeMap.get(internalTracer.spanTag.key) as\n    | Tracer.AnySpan\n    | undefined\n  return span !== undefined && span._tag === \"Span\" ? Option.some(span) : Option.none()\n}\n\nconst NoopSpanProto: Tracer.Span = {\n  _tag: \"Span\",\n  spanId: \"noop\",\n  traceId: \"noop\",\n  name: \"noop\",\n  sampled: false,\n  parent: Option.none(),\n  context: Context.empty(),\n  status: {\n    _tag: \"Ended\",\n    startTime: BigInt(0),\n    endTime: BigInt(0),\n    exit: exitVoid\n  },\n  attributes: new Map(),\n  links: [],\n  kind: \"internal\",\n  attribute() {},\n  event() {},\n  end() {}\n}\n\n/** @internal */\nexport const noopSpan = (name: string): Tracer.Span => {\n  const span = Object.create(NoopSpanProto)\n  span.name = name\n  return span\n}\n", "/**\n * @since 2.0.0\n */\nimport * as RA from \"./Array.js\"\nimport type { NonEmptyReadonlyArray } from \"./Array.js\"\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Chunk\") as TypeId\n\n/**\n * @category symbol\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Chunk<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  readonly length: number\n  /** @internal */\n  right: Chunk<A>\n  /** @internal */\n  left: Chunk<A>\n  /** @internal */\n  backing: Backing<A>\n  /** @internal */\n  depth: number\n}\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport interface NonEmptyChunk<out A> extends Chunk<A>, NonEmptyIterable<A> {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ChunkTypeLambda extends TypeLambda {\n  readonly type: Chunk<this[\"Target\"]>\n}\n\ntype Backing<A> =\n  | IArray<A>\n  | IConcat<A>\n  | ISingleton<A>\n  | IEmpty\n  | ISlice<A>\n\ninterface IArray<A> {\n  readonly _tag: \"IArray\"\n  readonly array: ReadonlyArray<A>\n}\n\ninterface IConcat<A> {\n  readonly _tag: \"IConcat\"\n  readonly left: Chunk<A>\n  readonly right: Chunk<A>\n}\n\ninterface ISingleton<A> {\n  readonly _tag: \"ISingleton\"\n  readonly a: A\n}\n\ninterface IEmpty {\n  readonly _tag: \"IEmpty\"\n}\n\ninterface ISlice<A> {\n  readonly _tag: \"ISlice\"\n  readonly chunk: Chunk<A>\n  readonly offset: number\n  readonly length: number\n}\n\nfunction copy<A>(\n  src: ReadonlyArray<A>,\n  srcPos: number,\n  dest: Array<A>,\n  destPos: number,\n  len: number\n) {\n  for (let i = srcPos; i < Math.min(src.length, srcPos + len); i++) {\n    dest[destPos + i - srcPos] = src[i]!\n  }\n  return dest\n}\n\nconst emptyArray: ReadonlyArray<never> = []\n\n/**\n * Compares the two chunks of equal length using the specified function\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Chunk<A>> =>\n  Equivalence.make((self, that) =>\n    self.length === that.length && toReadonlyArray(self).every((value, i) => isEquivalent(value, unsafeGet(that, i)))\n  )\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ChunkProto: Omit<Chunk<unknown>, \"backing\" | \"depth\" | \"left\" | \"length\" | \"right\"> = {\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  toString<A>(this: Chunk<A>) {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: Chunk<A>) {\n    return {\n      _id: \"Chunk\",\n      values: toReadonlyArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]<A>(this: Chunk<A>) {\n    return this.toJSON()\n  },\n  [Equal.symbol]<A>(this: Chunk<A>, that: unknown): boolean {\n    return isChunk(that) && _equivalence(this, that)\n  },\n  [Hash.symbol]<A>(this: Chunk<A>): number {\n    return Hash.cached(this, Hash.array(toReadonlyArray(this)))\n  },\n  [Symbol.iterator]<A>(this: Chunk<A>): Iterator<A> {\n    switch (this.backing._tag) {\n      case \"IArray\": {\n        return this.backing.array[Symbol.iterator]()\n      }\n      case \"IEmpty\": {\n        return emptyArray[Symbol.iterator]()\n      }\n      default: {\n        return toReadonlyArray(this)[Symbol.iterator]()\n      }\n    }\n  },\n  pipe<A>(this: Chunk<A>) {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeChunk = <A>(backing: Backing<A>): Chunk<A> => {\n  const chunk = Object.create(ChunkProto)\n  chunk.backing = backing\n  switch (backing._tag) {\n    case \"IEmpty\": {\n      chunk.length = 0\n      chunk.depth = 0\n      chunk.left = chunk\n      chunk.right = chunk\n      break\n    }\n    case \"IConcat\": {\n      chunk.length = backing.left.length + backing.right.length\n      chunk.depth = 1 + Math.max(backing.left.depth, backing.right.depth)\n      chunk.left = backing.left\n      chunk.right = backing.right\n      break\n    }\n    case \"IArray\": {\n      chunk.length = backing.array.length\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISingleton\": {\n      chunk.length = 1\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISlice\": {\n      chunk.length = backing.length\n      chunk.depth = backing.chunk.depth + 1\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n  }\n  return chunk\n}\n\n/**\n * Checks if `u` is a `Chunk<unknown>`\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const isChunk: {\n  <A>(u: Iterable<A>): u is Chunk<A>\n  (u: unknown): u is Chunk<unknown>\n} = (u: unknown): u is Chunk<unknown> => hasProperty(u, TypeId)\n\nconst _empty = makeChunk<never>({ _tag: \"IEmpty\" })\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Chunk<A> = () => _empty\n\n/**\n * Builds a `NonEmptyChunk` from an non-empty collection of elements.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <As extends readonly [any, ...ReadonlyArray<any>]>(\n  ...as: As\n): NonEmptyChunk<As[number]> => as.length === 1 ? of(as[0]) : unsafeFromNonEmptyArray(as)\n\n/**\n * Builds a `NonEmptyChunk` from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyChunk<A> => makeChunk({ _tag: \"ISingleton\", a }) as any\n\n/**\n * Creates a new `Chunk` from an iterable collection of values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(self: Iterable<A>): Chunk<A> =>\n  isChunk(self) ? self : makeChunk({ _tag: \"IArray\", array: RA.fromIterable(self) })\n\nconst copyToArray = <A>(self: Chunk<A>, array: Array<any>, initial: number): void => {\n  switch (self.backing._tag) {\n    case \"IArray\": {\n      copy(self.backing.array, 0, array, initial, self.length)\n      break\n    }\n    case \"IConcat\": {\n      copyToArray(self.left, array, initial)\n      copyToArray(self.right, array, initial + self.left.length)\n      break\n    }\n    case \"ISingleton\": {\n      array[initial] = self.backing.a\n      break\n    }\n    case \"ISlice\": {\n      let i = 0\n      let j = initial\n      while (i < self.length) {\n        array[j] = unsafeGet(self, i)\n        i += 1\n        j += 1\n      }\n      break\n    }\n  }\n}\n\nconst toArray_ = <A>(self: Chunk<A>): Array<A> => toReadonlyArray(self).slice()\n\n/**\n * Converts a `Chunk` into an `Array`. If the provided `Chunk` is non-empty\n * (`NonEmptyChunk`), the function will return a `NonEmptyArray`, ensuring the\n * non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyArray<Chunk.Infer<S>> : Array<Chunk.Infer<S>> = toArray_ as any\n\nconst toReadonlyArray_ = <A>(self: Chunk<A>): ReadonlyArray<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      return emptyArray\n    }\n    case \"IArray\": {\n      return self.backing.array\n    }\n    default: {\n      const arr = new Array<A>(self.length)\n      copyToArray(self, arr, 0)\n      self.backing = {\n        _tag: \"IArray\",\n        array: arr\n      }\n      self.left = _empty\n      self.right = _empty\n      self.depth = 0\n      return arr\n    }\n  }\n}\n\n/**\n * Converts a `Chunk` into a `ReadonlyArray`. If the provided `Chunk` is\n * non-empty (`NonEmptyChunk`), the function will return a\n * `NonEmptyReadonlyArray`, ensuring the non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toReadonlyArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyReadonlyArray<Chunk.Infer<S>> : ReadonlyArray<Chunk.Infer<S>> =\n  toReadonlyArray_ as any\n\nconst reverseChunk = <A>(self: Chunk<A>): Chunk<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\":\n    case \"ISingleton\":\n      return self\n    case \"IArray\": {\n      return makeChunk({ _tag: \"IArray\", array: RA.reverse(self.backing.array) })\n    }\n    case \"IConcat\": {\n      return makeChunk({ _tag: \"IConcat\", left: reverse(self.backing.right), right: reverse(self.backing.left) })\n    }\n    case \"ISlice\":\n      return unsafeFromArray(RA.reverse(toReadonlyArray(self)))\n  }\n}\n\n/**\n * Reverses the order of elements in a `Chunk`.\n * Importantly, if the input chunk is a `NonEmptyChunk`, the reversed chunk will also be a `NonEmptyChunk`.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * const numbers = Chunk.make(1, 2, 3)\n * const reversedNumbers = Chunk.reverse(numbers)\n * assert.deepStrictEqual(reversedNumbers, Chunk.make(3, 2, 1))\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse: <S extends Chunk<any>>(self: S) => Chunk.With<S, Chunk.Infer<S>> = reverseChunk as any\n\n/**\n * This function provides a safe way to read a value at a particular index from a `Chunk`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const get: {\n  (index: number): <A>(self: Chunk<A>) => Option<A>\n  <A>(self: Chunk<A>, index: number): Option<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, index: number): Option<A> =>\n    index < 0 || index >= self.length ? O.none() : O.some(unsafeGet(self, index))\n)\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromArray = <A>(self: ReadonlyArray<A>): Chunk<A> => makeChunk({ _tag: \"IArray\", array: self })\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromNonEmptyArray = <A>(self: NonEmptyReadonlyArray<A>): NonEmptyChunk<A> =>\n  unsafeFromArray(self) as any\n\n/**\n * Gets an element unsafely, will throw on out of bounds\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  (index: number): <A>(self: Chunk<A>) => A\n  <A>(self: Chunk<A>, index: number): A\n} = dual(2, <A>(self: Chunk<A>, index: number): A => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      throw new Error(`Index out of bounds`)\n    }\n    case \"ISingleton\": {\n      if (index !== 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.a\n    }\n    case \"IArray\": {\n      if (index >= self.length || index < 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.array[index]!\n    }\n    case \"IConcat\": {\n      return index < self.left.length\n        ? unsafeGet(self.left, index)\n        : unsafeGet(self.right, index - self.left.length)\n    }\n    case \"ISlice\": {\n      return unsafeGet(self.backing.chunk, index + self.backing.offset)\n    }\n  }\n})\n\n/**\n * Appends the specified element to the end of the `Chunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <A2>(a: A2): <A>(self: Chunk<A>) => NonEmptyChunk<A2 | A>\n  <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2>\n} = dual(2, <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2> => appendAll(self, of(a)))\n\n/**\n * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <B>(elem: B): <A>(self: Chunk<A>) => NonEmptyChunk<B | A>\n  <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B> => appendAll(of(elem), self))\n\n/**\n * Takes the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const take: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return _empty\n  } else if (n >= self.length) {\n    return self\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          length: n,\n          offset: self.backing.offset\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return makeChunk({\n            _tag: \"IConcat\",\n            left: self.left,\n            right: take(self.right, n - self.left.length)\n          })\n        }\n\n        return take(self.left, n)\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: 0,\n          length: n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const drop: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return self\n  } else if (n >= self.length) {\n    return _empty\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          offset: self.backing.offset + n,\n          length: self.backing.length - n\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return drop(self.right, n - self.left.length)\n        }\n        return makeChunk({\n          _tag: \"IConcat\",\n          left: drop(self.left, n),\n          right: self.right\n        })\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: n,\n          length: self.length - n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the last `n` elements.\n *\n * @since 2.0.0\n */\nexport const dropRight: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => take(self, Math.max(0, self.length - n)))\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n */\nexport const dropWhile: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const arr = toReadonlyArray(self)\n  const len = arr.length\n  let i = 0\n  while (i < len && predicate(arr[i]!)) {\n    i++\n  }\n  return drop(self, i)\n})\n\n/**\n * Prepends the specified prefix chunk to the beginning of the specified chunk.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    that: T\n  ): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): Chunk<A | B> => appendAll(that, self))\n\n/**\n * Concatenates two chunks, combining their elements.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    that: T\n  ): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B> => {\n  if (self.backing._tag === \"IEmpty\") {\n    return that\n  }\n  if (that.backing._tag === \"IEmpty\") {\n    return self\n  }\n  const diff = that.depth - self.depth\n  if (Math.abs(diff) <= 1) {\n    return makeChunk<A | B>({ _tag: \"IConcat\", left: self, right: that })\n  } else if (diff < -1) {\n    if (self.left.depth >= self.right.depth) {\n      const nr = appendAll(self.right, that)\n      return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n    } else {\n      const nrr = appendAll(self.right.right, that)\n      if (nrr.depth === self.depth - 3) {\n        const nr = makeChunk({ _tag: \"IConcat\", left: self.right.left, right: nrr })\n        return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n      } else {\n        const nl = makeChunk({ _tag: \"IConcat\", left: self.left, right: self.right.left })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: nrr })\n      }\n    }\n  } else {\n    if (that.right.depth >= that.left.depth) {\n      const nl = appendAll(self, that.left)\n      return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n    } else {\n      const nll = appendAll(self, that.left.left)\n      if (nll.depth === that.depth - 3) {\n        const nl = makeChunk({ _tag: \"IConcat\", left: nll, right: that.left.right })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n      } else {\n        const nr = makeChunk({ _tag: \"IConcat\", left: that.left.right, right: that.right })\n        return makeChunk({ _tag: \"IConcat\", left: nll, right: nr })\n      }\n    }\n  }\n})\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B> => unsafeFromArray(RA.filterMap(self, f))\n)\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => unsafeFromArray(RA.filter(self, predicate))\n)\n\n/**\n * Transforms all elements of the chunk for as long as the specified function returns some value\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMapWhile: {\n  <A, B>(f: (a: A) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A) => Option<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => Option<B>) => unsafeFromArray(RA.filterMapWhile(self, f)))\n\n/**\n * Filter out optional values\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact = <A>(self: Chunk<Option<A>>): Chunk<A> => filterMap(self, identity)\n\n/**\n * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    f: (a: Chunk.Infer<S>, i: number) => T\n  ): (self: S) => Chunk.AndNonEmpty<S, T, Chunk.Infer<T>>\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => NonEmptyChunk<B>): NonEmptyChunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>) => {\n  if (self.backing._tag === \"ISingleton\") {\n    return f(self.backing.a, 0)\n  }\n  let out: Chunk<B> = _empty\n  let i = 0\n  for (const k of self) {\n    out = appendAll(out, f(k, i++))\n  }\n  return out\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  <A, B>(f: (a: A) => B): (self: Chunk<A>) => void\n  <A, B>(self: Chunk<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => B): void => toReadonlyArray(self).forEach(f))\n\n/**\n * Flattens a chunk of chunks into a single chunk by concatenating all chunks.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <S extends Chunk<Chunk<any>>>(self: S) => Chunk.Flatten<S> = flatMap(identity) as any\n\n/**\n * Groups elements in chunks of up to `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const chunksOf: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => {\n  const gr: Array<Chunk<A>> = []\n  let current: Array<A> = []\n  toReadonlyArray(self).forEach((a) => {\n    current.push(a)\n    if (current.length >= n) {\n      gr.push(unsafeFromArray(current))\n      current = []\n    }\n  })\n  if (current.length > 0) {\n    gr.push(unsafeFromArray(current))\n  }\n  return unsafeFromArray(gr)\n})\n\n/**\n * Creates a Chunk of unique values that are included in all given Chunks.\n *\n * The order and references of result values are determined by the Chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const intersection: {\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A & B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B> =>\n    unsafeFromArray(RA.intersection(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Determines if the chunk is empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty = <A>(self: Chunk<A>): boolean => self.length === 0\n\n/**\n * Determines if the chunk is not empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isNonEmpty = <A>(self: Chunk<A>): self is NonEmptyChunk<A> => self.length > 0\n\n/**\n * Returns the first element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const head: <A>(self: Chunk<A>) => Option<A> = get(0)\n\n/**\n * Returns the first element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: Chunk<A>): A => unsafeGet(self, 0)\n\n/**\n * Returns the first element of this non empty chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const headNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeHead\n\n/**\n * Returns the last element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const last = <A>(self: Chunk<A>): Option<A> => get(self, self.length - 1)\n\n/**\n * Returns the last element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: Chunk<A>): A => unsafeGet(self, self.length - 1)\n\n/**\n * Returns the last element of this non empty chunk.\n *\n * @since 3.4.0\n * @category elements\n */\nexport const lastNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeLast\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Chunk {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Chunk<any>> = S extends Chunk<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Chunk<any>, A> = S extends NonEmptyChunk<any> ? NonEmptyChunk<A> : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    NonEmptyChunk<A>\n    : T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A> :\n    Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends Chunk<Chunk<any>>> = T extends NonEmptyChunk<NonEmptyChunk<infer A>> ? NonEmptyChunk<A>\n    : T extends Chunk<Chunk<infer A>> ? Chunk<A>\n    : never\n}\n\n/**\n * Transforms the elements of a chunk using the specified mapping function.\n * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.map(Chunk.make(1, 2), (n) => n + 1),\n *   Chunk.make(2, 3)\n * )\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <S extends Chunk<any>, B>(f: (a: Chunk.Infer<S>, i: number) => B): (self: S) => Chunk.With<S, B>\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => B): NonEmptyChunk<B>\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B> =>\n  self.backing._tag === \"ISingleton\" ?\n    of(f(self.backing.a, 0)) :\n    unsafeFromArray(pipe(toReadonlyArray(self), RA.map((a, i) => f(a, i)))))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  <S, A, B>(s: S, f: (s: S, a: A) => readonly [S, B]): (self: Chunk<A>) => [S, Chunk<B>]\n  <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>]\n} = dual(3, <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>] => {\n  const [s1, as] = RA.mapAccum(self, s, f)\n  return [s1, unsafeFromArray(as)]\n})\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: Chunk<A>) => [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Chunk<A>) => [excluded: Chunk<A>, satisfying: Chunk<A>]\n  <A, B extends A>(\n    self: Chunk<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>]\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>] =>\n    pipe(\n      RA.partition(toReadonlyArray(self), predicate),\n      ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n    )\n)\n\n/**\n * Partitions the elements of this chunk into two chunks using f.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Chunk<A>) => [left: Chunk<B>, right: Chunk<C>]\n  <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>]\n} = dual(2, <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>] =>\n  pipe(\n    RA.partitionMap(toReadonlyArray(self), f),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  ))\n\n/**\n * Partitions the elements of this chunk into two chunks.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate = <A, B>(self: Chunk<Either<B, A>>): [Chunk<A>, Chunk<B>] =>\n  pipe(\n    RA.separate(toReadonlyArray(self)),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  )\n\n/**\n * Retireves the size of the chunk\n *\n * @since 2.0.0\n * @category elements\n */\nexport const size = <A>(self: Chunk<A>): number => self.length\n\n/**\n * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n *\n * @since 2.0.0\n * @category sorting\n */\nexport const sort: {\n  <B>(O: Order.Order<B>): <A extends B>(self: Chunk<A>) => Chunk<A>\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A>\n} = dual(\n  2,\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A> => unsafeFromArray(RA.sort(toReadonlyArray(self), O))\n)\n\n/**\n * @since 2.0.0\n * @category sorting\n */\nexport const sortWith: {\n  <A, B>(f: (a: A) => B, order: Order.Order<B>): (self: Chunk<A>) => Chunk<A>\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A> => sort(self, Order.mapInput(order, f))\n)\n\n/**\n *  Returns two splits of this chunk at the specified index.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const splitAt: {\n  (n: number): <A>(self: Chunk<A>) => [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n  <A>(self: Chunk<A>, n: number): [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, n: number): [Chunk<A>, Chunk<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  (n: number): <A>(self: NonEmptyChunk<A>) => [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n  <A>(self: NonEmptyChunk<A>, n: number): [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: NonEmptyChunk<A>, n: number): [Chunk<A>, Chunk<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [self, empty()] :\n    [take(self, _n), drop(self, _n)]\n})\n\n/**\n * Splits this chunk into `n` equally sized chunks.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => chunksOf(self, Math.ceil(self.length / Math.floor(n))))\n\n/**\n * Splits this chunk on the first element that matches this predicate.\n * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n  <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>] => {\n  let i = 0\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      break\n    } else {\n      i++\n    }\n  }\n  return splitAt(self, i)\n})\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tail = <A>(self: Chunk<A>): Option<Chunk<A>> => self.length > 0 ? O.some(drop(self, 1)) : O.none()\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tailNonEmpty = <A>(self: NonEmptyChunk<A>): Chunk<A> => drop(self, 1)\n\n/**\n * Takes the last `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeRight: {\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => drop(self, self.length - n))\n\n/**\n * Takes all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeWhile: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const out: Array<A> = []\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      out.push(a)\n    } else {\n      break\n    }\n  }\n  return unsafeFromArray(out)\n})\n\n/**\n * Creates a Chunks of unique values, in order, from all given Chunks.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const union: {\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A | B>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>) => unsafeFromArray(RA.union(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const dedupe = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupe(toReadonlyArray(self)))\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const dedupeAdjacent = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupeAdjacent(self))\n\n/**\n * Takes a `Chunk` of pairs and return two corresponding `Chunk`s.\n *\n * Note: The function is reverse of `zip`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const unzip = <A, B>(self: Chunk<readonly [A, B]>): [Chunk<A>, Chunk<B>] => {\n  const [left, right] = RA.unzip(self)\n  return [unsafeFromArray(left), unsafeFromArray(right)]\n}\n\n/**\n * Zips this chunk pointwise with the specified chunk using the specified combiner.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <A, B, C>(that: Chunk<B>, f: (a: A, b: B) => C): (self: Chunk<A>) => Chunk<C>\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C>\n} = dual(\n  3,\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C> =>\n    unsafeFromArray(RA.zipWith(self, that, f))\n)\n\n/**\n * Zips this chunk pointwise with the specified chunk.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <B>(that: Chunk<B>): <A>(self: Chunk<A>) => Chunk<[A, B]>\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]> => zipWith(self, that, (a, b) => [a, b])\n)\n\n/**\n * Delete the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  (i: number): <A>(self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, i: number): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, i: number): Chunk<A> => unsafeFromArray(RA.remove(toReadonlyArray(self), i))\n)\n\n/**\n * @since 2.0.0\n */\nexport const modifyOption: {\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Option<Chunk<A | B>>\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>> =>\n    O.map(RA.modifyOption(toReadonlyArray(self), i, f), unsafeFromArray)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Chunk<A | B>\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B> => O.getOrElse(modifyOption(self, i, f), () => self)\n)\n\n/**\n * Change the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const replace: {\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Chunk<B | A>\n  <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A> => modify(self, i, () => b))\n\n/**\n * @since 2.0.0\n */\nexport const replaceOption: {\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Option<Chunk<B | A>>\n  <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>> => modifyOption(self, i, () => b))\n\n/**\n * Return a Chunk of length n with element i initialized with f(i).\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy: {\n  <A>(f: (i: number) => A): (n: number) => NonEmptyChunk<A>\n  <A>(n: number, f: (i: number) => A): NonEmptyChunk<A>\n} = dual(2, (n, f) => fromIterable(RA.makeBy(n, f)))\n\n/**\n * Create a non empty `Chunk` containing a range of integers, including both endpoints.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyChunk<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : of(start)\n\n// -------------------------------------------------------------------------------------\n// re-exports from ReadonlyArray\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  <A>(a: A): (self: Chunk<A>) => boolean\n  <A>(self: Chunk<A>, a: A): boolean\n} = RA.contains\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith: <A>(\n  isEquivalent: (self: A, that: A) => boolean\n) => {\n  (a: A): (self: Chunk<A>) => boolean\n  (self: Chunk<A>, a: A): boolean\n} = RA.containsWith\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findFirst\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findFirstIndex\n\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findLast\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findLastIndex\n\n/**\n * Check if a predicate holds true for every `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => self is Chunk<B>\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => boolean\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B> =>\n    RA.fromIterable(self).every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => self is NonEmptyChunk<A>\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A> => RA.fromIterable(self).some(predicate)\n)\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const join: {\n  (sep: string): (self: Chunk<string>) => string\n  (self: Chunk<string>, sep: string): string\n} = RA.join\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduce\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduceRight\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  (self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} => {\n  return dual(\n    2,\n    (self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.differenceWith(isEquivalent)(that, self))\n  )\n}\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk`.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const difference: {\n  <A>(that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.difference(that, self))\n)\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, isBigInt, isNumber, isString } from \"./Predicate.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Duration\")\n\nconst bigint0 = BigInt(0)\nconst bigint24 = BigInt(24)\nconst bigint60 = BigInt(60)\nconst bigint1e3 = BigInt(1_000)\nconst bigint1e6 = BigInt(1_000_000)\nconst bigint1e9 = BigInt(1_000_000_000)\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Duration extends Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly value: DurationValue\n}\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationValue =\n  | { _tag: \"Millis\"; millis: number }\n  | { _tag: \"Nanos\"; nanos: bigint }\n  | { _tag: \"Infinity\" }\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Unit =\n  | \"nano\"\n  | \"nanos\"\n  | \"micro\"\n  | \"micros\"\n  | \"milli\"\n  | \"millis\"\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"\n  | \"hour\"\n  | \"hours\"\n  | \"day\"\n  | \"days\"\n  | \"week\"\n  | \"weeks\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationInput =\n  | Duration\n  | number // millis\n  | bigint // nanos\n  | [seconds: number, nanos: number]\n  | `${number} ${Unit}`\n\nconst DURATION_REGEX = /^(-?\\d+(?:\\.\\d+)?)\\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/\n\n/**\n * @since 2.0.0\n */\nexport const decode = (input: DurationInput): Duration => {\n  if (isDuration(input)) {\n    return input\n  } else if (isNumber(input)) {\n    return millis(input)\n  } else if (isBigInt(input)) {\n    return nanos(input)\n  } else if (Array.isArray(input)) {\n    if (input.length === 2 && isNumber(input[0]) && isNumber(input[1])) {\n      return nanos(BigInt(input[0]) * bigint1e9 + BigInt(input[1]))\n    }\n  } else if (isString(input)) {\n    DURATION_REGEX.lastIndex = 0 // Reset the lastIndex before each use\n    const match = DURATION_REGEX.exec(input)\n    if (match) {\n      const [_, valueStr, unit] = match\n      const value = Number(valueStr)\n      switch (unit) {\n        case \"nano\":\n        case \"nanos\":\n          return nanos(BigInt(valueStr))\n        case \"micro\":\n        case \"micros\":\n          return micros(BigInt(valueStr))\n        case \"milli\":\n        case \"millis\":\n          return millis(value)\n        case \"second\":\n        case \"seconds\":\n          return seconds(value)\n        case \"minute\":\n        case \"minutes\":\n          return minutes(value)\n        case \"hour\":\n        case \"hours\":\n          return hours(value)\n        case \"day\":\n        case \"days\":\n          return days(value)\n        case \"week\":\n        case \"weeks\":\n          return weeks(value)\n      }\n    }\n  }\n  throw new Error(\"Invalid DurationInput\")\n}\n\n/**\n * @since 2.5.0\n */\nexport const decodeUnknown: (u: unknown) => Option.Option<Duration> = Option.liftThrowable(decode) as any\n\nconst zeroValue: DurationValue = { _tag: \"Millis\", millis: 0 }\nconst infinityValue: DurationValue = { _tag: \"Infinity\" }\n\nconst DurationProto: Omit<Duration, \"value\"> = {\n  [TypeId]: TypeId,\n  [Hash.symbol](this: Duration) {\n    return Hash.cached(this, Hash.structure(this.value))\n  },\n  [Equal.symbol](this: Duration, that: unknown): boolean {\n    return isDuration(that) && equals(this, that)\n  },\n  toString(this: Duration) {\n    return `Duration(${format(this)})`\n  },\n  toJSON(this: Duration) {\n    switch (this.value._tag) {\n      case \"Millis\":\n        return { _id: \"Duration\", _tag: \"Millis\", millis: this.value.millis }\n      case \"Nanos\":\n        return { _id: \"Duration\", _tag: \"Nanos\", hrtime: toHrTime(this) }\n      case \"Infinity\":\n        return { _id: \"Duration\", _tag: \"Infinity\" }\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst make = (input: number | bigint): Duration => {\n  const duration = Object.create(DurationProto)\n  if (isNumber(input)) {\n    if (isNaN(input) || input <= 0) {\n      duration.value = zeroValue\n    } else if (!Number.isFinite(input)) {\n      duration.value = infinityValue\n    } else if (!Number.isInteger(input)) {\n      duration.value = { _tag: \"Nanos\", nanos: BigInt(Math.round(input * 1_000_000)) }\n    } else {\n      duration.value = { _tag: \"Millis\", millis: input }\n    }\n  } else if (input <= bigint0) {\n    duration.value = zeroValue\n  } else {\n    duration.value = { _tag: \"Nanos\", nanos: input }\n  }\n  return duration\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isDuration = (u: unknown): u is Duration => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isFinite = (self: Duration): boolean => self.value._tag !== \"Infinity\"\n\n/**\n * @since 3.5.0\n * @category guards\n */\nexport const isZero = (self: Duration): boolean => {\n  switch (self.value._tag) {\n    case \"Millis\": {\n      return self.value.millis === 0\n    }\n    case \"Nanos\": {\n      return self.value.nanos === bigint0\n    }\n    case \"Infinity\": {\n      return false\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const zero: Duration = make(0)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const infinity: Duration = make(Infinity)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const nanos = (nanos: bigint): Duration => make(nanos)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const micros = (micros: bigint): Duration => make(micros * bigint1e3)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const millis = (millis: number): Duration => make(millis)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const seconds = (seconds: number): Duration => make(seconds * 1000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const minutes = (minutes: number): Duration => make(minutes * 60_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const hours = (hours: number): Duration => make(hours * 3_600_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const days = (days: number): Duration => make(days * 86_400_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const weeks = (weeks: number): Duration => make(weeks * 604_800_000)\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toMillis = (self: DurationInput): number => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return Infinity\n    case \"Nanos\":\n      return Number(_self.value.nanos) / 1_000_000\n    case \"Millis\":\n      return _self.value.millis\n  }\n}\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toSeconds = (self: DurationInput): number => toMillis(self) / 1_000\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, returns `Option.none()`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toNanos = (self: DurationInput): Option.Option<bigint> => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return Option.none()\n    case \"Nanos\":\n      return Option.some(_self.value.nanos)\n    case \"Millis\":\n      return Option.some(BigInt(Math.round(_self.value.millis * 1_000_000)))\n  }\n}\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, it throws an error.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const unsafeToNanos = (self: DurationInput): bigint => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      throw new Error(\"Cannot convert infinite duration to nanos\")\n    case \"Nanos\":\n      return _self.value.nanos\n    case \"Millis\":\n      return BigInt(Math.round(_self.value.millis * 1_000_000))\n  }\n}\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toHrTime = (self: DurationInput): [seconds: number, nanos: number] => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return [Infinity, 0]\n    case \"Nanos\":\n      return [\n        Number(_self.value.nanos / bigint1e9),\n        Number(_self.value.nanos % bigint1e9)\n      ]\n    case \"Millis\":\n      return [\n        Math.floor(_self.value.millis / 1000),\n        Math.round((_self.value.millis % 1000) * 1_000_000)\n      ]\n  }\n}\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const match: {\n  <A, B>(\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  <A, B>(\n    self: DurationInput,\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): A | B\n} = dual(2, <A, B>(\n  self: DurationInput,\n  options: {\n    readonly onMillis: (millis: number) => A\n    readonly onNanos: (nanos: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Nanos\":\n      return options.onNanos(_self.value.nanos)\n    case \"Infinity\":\n      return options.onMillis(Infinity)\n    case \"Millis\":\n      return options.onMillis(_self.value.millis)\n  }\n})\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const matchWith: {\n  <A, B>(\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  <A, B>(\n    self: DurationInput,\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): A | B\n} = dual(3, <A, B>(\n  self: DurationInput,\n  that: DurationInput,\n  options: {\n    readonly onMillis: (self: number, that: number) => A\n    readonly onNanos: (self: bigint, that: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  const _that = decode(that)\n  if (_self.value._tag === \"Infinity\" || _that.value._tag === \"Infinity\") {\n    return options.onMillis(\n      toMillis(_self),\n      toMillis(_that)\n    )\n  } else if (_self.value._tag === \"Nanos\" || _that.value._tag === \"Nanos\") {\n    const selfNanos = _self.value._tag === \"Nanos\" ?\n      _self.value.nanos :\n      BigInt(Math.round(_self.value.millis * 1_000_000))\n    const thatNanos = _that.value._tag === \"Nanos\" ?\n      _that.value.nanos :\n      BigInt(Math.round(_that.value.millis * 1_000_000))\n    return options.onNanos(selfNanos, thatNanos)\n  }\n\n  return options.onMillis(\n    _self.value.millis,\n    _that.value.millis\n  )\n})\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<Duration> = order.make((self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => (self < that ? -1 : self > that ? 1 : 0),\n    onNanos: (self, that) => (self < that ? -1 : self > that ? 1 : 0)\n  })\n)\n\n/**\n * Checks if a `Duration` is between a `minimum` and `maximum` value.\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  (options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): (self: DurationInput) => boolean\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): boolean\n} = order.between(order.mapInput(Order, decode))\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<Duration> = (self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => self === that,\n    onNanos: (self, that) => self === that\n  })\n\nconst _min = order.min(Order)\n\n/**\n * @since 2.0.0\n */\nexport const min: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _min(decode(self), decode(that)))\n\nconst _max = order.max(Order)\n\n/**\n * @since 2.0.0\n */\nexport const max: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _max(decode(self), decode(that)))\n\nconst _clamp = order.clamp(Order)\n\n/**\n * @since 2.0.0\n */\nexport const clamp: {\n  (options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): (self: DurationInput) => Duration\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): Duration\n} = dual(\n  2,\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): Duration =>\n    _clamp(decode(self), {\n      minimum: decode(options.minimum),\n      maximum: decode(options.maximum)\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const divide: {\n  (by: number): (self: DurationInput) => Option.Option<Duration>\n  (self: DurationInput, by: number): Option.Option<Duration>\n} = dual(\n  2,\n  (self: DurationInput, by: number): Option.Option<Duration> =>\n    match(self, {\n      onMillis: (millis) => {\n        if (by === 0 || isNaN(by) || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        return Option.some(make(millis / by))\n      },\n      onNanos: (nanos) => {\n        if (isNaN(by) || by <= 0 || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        try {\n          return Option.some(make(nanos / BigInt(by)))\n        } catch (e) {\n          return Option.none()\n        }\n      }\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const unsafeDivide: {\n  (by: number): (self: DurationInput) => Duration\n  (self: DurationInput, by: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, by: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis / by),\n      onNanos: (nanos) => {\n        if (isNaN(by) || by < 0 || Object.is(by, -0)) {\n          return zero\n        } else if (Object.is(by, 0) || !Number.isFinite(by)) {\n          return infinity\n        }\n        return make(nanos / BigInt(by))\n      }\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const times: {\n  (times: number): (self: DurationInput) => Duration\n  (self: DurationInput, times: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, times: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis * times),\n      onNanos: (nanos) => make(nanos * BigInt(times))\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const subtract: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self - that),\n      onNanos: (self, that) => make(self - that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const sum: {\n  (that: DurationInput): (self: DurationInput) => Duration\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self + that),\n      onNanos: (self, that) => make(self + that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThan: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self < that,\n      onNanos: (self, that) => self < that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThanOrEqualTo: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self <= that,\n      onNanos: (self, that) => self <= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThan: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self > that,\n      onNanos: (self, that) => self > that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThanOrEqualTo: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self >= that,\n      onNanos: (self, that) => self >= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const equals: {\n  (that: DurationInput): (self: DurationInput) => boolean\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(2, (self: DurationInput, that: DurationInput): boolean => Equivalence(decode(self), decode(that)))\n\n/**\n * Converts a `Duration` to a human readable string.\n * @since 2.0.0\n *\n * @example\n * import { Duration } from \"effect\"\n *\n * Duration.format(Duration.millis(1000)) // \"1s\"\n * Duration.format(Duration.millis(1001)) // \"1s 1ms\"\n */\nexport const format = (self: DurationInput): string => {\n  const duration = decode(self)\n  const parts = []\n\n  if (duration.value._tag === \"Infinity\") {\n    return \"Infinity\"\n  }\n\n  const nanos = unsafeToNanos(duration)\n\n  if (nanos % bigint1e6) {\n    parts.push(`${nanos % bigint1e6}ns`)\n  }\n\n  const ms = nanos / bigint1e6\n  if (ms % bigint1e3 !== bigint0) {\n    parts.push(`${ms % bigint1e3}ms`)\n  }\n\n  const sec = ms / bigint1e3\n  if (sec % bigint60 !== bigint0) {\n    parts.push(`${sec % bigint60}s`)\n  }\n\n  const min = sec / bigint60\n  if (min % bigint60 !== bigint0) {\n    parts.push(`${min % bigint60}m`)\n  }\n\n  const hr = min / bigint60\n  if (hr % bigint24 !== bigint0) {\n    parts.push(`${hr % bigint24}h`)\n  }\n\n  const days = hr / bigint24\n  if (days !== bigint0) {\n    parts.push(`${days}d`)\n  }\n\n  return parts.reverse().join(\" \")\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/fiberId.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberIdTypeId: unique symbol = internal.FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberIdTypeId = typeof FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Single = None | Runtime\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberId = Single | Composite\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface None extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"None\"\n  readonly id: -1\n  readonly startTimeMillis: -1\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Runtime extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Runtime\"\n  readonly id: number\n  readonly startTimeMillis: number\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Composite extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Composite\"\n  readonly left: FiberId\n  readonly right: FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const none: None = internal.none\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const runtime: (id: number, startTimeMillis: number) => Runtime = internal.runtime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const composite: (left: FiberId, right: FiberId) => Composite = internal.composite\n\n/**\n * Returns `true` if the specified unknown value is a `FiberId`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberId: (self: unknown) => self is FiberId = internal.isFiberId\n\n/**\n * Returns `true` if the `FiberId` is a `None`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNone: (self: FiberId) => self is None = internal.isNone\n\n/**\n * Returns `true` if the `FiberId` is a `Runtime`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntime: (self: FiberId) => self is Runtime = internal.isRuntime\n\n/**\n * Returns `true` if the `FiberId` is a `Composite`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isComposite: (self: FiberId) => self is Composite = internal.isComposite\n\n/**\n * Combine two `FiberId`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  (that: FiberId): (self: FiberId) => FiberId\n  (self: FiberId, that: FiberId): FiberId\n} = internal.combine\n\n/**\n * Combines a set of `FiberId`s into a single `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combineAll: (fiberIds: HashSet.HashSet<FiberId>) => FiberId = internal.combineAll\n\n/**\n * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const getOrElse: {\n  (that: FiberId): (self: FiberId) => FiberId\n  (self: FiberId, that: FiberId): FiberId\n} = internal.getOrElse\n\n/**\n * Get the set of identifiers for this `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const ids: (self: FiberId) => HashSet.HashSet<number> = internal.ids\n\n/**\n * Creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (id: number, startTimeSeconds: number) => FiberId = internal.make\n\n/**\n * Creates a string representing the name of the current thread of execution\n * represented by the specified `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const threadName: (self: FiberId) => string = internal.threadName\n\n/**\n * Convert a `FiberId` into an `Option<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toOption: (self: FiberId) => Option.Option<FiberId> = internal.toOption\n\n/**\n * Convert a `FiberId` into a `HashSet<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toSet: (self: FiberId) => HashSet.HashSet<Runtime> = internal.toSet\n\n/**\n * Unsafely creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (_: void) => Runtime = internal.unsafeMake\n", "import * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\n\n/** @internal */\nconst FiberIdSymbolKey = \"effect/FiberId\"\n\n/** @internal */\nexport const FiberIdTypeId: FiberId.FiberIdTypeId = Symbol.for(\n  FiberIdSymbolKey\n) as FiberId.FiberIdTypeId\n\n/** @internal */\nconst OP_NONE = \"None\" as const\n\n/** @internal */\nexport type OP_NONE = typeof OP_NONE\n\n/** @internal */\nconst OP_RUNTIME = \"Runtime\" as const\n\n/** @internal */\nexport type OP_RUNTIME = typeof OP_RUNTIME\n\n/** @internal */\nconst OP_COMPOSITE = \"Composite\" as const\n\n/** @internal */\nexport type OP_COMPOSITE = typeof OP_COMPOSITE\n\nconst emptyHash = Hash.string(`${FiberIdSymbolKey}-${OP_NONE}`)\n\n/** @internal */\nclass None implements FiberId.None {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_NONE\n  readonly id = -1\n  readonly startTimeMillis = -1;\n  [Hash.symbol](): number {\n    return emptyHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) && that._tag === OP_NONE\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nclass Runtime implements FiberId.Runtime {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_RUNTIME\n  constructor(\n    readonly id: number,\n    readonly startTimeMillis: number\n  ) {}\n  [Hash.symbol](): number {\n    return Hash.cached(this, Hash.string(`${FiberIdSymbolKey}-${this._tag}-${this.id}-${this.startTimeMillis}`))\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) &&\n      that._tag === OP_RUNTIME &&\n      this.id === that.id &&\n      this.startTimeMillis === that.startTimeMillis\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag,\n      id: this.id,\n      startTimeMillis: this.startTimeMillis\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nclass Composite implements FiberId.Composite {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_COMPOSITE\n  constructor(\n    readonly left: FiberId.FiberId,\n    readonly right: FiberId.FiberId\n  ) {\n  }\n  _hash: number | undefined;\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.string(`${FiberIdSymbolKey}-${this._tag}`),\n      Hash.combine(Hash.hash(this.left)),\n      Hash.combine(Hash.hash(this.right)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) &&\n      that._tag === OP_COMPOSITE &&\n      Equal.equals(this.left, that.left) &&\n      Equal.equals(this.right, that.right)\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag,\n      left: toJSON(this.left),\n      right: toJSON(this.right)\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nexport const none: FiberId.None = new None()\n\n/** @internal */\nexport const runtime = (id: number, startTimeMillis: number): FiberId.Runtime => {\n  return new Runtime(id, startTimeMillis)\n}\n\n/** @internal */\nexport const composite = (left: FiberId.FiberId, right: FiberId.FiberId): FiberId.Composite => {\n  return new Composite(left, right)\n}\n\n/** @internal */\nexport const isFiberId = (self: unknown): self is FiberId.FiberId => hasProperty(self, FiberIdTypeId)\n\n/** @internal */\nexport const isNone = (self: FiberId.FiberId): self is FiberId.None => {\n  return self._tag === OP_NONE || pipe(toSet(self), HashSet.every((id) => isNone(id)))\n}\n\n/** @internal */\nexport const isRuntime = (self: FiberId.FiberId): self is FiberId.Runtime => {\n  return self._tag === OP_RUNTIME\n}\n\n/** @internal */\nexport const isComposite = (self: FiberId.FiberId): self is FiberId.Composite => {\n  return self._tag === OP_COMPOSITE\n}\n\n/** @internal */\nexport const combine = dual<\n  (that: FiberId.FiberId) => (self: FiberId.FiberId) => FiberId.FiberId,\n  (self: FiberId.FiberId, that: FiberId.FiberId) => FiberId.FiberId\n>(2, (self, that) => {\n  if (self._tag === OP_NONE) {\n    return that\n  }\n  if (that._tag === OP_NONE) {\n    return self\n  }\n  return new Composite(self, that)\n})\n\n/** @internal */\nexport const combineAll = (fiberIds: HashSet.HashSet<FiberId.FiberId>): FiberId.FiberId => {\n  return pipe(fiberIds, HashSet.reduce(none as FiberId.FiberId, (a, b) => combine(b)(a)))\n}\n\n/** @internal */\nexport const getOrElse = dual<\n  (that: FiberId.FiberId) => (self: FiberId.FiberId) => FiberId.FiberId,\n  (self: FiberId.FiberId, that: FiberId.FiberId) => FiberId.FiberId\n>(2, (self, that) => isNone(self) ? that : self)\n\n/** @internal */\nexport const ids = (self: FiberId.FiberId): HashSet.HashSet<number> => {\n  switch (self._tag) {\n    case OP_NONE: {\n      return HashSet.empty()\n    }\n    case OP_RUNTIME: {\n      return HashSet.make(self.id)\n    }\n    case OP_COMPOSITE: {\n      return pipe(ids(self.left), HashSet.union(ids(self.right)))\n    }\n  }\n}\n\nconst _fiberCounter = globalValue(\n  Symbol.for(\"effect/Fiber/Id/_fiberCounter\"),\n  () => MutableRef.make(0)\n)\n\n/** @internal */\nexport const make = (id: number, startTimeSeconds: number): FiberId.FiberId => {\n  return new Runtime(id, startTimeSeconds)\n}\n\n/** @internal */\nexport const threadName = (self: FiberId.FiberId): string => {\n  const identifiers = Array.from(ids(self)).map((n) => `#${n}`).join(\",\")\n  return identifiers\n}\n\n/** @internal */\nexport const toOption = (self: FiberId.FiberId): Option.Option<FiberId.FiberId> => {\n  const fiberIds = toSet(self)\n  if (HashSet.size(fiberIds) === 0) {\n    return Option.none()\n  }\n  let first = true\n  let acc: FiberId.FiberId\n  for (const fiberId of fiberIds) {\n    if (first) {\n      acc = fiberId\n      first = false\n    } else {\n      // @ts-expect-error\n      acc = pipe(acc, combine(fiberId))\n    }\n  }\n  // @ts-expect-error\n  return Option.some(acc)\n}\n\n/** @internal */\nexport const toSet = (self: FiberId.FiberId): HashSet.HashSet<FiberId.Runtime> => {\n  switch (self._tag) {\n    case OP_NONE: {\n      return HashSet.empty()\n    }\n    case OP_RUNTIME: {\n      return HashSet.make(self)\n    }\n    case OP_COMPOSITE: {\n      return pipe(toSet(self.left), HashSet.union(toSet(self.right)))\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeMake = (): FiberId.Runtime => {\n  const id = MutableRef.get(_fiberCounter)\n  pipe(_fiberCounter, MutableRef.set(id + 1))\n  return new Runtime(id, Date.now())\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HS from \"./internal/hashSet.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HS.HashSetTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashSet<out A> extends Iterable<A>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashSet: {\n  <A>(u: Iterable<A>): u is HashSet<A>\n  (u: unknown): u is HashSet<unknown>\n} = HS.isHashSet\n\n/**\n * Creates an empty `HashSet`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <A = never>() => HashSet<A> = HS.empty\n\n/**\n * Creates a new `HashSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <A>(elements: Iterable<A>) => HashSet<A> = HS.fromIterable\n\n/**\n * Construct a new `HashSet` from a variable number of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <As extends ReadonlyArray<any>>(...elements: As) => HashSet<As[number]> = HS.make\n\n/**\n * Checks if the specified value exists in the `HashSet`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <A>(value: A): (self: HashSet<A>) => boolean\n  <A>(self: HashSet<A>, value: A): boolean\n} = HS.has\n\n/**\n * Check if a predicate holds true for some `HashSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  <A>(f: Predicate<A>): (self: HashSet<A>) => boolean\n  <A>(self: HashSet<A>, f: Predicate<A>): boolean\n} = HS.some\n\n/**\n * Check if a predicate holds true for every `HashSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HashSet<A>) => self is HashSet<B>\n  <A>(predicate: Predicate<A>): (self: HashSet<A>) => boolean\n  <A, B extends A>(self: HashSet<A>, refinement: Refinement<A, B>): self is HashSet<B>\n  <A>(self: HashSet<A>, predicate: Predicate<A>): boolean\n} = HS.every\n\n/**\n * Returns `true` if and only if every element in the this `HashSet` is an\n * element of the second set,\n *\n * **NOTE**: the hash and equal of both sets must be the same.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  <A>(that: HashSet<A>): (self: HashSet<A>) => boolean\n  <A>(self: HashSet<A>, that: HashSet<A>): boolean\n} = HS.isSubset\n\n/**\n * Returns an `IterableIterator` of the values in the `HashSet`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <A>(self: HashSet<A>) => IterableIterator<A> = HS.values\n\n/**\n * Calculates the number of values in the `HashSet`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: HashSet<A>) => number = HS.size\n\n/**\n * Marks the `HashSet` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.beginMutation\n\n/**\n * Marks the `HashSet` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.endMutation\n\n/**\n * Mutates the `HashSet` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  <A>(f: (set: HashSet<A>) => void): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, f: (set: HashSet<A>) => void): HashSet<A>\n} = HS.mutate\n\n/**\n * Adds a value to the `HashSet`.\n *\n * @since 2.0.0\n */\nexport const add: {\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.add\n\n/**\n * Removes a value from the `HashSet`.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.remove\n\n/**\n * Computes the set difference between this `HashSet` and the specified\n * `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const difference: {\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.difference\n\n/**\n * Returns a `HashSet` of values which are present in both this set and that\n * `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.intersection\n\n/**\n * Computes the set union `(`self` + `that`)` between this `HashSet` and the\n * specified `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const union: {\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.union\n\n/**\n * Checks if a value is present in the `HashSet`. If it is present, the value\n * will be removed from the `HashSet`, otherwise the value will be added to the\n * `HashSet`.\n *\n * @since 2.0.0\n */\nexport const toggle: {\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.toggle\n\n/**\n * Maps over the values of the `HashSet` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): (self: HashSet<A>) => HashSet<B>\n  <A, B>(self: HashSet<A>, f: (a: A) => B): HashSet<B>\n} = HS.map\n\n/**\n * Chains over the values of the `HashSet` using the specified function.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, B>(f: (a: A) => Iterable<B>): (self: HashSet<A>) => HashSet<B>\n  <A, B>(self: HashSet<A>, f: (a: A) => Iterable<B>): HashSet<B>\n} = HS.flatMap\n\n/**\n * Applies the specified function to the values of the `HashSet`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <A>(f: (value: A) => void): (self: HashSet<A>) => void\n  <A>(self: HashSet<A>, f: (value: A) => void): void\n} = HS.forEach\n\n/**\n * Reduces the specified state over the values of the `HashSet`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: HashSet<A>) => Z\n  <A, Z>(self: HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = HS.reduce\n\n/**\n * Filters values out of a `HashSet` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HashSet<A>) => HashSet<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => HashSet<A>\n  <A, B extends A>(self: HashSet<A>, refinement: Refinement<A, B>): HashSet<B>\n  <A>(self: HashSet<A>, predicate: Predicate<A>): HashSet<A>\n} = HS.filter\n\n/**\n * Partition the values of a `HashSet` using the specified predicate.\n *\n * If a value matches the predicate, it will be placed into the `HashSet` on the\n * right side of the resulting `Tuple`, otherwise the value will be placed into\n * the left side.\n *\n * @since 2.0.0\n * @category partitioning\n */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HashSet<A>) => [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => [excluded: HashSet<A>, satisfying: HashSet<A>]\n  <A, B extends A>(\n    self: HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n  <A>(self: HashSet<A>, predicate: Predicate<A>): [excluded: HashSet<A>, satisfying: HashSet<A>]\n} = HS.partition\n", "import * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type { HashMap } from \"../HashMap.js\"\nimport type * as HS from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type { Predicate, Refinement } from \"../Predicate.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport * as HM from \"./hashMap.js\"\n\nconst HashSetSymbolKey = \"effect/HashSet\"\n\n/** @internal */\nexport const HashSetTypeId: HS.TypeId = Symbol.for(HashSetSymbolKey) as HS.TypeId\n\n/** @internal */\nexport interface HashSetImpl<out A> extends HS.HashSet<A> {\n  readonly _keyMap: HashMap<A, unknown>\n}\n\nconst HashSetProto: Omit<HashSetImpl<unknown>, \"_keyMap\"> = {\n  [HashSetTypeId]: HashSetTypeId,\n  [Symbol.iterator]<A>(this: HashSetImpl<A>): Iterator<A> {\n    return HM.keys(this._keyMap)\n  },\n  [Hash.symbol]<A>(this: HashSetImpl<A>): number {\n    return Hash.cached(\n      this,\n      Hash.combine(Hash.hash(this._keyMap))(Hash.hash(HashSetSymbolKey))\n    )\n  },\n  [Equal.symbol]<A>(this: HashSetImpl<A>, that: unknown): boolean {\n    if (isHashSet(that)) {\n      return (\n        HM.size(this._keyMap) === HM.size((that as HashSetImpl<A>)._keyMap) &&\n        Equal.equals(this._keyMap, (that as HashSetImpl<A>)._keyMap)\n      )\n    }\n    return false\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"HashSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const makeImpl = <A>(keyMap: HashMap<A, unknown>): HashSetImpl<A> => {\n  const set = Object.create(HashSetProto)\n  set._keyMap = keyMap\n  return set\n}\n\n/** @internal */\nexport const isHashSet: {\n  <A>(u: Iterable<A>): u is HS.HashSet<A>\n  (u: unknown): u is HS.HashSet<unknown>\n} = (u: unknown): u is HS.HashSet<unknown> => hasProperty(u, HashSetTypeId)\n\nconst _empty = makeImpl<never>(HM.empty())\n\n/** @internal */\nexport const empty = <A = never>(): HS.HashSet<A> => _empty\n\n/** @internal */\nexport const fromIterable = <A>(elements: Iterable<A>): HS.HashSet<A> => {\n  const set = beginMutation(empty<A>())\n  for (const value of elements) {\n    add(set, value)\n  }\n  return endMutation(set)\n}\n\n/** @internal */\nexport const make = <As extends ReadonlyArray<any>>(...elements: As): HS.HashSet<As[number]> => {\n  const set = beginMutation(empty<As[number]>())\n  for (const value of elements) {\n    add(set, value)\n  }\n  return endMutation(set)\n}\n\n/** @internal */\nexport const has = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, value: A) => boolean\n>(2, <A>(self: HS.HashSet<A>, value: A) => HM.has((self as HashSetImpl<A>)._keyMap, value))\n\n/** @internal */\nexport const some = dual<\n  <A>(f: Predicate<A>) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, f: Predicate<A>) => boolean\n>(2, (self, f) => {\n  let found = false\n  for (const value of self) {\n    found = f(value)\n    if (found) {\n      break\n    }\n  }\n  return found\n})\n\n/** @internal */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HS.HashSet<A>) => self is HS.HashSet<B>\n  <A>(predicate: Predicate<A>): (self: HS.HashSet<A>) => boolean\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): self is HS.HashSet<B>\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): self is HS.HashSet<B> =>\n    !some(self, (a) => !refinement(a))\n)\n\n/** @internal */\nexport const isSubset = dual<\n  <A>(that: HS.HashSet<A>) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, that: HS.HashSet<A>) => boolean\n>(2, (self, that) => every(self, (value) => has(that, value)))\n\n/** @internal */\nexport const values = <A>(self: HS.HashSet<A>): IterableIterator<A> => HM.keys((self as HashSetImpl<A>)._keyMap)\n\n/** @internal */\nexport const size = <A>(self: HS.HashSet<A>): number => HM.size((self as HashSetImpl<A>)._keyMap)\n\n/** @internal */\nexport const beginMutation = <A>(self: HS.HashSet<A>): HS.HashSet<A> =>\n  makeImpl(HM.beginMutation((self as HashSetImpl<A>)._keyMap))\n\n/** @internal */\nexport const endMutation = <A>(self: HS.HashSet<A>): HS.HashSet<A> => {\n  ;((self as HashSetImpl<A>)._keyMap as HM.HashMapImpl<A, unknown>)._editable = false\n  return self\n}\n\n/** @internal */\nexport const mutate = dual<\n  <A>(f: (set: HS.HashSet<A>) => void) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, f: (set: HS.HashSet<A>) => void) => HS.HashSet<A>\n>(2, (self, f) => {\n  const transient = beginMutation(self)\n  f(transient)\n  return endMutation(transient)\n})\n\n/** @internal */\nexport const add = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(\n  2,\n  <A>(self: HS.HashSet<A>, value: A) =>\n    ((self as HashSetImpl<A>)._keyMap as HM.HashMapImpl<A, unknown>)._editable\n      ? (HM.set(value as A, true as unknown)((self as HashSetImpl<A>)._keyMap), self)\n      : makeImpl(HM.set(value as A, true as unknown)((self as HashSetImpl<A>)._keyMap))\n)\n\n/** @internal */\nexport const remove = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(\n  2,\n  <A>(self: HS.HashSet<A>, value: A) =>\n    (((self as HashSetImpl<A>)._keyMap) as HM.HashMapImpl<A, unknown>)._editable\n      ? (HM.remove(value)((self as HashSetImpl<A>)._keyMap), self)\n      : makeImpl(HM.remove(value)((self as HashSetImpl<A>)._keyMap))\n)\n\n/** @internal */\nexport const difference = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(self, (set) => {\n    for (const value of that) {\n      remove(set, value)\n    }\n  }))\n\n/** @internal */\nexport const intersection = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(empty(), (set) => {\n    for (const value of that) {\n      if (has(value)(self)) {\n        add(value)(set)\n      }\n    }\n  }))\n\n/** @internal */\nexport const union = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(empty(), (set) => {\n    forEach(self, (value) => add(set, value))\n    for (const value of that) {\n      add(set, value)\n    }\n  }))\n\n/** @internal */\nexport const toggle = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => (self: HS.HashSet<A>) => HS.HashSet<B>,\n  <A, B>(self: HS.HashSet<A>, f: (a: A) => B) => HS.HashSet<B>\n>(2, (self, f) =>\n  mutate(empty(), (set) => {\n    forEach(self, (a) => {\n      const b = f(a)\n      if (!has(set, b)) {\n        add(set, b)\n      }\n    })\n  }))\n\n/** @internal */\nexport const flatMap = dual<\n  <A, B>(f: (a: A) => Iterable<B>) => (self: HS.HashSet<A>) => HS.HashSet<B>,\n  <A, B>(self: HS.HashSet<A>, f: (a: A) => Iterable<B>) => HS.HashSet<B>\n>(2, (self, f) =>\n  mutate(empty(), (set) => {\n    forEach(self, (a) => {\n      for (const b of f(a)) {\n        if (!has(set, b)) {\n          add(set, b)\n        }\n      }\n    })\n  }))\n\n/** @internal */\nexport const forEach = dual<\n  <A>(f: (value: A) => void) => (self: HS.HashSet<A>) => void,\n  <A>(self: HS.HashSet<A>, f: (value: A) => void) => void\n>(2, <A>(self: HS.HashSet<A>, f: (value: A) => void) =>\n  HM.forEach(\n    (self as HashSetImpl<A>)._keyMap,\n    (_, k) => f(k)\n  ))\n\n/** @internal */\nexport const reduce = dual<\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z) => (self: HS.HashSet<A>) => Z,\n  <A, Z>(self: HS.HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z) => Z\n>(3, <A, Z>(self: HS.HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z) =>\n  HM.reduce(\n    (self as HashSetImpl<A>)._keyMap,\n    zero,\n    (z, _, a) => f(z, a)\n  ))\n\n/** @internal */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HS.HashSet<A>) => HS.HashSet<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HS.HashSet<A>) => HS.HashSet<A>\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): HS.HashSet<B>\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): HS.HashSet<A>\n} = dual(2, <A>(self: HS.HashSet<A>, f: Predicate<A>) => {\n  return mutate(empty(), (set) => {\n    const iterator = values(self)\n    let next: IteratorResult<A, any>\n    while (!(next = iterator.next()).done) {\n      const value = next.value\n      if (f(value)) {\n        add(set, value)\n      }\n    }\n  })\n})\n\n/** @internal */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HS.HashSet<A>) => [excluded: HS.HashSet<Exclude<A, B>>, satisfying: HS.HashSet<B>]\n  <A>(\n    predicate: Predicate<NoInfer<A>>\n  ): (self: HS.HashSet<A>) => [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>]\n  <A, B extends A>(\n    self: HS.HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HS.HashSet<Exclude<A, B>>, satisfying: HS.HashSet<B>]\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>]\n} = dual(2, <A>(self: HS.HashSet<A>, predicate: Predicate<A>): [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>] => {\n  const iterator = values(self)\n  let next: IteratorResult<A, any>\n  const right = beginMutation(empty<A>())\n  const left = beginMutation(empty<A>())\n  while (!(next = iterator.next()).done) {\n    const value = next.value\n    if (predicate(value)) {\n      add(right, value)\n    } else {\n      add(left, value)\n    }\n  }\n  return [endMutation(left), endMutation(right)]\n})\n", "import * as Equal from \"../Equal.js\"\nimport * as Dual from \"../Function.js\"\nimport { identity, pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as HM from \"../HashMap.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { fromBitmap, hashFragment, toBitmap } from \"./hashMap/bitwise.js\"\nimport { SIZE } from \"./hashMap/config.js\"\nimport * as Node from \"./hashMap/node.js\"\n\nconst HashMapSymbolKey = \"effect/HashMap\"\n\n/** @internal */\nexport const HashMapTypeId: HM.TypeId = Symbol.for(HashMapSymbolKey) as HM.TypeId\n\ntype TraversalFn<K, V, A> = (k: K, v: V) => A\n\ntype Cont<K, V, A> =\n  | [\n    len: number,\n    children: Array<Node.Node<K, V>>,\n    i: number,\n    f: TraversalFn<K, V, A>,\n    cont: Cont<K, V, A>\n  ]\n  | undefined\n\ninterface VisitResult<K, V, A> {\n  value: A\n  cont: Cont<K, V, A>\n}\n\n/** @internal */\nexport interface HashMapImpl<out K, out V> extends HM.HashMap<K, V> {\n  _editable: boolean // mutable by design\n  _edit: number // mutable by design\n  _root: Node.Node<K, V> // mutable by design\n  _size: number // mutable by design\n}\n\nconst HashMapProto: HM.HashMap<unknown, unknown> = {\n  [HashMapTypeId]: HashMapTypeId,\n  [Symbol.iterator]<K, V>(this: HashMapImpl<K, V>): Iterator<[K, V]> {\n    return new HashMapIterator(this, (k, v) => [k, v])\n  },\n  [Hash.symbol](this: HM.HashMap<unknown, unknown>): number {\n    let hash = Hash.hash(HashMapSymbolKey)\n    for (const item of this) {\n      hash ^= pipe(Hash.hash(item[0]), Hash.combine(Hash.hash(item[1])))\n    }\n    return Hash.cached(this, hash)\n  },\n  [Equal.symbol]<K, V>(this: HashMapImpl<K, V>, that: unknown): boolean {\n    if (isHashMap(that)) {\n      if ((that as HashMapImpl<K, V>)._size !== this._size) {\n        return false\n      }\n      for (const item of this) {\n        const elem = pipe(\n          that as HM.HashMap<K, V>,\n          getHash(item[0], Hash.hash(item[0]))\n        )\n        if (Option.isNone(elem)) {\n          return false\n        } else {\n          if (!Equal.equals(item[1], elem.value)) {\n            return false\n          }\n        }\n      }\n      return true\n    }\n    return false\n  },\n  toString<K, V>(this: HashMapImpl<K, V>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"HashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeImpl = <K, V>(\n  editable: boolean,\n  edit: number,\n  root: Node.Node<K, V>,\n  size: number\n): HashMapImpl<K, V> => {\n  const map = Object.create(HashMapProto)\n  map._editable = editable\n  map._edit = edit\n  map._root = root\n  map._size = size\n  return map\n}\n\nclass HashMapIterator<in out K, in out V, out T> implements IterableIterator<T> {\n  v: Option.Option<VisitResult<K, V, T>>\n\n  constructor(readonly map: HashMapImpl<K, V>, readonly f: TraversalFn<K, V, T>) {\n    this.v = visitLazy(this.map._root, this.f, undefined)\n  }\n\n  next(): IteratorResult<T> {\n    if (Option.isNone(this.v)) {\n      return { done: true, value: undefined }\n    }\n    const v0 = this.v.value\n    this.v = applyCont(v0.cont)\n    return { done: false, value: v0.value }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return new HashMapIterator(this.map, this.f)\n  }\n}\n\nconst applyCont = <K, V, A>(cont: Cont<K, V, A>): Option.Option<VisitResult<K, V, A>> =>\n  cont\n    ? visitLazyChildren(cont[0], cont[1], cont[2], cont[3], cont[4])\n    : Option.none()\n\nconst visitLazy = <K, V, A>(\n  node: Node.Node<K, V>,\n  f: TraversalFn<K, V, A>,\n  cont: Cont<K, V, A> = undefined\n): Option.Option<VisitResult<K, V, A>> => {\n  switch (node._tag) {\n    case \"LeafNode\": {\n      if (Option.isSome(node.value)) {\n        return Option.some({\n          value: f(node.key, node.value.value),\n          cont\n        })\n      }\n      return applyCont(cont)\n    }\n    case \"CollisionNode\":\n    case \"ArrayNode\":\n    case \"IndexedNode\": {\n      const children = node.children\n      return visitLazyChildren(children.length, children, 0, f, cont)\n    }\n    default: {\n      return applyCont(cont)\n    }\n  }\n}\n\nconst visitLazyChildren = <K, V, A>(\n  len: number,\n  children: Array<Node.Node<K, V>>,\n  i: number,\n  f: TraversalFn<K, V, A>,\n  cont: Cont<K, V, A>\n): Option.Option<VisitResult<K, V, A>> => {\n  while (i < len) {\n    const child = children[i++]\n    if (child && !Node.isEmptyNode(child)) {\n      return visitLazy(child, f, [len, children, i, f, cont])\n    }\n  }\n  return applyCont(cont)\n}\n\nconst _empty = makeImpl<never, never>(false, 0, new Node.EmptyNode(), 0)\n\n/** @internal */\nexport const empty = <K = never, V = never>(): HM.HashMap<K, V> => _empty\n\n/** @internal */\nexport const make = <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n): HM.HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> => fromIterable(entries)\n\n/** @internal */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): HM.HashMap<K, V> => {\n  const map = beginMutation(empty<K, V>())\n  for (const entry of entries) {\n    set(map, entry[0], entry[1])\n  }\n  return endMutation(map)\n}\n\n/** @internal */\nexport const isHashMap: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is HM.HashMap<K, V>\n  (u: unknown): u is HM.HashMap<unknown, unknown>\n} = (u: unknown): u is HM.HashMap<unknown, unknown> => hasProperty(u, HashMapTypeId)\n\n/** @internal */\nexport const isEmpty = <K, V>(self: HM.HashMap<K, V>): boolean =>\n  self && Node.isEmptyNode((self as HashMapImpl<K, V>)._root)\n\n/** @internal */\nexport const get = Dual.dual<\n  <K1>(key: K1) => <K, V>(self: HM.HashMap<K, V>) => Option.Option<V>,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1) => Option.Option<V>\n>(2, (self, key) => getHash(self, key, Hash.hash(key)))\n\n/** @internal */\nexport const getHash = Dual.dual<\n  <K1>(key: K1, hash: number) => <K, V>(self: HM.HashMap<K, V>) => Option.Option<V>,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1, hash: number) => Option.Option<V>\n>(3, <K, V, K1>(self: HM.HashMap<K, V>, key: K1, hash: number) => {\n  let node = (self as HashMapImpl<K, V>)._root\n  let shift = 0\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    switch (node._tag) {\n      case \"LeafNode\": {\n        return Equal.equals(key, node.key) ? node.value : Option.none()\n      }\n      case \"CollisionNode\": {\n        if (hash === node.hash) {\n          const children = node.children\n          for (let i = 0, len = children.length; i < len; ++i) {\n            const child = children[i]!\n            if (\"key\" in child && Equal.equals(key, child.key)) {\n              return child.value\n            }\n          }\n        }\n        return Option.none()\n      }\n      case \"IndexedNode\": {\n        const frag = hashFragment(shift, hash)\n        const bit = toBitmap(frag)\n        if (node.mask & bit) {\n          node = node.children[fromBitmap(node.mask, bit)]!\n          shift += SIZE\n          break\n        }\n        return Option.none()\n      }\n      case \"ArrayNode\": {\n        node = node.children[hashFragment(shift, hash)]!\n        if (node) {\n          shift += SIZE\n          break\n        }\n        return Option.none()\n      }\n      default:\n        return Option.none()\n    }\n  }\n})\n\n/** @internal */\nexport const unsafeGet = Dual.dual<\n  <K1>(key: K1) => <K, V>(self: HM.HashMap<K, V>) => V,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1) => V\n>(2, (self, key) => {\n  const element = getHash(self, key, Hash.hash(key))\n  if (Option.isNone(element)) {\n    throw new Error(\"Expected map to contain key\")\n  }\n  return element.value\n})\n\n/** @internal */\nexport const has = Dual.dual<\n  <K1>(key: K1) => <K, V>(self: HM.HashMap<K, V>) => boolean,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1) => boolean\n>(2, (self, key) => Option.isSome(getHash(self, key, Hash.hash(key))))\n\n/** @internal */\nexport const hasHash = Dual.dual<\n  <K1>(key: K1, hash: number) => <K, V>(self: HM.HashMap<K, V>) => boolean,\n  <K, V, K1>(self: HM.HashMap<K, V>, key: K1, hash: number) => boolean\n>(3, (self, key, hash) => Option.isSome(getHash(self, key, hash)))\n\n/** @internal */\nexport const set = Dual.dual<\n  <K, V>(key: K, value: V) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, value: V) => HM.HashMap<K, V>\n>(3, (self, key, value) => modifyAt(self, key, () => Option.some(value)))\n\n/** @internal */\nexport const setTree = Dual.dual<\n  <K, V>(newRoot: Node.Node<K, V>, newSize: number) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, newRoot: Node.Node<K, V>, newSize: number) => HM.HashMap<K, V>\n>(3, <K, V>(self: HM.HashMap<K, V>, newRoot: Node.Node<K, V>, newSize: number) => {\n  if ((self as HashMapImpl<K, V>)._editable) {\n    ;(self as HashMapImpl<K, V>)._root = newRoot\n    ;(self as HashMapImpl<K, V>)._size = newSize\n    return self\n  }\n  return newRoot === (self as HashMapImpl<K, V>)._root\n    ? self\n    : makeImpl(\n      (self as HashMapImpl<K, V>)._editable,\n      (self as HashMapImpl<K, V>)._edit,\n      newRoot,\n      newSize\n    )\n})\n\n/** @internal */\nexport const keys = <K, V>(self: HM.HashMap<K, V>): IterableIterator<K> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (key) => key)\n\n/** @internal */\nexport const values = <K, V>(self: HM.HashMap<K, V>): IterableIterator<V> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (_, value) => value)\n\n/** @internal */\nexport const entries = <K, V>(self: HM.HashMap<K, V>): IterableIterator<[K, V]> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (key, value) => [key, value])\n\n/** @internal */\nexport const size = <K, V>(self: HM.HashMap<K, V>): number => (self as HashMapImpl<K, V>)._size\n\n/** @internal */\nexport const beginMutation = <K, V>(self: HM.HashMap<K, V>): HM.HashMap<K, V> =>\n  makeImpl(\n    true,\n    (self as HashMapImpl<K, V>)._edit + 1,\n    (self as HashMapImpl<K, V>)._root,\n    (self as HashMapImpl<K, V>)._size\n  )\n\n/** @internal */\nexport const endMutation = <K, V>(self: HM.HashMap<K, V>): HM.HashMap<K, V> => {\n  ;(self as HashMapImpl<K, V>)._editable = false\n  return self\n}\n\n/** @internal */\nexport const mutate = Dual.dual<\n  <K, V>(f: (self: HM.HashMap<K, V>) => void) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, f: (self: HM.HashMap<K, V>) => void) => HM.HashMap<K, V>\n>(2, (self, f) => {\n  const transient = beginMutation(self)\n  f(transient)\n  return endMutation(transient)\n})\n\n/** @internal */\nexport const modifyAt = Dual.dual<\n  <K, V>(key: K, f: HM.HashMap.UpdateFn<V>) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, f: HM.HashMap.UpdateFn<V>) => HM.HashMap<K, V>\n>(3, (self, key, f) => modifyHash(self, key, Hash.hash(key), f))\n\n/** @internal */\nexport const modifyHash = Dual.dual<\n  <K, V>(key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => HM.HashMap<K, V>\n>(4, <K, V>(self: HM.HashMap<K, V>, key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => {\n  const size = { value: (self as HashMapImpl<K, V>)._size }\n  const newRoot = (self as HashMapImpl<K, V>)._root.modify(\n    (self as HashMapImpl<K, V>)._editable ?\n      (self as HashMapImpl<K, V>)._edit :\n      NaN,\n    0,\n    f,\n    hash,\n    key,\n    size\n  )\n  return pipe(self, setTree(newRoot, size.value))\n})\n\n/** @internal */\nexport const modify = Dual.dual<\n  <K, V>(key: K, f: (v: V) => V) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, f: (v: V) => V) => HM.HashMap<K, V>\n>(3, (self, key, f) => modifyAt(self, key, Option.map(f)))\n\n/** @internal */\nexport const union = Dual.dual<\n  <K1, V1>(\n    that: HM.HashMap<K1, V1>\n  ) => <K0, V0>(self: HM.HashMap<K0, V0>) => HM.HashMap<K0 | K1, V0 | V1>,\n  <K0, V0, K1, V1>(\n    self: HM.HashMap<K0, V0>,\n    that: HM.HashMap<K1, V1>\n  ) => HM.HashMap<K0 | K1, V0 | V1>\n>(2, <K0, V0, K1, V1>(self: HM.HashMap<K0, V0>, that: HM.HashMap<K1, V1>) => {\n  const result: HM.HashMap<K0 | K1, V0 | V1> = beginMutation(self)\n  forEach(that, (v, k) => set(result, k, v))\n  return endMutation(result)\n})\n\n/** @internal */\nexport const remove = Dual.dual<\n  <K>(key: K) => <V>(self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K) => HM.HashMap<K, V>\n>(2, (self, key) => modifyAt(self, key, Option.none))\n\n/** @internal */\nexport const removeMany = Dual.dual<\n  <K>(keys: Iterable<K>) => <V>(self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, keys: Iterable<K>) => HM.HashMap<K, V>\n>(2, (self, keys) =>\n  mutate(self, (map) => {\n    for (const key of keys) {\n      remove(key)(map)\n    }\n  }))\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map = Dual.dual<\n  <A, V, K>(f: (value: V, key: K) => A) => (self: HM.HashMap<K, V>) => HM.HashMap<K, A>,\n  <K, V, A>(self: HM.HashMap<K, V>, f: (value: V, key: K) => A) => HM.HashMap<K, A>\n>(2, (self, f) =>\n  reduce(\n    self,\n    empty(),\n    (map, value, key) => set(map, key, f(value, key))\n  ))\n\n/** @internal */\nexport const flatMap = Dual.dual<\n  <A, K, B>(\n    f: (value: A, key: K) => HM.HashMap<K, B>\n  ) => (self: HM.HashMap<K, A>) => HM.HashMap<K, B>,\n  <K, A, B>(self: HM.HashMap<K, A>, f: (value: A, key: K) => HM.HashMap<K, B>) => HM.HashMap<K, B>\n>(\n  2,\n  (self, f) =>\n    reduce(self, empty(), (zero, value, key) =>\n      mutate(\n        zero,\n        (map) => forEach(f(value, key), (value, key) => set(map, key, value))\n      ))\n)\n\n/** @internal */\nexport const forEach = Dual.dual<\n  <V, K>(f: (value: V, key: K) => void) => (self: HM.HashMap<K, V>) => void,\n  <V, K>(self: HM.HashMap<K, V>, f: (value: V, key: K) => void) => void\n>(2, (self, f) => reduce(self, void 0 as void, (_, value, key) => f(value, key)))\n\n/** @internal */\nexport const reduce = Dual.dual<\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => (self: HM.HashMap<K, V>) => Z,\n  <Z, V, K>(self: HM.HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => Z\n>(3, <Z, V, K>(self: HM.HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => {\n  const root = (self as HashMapImpl<K, V>)._root\n  if (root._tag === \"LeafNode\") {\n    return Option.isSome(root.value) ? f(zero, root.value.value, root.key) : zero\n  }\n  if (root._tag === \"EmptyNode\") {\n    return zero\n  }\n  const toVisit = [root.children]\n  let children\n  while ((children = toVisit.pop())) {\n    for (let i = 0, len = children.length; i < len;) {\n      const child = children[i++]\n      if (child && !Node.isEmptyNode(child)) {\n        if (child._tag === \"LeafNode\") {\n          if (Option.isSome(child.value)) {\n            zero = f(zero, child.value.value, child.key)\n          }\n        } else {\n          toVisit.push(child.children)\n        }\n      }\n    }\n  }\n  return zero\n})\n\n/** @internal */\nexport const filter: {\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HM.HashMap<K, A>) => HM.HashMap<K, B>\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => HM.HashMap<K, A>\n  <K, A, B extends A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => a is B): HM.HashMap<K, B>\n  <K, A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => boolean): HM.HashMap<K, A>\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => boolean): HM.HashMap<K, A> =>\n    mutate(empty(), (map) => {\n      for (const [k, a] of self) {\n        if (f(a, k)) {\n          set(map, k, a)\n        }\n      }\n    })\n)\n\n/** @internal */\nexport const compact = <K, A>(self: HM.HashMap<K, Option.Option<A>>) => filterMap(self, identity)\n\n/** @internal */\nexport const filterMap = Dual.dual<\n  <A, K, B>(\n    f: (value: A, key: K) => Option.Option<B>\n  ) => (self: HM.HashMap<K, A>) => HM.HashMap<K, B>,\n  <K, A, B>(self: HM.HashMap<K, A>, f: (value: A, key: K) => Option.Option<B>) => HM.HashMap<K, B>\n>(2, (self, f) =>\n  mutate(empty(), (map) => {\n    for (const [k, a] of self) {\n      const option = f(a, k)\n      if (Option.isSome(option)) {\n        set(map, k, option.value)\n      }\n    }\n  }))\n\n/** @internal */\nexport const findFirst: {\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HM.HashMap<K, A>) => Option.Option<[K, B]>\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => Option.Option<[K, A]>\n  <K, A, B extends A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option.Option<[K, B]>\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option.Option<[K, A]>\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option.Option<[K, A]> => {\n    for (const ka of self) {\n      if (predicate(ka[1], ka[0])) {\n        return Option.some(ka)\n      }\n    }\n    return Option.none()\n  }\n)\n", "import { MASK } from \"./config.js\"\n\n/**\n * Hamming weight.\n *\n * Taken from: http://jsperf.com/hamming-weight\n *\n * @internal\n */\nexport function popcount(x: number) {\n  x -= (x >> 1) & 0x55555555\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n  x = (x + (x >> 4)) & 0x0f0f0f0f\n  x += x >> 8\n  x += x >> 16\n  return x & 0x7f\n}\n\n/** @internal */\nexport function hashFragment(shift: number, h: number) {\n  return (h >>> shift) & MASK\n}\n\n/** @internal */\nexport function toBitmap(x: number) {\n  return 1 << x\n}\n\n/** @internal */\nexport function fromBitmap(bitmap: number, bit: number) {\n  return popcount(bitmap & (bit - 1))\n}\n", "/** @internal */\nexport const SIZE = 5\n\n/** @internal */\nexport const BUCKET_SIZE = Math.pow(2, SIZE)\n\n/** @internal */\nexport const MASK = BUCKET_SIZE - 1\n\n/** @internal */\nexport const MAX_INDEX_NODE = BUCKET_SIZE / 2\n\n/** @internal */\nexport const MIN_ARRAY_NODE = BUCKET_SIZE / 4\n", "import { equals } from \"../../Equal.js\"\nimport type { HashMap } from \"../../HashMap.js\"\nimport * as O from \"../../Option.js\"\nimport { isTagged } from \"../../Predicate.js\"\nimport * as Stack from \"../stack.js\"\nimport { arraySpliceIn, arraySpliceOut, arrayUpdate } from \"./array.js\"\nimport { fromBitmap, hashFragment, toBitmap } from \"./bitwise.js\"\nimport { MAX_INDEX_NODE, MIN_ARRAY_NODE, SIZE } from \"./config.js\"\n\n/** @internal */\nexport type Node<K, V> =\n  | EmptyNode<K, V>\n  | LeafNode<K, V>\n  | CollisionNode<K, V>\n  | IndexedNode<K, V>\n  | ArrayNode<K, V>\n\n/** @internal */\nexport interface SizeRef {\n  value: number // mutable by design\n}\n\n/** @internal */\nexport class EmptyNode<out K, out V> {\n  readonly _tag = \"EmptyNode\"\n\n  modify(\n    edit: number,\n    _shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    const v = f(O.none())\n    if (O.isNone(v)) return new EmptyNode()\n    ;++size.value\n    return new LeafNode(edit, hash, key, v)\n  }\n}\n\n/** @internal */\nexport function isEmptyNode(a: unknown): a is EmptyNode<unknown, unknown> {\n  return isTagged(a, \"EmptyNode\")\n}\n\n/** @internal */\nexport function isLeafNode<K, V>(\n  node: Node<K, V>\n): node is EmptyNode<K, V> | LeafNode<K, V> | CollisionNode<K, V> {\n  return isEmptyNode(node) || node._tag === \"LeafNode\" || node._tag === \"CollisionNode\"\n}\n\n/** @internal */\nexport function canEditNode<K, V>(node: Node<K, V>, edit: number): boolean {\n  return isEmptyNode(node) ? false : edit === node.edit\n}\n\n/** @internal */\nexport class LeafNode<out K, out V> {\n  readonly _tag = \"LeafNode\"\n\n  constructor(\n    readonly edit: number,\n    readonly hash: number,\n    readonly key: K,\n    public value: O.Option<V>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    if (equals(key, this.key)) {\n      const v = f(this.value)\n      if (v === this.value) return this\n      else if (O.isNone(v)) {\n        ;--size.value\n        return new EmptyNode()\n      }\n      if (canEditNode(this, edit)) {\n        this.value = v\n        return this\n      }\n      return new LeafNode(edit, hash, key, v)\n    }\n    const v = f(O.none())\n    if (O.isNone(v)) return this\n    ;++size.value\n    return mergeLeaves(\n      edit,\n      shift,\n      this.hash,\n      this,\n      hash,\n      new LeafNode(edit, hash, key, v)\n    )\n  }\n}\n\n/** @internal */\nexport class CollisionNode<out K, out V> {\n  readonly _tag = \"CollisionNode\"\n\n  constructor(\n    readonly edit: number,\n    readonly hash: number,\n    readonly children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    if (hash === this.hash) {\n      const canEdit = canEditNode(this, edit)\n      const list = this.updateCollisionList(\n        canEdit,\n        edit,\n        this.hash,\n        this.children,\n        f,\n        key,\n        size\n      )\n      if (list === this.children) return this\n\n      return list.length > 1 ? new CollisionNode(edit, this.hash, list) : list[0]! // collapse single element collision list\n    }\n    const v = f(O.none())\n    if (O.isNone(v)) return this\n    ;++size.value\n    return mergeLeaves(\n      edit,\n      shift,\n      this.hash,\n      this,\n      hash,\n      new LeafNode(edit, hash, key, v)\n    )\n  }\n\n  updateCollisionList(\n    mutate: boolean,\n    edit: number,\n    hash: number,\n    list: Array<Node<K, V>>,\n    f: HashMap.UpdateFn<V>,\n    key: K,\n    size: SizeRef\n  ) {\n    const len = list.length\n    for (let i = 0; i < len; ++i) {\n      const child = list[i]!\n      if (\"key\" in child && equals(key, child.key)) {\n        const value = child.value\n        const newValue = f(value)\n        if (newValue === value) return list\n        if (O.isNone(newValue)) {\n          ;--size.value\n          return arraySpliceOut(mutate, i, list)\n        }\n        return arrayUpdate(mutate, i, new LeafNode(edit, hash, key, newValue), list)\n      }\n    }\n\n    const newValue = f(O.none())\n    if (O.isNone(newValue)) return list\n    ;++size.value\n    return arrayUpdate(mutate, len, new LeafNode(edit, hash, key, newValue), list)\n  }\n}\n\n/** @internal */\nexport class IndexedNode<out K, out V> {\n  readonly _tag = \"IndexedNode\"\n\n  constructor(\n    readonly edit: number,\n    public mask: number,\n    public children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    const mask = this.mask\n    const children = this.children\n    const frag = hashFragment(shift, hash)\n    const bit = toBitmap(frag)\n    const indx = fromBitmap(mask, bit)\n    const exists = mask & bit\n    const canEdit = canEditNode(this, edit)\n\n    if (!exists) {\n      const _newChild = new EmptyNode<K, V>().modify(edit, shift + SIZE, f, hash, key, size)\n      if (!_newChild) return this\n      return children.length >= MAX_INDEX_NODE ?\n        expand(edit, frag, _newChild, mask, children) :\n        new IndexedNode(edit, mask | bit, arraySpliceIn(canEdit, indx, _newChild, children))\n    }\n\n    const current = children[indx]!\n    const child = current.modify(edit, shift + SIZE, f, hash, key, size)\n\n    if (current === child) return this\n    let bitmap = mask\n    let newChildren\n    if (isEmptyNode(child)) {\n      // remove\n      bitmap &= ~bit\n      if (!bitmap) return new EmptyNode()\n      if (children.length <= 2 && isLeafNode(children[indx ^ 1]!)) {\n        return children[indx ^ 1]! // collapse\n      }\n\n      newChildren = arraySpliceOut(canEdit, indx, children)\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, indx, child, children)\n    }\n\n    if (canEdit) {\n      this.mask = bitmap\n      this.children = newChildren\n      return this\n    }\n\n    return new IndexedNode(edit, bitmap, newChildren)\n  }\n}\n\n/** @internal */\nexport class ArrayNode<out K, out V> {\n  readonly _tag = \"ArrayNode\"\n\n  constructor(\n    readonly edit: number,\n    public size: number,\n    public children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    let count = this.size\n    const children = this.children\n    const frag = hashFragment(shift, hash)\n    const child = children[frag]\n    const newChild = (child || new EmptyNode<K, V>()).modify(\n      edit,\n      shift + SIZE,\n      f,\n      hash,\n      key,\n      size\n    )\n\n    if (child === newChild) return this\n\n    const canEdit = canEditNode(this, edit)\n    let newChildren\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) {\n      // add\n      ;++count\n      newChildren = arrayUpdate(canEdit, frag, newChild, children)\n    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {\n      // remove\n      ;--count\n      if (count <= MIN_ARRAY_NODE) {\n        return pack(edit, count, frag, children)\n      }\n      newChildren = arrayUpdate(canEdit, frag, new EmptyNode<K, V>(), children)\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, frag, newChild, children)\n    }\n\n    if (canEdit) {\n      this.size = count\n      this.children = newChildren\n      return this\n    }\n    return new ArrayNode(edit, count, newChildren)\n  }\n}\n\nfunction pack<K, V>(\n  edit: number,\n  count: number,\n  removed: number,\n  elements: Array<Node<K, V>>\n) {\n  const children = new Array<Node<K, V>>(count - 1)\n  let g = 0\n  let bitmap = 0\n  for (let i = 0, len = elements.length; i < len; ++i) {\n    if (i !== removed) {\n      const elem = elements[i]\n      if (elem && !isEmptyNode(elem)) {\n        children[g++] = elem\n        bitmap |= 1 << i\n      }\n    }\n  }\n  return new IndexedNode(edit, bitmap, children)\n}\n\nfunction expand<K, V>(\n  edit: number,\n  frag: number,\n  child: Node<K, V>,\n  bitmap: number,\n  subNodes: Array<Node<K, V>>\n) {\n  const arr = []\n  let bit = bitmap\n  let count = 0\n  for (let i = 0; bit; ++i) {\n    if (bit & 1) arr[i] = subNodes[count++]!\n    bit >>>= 1\n  }\n  arr[frag] = child\n  return new ArrayNode(edit, count + 1, arr)\n}\n\nfunction mergeLeavesInner<K, V>(\n  edit: number,\n  shift: number,\n  h1: number,\n  n1: Node<K, V>,\n  h2: number,\n  n2: Node<K, V>\n): Node<K, V> | ((child: Node<K, V>) => Node<K, V>) {\n  if (h1 === h2) return new CollisionNode(edit, h1, [n2, n1])\n  const subH1 = hashFragment(shift, h1)\n  const subH2 = hashFragment(shift, h2)\n\n  if (subH1 === subH2) {\n    return (child) => new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), [child])\n  } else {\n    const children = subH1 < subH2 ? [n1, n2] : [n2, n1]\n    return new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), children)\n  }\n}\n\nfunction mergeLeaves<K, V>(\n  edit: number,\n  shift: number,\n  h1: number,\n  n1: Node<K, V>,\n  h2: number,\n  n2: Node<K, V>\n): Node<K, V> {\n  let stack: Stack.Stack<(node: Node<K, V>) => Node<K, V>> | undefined = undefined\n  let currentShift = shift\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const res = mergeLeavesInner(edit, currentShift, h1, n1, h2, n2)\n\n    if (typeof res === \"function\") {\n      stack = Stack.make(res, stack)\n      currentShift = currentShift + SIZE\n    } else {\n      let final = res\n      while (stack != null) {\n        final = stack.value(final)\n        stack = stack.previous\n      }\n      return final\n    }\n  }\n}\n", "/** @internal */\nexport interface Stack<out A> {\n  readonly value: A\n  readonly previous: Stack<A> | undefined\n}\n\nexport const make = <A>(value: A, previous?: Stack<A>): Stack<A> => ({\n  value,\n  previous\n})\n", "/** @internal */\nexport function arrayUpdate<A>(mutate: boolean, at: number, v: A, arr: Array<A>) {\n  let out = arr\n  if (!mutate) {\n    const len = arr.length\n    out = new Array(len)\n    for (let i = 0; i < len; ++i) out[i] = arr[i]!\n  }\n  out[at] = v\n  return out\n}\n\n/** @internal */\nexport function arraySpliceOut<A>(mutate: boolean, at: number, arr: Array<A>) {\n  const newLen = arr.length - 1\n  let i = 0\n  let g = 0\n  let out = arr\n  if (mutate) {\n    i = g = at\n  } else {\n    out = new Array(newLen)\n    while (i < at) out[g++] = arr[i++]!\n  }\n  ;++i\n  while (i <= newLen) out[g++] = arr[i++]!\n  if (mutate) {\n    out.length = newLen\n  }\n  return out\n}\n\n/** @internal */\nexport function arraySpliceIn<A>(mutate: boolean, at: number, v: A, arr: Array<A>) {\n  const len = arr.length\n  if (mutate) {\n    let i = len\n    while (i >= at) arr[i--] = arr[i]!\n    arr[at] = v\n    return arr\n  }\n  let i = 0,\n    g = 0\n  const out = new Array<A>(len + 1)\n  while (i < at) out[g++] = arr[i++]!\n  out[at] = v\n  while (i < len) out[++g] = arr[i++]!\n  return out\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableRef\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableRef<out T> extends Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  current: T\n}\n\nconst MutableRefProto: Omit<MutableRef<unknown>, \"current\"> = {\n  [TypeId]: TypeId,\n  toString<A>(this: MutableRef<A>): string {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: MutableRef<A>) {\n    return {\n      _id: \"MutableRef\",\n      current: toJSON(this.current)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <T>(value: T): MutableRef<T> => {\n  const ref = Object.create(MutableRefProto)\n  ref.current = value\n  return ref\n}\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const compareAndSet: {\n  <T>(oldValue: T, newValue: T): (self: MutableRef<T>) => boolean\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T): boolean\n} = Dual.dual<\n  <T>(oldValue: T, newValue: T) => (self: MutableRef<T>) => boolean,\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T) => boolean\n>(3, (self, oldValue, newValue) => {\n  if (Equal.equals(oldValue, self.current)) {\n    self.current = newValue\n    return true\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrement = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const get = <T>(self: MutableRef<T>): T => self.current\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndDecrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndIncrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndSet: {\n  <T>(value: T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  const ret = self.current\n  self.current = value\n  return ret\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndUpdate: {\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => getAndSet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const increment = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const incrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const set: {\n  <T>(value: T): (self: MutableRef<T>) => MutableRef<T>\n  <T>(self: MutableRef<T>, value: T): MutableRef<T>\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, value: T) => MutableRef<T>\n>(2, (self, value) => {\n  self.current = value\n  return self\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const setAndGet: {\n  <T>(value: T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  self.current = value\n  return self.current\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const update: {\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => MutableRef<T>\n  <T>(self: MutableRef<T>, f: (value: T) => T): MutableRef<T>\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => MutableRef<T>\n>(2, (self, f) => set(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const updateAndGet: {\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => setAndGet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category boolean\n */\nexport const toggle = (self: MutableRef<boolean>): MutableRef<boolean> => update(self, (_) => !_)\n", "/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HM from \"./internal/hashMap.js\"\nimport * as _keySet from \"./internal/hashMap/keySet.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HM.HashMapTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashMap<out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace HashMap {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type UpdateFn<V> = (option: Option<V>) => Option<V>\n  /**\n   * This type-level utility extracts the key type `K` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType string\n   * type K = HashMap.HashMap.Key<typeof hm>\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Key<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _K : never\n  /**\n   * This type-level utility extracts the value type `V` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType number\n   * type V = HashMap.HashMap.Value<typeof hm>\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _V : never\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashMap: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is HashMap<K, V>\n  (u: unknown): u is HashMap<unknown, unknown>\n} = HM.isHashMap\n\n/**\n * Creates a new `HashMap`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K = never, V = never>() => HashMap<K, V> = HM.empty\n\n/**\n * Constructs a new `HashMap` from an array of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n) => HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = HM.make\n\n/**\n * Creates a new `HashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <K, V>(entries: Iterable<readonly [K, V]>) => HashMap<K, V> = HM.fromIterable\n\n/**\n * Checks if the `HashMap` contains any entries.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty: <K, V>(self: HashMap<K, V>) => boolean = HM.isEmpty\n\n/**\n * Safely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => Option<V>\n  <K, V, K1>(self: HashMap<K, V>, key: K1): Option<V>\n} = HM.get\n\n/**\n * Lookup the value for the specified key in the `HashMap` using a custom hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getHash: {\n  <K1>(key: K1, hash: number): <K, V>(self: HashMap<K, V>) => Option<V>\n  <K, V, K1>(self: HashMap<K, V>, key: K1, hash: number): Option<V>\n} = HM.getHash\n\n/**\n * Unsafely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => V\n  <K, V, K1>(self: HashMap<K, V>, key: K1): V\n} = HM.unsafeGet\n\n/**\n * Checks if the specified key has an entry in the `HashMap`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => boolean\n  <K, V, K1>(self: HashMap<K, V>, key: K1): boolean\n} = HM.has\n\n/**\n * Checks if the specified key has an entry in the `HashMap` using a custom\n * hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const hasHash: {\n  <K1>(key: K1, hash: number): <K, V>(self: HashMap<K, V>) => boolean\n  <K, V, K1>(self: HashMap<K, V>, key: K1, hash: number): boolean\n} = HM.hasHash\n\n/**\n * Sets the specified key to the specified value using the internal hashing\n * function.\n *\n * @since 2.0.0\n */\nexport const set: {\n  <K, V>(key: K, value: V): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, value: V): HashMap<K, V>\n} = HM.set\n\n/**\n * Returns an `IterableIterator` of the keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: HashMap<K, V>) => IterableIterator<K> = HM.keys\n\n/**\n * Returns a `HashSet` of keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getter\n */\nexport const keySet: <K, V>(self: HashMap<K, V>) => HashSet<K> = _keySet.keySet\n\n/**\n * Returns an `IterableIterator` of the values within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: HashMap<K, V>) => IterableIterator<V> = HM.values\n\n/**\n * Returns an `IterableIterator` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const entries: <K, V>(self: HashMap<K, V>) => IterableIterator<[K, V]> = HM.entries\n\n/**\n * Returns an `Array<[K, V]>` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toEntries = <K, V>(self: HashMap<K, V>): Array<[K, V]> => Array.from(entries(self))\n\n/**\n * Returns the number of entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: HashMap<K, V>) => number = HM.size\n\n/**\n * Marks the `HashMap` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.beginMutation\n\n/**\n * Marks the `HashMap` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.endMutation\n\n/**\n * Mutates the `HashMap` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  <K, V>(f: (self: HashMap<K, V>) => void): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, f: (self: HashMap<K, V>) => void): HashMap<K, V>\n} = HM.mutate\n\n/**\n * Set or remove the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  <K, V>(key: K, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyAt\n\n/**\n * Alter the value of the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * This function will always either update or insert a value into the `HashMap`.\n *\n * @since 2.0.0\n */\nexport const modifyHash: {\n  <K, V>(key: K, hash: number, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, hash: number, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyHash\n\n/**\n * Updates the value of the specified key within the `HashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <K, V>(key: K, f: (v: V) => V): (self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K, f: (v: V) => V): HashMap<K, V>\n} = HM.modify\n\n/**\n * Performs a union of this `HashMap` and that `HashMap`.\n *\n * @since 2.0.0\n */\nexport const union: {\n  <K1, V1>(that: HashMap<K1, V1>): <K0, V0>(self: HashMap<K0, V0>) => HashMap<K1 | K0, V1 | V0>\n  <K0, V0, K1, V1>(self: HashMap<K0, V0>, that: HashMap<K1, V1>): HashMap<K0 | K1, V0 | V1>\n} = HM.union\n\n/**\n * Remove the entry for the specified key in the `HashMap` using the internal\n * hashing function.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  <K>(key: K): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, key: K): HashMap<K, V>\n} = HM.remove\n\n/**\n * Removes all entries in the `HashMap` which have the specified keys.\n *\n * @since 2.0.0\n */\nexport const removeMany: {\n  <K>(keys: Iterable<K>): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  <K, V>(self: HashMap<K, V>, keys: Iterable<K>): HashMap<K, V>\n} = HM.removeMany\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, V, K>(f: (value: V, key: K) => A): (self: HashMap<K, V>) => HashMap<K, A>\n  <K, V, A>(self: HashMap<K, V>, f: (value: V, key: K) => A): HashMap<K, A>\n} = HM.map\n\n/**\n * Chains over the entries of the `HashMap` using the specified function.\n *\n * **NOTE**: the hash and equal of both maps have to be the same.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, K, B>(f: (value: A, key: K) => HashMap<K, B>): (self: HashMap<K, A>) => HashMap<K, B>\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => HashMap<K, B>): HashMap<K, B>\n} = HM.flatMap\n\n/**\n * Applies the specified function to the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <V, K>(f: (value: V, key: K) => void): (self: HashMap<K, V>) => void\n  <V, K>(self: HashMap<K, V>, f: (value: V, key: K) => void): void\n} = HM.forEach\n\n/**\n * Reduces the specified state over the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: HashMap<K, V>) => Z\n  <K, V, Z>(self: HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z): Z\n} = HM.reduce\n\n/**\n * Filters entries out of a `HashMap` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => HashMap<K, B>\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => HashMap<K, A>\n  <K, A, B extends A>(self: HashMap<K, A>, f: (a: A, k: K) => a is B): HashMap<K, B>\n  <K, A>(self: HashMap<K, A>, f: (a: A, k: K) => boolean): HashMap<K, A>\n} = HM.filter\n\n/**\n * Filters out `None` values from a `HashMap` of `Options`s.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact: <K, A>(self: HashMap<K, Option<A>>) => HashMap<K, A> = HM.compact\n\n/**\n * Maps over the entries of the `HashMap` using the specified partial function\n * and filters out `None` values.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  <A, K, B>(f: (value: A, key: K) => Option<B>): (self: HashMap<K, A>) => HashMap<K, B>\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => Option<B>): HashMap<K, B>\n} = HM.filterMap\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => Option<[K, B]>\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => Option<[K, A]>\n  <K, A, B extends A>(self: HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option<[K, B]>\n  <K, A>(self: HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option<[K, A]>\n} = HM.findFirst\n", "/**\n * A data type for immutable linked lists representing ordered collections of elements of type `A`.\n *\n * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.\n *\n * **Performance**\n *\n * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.\n * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.\n *\n * @since 2.0.0\n */\n\n/**\n * This file is ported from\n *\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n */\nimport * as Arr from \"./Array.js\"\nimport * as Chunk from \"./Chunk.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, unsafeCoerce } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { nonEmpty, NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * Represents an immutable linked list of elements of type `A`.\n *\n * A `List` is optimal for last-in-first-out (LIFO), stack-like access patterns.\n * If you need another access pattern, for example, random access or FIFO,\n * consider using a collection more suited for that other than `List`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type List<A> = Cons<A> | Nil<A>\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/List\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Nil<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Nil\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Cons<out A> extends NonEmptyIterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Cons\"\n  readonly head: A\n  readonly tail: List<A>\n}\n\n/**\n * Converts the specified `List` to an `Array`.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: List<A>): Array<A> => Arr.fromIterable(self)\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<List<A>> =>\n  Equivalence.mapInput(Arr.getEquivalence(isEquivalent), toArray<A>)\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ConsProto: Omit<Cons<unknown>, \"head\" | \"tail\" | typeof nonEmpty> = {\n  [TypeId]: TypeId,\n  _tag: \"Cons\",\n  toString(this: Cons<unknown>) {\n    return format(this.toJSON())\n  },\n  toJSON(this: Cons<unknown>) {\n    return {\n      _id: \"List\",\n      _tag: \"Cons\",\n      values: toArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Equal.symbol](this: Cons<unknown>, that: unknown): boolean {\n    return isList(that) &&\n      this._tag === that._tag &&\n      _equivalence(this, that)\n  },\n  [Hash.symbol](this: Cons<unknown>): number {\n    return Hash.cached(this, Hash.array(toArray(this)))\n  },\n  [Symbol.iterator](this: Cons<unknown>): Iterator<unknown> {\n    let done = false\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let self: List<unknown> = this\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (self._tag === \"Nil\") {\n          done = true\n          return this.return!()\n        }\n        const value: unknown = self.head\n        self = self.tail\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableCons<A> extends Cons<A> {\n  head: A\n  tail: List<A>\n}\n\nconst makeCons = <A>(head: A, tail: List<A>): MutableCons<A> => {\n  const cons = Object.create(ConsProto)\n  cons.head = head\n  cons.tail = tail\n  return cons\n}\n\nconst NilHash = Hash.string(\"Nil\")\nconst NilProto: Nil<unknown> = {\n  [TypeId]: TypeId,\n  _tag: \"Nil\",\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"List\",\n      _tag: \"Nil\"\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Hash.symbol](): number {\n    return NilHash\n  },\n  [Equal.symbol](that: unknown): boolean {\n    return isList(that) && this._tag === that._tag\n  },\n  [Symbol.iterator](): Iterator<unknown> {\n    return {\n      next() {\n        return { done: true, value: undefined }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst _Nil = Object.create(NilProto) as Nil<never>\n\n/**\n * Returns `true` if the specified value is a `List`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isList: {\n  <A>(u: Iterable<A>): u is List<A>\n  (u: unknown): u is List<unknown>\n} = (u: unknown): u is List<unknown> => hasProperty(u, TypeId)\n\n/**\n * Returns `true` if the specified value is a `List.Nil<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNil = <A>(self: List<A>): self is Nil<A> => self._tag === \"Nil\"\n\n/**\n * Returns `true` if the specified value is a `List.Cons<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCons = <A>(self: List<A>): self is Cons<A> => self._tag === \"Cons\"\n\n/**\n * Returns the number of elements contained in the specified `List`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: List<A>): number => {\n  let these = self\n  let len = 0\n  while (!isNil(these)) {\n    len += 1\n    these = these.tail\n  }\n  return len\n}\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nil = <A = never>(): List<A> => _Nil\n\n/**\n * Constructs a new `List.Cons<A>` from the specified `head` and `tail` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const cons = <A>(head: A, tail: List<A>): Cons<A> => makeCons(head, tail)\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * Alias of {@link nil}.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = nil\n\n/**\n * Constructs a new `List<A>` from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of = <A>(value: A): Cons<A> => makeCons(value, _Nil)\n\n/**\n * Creates a new `List` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(prefix: Iterable<A>): List<A> => {\n  const iterator = prefix[Symbol.iterator]()\n  let next: IteratorResult<A>\n  if ((next = iterator.next()) && !next.done) {\n    const result = makeCons(next.value, _Nil)\n    let curr = result\n    while ((next = iterator.next()) && !next.done) {\n      const temp = makeCons(next.value, _Nil)\n      curr.tail = temp\n      curr = temp\n    }\n    return result\n  } else {\n    return _Nil\n  }\n}\n\n/**\n * Constructs a new `List<A>` from the specified values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <Elements extends readonly [any, ...Array<any>]>(\n  ...elements: Elements\n): Cons<Elements[number]> => fromIterable(elements) as any\n\n/**\n * Appends the specified element to the end of the `List`, creating a new `Cons`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => appendAll(self, of(element)))\n\n/**\n * Concatenates two lists, combining their elements.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, that: List<B>): List<A | B> => prependAll(that, self))\n\n/**\n * Prepends the specified element to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => cons<A | B>(element, self))\n\n/**\n * Prepends the specified prefix list to the beginning of the specified list.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  if (isNil(self)) {\n    return prefix\n  } else if (isNil(prefix)) {\n    return self\n  } else {\n    const result = makeCons<A | B>(prefix.head, self)\n    let curr = result\n    let that = prefix.tail\n    while (!isNil(that)) {\n      const temp = makeCons<A | B>(that.head, self)\n      curr.tail = temp\n      curr = temp\n      that = that.tail\n    }\n    return result\n  }\n})\n\n/**\n * Prepends the specified prefix list (in reverse order) to the beginning of the\n * specified list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAllReversed: {\n  <B>(prefix: List<B>): <A>(self: List<A>) => List<A | B>\n  <A, B>(self: List<A>, prefix: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  let out: List<A | B> = self\n  let pres = prefix\n  while (isCons(pres)) {\n    out = makeCons(pres.head, out)\n    pres = pres.tail\n  }\n  return out\n})\n\n/**\n * Drops the first `n` elements from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const drop: {\n  (n: number): <A>(self: List<A>) => List<A>\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return self\n  }\n  if (n >= size(self)) {\n    return _Nil\n  }\n  let these = self\n  let i = 0\n  while (!isNil(these) && i < n) {\n    these = these.tail\n    i += 1\n  }\n  return these\n})\n\n/**\n * Check if a predicate holds true for every `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => self is List<B>\n  <A>(predicate: Predicate<A>): (self: List<A>) => boolean\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B>\n  <A>(self: List<A>, predicate: Predicate<A>): boolean\n} = dual(2, <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B> => {\n  for (const a of self) {\n    if (!refinement(a)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * Check if a predicate holds true for some `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => self is Cons<A>\n  <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return true\n    }\n    these = these.tail\n  }\n  return false\n})\n\n/**\n * Filters a list using the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => List<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => List<A>\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): List<B>\n  <A>(self: List<A>, predicate: Predicate<A>): List<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): List<A> => noneIn(self, predicate, false))\n\n// everything seen so far is not included\nconst noneIn = <A>(\n  self: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  /* eslint-disable no-constant-condition */\n  while (true) {\n    if (isNil(self)) {\n      return _Nil\n    } else {\n      if (predicate(self.head) !== isFlipped) {\n        return allIn(self, self.tail, predicate, isFlipped)\n      } else {\n        self = self.tail\n      }\n    }\n  }\n}\n\n// everything from 'start' is included, if everything from this point is in we can return the origin\n// start otherwise if we discover an element that is out we must create a new partial list.\nconst allIn = <A>(\n  start: List<A>,\n  remaining: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  /* eslint-disable no-constant-condition */\n  while (true) {\n    if (isNil(remaining)) {\n      return start\n    } else {\n      if (predicate(remaining.head) !== isFlipped) {\n        remaining = remaining.tail\n      } else {\n        return partialFill(start, remaining, predicate, isFlipped)\n      }\n    }\n  }\n}\n\n// we have seen elements that should be included then one that should be excluded, start building\nconst partialFill = <A>(\n  origStart: List<A>,\n  firstMiss: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  const newHead = makeCons<A>(unsafeHead(origStart)!, _Nil)\n  let toProcess = unsafeTail(origStart)! as Cons<A>\n  let currentLast = newHead\n\n  // we know that all elements are :: until at least firstMiss.tail\n  while (!(toProcess === firstMiss)) {\n    const newElem = makeCons(unsafeHead(toProcess)!, _Nil)\n    currentLast.tail = newElem\n    currentLast = unsafeCoerce(newElem)\n    toProcess = unsafeCoerce(toProcess.tail)\n  }\n\n  // at this point newHead points to a list which is a duplicate of all the 'in' elements up to the first miss.\n  // currentLast is the last element in that list.\n\n  // now we are going to try and share as much of the tail as we can, only moving elements across when we have to.\n  let next = firstMiss.tail\n  let nextToCopy: Cons<A> = unsafeCoerce(next) // the next element we would need to copy to our list if we cant share.\n  while (!isNil(next)) {\n    // generally recommended is next.isNonEmpty but this incurs an extra method call.\n    const head = unsafeHead(next)!\n    if (predicate(head) !== isFlipped) {\n      next = next.tail\n    } else {\n      // its not a match - do we have outstanding elements?\n      while (!(nextToCopy === next)) {\n        const newElem = makeCons(unsafeHead(nextToCopy)!, _Nil)\n        currentLast.tail = newElem\n        currentLast = newElem\n        nextToCopy = unsafeCoerce(nextToCopy.tail)\n      }\n      nextToCopy = unsafeCoerce(next.tail)\n      next = next.tail\n    }\n  }\n\n  // we have remaining elements - they are unchanged attach them to the end\n  if (!isNil(nextToCopy)) {\n    currentLast.tail = nextToCopy\n  }\n  return newHead\n}\n\n/**\n * Filters and maps a list using the specified partial function. The resulting\n * list may be smaller than the input list due to the possibility of the partial\n * function not being defined for some elements.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filterMap: {\n  <A, B>(f: (a: A) => Option.Option<B>): (self: List<A>) => List<B>\n  <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B> => {\n  const bs: Array<B> = []\n  for (const a of self) {\n    const oa = f(a)\n    if (Option.isSome(oa)) {\n      bs.push(oa.value)\n    }\n  }\n  return fromIterable(bs)\n})\n\n/**\n * Removes all `None` values from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const compact = <A>(self: List<Option.Option<A>>): List<A> => filterMap(self, identity)\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => Option.Option<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => Option.Option<A>\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): Option.Option<B>\n  <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return Option.some(these.head)\n    }\n    these = these.tail\n  }\n  return Option.none()\n})\n\n/**\n * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <S extends List<any>, T extends List<any>>(\n    f: (a: List.Infer<S>, i: number) => T\n  ): (self: S) => List.AndNonEmpty<S, T, List.Infer<T>>\n  <A, B>(self: Cons<A>, f: (a: A, i: number) => Cons<B>): Cons<B>\n  <A, B>(self: List<A>, f: (a: A, i: number) => List<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => List<B>): List<B> => {\n  let rest = self\n  let head: MutableCons<B> | undefined = undefined\n  let tail: MutableCons<B> | undefined = undefined\n  while (!isNil(rest)) {\n    let bs = f(rest.head)\n    while (!isNil(bs)) {\n      const next = makeCons(bs.head, _Nil)\n      if (tail === undefined) {\n        head = next\n      } else {\n        tail.tail = next\n      }\n      tail = next\n      bs = bs.tail\n    }\n    rest = rest.tail\n  }\n  if (head === undefined) {\n    return _Nil\n  }\n  return head\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  <A, B>(f: (a: A) => B): (self: List<A>) => void\n  <A, B>(self: List<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => B): void => {\n  let these = self\n  while (!isNil(these)) {\n    f(these.head)\n    these = these.tail\n  }\n})\n\n/**\n * Returns the first element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(self.head)\n\n/**\n * Returns the last element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(unsafeLast(self)!)\n\n/**\n * @since 2.0.0\n */\nexport declare namespace List {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends List<any>> = S extends List<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends List<any>, A> = S extends Cons<any> ? Cons<A> : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ? Cons<A>\n    : T extends Cons<any> ? Cons<A>\n    : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ?\n    T extends Cons<any> ? Cons<A>\n    : List<A> :\n    List<A>\n}\n\n/**\n * Applies the specified mapping function to each element of the list.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <S extends List<any>, B>(f: (a: List.Infer<S>, i: number) => B): (self: S) => List.With<S, B>\n  <S extends List<any>, B>(self: S, f: (a: List.Infer<S>, i: number) => B): List.With<S, B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A, i: number) => B): List<B> => {\n  if (isNil(self)) {\n    return self as unknown as List<B>\n  } else {\n    let i = 0\n    const head = makeCons(f(self.head, i++), _Nil)\n    let nextHead = head\n    let rest = self.tail\n    while (!isNil(rest)) {\n      const next = makeCons(f(rest.head, i++), _Nil)\n      nextHead.tail = next\n      nextHead = next\n      rest = rest.tail\n    }\n    return head\n  }\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * that did not satisfy the specified predicate, and the second list contains\n * all elements that did satisfy the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: List<A>) => [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => [excluded: List<A>, satisfying: List<A>]\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>]\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>] => {\n  const left: Array<A> = []\n  const right: Array<A> = []\n  for (const a of self) {\n    if (predicate(a)) {\n      right.push(a)\n    } else {\n      left.push(a)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * for which the specified function returned a `Left`, and the second list\n * contains all elements for which the specified function returned a `Right`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partitionMap: {\n  <A, B, C>(f: (a: A) => Either.Either<C, B>): (self: List<A>) => [left: List<B>, right: List<C>]\n  <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>]\n} = dual(2, <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>] => {\n  const left: Array<B> = []\n  const right: Array<C> = []\n  for (const a of self) {\n    const e = f(a)\n    if (Either.isLeft(e)) {\n      left.push(e.left)\n    } else {\n      right.push(e.right)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Folds over the elements of the list using the specified function, using the\n * specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, A>(zero: Z, f: (b: Z, a: A) => Z): (self: List<A>) => Z\n  <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z\n} = dual(3, <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z => {\n  let acc = zero\n  let these = self\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Folds over the elements of the list using the specified function, beginning\n * with the last element of the list, using the specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceRight: {\n  <Z, A>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: List<A>) => Z\n  <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = dual(3, <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z => {\n  let acc = zero\n  let these = reverse(self)\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Returns a new list with the elements of the specified list in reverse order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse = <A>(self: List<A>): List<A> => {\n  let result = empty<A>()\n  let these = self\n  while (!isNil(these)) {\n    result = prepend(result, these.head)\n    these = these.tail\n  }\n  return result\n}\n\n/**\n * Splits the specified list into two lists at the specified index.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const splitAt: {\n  (n: number): <A>(self: List<A>) => [beforeIndex: List<A>, fromIndex: List<A>]\n  <A>(self: List<A>, n: number): [beforeIndex: List<A>, fromIndex: List<A>]\n} = dual(2, <A>(self: List<A>, n: number): [List<A>, List<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Returns the tail of the specified list, or `None` if the list is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: List<A>): Option.Option<List<A>> => isNil(self) ? Option.none() : Option.some(self.tail)\n\n/**\n * Takes the specified number of elements from the beginning of the specified\n * list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const take: {\n  (n: number): <A>(self: List<A>) => List<A>\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return _Nil\n  }\n  if (n >= size(self)) {\n    return self\n  }\n  let these = make(unsafeHead(self))\n  let current = unsafeTail(self)!\n  for (let i = 1; i < n; i++) {\n    these = makeCons(unsafeHead(current), these)\n    current = unsafeTail(current!)\n  }\n  return reverse(these)\n})\n\n/**\n * Converts the specified `List` to a `Chunk`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toChunk = <A>(self: List<A>): Chunk.Chunk<A> => Chunk.fromIterable(self)\n\nconst getExpectedListToBeNonEmptyErrorMessage = \"Expected List to be non-empty\"\n\n/**\n * Unsafely returns the first element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.head\n}\n\n/**\n * Unsafely returns the last element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  let these = self\n  let scout = self.tail\n  while (!isNil(scout)) {\n    these = scout\n    scout = scout.tail\n  }\n  return these.head\n}\n\n/**\n * Unsafely returns the tail of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeTail = <A>(self: List<A>): List<A> => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.tail\n}\n", "/**\n * @since 2.0.0\n */\nimport * as runtimeFlags from \"./internal/runtimeFlags.js\"\nimport * as internal from \"./internal/runtimeFlagsPatch.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type RuntimeFlagsPatch = number & {\n  readonly RuntimeFlagsPatch: unique symbol\n}\n\n/**\n * The empty `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: RuntimeFlagsPatch = internal.empty\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (active: number, enabled: number) => RuntimeFlagsPatch = internal.make\n\n/**\n * Creates a `RuntimeFlagsPatch` describing enabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const enable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.enable\n\n/**\n * Creates a `RuntimeFlagsPatch` describing disabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const disable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.disable\n\n/**\n * Returns `true` if the specified `RuntimeFlagsPatch` is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: (patch: RuntimeFlagsPatch) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as active.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isActive: {\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as enabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEnabled: {\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isEnabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as disabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isDisabled: {\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isDisabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n * `RuntimeFlag`, `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const includes: {\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n * followed by `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const andThen: {\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.andThen\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n * and `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const both: {\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.both\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n * patch or `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const either: {\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.either\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n * `RuntimeFlag` from the set of `RuntimeFlags`.\n *\n * @category utils\n * @since 2.0.0\n */\nexport const exclude: {\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch\n} = internal.exclude\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes the inverse of the patch\n * specified by the provided `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const inverse: (patch: RuntimeFlagsPatch) => RuntimeFlagsPatch = internal.inverse\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * enabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const enabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.enabledSet\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * disabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const disabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.disabledSet\n\n/**\n * Renders the provided `RuntimeFlagsPatch` to a string.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (self: RuntimeFlagsPatch) => string = runtimeFlags.renderPatch\n", "import type * as Differ from \"../Differ.js\"\nimport { dual } from \"../Function.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport * as internalDiffer from \"./differ.js\"\nimport * as runtimeFlagsPatch from \"./runtimeFlagsPatch.js\"\n\n/** @internal */\nexport const None: RuntimeFlags.RuntimeFlag = 0 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const Interruption: RuntimeFlags.RuntimeFlag = 1 << 0 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const OpSupervision: RuntimeFlags.RuntimeFlag = 1 << 1 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const RuntimeMetrics: RuntimeFlags.RuntimeFlag = 1 << 2 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const WindDown: RuntimeFlags.RuntimeFlag = 1 << 4 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const CooperativeYielding: RuntimeFlags.RuntimeFlag = 1 << 5 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const allFlags: ReadonlyArray<RuntimeFlags.RuntimeFlag> = [\n  None,\n  Interruption,\n  OpSupervision,\n  RuntimeMetrics,\n  WindDown,\n  CooperativeYielding\n]\n\nconst print = (flag: RuntimeFlags.RuntimeFlag) => {\n  switch (flag) {\n    case CooperativeYielding: {\n      return \"CooperativeYielding\"\n    }\n    case WindDown: {\n      return \"WindDown\"\n    }\n    case RuntimeMetrics: {\n      return \"RuntimeMetrics\"\n    }\n    case OpSupervision: {\n      return \"OpSupervision\"\n    }\n    case Interruption: {\n      return \"Interruption\"\n    }\n    case None: {\n      return \"None\"\n    }\n  }\n}\n\n/** @internal */\nexport const cooperativeYielding = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, CooperativeYielding)\n\n/** @internal */\nexport const disable = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlags.RuntimeFlags\n>(2, (self, flag) => (self & ~flag) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const disableAll = dual<\n  (flags: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n>(2, (self, flags) => (self & ~flags) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const enable = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlags.RuntimeFlags\n>(2, (self, flag) => (self | flag) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const enableAll = dual<\n  (flags: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n>(2, (self, flags) => (self | flags) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const interruptible = (self: RuntimeFlags.RuntimeFlags): boolean => interruption(self) && !windDown(self)\n\n/** @internal */\nexport const interruption = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, Interruption)\n\n/** @internal */\nexport const isDisabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => boolean,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => !isEnabled(self, flag))\n\n/** @internal */\nexport const isEnabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => boolean,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => (self & flag) !== 0)\n\n/** @internal */\nexport const make = (...flags: ReadonlyArray<RuntimeFlags.RuntimeFlag>): RuntimeFlags.RuntimeFlags =>\n  flags.reduce((a, b) => a | b, 0) as RuntimeFlags.RuntimeFlags\n\n/** @internal */\nexport const none: RuntimeFlags.RuntimeFlags = make(None)\n\n/** @internal */\nexport const opSupervision = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, OpSupervision)\n\n/** @internal */\nexport const render = (self: RuntimeFlags.RuntimeFlags): string => {\n  const active: Array<string> = []\n  allFlags.forEach((flag) => {\n    if (isEnabled(self, flag)) {\n      active.push(`${print(flag)}`)\n    }\n  })\n  return `RuntimeFlags(${active.join(\", \")})`\n}\n\n/** @internal */\nexport const runtimeMetrics = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, RuntimeMetrics)\n\n/** @internal */\nexport const toSet = (self: RuntimeFlags.RuntimeFlags): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  new Set(allFlags.filter((flag) => isEnabled(self, flag)))\n\nexport const windDown = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, WindDown)\n\n// circular with RuntimeFlagsPatch\n\n/** @internal */\nexport const enabledSet = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  toSet((runtimeFlagsPatch.active(self) & runtimeFlagsPatch.enabled(self)) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const disabledSet = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  toSet((runtimeFlagsPatch.active(self) & ~runtimeFlagsPatch.enabled(self)) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const diff = dual<\n  (that: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (self: RuntimeFlags.RuntimeFlags, that: RuntimeFlags.RuntimeFlags) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => runtimeFlagsPatch.make(self ^ that, that))\n\n/** @internal */\nexport const patch = dual<\n  (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => RuntimeFlags.RuntimeFlags\n>(2, (self, patch) =>\n  (\n    (self & (runtimeFlagsPatch.invert(runtimeFlagsPatch.active(patch)) | runtimeFlagsPatch.enabled(patch))) |\n    (runtimeFlagsPatch.active(patch) & runtimeFlagsPatch.enabled(patch))\n  ) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const renderPatch = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): string => {\n  const enabled = Array.from(enabledSet(self))\n    .map((flag) => print(flag))\n    .join(\", \")\n  const disabled = Array.from(disabledSet(self))\n    .map((flag) => print(flag))\n    .join(\", \")\n  return `RuntimeFlagsPatch(enabled = (${enabled}), disabled = (${disabled}))`\n}\n\n/** @internal */\nexport const differ: Differ.Differ<RuntimeFlags.RuntimeFlags, RuntimeFlagsPatch.RuntimeFlagsPatch> = internalDiffer\n  .make({\n    empty: runtimeFlagsPatch.empty,\n    diff: (oldValue, newValue) => diff(oldValue, newValue),\n    combine: (first, second) => runtimeFlagsPatch.andThen(second)(first),\n    patch: (_patch, oldValue) => patch(oldValue, _patch)\n  })\n", "import type { Chunk } from \"../Chunk.js\"\nimport type { Context } from \"../Context.js\"\nimport type * as Differ from \"../Differ.js\"\nimport type { Either } from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Dual from \"../Function.js\"\nimport { constant, identity } from \"../Function.js\"\nimport type { HashMap } from \"../HashMap.js\"\nimport type { HashSet } from \"../HashSet.js\"\nimport * as ChunkPatch from \"./differ/chunkPatch.js\"\nimport * as ContextPatch from \"./differ/contextPatch.js\"\nimport * as HashMapPatch from \"./differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./differ/hashSetPatch.js\"\nimport * as OrPatch from \"./differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./differ/readonlyArrayPatch.js\"\n\n/** @internal */\nexport const DifferTypeId: Differ.TypeId = Symbol.for(\"effect/Differ\") as Differ.TypeId\n\n/** @internal */\nexport const DifferProto = {\n  [DifferTypeId]: {\n    _P: identity,\n    _V: identity\n  }\n}\n\n/** @internal */\nexport const make = <Value, Patch>(\n  params: {\n    readonly empty: Patch\n    readonly diff: (oldValue: Value, newValue: Value) => Patch\n    readonly combine: (first: Patch, second: Patch) => Patch\n    readonly patch: (patch: Patch, oldValue: Value) => Value\n  }\n): Differ.Differ<Value, Patch> => {\n  const differ = Object.create(DifferProto)\n  differ.empty = params.empty\n  differ.diff = params.diff\n  differ.combine = params.combine\n  differ.patch = params.patch\n  return differ\n}\n\n/** @internal */\nexport const environment = <A>(): Differ.Differ<Context<A>, Differ.Differ.Context.Patch<A, A>> =>\n  make({\n    empty: ContextPatch.empty(),\n    combine: (first, second) => ContextPatch.combine(second)(first),\n    diff: (oldValue, newValue) => ContextPatch.diff(oldValue, newValue),\n    patch: (patch, oldValue) => ContextPatch.patch(oldValue)(patch)\n  })\n\n/** @internal */\nexport const chunk = <Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<Chunk<Value>, Differ.Differ.Chunk.Patch<Value, Patch>> =>\n  make({\n    empty: ChunkPatch.empty(),\n    combine: (first, second) => ChunkPatch.combine(second)(first),\n    diff: (oldValue, newValue) => ChunkPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => ChunkPatch.patch(oldValue, differ)(patch)\n  })\n\n/** @internal */\nexport const hashMap = <Key, Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<HashMap<Key, Value>, Differ.Differ.HashMap.Patch<Key, Value, Patch>> =>\n  make({\n    empty: HashMapPatch.empty(),\n    combine: (first, second) => HashMapPatch.combine(second)(first),\n    diff: (oldValue, newValue) => HashMapPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => HashMapPatch.patch(oldValue, differ)(patch)\n  })\n\n/** @internal */\nexport const hashSet = <Value>(): Differ.Differ<HashSet<Value>, Differ.Differ.HashSet.Patch<Value>> =>\n  make({\n    empty: HashSetPatch.empty(),\n    combine: (first, second) => HashSetPatch.combine(second)(first),\n    diff: (oldValue, newValue) => HashSetPatch.diff(oldValue, newValue),\n    patch: (patch, oldValue) => HashSetPatch.patch(oldValue)(patch)\n  })\n\n/** @internal */\nexport const orElseEither = Dual.dual<\n  <Value2, Patch2>(that: Differ.Differ<Value2, Patch2>) => <Value, Patch>(\n    self: Differ.Differ<Value, Patch>\n  ) => Differ.Differ<Either<Value2, Value>, Differ.Differ.Or.Patch<Value, Value2, Patch, Patch2>>,\n  <Value, Patch, Value2, Patch2>(\n    self: Differ.Differ<Value, Patch>,\n    that: Differ.Differ<Value2, Patch2>\n  ) => Differ.Differ<Either<Value2, Value>, Differ.Differ.Or.Patch<Value, Value2, Patch, Patch2>>\n>(2, (self, that) =>\n  make({\n    empty: OrPatch.empty(),\n    combine: (first, second) => OrPatch.combine(first, second),\n    diff: (oldValue, newValue) =>\n      OrPatch.diff({\n        oldValue,\n        newValue,\n        left: self,\n        right: that\n      }),\n    patch: (patch, oldValue) =>\n      OrPatch.patch(patch, {\n        oldValue,\n        left: self,\n        right: that\n      })\n  }))\n\n/** @internal */\nexport const readonlyArray = <Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<ReadonlyArray<Value>, Differ.Differ.ReadonlyArray.Patch<Value, Patch>> =>\n  make({\n    empty: ReadonlyArrayPatch.empty(),\n    combine: (first, second) => ReadonlyArrayPatch.combine(first, second),\n    diff: (oldValue, newValue) => ReadonlyArrayPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => ReadonlyArrayPatch.patch(patch, oldValue, differ)\n  })\n\n/** @internal */\nexport const transform = Dual.dual<\n  <Value, Value2>(\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ) => <Patch>(self: Differ.Differ<Value, Patch>) => Differ.Differ<Value2, Patch>,\n  <Value, Patch, Value2>(\n    self: Differ.Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ) => Differ.Differ<Value2, Patch>\n>(2, (self, { toNew, toOld }) =>\n  make({\n    empty: self.empty,\n    combine: (first, second) => self.combine(first, second),\n    diff: (oldValue, newValue) => self.diff(toOld(oldValue), toOld(newValue)),\n    patch: (patch, oldValue) => toNew(self.patch(patch, toOld(oldValue)))\n  }))\n\n/** @internal */\nexport const update = <A>(): Differ.Differ<A, (a: A) => A> => updateWith((_, a) => a)\n\n/** @internal */\nexport const updateWith = <A>(f: (x: A, y: A) => A): Differ.Differ<A, (a: A) => A> =>\n  make({\n    empty: identity,\n    combine: (first, second) => {\n      if (first === identity) {\n        return second\n      }\n      if (second === identity) {\n        return first\n      }\n      return (a) => second(first(a))\n    },\n    diff: (oldValue, newValue) => {\n      if (Equal.equals(oldValue, newValue)) {\n        return identity\n      }\n      return constant(newValue)\n    },\n    patch: (patch, oldValue) => f(oldValue, patch(oldValue))\n  })\n\n/** @internal */\nexport const zip = Dual.dual<\n  <Value2, Patch2>(that: Differ.Differ<Value2, Patch2>) => <Value, Patch>(\n    self: Differ.Differ<Value, Patch>\n  ) => Differ.Differ<readonly [Value, Value2], readonly [Patch, Patch2]>,\n  <Value, Patch, Value2, Patch2>(\n    self: Differ.Differ<Value, Patch>,\n    that: Differ.Differ<Value2, Patch2>\n  ) => Differ.Differ<readonly [Value, Value2], readonly [Patch, Patch2]>\n>(2, (self, that) =>\n  make({\n    empty: [self.empty, that.empty] as const,\n    combine: (first, second) => [\n      self.combine(first[0], second[0]),\n      that.combine(first[1], second[1])\n    ],\n    diff: (oldValue, newValue) => [\n      self.diff(oldValue[0], newValue[0]),\n      that.diff(oldValue[1], newValue[1])\n    ],\n    patch: (patch, oldValue) => [\n      self.patch(patch[0], oldValue[0]),\n      that.patch(patch[1], oldValue[1])\n    ]\n  }))\n", "import * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as Types from \"../Types.js\"\nimport { StructuralPrototype } from \"./effectable.js\"\n\n/** @internal */\nexport const ArrayProto: Equal.Equal = Object.assign(Object.create(Array.prototype), {\n  [Hash.symbol](this: Array<any>) {\n    return Hash.cached(this, Hash.array(this))\n  },\n  [Equal.symbol](this: Array<any>, that: Equal.Equal) {\n    if (Array.isArray(that) && this.length === that.length) {\n      return this.every((v, i) => Equal.equals(v, (that as Array<any>)[i]))\n    } else {\n      return false\n    }\n  }\n})\n\n/** @internal */\nexport const Structural: new<A>(\n  args: Types.Equals<Omit<A, keyof Equal.Equal>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Equal.Equal ? never : P]: A[P] }\n) => {} = (function() {\n  function Structural(this: any, args: any) {\n    if (args) {\n      Object.assign(this, args)\n    }\n  }\n  Structural.prototype = StructuralPrototype\n  return Structural as any\n})()\n\n/** @internal */\nexport const struct = <As extends Readonly<Record<string, any>>>(as: As): As =>\n  Object.assign(Object.create(StructuralPrototype), as)\n", "import * as Chunk from \"../../Chunk.js\"\nimport type { Context } from \"../../Context.js\"\nimport type { Differ } from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport * as Dual from \"../../Function.js\"\nimport { makeContext } from \"../context.js\"\nimport { Structural } from \"../data.js\"\n\n/** @internal */\nexport const ContextPatchTypeId: Differ.Context.TypeId = Symbol.for(\n  \"effect/DifferContextPatch\"\n) as Differ.Context.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\n/** @internal */\nconst PatchProto = {\n  ...Structural.prototype,\n  [ContextPatchTypeId]: {\n    _Value: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Input, Output> extends Differ.Context.Patch<Input, Output> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/**\n * @internal\n */\nexport const empty = <Input, Output>(): Differ.Context.Patch<Input, Output> => _empty\n\n/** @internal */\nexport interface AndThen<in out Input, in out Output, in out Output2> extends Differ.Context.Patch<Input, Output2> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.Context.Patch<Input, Output>\n  readonly second: Differ.Context.Patch<Output, Output2>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\nconst makeAndThen = <Input, Output, Output2>(\n  first: Differ.Context.Patch<Input, Output>,\n  second: Differ.Context.Patch<Output, Output2>\n): Differ.Context.Patch<Input, Output2> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\n/** @internal */\nexport interface AddService<in out Env, in out T, in out I> extends Differ.Context.Patch<Env, Env | I> {\n  readonly _tag: \"AddService\"\n  readonly key: string\n  readonly service: T\n}\n\nconst AddServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AddService\"\n})\n\nconst makeAddService = <Env, I, T>(\n  key: string,\n  service: T\n): Differ.Context.Patch<Env, Env | I> => {\n  const o = Object.create(AddServiceProto)\n  o.key = key\n  o.service = service\n  return o\n}\n\n/** @internal */\nexport interface RemoveService<in out Env, in out I> extends Differ.Context.Patch<Env, Exclude<Env, I>> {\n  readonly _tag: \"RemoveService\"\n  readonly key: string\n}\n\nconst RemoveServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"RemoveService\"\n})\n\nconst makeRemoveService = <Env, I>(\n  key: string\n): Differ.Context.Patch<Env, Exclude<Env, I>> => {\n  const o = Object.create(RemoveServiceProto)\n  o.key = key\n  return o\n}\n\n/** @internal */\nexport interface UpdateService<in out Env, in out T, in out I> extends Differ.Context.Patch<Env | I, Env | I> {\n  readonly _tag: \"UpdateService\"\n  readonly key: string\n  update(service: T): T\n}\n\nconst UpdateServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"UpdateService\"\n})\n\nconst makeUpdateService = <Env, I, T>(\n  key: string,\n  update: (service: T) => T\n): Differ.Context.Patch<Env | I, Env | I> => {\n  const o = Object.create(UpdateServiceProto)\n  o.key = key\n  o.update = update\n  return o\n}\n\ntype Instruction =\n  | Empty<any, any>\n  | AndThen<any, any, any>\n  | AddService<any, any, any>\n  | RemoveService<any, any>\n  | UpdateService<any, any, any>\n\n/** @internal */\nexport const diff = <Input, Output>(\n  oldValue: Context<Input>,\n  newValue: Context<Output>\n): Differ.Context.Patch<Input, Output> => {\n  const missingServices = new Map(oldValue.unsafeMap)\n  let patch = empty<any, any>()\n  for (const [tag, newService] of newValue.unsafeMap.entries()) {\n    if (missingServices.has(tag)) {\n      const old = missingServices.get(tag)!\n      missingServices.delete(tag)\n      if (!Equal.equals(old, newService)) {\n        patch = combine(makeUpdateService(tag, () => newService))(patch)\n      }\n    } else {\n      missingServices.delete(tag)\n      patch = combine(makeAddService(tag, newService))(patch)\n    }\n  }\n  for (const [tag] of missingServices.entries()) {\n    patch = combine(makeRemoveService(tag))(patch)\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Output, Output2>(\n    that: Differ.Context.Patch<Output, Output2>\n  ) => <Input>(\n    self: Differ.Context.Patch<Input, Output>\n  ) => Differ.Context.Patch<Input, Output2>,\n  <Input, Output, Output2>(\n    self: Differ.Context.Patch<Input, Output>,\n    that: Differ.Context.Patch<Output, Output2>\n  ) => Differ.Context.Patch<Input, Output2>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Input>(\n    context: Context<Input>\n  ) => <Output>(\n    self: Differ.Context.Patch<Input, Output>\n  ) => Context<Output>,\n  <Input, Output>(\n    self: Differ.Context.Patch<Input, Output>,\n    context: Context<Input>\n  ) => Context<Output>\n>(2, <Input, Output>(self: Differ.Context.Patch<Input, Output>, context: Context<Input>) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return context as any\n  }\n  let wasServiceUpdated = false\n  let patches: Chunk.Chunk<Differ.Context.Patch<unknown, unknown>> = Chunk.of(\n    self as Differ.Context.Patch<unknown, unknown>\n  )\n  const updatedContext: Map<string, unknown> = new Map(context.unsafeMap)\n  while (Chunk.isNonEmpty(patches)) {\n    const head: Instruction = Chunk.headNonEmpty(patches) as Instruction\n    const tail = Chunk.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AddService\": {\n        updatedContext.set(head.key, head.service)\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        patches = Chunk.prepend(Chunk.prepend(tail, head.second), head.first)\n        break\n      }\n      case \"RemoveService\": {\n        updatedContext.delete(head.key)\n        patches = tail\n        break\n      }\n      case \"UpdateService\": {\n        updatedContext.set(head.key, head.update(updatedContext.get(head.key)))\n        wasServiceUpdated = true\n        patches = tail\n        break\n      }\n    }\n  }\n  if (!wasServiceUpdated) {\n    return makeContext(updatedContext) as Context<Output>\n  }\n  const map = new Map()\n  for (const [tag] of context.unsafeMap) {\n    if (updatedContext.has(tag)) {\n      map.set(tag, updatedContext.get(tag))\n      updatedContext.delete(tag)\n    }\n  }\n  for (const [tag, s] of updatedContext) {\n    map.set(tag, s)\n  }\n  return makeContext(map) as Context<Output>\n})\n", "import * as Chunk from \"../../Chunk.js\"\nimport type { Differ } from \"../../Differ.js\"\nimport * as Dual from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport { Structural } from \"../data.js\"\n\n/** @internal */\nexport const HashSetPatchTypeId: Differ.HashSet.TypeId = Symbol.for(\n  \"effect/DifferHashSetPatch\"\n) as Differ.HashSet.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\n/** @internal */\nconst PatchProto = {\n  ...Structural.prototype,\n  [HashSetPatchTypeId]: {\n    _Value: variance,\n    _Key: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/** @internal */\nexport const empty = <Value>(): Differ.HashSet.Patch<Value> => _empty\n\ninterface AndThen<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.HashSet.Patch<Value>\n  readonly second: Differ.HashSet.Patch<Value>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\n/** @internal */\nexport const makeAndThen = <Value>(\n  first: Differ.HashSet.Patch<Value>,\n  second: Differ.HashSet.Patch<Value>\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\ninterface Add<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Add\"\n  readonly value: Value\n}\n\nconst AddProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Add\"\n})\n\n/** @internal */\nexport const makeAdd = <Value>(\n  value: Value\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(AddProto)\n  o.value = value\n  return o\n}\n\ninterface Remove<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Remove\"\n  readonly value: Value\n}\n\nconst RemoveProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Remove\"\n})\n\n/** @internal */\nexport const makeRemove = <Value>(\n  value: Value\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(RemoveProto)\n  o.value = value\n  return o\n}\n\ntype Instruction =\n  | Add<any>\n  | AndThen<any>\n  | Empty<any>\n  | Remove<any>\n\n/** @internal */\nexport const diff = <Value>(\n  oldValue: HashSet.HashSet<Value>,\n  newValue: HashSet.HashSet<Value>\n): Differ.HashSet.Patch<Value> => {\n  const [removed, patch] = HashSet.reduce(\n    [oldValue, empty<Value>()] as const,\n    ([set, patch], value: Value) => {\n      if (HashSet.has(value)(set)) {\n        return [HashSet.remove(value)(set), patch] as const\n      }\n      return [set, combine(makeAdd(value))(patch)] as const\n    }\n  )(newValue)\n  return HashSet.reduce(patch, (patch, value: Value) => combine(makeRemove(value))(patch))(removed)\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Value>(\n    that: Differ.HashSet.Patch<Value>\n  ) => (\n    self: Differ.HashSet.Patch<Value>\n  ) => Differ.HashSet.Patch<Value>,\n  <Value>(\n    self: Differ.HashSet.Patch<Value>,\n    that: Differ.HashSet.Patch<Value>\n  ) => Differ.HashSet.Patch<Value>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Value>(\n    oldValue: HashSet.HashSet<Value>\n  ) => (\n    self: Differ.HashSet.Patch<Value>\n  ) => HashSet.HashSet<Value>,\n  <Value>(\n    self: Differ.HashSet.Patch<Value>,\n    oldValue: HashSet.HashSet<Value>\n  ) => HashSet.HashSet<Value>\n>(2, <Value>(\n  self: Differ.HashSet.Patch<Value>,\n  oldValue: HashSet.HashSet<Value>\n) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return oldValue\n  }\n  let set = oldValue\n  let patches: Chunk.Chunk<Differ.HashSet.Patch<Value>> = Chunk.of(self)\n  while (Chunk.isNonEmpty(patches)) {\n    const head: Instruction = Chunk.headNonEmpty(patches) as Instruction\n    const tail = Chunk.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        patches = Chunk.prepend(head.first)(Chunk.prepend(head.second)(tail))\n        break\n      }\n      case \"Add\": {\n        set = HashSet.add(head.value)(set)\n        patches = tail\n        break\n      }\n      case \"Remove\": {\n        set = HashSet.remove(head.value)(set)\n        patches = tail\n      }\n    }\n  }\n  return set\n})\n", "import * as Arr from \"../../Array.js\"\nimport type * as Differ from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport * as Dual from \"../../Function.js\"\nimport * as Data from \"../data.js\"\n\n/** @internal */\nexport const ReadonlyArrayPatchTypeId: Differ.Differ.ReadonlyArray.TypeId = Symbol.for(\n  \"effect/DifferReadonlyArrayPatch\"\n) as Differ.Differ.ReadonlyArray.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\nconst PatchProto = {\n  ...Data.Structural.prototype,\n  [ReadonlyArrayPatchTypeId]: {\n    _Value: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/**\n * @internal\n */\nexport const empty = <Value, Patch>(): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => _empty\n\ninterface AndThen<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  readonly second: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\nconst makeAndThen = <Value, Patch>(\n  first: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  second: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\ninterface Append<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Append\"\n  readonly values: ReadonlyArray<Value>\n}\n\nconst AppendProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Append\"\n})\n\nconst makeAppend = <Value, Patch>(values: ReadonlyArray<Value>): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(AppendProto)\n  o.values = values\n  return o\n}\n\ninterface Slice<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Slice\"\n  readonly from: number\n  readonly until: number\n}\n\nconst SliceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Slice\"\n})\n\nconst makeSlice = <Value, Patch>(from: number, until: number): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(SliceProto)\n  o.from = from\n  o.until = until\n  return o\n}\n\ninterface Update<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Update\"\n  readonly index: number\n  readonly patch: Patch\n}\n\nconst UpdateProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Update\"\n})\n\nconst makeUpdate = <Value, Patch>(index: number, patch: Patch): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(UpdateProto)\n  o.index = index\n  o.patch = patch\n  return o\n}\n\ntype Instruction =\n  | Empty<any, any>\n  | AndThen<any, any>\n  | Append<any, any>\n  | Slice<any, any>\n  | Update<any, any>\n\n/** @internal */\nexport const diff = <Value, Patch>(\n  options: {\n    readonly oldValue: ReadonlyArray<Value>\n    readonly newValue: ReadonlyArray<Value>\n    readonly differ: Differ.Differ<Value, Patch>\n  }\n): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  let i = 0\n  let patch = empty<Value, Patch>()\n  while (i < options.oldValue.length && i < options.newValue.length) {\n    const oldElement = options.oldValue[i]!\n    const newElement = options.newValue[i]!\n    const valuePatch = options.differ.diff(oldElement, newElement)\n    if (!Equal.equals(valuePatch, options.differ.empty)) {\n      patch = combine(patch, makeUpdate(i, valuePatch))\n    }\n    i = i + 1\n  }\n  if (i < options.oldValue.length) {\n    patch = combine(patch, makeSlice(0, i))\n  }\n  if (i < options.newValue.length) {\n    patch = combine(patch, makeAppend(Arr.drop(i)(options.newValue)))\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Value, Patch>(\n    that: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => (\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  <Value, Patch>(\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n    that: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Value, Patch>(\n    oldValue: ReadonlyArray<Value>,\n    differ: Differ.Differ<Value, Patch>\n  ) => (self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>) => ReadonlyArray<Value>,\n  <Value, Patch>(\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n    oldValue: ReadonlyArray<Value>,\n    differ: Differ.Differ<Value, Patch>\n  ) => ReadonlyArray<Value>\n>(3, <Value, Patch>(\n  self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  oldValue: ReadonlyArray<Value>,\n  differ: Differ.Differ<Value, Patch>\n) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return oldValue\n  }\n  let readonlyArray = oldValue.slice()\n  let patches: Array<Differ.Differ.ReadonlyArray.Patch<Value, Patch>> = Arr.of(self)\n  while (Arr.isNonEmptyArray(patches)) {\n    const head: Instruction = Arr.headNonEmpty(patches) as Instruction\n    const tail = Arr.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        tail.unshift(head.first, head.second)\n        patches = tail\n        break\n      }\n      case \"Append\": {\n        for (const value of head.values) {\n          readonlyArray.push(value)\n        }\n        patches = tail\n        break\n      }\n      case \"Slice\": {\n        readonlyArray = readonlyArray.slice(head.from, head.until)\n        patches = tail\n        break\n      }\n      case \"Update\": {\n        readonlyArray[head.index] = differ.patch(head.patch, readonlyArray[head.index]!)\n        patches = tail\n        break\n      }\n    }\n  }\n  return readonlyArray\n})\n", "import { dual } from \"../Function.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\n\n/** @internal */\nconst BIT_MASK = 0xff\n\n/** @internal */\nconst BIT_SHIFT = 0x08\n\n/** @internal */\nexport const active = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): number => patch & BIT_MASK\n\n/** @internal */\nexport const enabled = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): number => (patch >> BIT_SHIFT) & BIT_MASK\n\n/** @internal */\nexport const make = (active: number, enabled: number): RuntimeFlagsPatch.RuntimeFlagsPatch =>\n  ((active & BIT_MASK) + (((enabled & active) & BIT_MASK) << BIT_SHIFT)) as RuntimeFlagsPatch.RuntimeFlagsPatch\n\n/** @internal */\nexport const empty = make(0, 0)\n\n/** @internal */\nexport const enable = (flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch.RuntimeFlagsPatch => make(flag, flag)\n\n/** @internal */\nexport const disable = (flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch.RuntimeFlagsPatch => make(flag, 0)\n\n/** @internal */\nexport const isEmpty = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): boolean => patch === 0\n\n/** @internal */\nexport const isActive = dual<\n  (flag: RuntimeFlagsPatch.RuntimeFlagsPatch) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean\n>(2, (self, flag) => (active(self) & flag) !== 0)\n\n/** @internal */\nexport const isEnabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => (enabled(self) & flag) !== 0)\n\n/** @internal */\nexport const isDisabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => ((active(self) & flag) !== 0) && ((enabled(self) & flag) === 0))\n\n/** @internal */\nexport const exclude = dual<\n  (\n    flag: RuntimeFlags.RuntimeFlag\n  ) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, flag) => make(active(self) & ~flag, enabled(self)))\n\n/** @internal */\nexport const both = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => make(active(self) | active(that), enabled(self) & enabled(that)))\n\n/** @internal */\nexport const either = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => make(active(self) | active(that), enabled(self) | enabled(that)))\n\n/** @internal */\nexport const andThen = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => (self | that) as RuntimeFlagsPatch.RuntimeFlagsPatch)\n\n/** @internal */\nexport const inverse = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): RuntimeFlagsPatch.RuntimeFlagsPatch =>\n  make(enabled(patch), invert(active(patch)))\n\n/** @internal */\nexport const invert = (n: number): number => (~n >>> 0) & BIT_MASK\n", "import * as Chunk from \"../Chunk.js\"\nimport type * as Deferred from \"../Deferred.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type { FiberId } from \"../FiberId.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as List from \"../List.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\n\n/** @internal */\nexport const empty: RequestBlock.RequestBlock = {\n  _tag: \"Empty\"\n}\n\n/**\n * Combines this collection of blocked requests with the specified collection\n * of blocked requests, in parallel.\n *\n * @internal\n */\nexport const par = (\n  self: RequestBlock.RequestBlock,\n  that: RequestBlock.RequestBlock\n): RequestBlock.RequestBlock => ({\n  _tag: \"Par\",\n  left: self,\n  right: that\n})\n\n/**\n * Combines this collection of blocked requests with the specified collection\n * of blocked requests, in sequence.\n *\n * @internal\n */\nexport const seq = (\n  self: RequestBlock.RequestBlock,\n  that: RequestBlock.RequestBlock\n): RequestBlock.RequestBlock => ({\n  _tag: \"Seq\",\n  left: self,\n  right: that\n})\n\n/**\n * Constructs a collection of blocked requests from the specified blocked\n * request and data source.\n *\n * @internal\n */\nexport const single = <A>(\n  dataSource: RequestResolver.RequestResolver<A>,\n  blockedRequest: Request.Entry<A>\n): RequestBlock.RequestBlock => ({\n  _tag: \"Single\",\n  dataSource: dataSource as any,\n  blockedRequest\n})\n\n/** @internal */\nexport const MapRequestResolversReducer = <A>(\n  f: (dataSource: RequestResolver.RequestResolver<A>) => RequestResolver.RequestResolver<A>\n): RequestBlock.RequestBlock.Reducer<RequestBlock.RequestBlock> => ({\n  emptyCase: () => empty,\n  parCase: (left, right) => par(left, right),\n  seqCase: (left, right) => seq(left, right),\n  singleCase: (dataSource, blockedRequest) => single(f(dataSource), blockedRequest as any)\n})\n\ntype BlockedRequestsCase = ParCase | SeqCase\n\ninterface ParCase {\n  readonly _tag: \"ParCase\"\n}\n\ninterface SeqCase {\n  readonly _tag: \"SeqCase\"\n}\n\n/**\n * Transforms all data sources with the specified data source aspect, which\n * can change the environment type of data sources but must preserve the\n * request type of each data source.\n *\n * @internal\n */\nexport const mapRequestResolvers = <A>(\n  self: RequestBlock.RequestBlock,\n  f: (dataSource: RequestResolver.RequestResolver<A>) => RequestResolver.RequestResolver<A>\n): RequestBlock.RequestBlock => reduce(self, MapRequestResolversReducer(f))\n\n/**\n * Folds over the cases of this collection of blocked requests with the\n * specified functions.\n *\n * @internal\n */\nexport const reduce = <Z>(\n  self: RequestBlock.RequestBlock,\n  reducer: RequestBlock.RequestBlock.Reducer<Z>\n): Z => {\n  let input: List.List<RequestBlock.RequestBlock> = List.of(self)\n  let output = List.empty<Either.Either<Z, BlockedRequestsCase>>()\n  while (List.isCons(input)) {\n    const current: RequestBlock.RequestBlock = input.head\n    switch (current._tag) {\n      case \"Empty\": {\n        output = List.cons(Either.right(reducer.emptyCase()), output)\n        input = input.tail\n        break\n      }\n      case \"Par\": {\n        output = List.cons(Either.left({ _tag: \"ParCase\" }), output)\n        input = List.cons(current.left, List.cons(current.right, input.tail))\n        break\n      }\n      case \"Seq\": {\n        output = List.cons(Either.left({ _tag: \"SeqCase\" }), output)\n        input = List.cons(current.left, List.cons(current.right, input.tail))\n        break\n      }\n      case \"Single\": {\n        const result = reducer.singleCase(current.dataSource, current.blockedRequest)\n        output = List.cons(Either.right(result), output)\n        input = input.tail\n        break\n      }\n    }\n  }\n  const result = List.reduce(output, List.empty<Z>(), (acc, current) => {\n    switch (current._tag) {\n      case \"Left\": {\n        const left = List.unsafeHead(acc)\n        const right = List.unsafeHead(List.unsafeTail(acc))\n        const tail = List.unsafeTail(List.unsafeTail(acc))\n        switch (current.left._tag) {\n          case \"ParCase\": {\n            return List.cons(reducer.parCase(left, right), tail)\n          }\n          case \"SeqCase\": {\n            return List.cons(reducer.seqCase(left, right), tail)\n          }\n        }\n      }\n      case \"Right\": {\n        return List.cons(current.right, acc)\n      }\n    }\n  })\n  if (List.isNil(result)) {\n    throw new Error(\n      \"BUG: BlockedRequests.reduce - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return result.head\n}\n\n/**\n * Flattens a collection of blocked requests into a collection of pipelined\n * and batched requests that can be submitted for execution.\n *\n * @internal\n */\nexport const flatten = (\n  self: RequestBlock.RequestBlock\n): List.List<SequentialCollection> => {\n  let current = List.of(self)\n  let updated = List.empty<SequentialCollection>()\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const [parallel, sequential] = List.reduce(\n      current,\n      [parallelCollectionEmpty(), List.empty<RequestBlock.RequestBlock>()] as const,\n      ([parallel, sequential], blockedRequest) => {\n        const [par, seq] = step(blockedRequest)\n        return [\n          parallelCollectionCombine(parallel, par),\n          List.appendAll(sequential, seq)\n        ]\n      }\n    )\n    updated = merge(updated, parallel)\n    if (List.isNil(sequential)) {\n      return List.reverse(updated)\n    }\n    current = sequential\n  }\n  throw new Error(\n    \"BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n\n/**\n * Takes one step in evaluating a collection of blocked requests, returning a\n * collection of blocked requests that can be performed in parallel and a list\n * of blocked requests that must be performed sequentially after those\n * requests.\n */\nconst step = (\n  requests: RequestBlock.RequestBlock\n): [ParallelCollection, List.List<RequestBlock.RequestBlock>] => {\n  let current: RequestBlock.RequestBlock = requests\n  let parallel = parallelCollectionEmpty()\n  let stack = List.empty<RequestBlock.RequestBlock>()\n  let sequential = List.empty<RequestBlock.RequestBlock>()\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    switch (current._tag) {\n      case \"Empty\": {\n        if (List.isNil(stack)) {\n          return [parallel, sequential]\n        }\n        current = stack.head\n        stack = stack.tail\n        break\n      }\n      case \"Par\": {\n        stack = List.cons(current.right, stack)\n        current = current.left\n        break\n      }\n      case \"Seq\": {\n        const left = current.left\n        const right = current.right\n        switch (left._tag) {\n          case \"Empty\": {\n            current = right\n            break\n          }\n          case \"Par\": {\n            const l = left.left\n            const r = left.right\n            current = par(seq(l, right), seq(r, right))\n            break\n          }\n          case \"Seq\": {\n            const l = left.left\n            const r = left.right\n            current = seq(l, seq(r, right))\n            break\n          }\n          case \"Single\": {\n            current = left\n            sequential = List.cons(right, sequential)\n            break\n          }\n        }\n        break\n      }\n      case \"Single\": {\n        parallel = parallelCollectionAdd(\n          parallel,\n          current\n        )\n        if (List.isNil(stack)) {\n          return [parallel, sequential]\n        }\n        current = stack.head\n        stack = stack.tail\n        break\n      }\n    }\n  }\n  throw new Error(\n    \"BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n\n/**\n * Merges a collection of requests that must be executed sequentially with a\n * collection of requests that can be executed in parallel. If the collections\n * are both from the same single data source then the requests can be\n * pipelined while preserving ordering guarantees.\n */\nconst merge = (\n  sequential: List.List<SequentialCollection>,\n  parallel: ParallelCollection\n): List.List<SequentialCollection> => {\n  if (List.isNil(sequential)) {\n    return List.of(parallelCollectionToSequentialCollection(parallel))\n  }\n  if (parallelCollectionIsEmpty(parallel)) {\n    return sequential\n  }\n  const seqHeadKeys = sequentialCollectionKeys(sequential.head)\n  const parKeys = parallelCollectionKeys(parallel)\n  if (\n    seqHeadKeys.length === 1 &&\n    parKeys.length === 1 &&\n    Equal.equals(seqHeadKeys[0], parKeys[0])\n  ) {\n    return List.cons(\n      sequentialCollectionCombine(\n        sequential.head,\n        parallelCollectionToSequentialCollection(parallel)\n      ),\n      sequential.tail\n    )\n  }\n  return List.cons(parallelCollectionToSequentialCollection(parallel), sequential)\n}\n\n//\n// circular\n//\n\n/** @internal */\nexport const EntryTypeId: Request.EntryTypeId = Symbol.for(\n  \"effect/RequestBlock/Entry\"\n) as Request.EntryTypeId\n\n/** @internal */\nclass EntryImpl<A extends Request.Request<any, any>> implements Request.Entry<A> {\n  readonly [EntryTypeId] = blockedRequestVariance\n  constructor(\n    readonly request: A,\n    readonly result: Deferred.Deferred<Request.Request.Success<A>, Request.Request.Error<A>>,\n    readonly listeners: Request.Listeners,\n    readonly ownerId: FiberId,\n    readonly state: {\n      completed: boolean\n    }\n  ) {}\n}\n\nconst blockedRequestVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nexport const isEntry = (u: unknown): u is Request.Entry<unknown> => hasProperty(u, EntryTypeId)\n\n/** @internal */\nexport const makeEntry = <A extends Request.Request<any, any>>(\n  options: {\n    readonly request: A\n    readonly result: Deferred.Deferred<Request.Request.Success<A>, Request.Request.Error<A>>\n    readonly listeners: Request.Listeners\n    readonly ownerId: FiberId\n    readonly state: { completed: boolean }\n  }\n): Request.Entry<A> => new EntryImpl(options.request, options.result, options.listeners, options.ownerId, options.state)\n\n/** @internal */\nexport const RequestBlockParallelTypeId = Symbol.for(\n  \"effect/RequestBlock/RequestBlockParallel\"\n)\n\nconst parallelVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nclass ParallelImpl implements ParallelCollection {\n  readonly [RequestBlockParallelTypeId] = parallelVariance\n  constructor(\n    readonly map: HashMap.HashMap<\n      RequestResolver.RequestResolver<unknown, unknown>,\n      Chunk.Chunk<Request.Entry<unknown>>\n    >\n  ) {}\n}\n\n/** @internal */\nexport const parallelCollectionEmpty = (): ParallelCollection => new ParallelImpl(HashMap.empty())\n\n/** @internal */\nexport const parallelCollectionMake = <A>(\n  dataSource: RequestResolver.RequestResolver<A>,\n  blockedRequest: Request.Entry<A>\n): ParallelCollection => new ParallelImpl(HashMap.make([dataSource, Chunk.of(blockedRequest)]) as any)\n\n/** @internal */\nexport const parallelCollectionAdd = (\n  self: ParallelCollection,\n  blockedRequest: RequestBlock.Single\n): ParallelCollection =>\n  new ParallelImpl(HashMap.modifyAt(\n    self.map,\n    blockedRequest.dataSource,\n    (_) =>\n      Option.orElseSome(\n        Option.map(_, Chunk.append(blockedRequest.blockedRequest)),\n        () => Chunk.of(blockedRequest.blockedRequest)\n      )\n  ))\n\n/** @internal */\nexport const parallelCollectionCombine = (\n  self: ParallelCollection,\n  that: ParallelCollection\n): ParallelCollection =>\n  new ParallelImpl(HashMap.reduce(self.map, that.map, (map, value, key) =>\n    HashMap.set(\n      map,\n      key,\n      Option.match(HashMap.get(map, key), {\n        onNone: () => value,\n        onSome: (other) => Chunk.appendAll(value, other)\n      })\n    )))\n\n/** @internal */\nexport const parallelCollectionIsEmpty = (self: ParallelCollection): boolean => HashMap.isEmpty(self.map)\n\n/** @internal */\nexport const parallelCollectionKeys = (\n  self: ParallelCollection\n): Array<RequestResolver.RequestResolver<unknown>> => Array.from(HashMap.keys(self.map)) as any\n\n/** @internal */\nexport const parallelCollectionToSequentialCollection = (\n  self: ParallelCollection\n): SequentialCollection => sequentialCollectionMake(HashMap.map(self.map, (x) => Chunk.of(x)) as any)\n\n// TODO\n// /** @internal */\n// export const parallelCollectionToChunk = <R>(\n//   self: ParallelCollection<R>\n// ): Array<[RequestResolver.RequestResolver<unknown, R>, Array<Request.Entry<unknown>>]> => Array.from(self.map) as any\n\n/** @internal */\nexport const SequentialCollectionTypeId = Symbol.for(\n  \"effect/RequestBlock/RequestBlockSequential\"\n)\n\nconst sequentialVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nclass SequentialImpl implements SequentialCollection {\n  readonly [SequentialCollectionTypeId] = sequentialVariance\n  constructor(\n    readonly map: HashMap.HashMap<\n      RequestResolver.RequestResolver<unknown, unknown>,\n      Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>\n    >\n  ) {}\n}\n\n/** @internal */\nexport const sequentialCollectionMake = <A, R>(\n  map: HashMap.HashMap<\n    RequestResolver.RequestResolver<A, R>,\n    Chunk.Chunk<Chunk.Chunk<Request.Entry<A>>>\n  >\n): SequentialCollection => new SequentialImpl(map as any)\n\n/** @internal */\nexport const sequentialCollectionCombine = (\n  self: SequentialCollection,\n  that: SequentialCollection\n): SequentialCollection =>\n  new SequentialImpl(HashMap.reduce(that.map, self.map, (map, value, key) =>\n    HashMap.set(\n      map,\n      key,\n      Option.match(HashMap.get(map, key), {\n        onNone: () => Chunk.empty(),\n        onSome: (a) => Chunk.appendAll(a, value)\n      })\n    )))\n\n/** @internal */\nexport const sequentialCollectionIsEmpty = (self: SequentialCollection): boolean => HashMap.isEmpty(self.map)\n\n/** @internal */\nexport const sequentialCollectionKeys = (\n  self: SequentialCollection\n): Array<RequestResolver.RequestResolver<unknown>> => Array.from(HashMap.keys(self.map)) as any\n\n/** @internal */\nexport const sequentialCollectionToChunk = (\n  self: SequentialCollection\n): Array<[RequestResolver.RequestResolver<unknown>, Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>]> =>\n  Array.from(self.map) as any\n\n/** @internal */\nexport type RequestBlockParallelTypeId = typeof RequestBlockParallelTypeId\n\n/** @internal */\nexport interface ParallelCollection extends ParallelCollection.Variance {\n  readonly map: HashMap.HashMap<\n    RequestResolver.RequestResolver<unknown, unknown>,\n    Chunk.Chunk<Request.Entry<unknown>>\n  >\n}\n\n/** @internal */\nexport declare namespace ParallelCollection {\n  /** @internal */\n  export interface Variance {\n    readonly [RequestBlockParallelTypeId]: {}\n  }\n}\n\n/** @internal */\nexport type SequentialCollectionTypeId = typeof SequentialCollectionTypeId\n\n/** @internal */\nexport interface SequentialCollection extends SequentialCollection.Variance {\n  readonly map: HashMap.HashMap<\n    RequestResolver.RequestResolver<unknown, unknown>,\n    Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>\n  >\n}\n\n/** @internal */\nexport declare namespace SequentialCollection {\n  /** @internal */\n  export interface Variance {\n    readonly [SequentialCollectionTypeId]: {}\n  }\n}\n", "import * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { constFalse, constTrue, dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport { NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type { Predicate, Refinement } from \"../Predicate.js\"\nimport { hasProperty, isFunction } from \"../Predicate.js\"\nimport type { AnySpan, Span } from \"../Tracer.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { getBugErrorMessage } from \"./errors.js\"\nimport * as OpCodes from \"./opCodes/cause.js\"\n\n// -----------------------------------------------------------------------------\n// Models\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst CauseSymbolKey = \"effect/Cause\"\n\n/** @internal */\nexport const CauseTypeId: Cause.CauseTypeId = Symbol.for(\n  CauseSymbolKey\n) as Cause.CauseTypeId\n\nconst variance = {\n  /* c8 ignore next */\n  _E: (_: never) => _\n}\n\n/** @internal */\nconst proto = {\n  [CauseTypeId]: variance,\n  [Hash.symbol](this: Cause.Cause<any>): number {\n    return pipe(\n      Hash.hash(CauseSymbolKey),\n      Hash.combine(Hash.hash(flattenCause(this))),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol](this: Cause.Cause<any>, that: unknown): boolean {\n    return isCause(that) && causeEquals(this, that)\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  toJSON<E>(this: Cause.Cause<E>) {\n    switch (this._tag) {\n      case \"Empty\":\n        return { _id: \"Cause\", _tag: this._tag }\n      case \"Die\":\n        return { _id: \"Cause\", _tag: this._tag, defect: toJSON(this.defect) }\n      case \"Interrupt\":\n        return { _id: \"Cause\", _tag: this._tag, fiberId: this.fiberId.toJSON() }\n      case \"Fail\":\n        return { _id: \"Cause\", _tag: this._tag, failure: toJSON(this.error) }\n      case \"Sequential\":\n      case \"Parallel\":\n        return { _id: \"Cause\", _tag: this._tag, left: toJSON(this.left), right: toJSON(this.right) }\n    }\n  },\n  toString<E>(this: Cause.Cause<E>) {\n    return pretty(this)\n  },\n  [NodeInspectSymbol]<E>(this: Cause.Cause<E>) {\n    return this.toJSON()\n  }\n}\n\n// -----------------------------------------------------------------------------\n// Constructors\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const empty: Cause.Cause<never> = (() => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_EMPTY\n  return o\n})()\n\n/** @internal */\nexport const fail = <E>(error: E): Cause.Cause<E> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_FAIL\n  o.error = error\n  return o\n}\n\n/** @internal */\nexport const die = (defect: unknown): Cause.Cause<never> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_DIE\n  o.defect = defect\n  return o\n}\n\n/** @internal */\nexport const interrupt = (fiberId: FiberId.FiberId): Cause.Cause<never> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_INTERRUPT\n  o.fiberId = fiberId\n  return o\n}\n\n/** @internal */\nexport const parallel = <E, E2>(left: Cause.Cause<E>, right: Cause.Cause<E2>): Cause.Cause<E | E2> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_PARALLEL\n  o.left = left\n  o.right = right\n  return o\n}\n\n/** @internal */\nexport const sequential = <E, E2>(left: Cause.Cause<E>, right: Cause.Cause<E2>): Cause.Cause<E | E2> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_SEQUENTIAL\n  o.left = left\n  o.right = right\n  return o\n}\n\n// -----------------------------------------------------------------------------\n// Refinements\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const isCause = (u: unknown): u is Cause.Cause<never> => hasProperty(u, CauseTypeId)\n\n/** @internal */\nexport const isEmptyType = <E>(self: Cause.Cause<E>): self is Cause.Empty => self._tag === OpCodes.OP_EMPTY\n\n/** @internal */\nexport const isFailType = <E>(self: Cause.Cause<E>): self is Cause.Fail<E> => self._tag === OpCodes.OP_FAIL\n\n/** @internal */\nexport const isDieType = <E>(self: Cause.Cause<E>): self is Cause.Die => self._tag === OpCodes.OP_DIE\n\n/** @internal */\nexport const isInterruptType = <E>(self: Cause.Cause<E>): self is Cause.Interrupt => self._tag === OpCodes.OP_INTERRUPT\n\n/** @internal */\nexport const isSequentialType = <E>(self: Cause.Cause<E>): self is Cause.Sequential<E> =>\n  self._tag === OpCodes.OP_SEQUENTIAL\n\n/** @internal */\nexport const isParallelType = <E>(self: Cause.Cause<E>): self is Cause.Parallel<E> => self._tag === OpCodes.OP_PARALLEL\n\n// -----------------------------------------------------------------------------\n// Getters\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const size = <E>(self: Cause.Cause<E>): number => reduceWithContext(self, void 0, SizeCauseReducer)\n\n/** @internal */\nexport const isEmpty = <E>(self: Cause.Cause<E>): boolean => {\n  if (self._tag === OpCodes.OP_EMPTY) {\n    return true\n  }\n  return reduce(self, true, (acc, cause) => {\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        return Option.some(acc)\n      }\n      case OpCodes.OP_DIE:\n      case OpCodes.OP_FAIL:\n      case OpCodes.OP_INTERRUPT: {\n        return Option.some(false)\n      }\n      default: {\n        return Option.none()\n      }\n    }\n  })\n}\n\n/** @internal */\nexport const isFailure = <E>(self: Cause.Cause<E>): boolean => Option.isSome(failureOption(self))\n\n/** @internal */\nexport const isDie = <E>(self: Cause.Cause<E>): boolean => Option.isSome(dieOption(self))\n\n/** @internal */\nexport const isInterrupted = <E>(self: Cause.Cause<E>): boolean => Option.isSome(interruptOption(self))\n\n/** @internal */\nexport const isInterruptedOnly = <E>(self: Cause.Cause<E>): boolean =>\n  reduceWithContext(undefined, IsInterruptedOnlyCauseReducer)(self)\n\n/** @internal */\nexport const failures = <E>(self: Cause.Cause<E>): Chunk.Chunk<E> =>\n  Chunk.reverse(\n    reduce<Chunk.Chunk<E>, E>(\n      self,\n      Chunk.empty<E>(),\n      (list, cause) =>\n        cause._tag === OpCodes.OP_FAIL ?\n          Option.some(pipe(list, Chunk.prepend(cause.error))) :\n          Option.none()\n    )\n  )\n\n/** @internal */\nexport const defects = <E>(self: Cause.Cause<E>): Chunk.Chunk<unknown> =>\n  Chunk.reverse(\n    reduce<Chunk.Chunk<unknown>, E>(\n      self,\n      Chunk.empty<unknown>(),\n      (list, cause) =>\n        cause._tag === OpCodes.OP_DIE ?\n          Option.some(pipe(list, Chunk.prepend(cause.defect))) :\n          Option.none()\n    )\n  )\n\n/** @internal */\nexport const interruptors = <E>(self: Cause.Cause<E>): HashSet.HashSet<FiberId.FiberId> =>\n  reduce(self, HashSet.empty<FiberId.FiberId>(), (set, cause) =>\n    cause._tag === OpCodes.OP_INTERRUPT ?\n      Option.some(pipe(set, HashSet.add(cause.fiberId))) :\n      Option.none())\n\n/** @internal */\nexport const failureOption = <E>(self: Cause.Cause<E>): Option.Option<E> =>\n  find<E, E>(self, (cause) =>\n    cause._tag === OpCodes.OP_FAIL ?\n      Option.some(cause.error) :\n      Option.none())\n\n/** @internal */\nexport const failureOrCause = <E>(self: Cause.Cause<E>): Either.Either<Cause.Cause<never>, E> => {\n  const option = failureOption(self)\n  switch (option._tag) {\n    case \"None\": {\n      // no `E` inside this `Cause`, so it can be safely cast to `never`\n      return Either.right(self as Cause.Cause<never>)\n    }\n    case \"Some\": {\n      return Either.left(option.value)\n    }\n  }\n}\n\n/** @internal */\nexport const dieOption = <E>(self: Cause.Cause<E>): Option.Option<unknown> =>\n  find(self, (cause) =>\n    cause._tag === OpCodes.OP_DIE ?\n      Option.some(cause.defect) :\n      Option.none())\n\n/** @internal */\nexport const flipCauseOption = <E>(self: Cause.Cause<Option.Option<E>>): Option.Option<Cause.Cause<E>> =>\n  match(self, {\n    onEmpty: Option.some(empty),\n    onFail: (failureOption) => pipe(failureOption, Option.map(fail)),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: (fiberId) => Option.some(interrupt(fiberId)),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      return Option.none()\n    }\n  })\n\n/** @internal */\nexport const interruptOption = <E>(self: Cause.Cause<E>): Option.Option<FiberId.FiberId> =>\n  find(self, (cause) =>\n    cause._tag === OpCodes.OP_INTERRUPT ?\n      Option.some(cause.fiberId) :\n      Option.none())\n\n/** @internal */\nexport const keepDefects = <E>(self: Cause.Cause<E>): Option.Option<Cause.Cause<never>> =>\n  match<Option.Option<Cause.Cause<never>>, E>(self, {\n    onEmpty: Option.none(),\n    onFail: () => Option.none(),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: () => Option.none(),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    }\n  })\n\n/** @internal */\nexport const keepDefectsAndElectFailures = <E>(self: Cause.Cause<E>): Option.Option<Cause.Cause<never>> =>\n  match<Option.Option<Cause.Cause<never>>, E>(self, {\n    onEmpty: Option.none(),\n    onFail: (failure) => Option.some(die(failure)),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: () => Option.none(),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    }\n  })\n\n/** @internal */\nexport const linearize = <E>(self: Cause.Cause<E>): HashSet.HashSet<Cause.Cause<E>> =>\n  match(self, {\n    onEmpty: HashSet.empty(),\n    onFail: (error) => HashSet.make(fail(error)),\n    onDie: (defect) => HashSet.make(die(defect)),\n    onInterrupt: (fiberId) => HashSet.make(interrupt(fiberId)),\n    onSequential: (leftSet, rightSet) =>\n      pipe(\n        leftSet,\n        HashSet.flatMap((leftCause) =>\n          pipe(\n            rightSet,\n            HashSet.map((rightCause) => sequential(leftCause, rightCause))\n          )\n        )\n      ),\n    onParallel: (leftSet, rightSet) =>\n      pipe(\n        leftSet,\n        HashSet.flatMap((leftCause) =>\n          pipe(\n            rightSet,\n            HashSet.map((rightCause) => parallel(leftCause, rightCause))\n          )\n        )\n      )\n  })\n\n/** @internal */\nexport const stripFailures = <E>(self: Cause.Cause<E>): Cause.Cause<never> =>\n  match(self, {\n    onEmpty: empty,\n    onFail: () => empty,\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: sequential,\n    onParallel: parallel\n  })\n\n/** @internal */\nexport const electFailures = <E>(self: Cause.Cause<E>): Cause.Cause<never> =>\n  match(self, {\n    onEmpty: empty,\n    onFail: (failure) => die(failure),\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: (left, right) => sequential(left, right),\n    onParallel: (left, right) => parallel(left, right)\n  })\n\n/** @internal */\nexport const stripSomeDefects = dual<\n  (pf: (defect: unknown) => Option.Option<unknown>) => <E>(self: Cause.Cause<E>) => Option.Option<Cause.Cause<E>>,\n  <E>(self: Cause.Cause<E>, pf: (defect: unknown) => Option.Option<unknown>) => Option.Option<Cause.Cause<E>>\n>(2, <E>(self: Cause.Cause<E>, pf: (defect: unknown) => Option.Option<unknown>) =>\n  match(self, {\n    onEmpty: Option.some(empty),\n    onFail: (error) => Option.some(fail(error)),\n    onDie: (defect) => {\n      const option = pf(defect)\n      return Option.isSome(option) ? Option.none() : Option.some(die(defect))\n    },\n    onInterrupt: (fiberId) => Option.some(interrupt(fiberId)),\n    onSequential: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(sequential(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    },\n    onParallel: (left, right) => {\n      if (Option.isSome(left) && Option.isSome(right)) {\n        return Option.some(parallel(left.value, right.value))\n      }\n      if (Option.isSome(left) && Option.isNone(right)) {\n        return Option.some(left.value)\n      }\n      if (Option.isNone(left) && Option.isSome(right)) {\n        return Option.some(right.value)\n      }\n      return Option.none()\n    }\n  }))\n\n// -----------------------------------------------------------------------------\n// Mapping\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const as = dual<\n  <E2>(error: E2) => <E>(self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, error: E2) => Cause.Cause<E2>\n>(2, (self, error) => map(self, () => error))\n\n/** @internal */\nexport const map = dual<\n  <E, E2>(f: (e: E) => E2) => (self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => E2) => Cause.Cause<E2>\n>(2, (self, f) => flatMap(self, (e) => fail(f(e))))\n\n// -----------------------------------------------------------------------------\n// Sequencing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const flatMap = dual<\n  <E, E2>(f: (e: E) => Cause.Cause<E2>) => (self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => Cause.Cause<E2>) => Cause.Cause<E2>\n>(2, (self, f) =>\n  match(self, {\n    onEmpty: empty,\n    onFail: (error) => f(error),\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: (left, right) => sequential(left, right),\n    onParallel: (left, right) => parallel(left, right)\n  }))\n\n/** @internal */\nexport const flatten = <E>(self: Cause.Cause<Cause.Cause<E>>): Cause.Cause<E> => flatMap(self, identity)\n\n/** @internal */\nexport const andThen: {\n  <E, E2>(f: (e: E) => Cause.Cause<E2>): (self: Cause.Cause<E>) => Cause.Cause<E2>\n  <E2>(f: Cause.Cause<E2>): <E>(self: Cause.Cause<E>) => Cause.Cause<E2>\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => Cause.Cause<E2>): Cause.Cause<E2>\n  <E, E2>(self: Cause.Cause<E>, f: Cause.Cause<E2>): Cause.Cause<E2>\n} = dual(\n  2,\n  <E, E2>(self: Cause.Cause<E>, f: ((e: E) => Cause.Cause<E2>) | Cause.Cause<E2>): Cause.Cause<E2> =>\n    isFunction(f) ? flatMap(self, f) : flatMap(self, () => f)\n)\n\n// -----------------------------------------------------------------------------\n// Equality\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const contains = dual<\n  <E2>(that: Cause.Cause<E2>) => <E>(self: Cause.Cause<E>) => boolean,\n  <E, E2>(self: Cause.Cause<E>, that: Cause.Cause<E2>) => boolean\n>(2, (self, that) => {\n  if (that._tag === OpCodes.OP_EMPTY || self === that) {\n    return true\n  }\n  return reduce(self, false, (accumulator, cause) => {\n    return Option.some(accumulator || causeEquals(cause, that))\n  })\n})\n\n/** @internal */\nconst causeEquals = (left: Cause.Cause<unknown>, right: Cause.Cause<unknown>): boolean => {\n  let leftStack: Chunk.Chunk<Cause.Cause<unknown>> = Chunk.of(left)\n  let rightStack: Chunk.Chunk<Cause.Cause<unknown>> = Chunk.of(right)\n  while (Chunk.isNonEmpty(leftStack) && Chunk.isNonEmpty(rightStack)) {\n    const [leftParallel, leftSequential] = pipe(\n      Chunk.headNonEmpty(leftStack),\n      reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return Option.some(\n            [\n              pipe(parallel, HashSet.union(par)),\n              pipe(sequential, Chunk.appendAll(seq))\n            ] as const\n          )\n        }\n      )\n    )\n    const [rightParallel, rightSequential] = pipe(\n      Chunk.headNonEmpty(rightStack),\n      reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return Option.some(\n            [\n              pipe(parallel, HashSet.union(par)),\n              pipe(sequential, Chunk.appendAll(seq))\n            ] as const\n          )\n        }\n      )\n    )\n    if (!Equal.equals(leftParallel, rightParallel)) {\n      return false\n    }\n    leftStack = leftSequential\n    rightStack = rightSequential\n  }\n  return true\n}\n\n// -----------------------------------------------------------------------------\n// Flattening\n// -----------------------------------------------------------------------------\n\n/**\n * Flattens a cause to a sequence of sets of causes, where each set represents\n * causes that fail in parallel and sequential sets represent causes that fail\n * after each other.\n *\n * @internal\n */\nconst flattenCause = (cause: Cause.Cause<unknown>): Chunk.Chunk<HashSet.HashSet<unknown>> => {\n  return flattenCauseLoop(Chunk.of(cause), Chunk.empty())\n}\n\n/** @internal */\nconst flattenCauseLoop = (\n  causes: Chunk.Chunk<Cause.Cause<unknown>>,\n  flattened: Chunk.Chunk<HashSet.HashSet<unknown>>\n): Chunk.Chunk<HashSet.HashSet<unknown>> => {\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const [parallel, sequential] = pipe(\n      causes,\n      Arr.reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return [\n            pipe(parallel, HashSet.union(par)),\n            pipe(sequential, Chunk.appendAll(seq))\n          ]\n        }\n      )\n    )\n    const updated = HashSet.size(parallel) > 0 ?\n      pipe(flattened, Chunk.prepend(parallel)) :\n      flattened\n    if (Chunk.isEmpty(sequential)) {\n      return Chunk.reverse(updated)\n    }\n    causes = sequential\n    flattened = updated\n  }\n  throw new Error(getBugErrorMessage(\"Cause.flattenCauseLoop\"))\n}\n\n// -----------------------------------------------------------------------------\n// Finding\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const find = dual<\n  <E, Z>(pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => (self: Cause.Cause<E>) => Option.Option<Z>,\n  <E, Z>(self: Cause.Cause<E>, pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => Option.Option<Z>\n>(2, <E, Z>(self: Cause.Cause<E>, pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => {\n  const stack: Array<Cause.Cause<E>> = [self]\n  while (stack.length > 0) {\n    const item = stack.pop()!\n    const option = pf(item)\n    switch (option._tag) {\n      case \"None\": {\n        switch (item._tag) {\n          case OpCodes.OP_SEQUENTIAL:\n          case OpCodes.OP_PARALLEL: {\n            stack.push(item.right)\n            stack.push(item.left)\n            break\n          }\n        }\n        break\n      }\n      case \"Some\": {\n        return option\n      }\n    }\n  }\n  return Option.none()\n})\n\n// -----------------------------------------------------------------------------\n// Filtering\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const filter: {\n  <E, EB extends E>(\n    refinement: Refinement<Cause.Cause<NoInfer<E>>, Cause.Cause<EB>>\n  ): (self: Cause.Cause<E>) => Cause.Cause<EB>\n  <E>(predicate: Predicate<Cause.Cause<NoInfer<E>>>): (self: Cause.Cause<E>) => Cause.Cause<E>\n  <E, EB extends E>(self: Cause.Cause<E>, refinement: Refinement<Cause.Cause<E>, Cause.Cause<EB>>): Cause.Cause<EB>\n  <E>(self: Cause.Cause<E>, predicate: Predicate<Cause.Cause<E>>): Cause.Cause<E>\n} = dual(\n  2,\n  <E>(self: Cause.Cause<E>, predicate: Predicate<Cause.Cause<E>>): Cause.Cause<E> =>\n    reduceWithContext(self, void 0, FilterCauseReducer(predicate))\n)\n\n// -----------------------------------------------------------------------------\n// Evaluation\n// -----------------------------------------------------------------------------\n\n/**\n * Takes one step in evaluating a cause, returning a set of causes that fail\n * in parallel and a list of causes that fail sequentially after those causes.\n *\n * @internal\n */\nconst evaluateCause = (\n  self: Cause.Cause<unknown>\n): [HashSet.HashSet<unknown>, Chunk.Chunk<Cause.Cause<unknown>>] => {\n  let cause: Cause.Cause<unknown> | undefined = self\n  const stack: Array<Cause.Cause<unknown>> = []\n  let _parallel = HashSet.empty<unknown>()\n  let _sequential = Chunk.empty<Cause.Cause<unknown>>()\n  while (cause !== undefined) {\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_FAIL: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.error))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_DIE: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.defect))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_INTERRUPT: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.fiberId as unknown))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_SEQUENTIAL: {\n        switch (cause.left._tag) {\n          case OpCodes.OP_EMPTY: {\n            cause = cause.right\n            break\n          }\n          case OpCodes.OP_SEQUENTIAL: {\n            cause = sequential(cause.left.left, sequential(cause.left.right, cause.right))\n            break\n          }\n          case OpCodes.OP_PARALLEL: {\n            cause = parallel(\n              sequential(cause.left.left, cause.right),\n              sequential(cause.left.right, cause.right)\n            )\n            break\n          }\n          default: {\n            _sequential = Chunk.prepend(_sequential, cause.right)\n            cause = cause.left\n            break\n          }\n        }\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        stack.push(cause.right)\n        cause = cause.left\n        break\n      }\n    }\n  }\n  throw new Error(getBugErrorMessage(\"Cause.evaluateCauseLoop\"))\n}\n\n// -----------------------------------------------------------------------------\n// Reducing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst SizeCauseReducer: Cause.CauseReducer<unknown, unknown, number> = {\n  emptyCase: () => 0,\n  failCase: () => 1,\n  dieCase: () => 1,\n  interruptCase: () => 1,\n  sequentialCase: (_, left, right) => left + right,\n  parallelCase: (_, left, right) => left + right\n}\n\n/** @internal */\nconst IsInterruptedOnlyCauseReducer: Cause.CauseReducer<unknown, unknown, boolean> = {\n  emptyCase: constTrue,\n  failCase: constFalse,\n  dieCase: constFalse,\n  interruptCase: constTrue,\n  sequentialCase: (_, left, right) => left && right,\n  parallelCase: (_, left, right) => left && right\n}\n\n/** @internal */\nconst FilterCauseReducer = <E>(\n  predicate: Predicate<Cause.Cause<E>>\n): Cause.CauseReducer<unknown, E, Cause.Cause<E>> => ({\n  emptyCase: () => empty,\n  failCase: (_, error) => fail(error),\n  dieCase: (_, defect) => die(defect),\n  interruptCase: (_, fiberId) => interrupt(fiberId),\n  sequentialCase: (_, left, right) => {\n    if (predicate(left)) {\n      if (predicate(right)) {\n        return sequential(left, right)\n      }\n      return left\n    }\n    if (predicate(right)) {\n      return right\n    }\n    return empty\n  },\n  parallelCase: (_, left, right) => {\n    if (predicate(left)) {\n      if (predicate(right)) {\n        return parallel(left, right)\n      }\n      return left\n    }\n    if (predicate(right)) {\n      return right\n    }\n    return empty\n  }\n})\n\n/** @internal */\ntype CauseCase = SequentialCase | ParallelCase\n\nconst OP_SEQUENTIAL_CASE = \"SequentialCase\"\n\nconst OP_PARALLEL_CASE = \"ParallelCase\"\n\n/** @internal */\ninterface SequentialCase {\n  readonly _tag: typeof OP_SEQUENTIAL_CASE\n}\n\n/** @internal */\ninterface ParallelCase {\n  readonly _tag: typeof OP_PARALLEL_CASE\n}\n\n/** @internal */\nexport const match = dual<\n  <Z, E>(\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ) => (self: Cause.Cause<E>) => Z,\n  <Z, E>(\n    self: Cause.Cause<E>,\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ) => Z\n>(2, (self, { onDie, onEmpty, onFail, onInterrupt, onParallel, onSequential }) => {\n  return reduceWithContext(self, void 0, {\n    emptyCase: () => onEmpty,\n    failCase: (_, error) => onFail(error),\n    dieCase: (_, defect) => onDie(defect),\n    interruptCase: (_, fiberId) => onInterrupt(fiberId),\n    sequentialCase: (_, left, right) => onSequential(left, right),\n    parallelCase: (_, left, right) => onParallel(left, right)\n  })\n})\n\n/** @internal */\nexport const reduce = dual<\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => (self: Cause.Cause<E>) => Z,\n  <Z, E>(self: Cause.Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => Z\n>(3, <Z, E>(self: Cause.Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => {\n  let accumulator: Z = zero\n  let cause: Cause.Cause<E> | undefined = self\n  const causes: Array<Cause.Cause<E>> = []\n  while (cause !== undefined) {\n    const option = pf(accumulator, cause)\n    accumulator = Option.isSome(option) ? option.value : accumulator\n    switch (cause._tag) {\n      case OpCodes.OP_SEQUENTIAL: {\n        causes.push(cause.right)\n        cause = cause.left\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        causes.push(cause.right)\n        cause = cause.left\n        break\n      }\n      default: {\n        cause = undefined\n        break\n      }\n    }\n    if (cause === undefined && causes.length > 0) {\n      cause = causes.pop()!\n    }\n  }\n  return accumulator\n})\n\n/** @internal */\nexport const reduceWithContext = dual<\n  <C, E, Z>(context: C, reducer: Cause.CauseReducer<C, E, Z>) => (self: Cause.Cause<E>) => Z,\n  <C, E, Z>(self: Cause.Cause<E>, context: C, reducer: Cause.CauseReducer<C, E, Z>) => Z\n>(3, <C, E, Z>(self: Cause.Cause<E>, context: C, reducer: Cause.CauseReducer<C, E, Z>) => {\n  const input: Array<Cause.Cause<E>> = [self]\n  const output: Array<Either.Either<Z, CauseCase>> = []\n  while (input.length > 0) {\n    const cause = input.pop()!\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        output.push(Either.right(reducer.emptyCase(context)))\n        break\n      }\n      case OpCodes.OP_FAIL: {\n        output.push(Either.right(reducer.failCase(context, cause.error)))\n        break\n      }\n      case OpCodes.OP_DIE: {\n        output.push(Either.right(reducer.dieCase(context, cause.defect)))\n        break\n      }\n      case OpCodes.OP_INTERRUPT: {\n        output.push(Either.right(reducer.interruptCase(context, cause.fiberId)))\n        break\n      }\n      case OpCodes.OP_SEQUENTIAL: {\n        input.push(cause.right)\n        input.push(cause.left)\n        output.push(Either.left({ _tag: OP_SEQUENTIAL_CASE }))\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        input.push(cause.right)\n        input.push(cause.left)\n        output.push(Either.left({ _tag: OP_PARALLEL_CASE }))\n        break\n      }\n    }\n  }\n  const accumulator: Array<Z> = []\n  while (output.length > 0) {\n    const either = output.pop()!\n    switch (either._tag) {\n      case \"Left\": {\n        switch (either.left._tag) {\n          case OP_SEQUENTIAL_CASE: {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.sequentialCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n          case OP_PARALLEL_CASE: {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.parallelCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n        }\n        break\n      }\n      case \"Right\": {\n        accumulator.push(either.right)\n        break\n      }\n    }\n  }\n  if (accumulator.length === 0) {\n    throw new Error(\n      \"BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return accumulator.pop()!\n})\n\n// -----------------------------------------------------------------------------\n// Pretty Printing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const pretty = <E>(cause: Cause.Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}): string => {\n  if (isInterruptedOnly(cause)) {\n    return \"All fibers interrupted without errors.\"\n  }\n  return prettyErrors<E>(cause).map(function(e) {\n    if (options?.renderErrorCause !== true || e.cause === undefined) {\n      return e.stack\n    }\n    return `${e.stack} {\\n${renderErrorCause(e.cause as PrettyError, \"  \")}\\n}`\n  }).join(\"\\n\")\n}\n\nconst renderErrorCause = (cause: PrettyError, prefix: string) => {\n  const lines = cause.stack!.split(\"\\n\")\n  let stack = `${prefix}[cause]: ${lines[0]}`\n  for (let i = 1, len = lines.length; i < len; i++) {\n    stack += `\\n${prefix}${lines[i]}`\n  }\n  if (cause.cause) {\n    stack += ` {\\n${renderErrorCause(cause.cause as PrettyError, `${prefix}  `)}\\n${prefix}}`\n  }\n  return stack\n}\n\nclass PrettyError extends globalThis.Error implements Cause.PrettyError {\n  span: undefined | Span = undefined\n  constructor(originalError: unknown) {\n    const originalErrorIsObject = typeof originalError === \"object\" && originalError !== null\n    const prevLimit = Error.stackTraceLimit\n    Error.stackTraceLimit = 1\n    super(\n      prettyErrorMessage(originalError),\n      originalErrorIsObject && \"cause\" in originalError && typeof originalError.cause !== \"undefined\"\n        ? { cause: new PrettyError(originalError.cause) }\n        : undefined\n    )\n    if (this.message === \"\") {\n      this.message = \"An error has occurred\"\n    }\n    Error.stackTraceLimit = prevLimit\n    this.name = originalError instanceof Error ? originalError.name : \"Error\"\n    if (originalErrorIsObject) {\n      if (spanSymbol in originalError) {\n        this.span = originalError[spanSymbol] as Span\n      }\n      Object.keys(originalError).forEach((key) => {\n        if (!(key in this)) {\n          // @ts-expect-error\n          this[key] = originalError[key]\n        }\n      })\n    }\n    this.stack = prettyErrorStack(\n      `${this.name}: ${this.message}`,\n      originalError instanceof Error && originalError.stack\n        ? originalError.stack\n        : \"\",\n      this.span\n    )\n  }\n}\n\n/**\n * A utility function for generating human-readable error messages from a generic error of type `unknown`.\n *\n * Rules:\n *\n * 1) If the input `u` is already a string, it's considered a message.\n * 2) If `u` is an Error instance with a message defined, it uses the message.\n * 3) If `u` has a user-defined `toString()` method, it uses that method.\n * 4) Otherwise, it uses `JSON.stringify` to produce a string representation and uses it as the error message,\n *   with \"Error\" added as a prefix.\n *\n * @internal\n */\nexport const prettyErrorMessage = (u: unknown): string => {\n  // 1)\n  if (typeof u === \"string\") {\n    return u\n  }\n  // 2)\n  if (typeof u === \"object\" && u !== null && u instanceof Error) {\n    return u.message\n  }\n  // 3)\n  try {\n    if (\n      hasProperty(u, \"toString\") &&\n      isFunction(u[\"toString\"]) &&\n      u[\"toString\"] !== Object.prototype.toString &&\n      u[\"toString\"] !== globalThis.Array.prototype.toString\n    ) {\n      return u[\"toString\"]()\n    }\n  } catch {\n    // something's off, rollback to json\n  }\n  // 4)\n  return JSON.stringify(u)\n}\n\nconst locationRegex = /\\((.*)\\)/\n\n/** @internal */\nexport const spanToTrace = globalValue(\"effect/Tracer/spanToTrace\", () => new WeakMap())\n\nconst prettyErrorStack = (message: string, stack: string, span?: Span | undefined): string => {\n  const out: Array<string> = [message]\n  const lines = stack.startsWith(message) ? stack.slice(message.length).split(\"\\n\") : stack.split(\"\\n\")\n\n  for (let i = 1; i < lines.length; i++) {\n    if (lines[i].includes(\"Generator.next\")) {\n      break\n    }\n    if (lines[i].includes(\"effect_internal_function\")) {\n      out.pop()\n      break\n    }\n    out.push(\n      lines[i]\n        .replace(/at .*effect_instruction_i.*\\((.*)\\)/, \"at $1\")\n        .replace(/EffectPrimitive\\.\\w+/, \"<anonymous>\")\n    )\n  }\n\n  if (span) {\n    let current: Span | AnySpan | undefined = span\n    let i = 0\n    while (current && current._tag === \"Span\" && i < 10) {\n      const stackFn = spanToTrace.get(current)\n      if (typeof stackFn === \"function\") {\n        const stack = stackFn()\n        if (typeof stack === \"string\") {\n          const locationMatch = stack.match(locationRegex)\n          const location = locationMatch ? locationMatch[1] : stack.replace(/^at /, \"\")\n          out.push(`    at ${current.name} (${location})`)\n        } else {\n          out.push(`    at ${current.name}`)\n        }\n      } else {\n        out.push(`    at ${current.name}`)\n      }\n      current = Option.getOrUndefined(current.parent)\n      i++\n    }\n  }\n\n  return out.join(\"\\n\")\n}\n\nconst spanSymbol = Symbol.for(\"effect/SpanAnnotation\")\n\n/** @internal */\nexport const prettyErrors = <E>(cause: Cause.Cause<E>): Array<PrettyError> =>\n  reduceWithContext(cause, void 0, {\n    emptyCase: (): Array<PrettyError> => [],\n    dieCase: (_, unknownError) => {\n      return [new PrettyError(unknownError)]\n    },\n    failCase: (_, error) => {\n      return [new PrettyError(error)]\n    },\n    interruptCase: () => [],\n    parallelCase: (_, l, r) => [...l, ...r],\n    sequentialCase: (_, l, r) => [...l, ...r]\n  })\n", "/** @internal */\nexport const OP_DIE = \"Die\" as const\n\n/** @internal */\nexport type OP_DIE = typeof OP_DIE\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_FAIL = \"Fail\" as const\n\n/** @internal */\nexport type OP_FAIL = typeof OP_FAIL\n\n/** @internal */\nexport const OP_INTERRUPT = \"Interrupt\" as const\n\n/** @internal */\nexport type OP_INTERRUPT = typeof OP_INTERRUPT\n\n/** @internal */\nexport const OP_PARALLEL = \"Parallel\" as const\n\n/** @internal */\nexport type OP_PARALLEL = typeof OP_PARALLEL\n\n/** @internal */\nexport const OP_SEQUENTIAL = \"Sequential\" as const\n\n/** @internal */\nexport type OP_SEQUENTIAL = typeof OP_SEQUENTIAL\n", "import type * as Deferred from \"../Deferred.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as OpCodes from \"./opCodes/deferred.js\"\n\n/** @internal */\nconst DeferredSymbolKey = \"effect/Deferred\"\n\n/** @internal */\nexport const DeferredTypeId: Deferred.DeferredTypeId = Symbol.for(\n  DeferredSymbolKey\n) as Deferred.DeferredTypeId\n\n/** @internal */\nexport const deferredVariance = {\n  /* c8 ignore next */\n  _E: (_: any) => _,\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/** @internal */\nexport type State</* in out */ A, /* in out */ E> = Pending<A, E> | Done<A, E>\n\n/** @internal */\nexport interface Pending<in A, in E> {\n  readonly _tag: \"Pending\"\n  readonly joiners: Array<(effect: Effect.Effect<A, E>) => void>\n}\n\n/** @internal */\nexport interface Done<out A, out E> {\n  readonly _tag: \"Done\"\n  readonly effect: Effect.Effect<A, E>\n}\n\n/** @internal */\nexport const pending = <A, E>(\n  joiners: Array<(effect: Effect.Effect<A, E>) => void>\n): State<A, E> => {\n  return { _tag: OpCodes.OP_STATE_PENDING, joiners }\n}\n\n/** @internal */\nexport const done = <A, E>(effect: Effect.Effect<A, E>): State<A, E> => {\n  return { _tag: OpCodes.OP_STATE_DONE, effect }\n}\n", "/** @internal */\nexport const OP_STATE_PENDING = \"Pending\" as const\n\n/** @internal */\nexport type OP_STATE_PENDING = typeof OP_STATE_PENDING\n\n/** @internal */\nexport const OP_STATE_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_STATE_DONE = typeof OP_STATE_DONE\n", "/** @internal */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  called = false\n\n  constructor(readonly self: T) {\n  }\n\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Context from \"../Context.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Option from \"../Option.js\"\nimport type * as Tracer from \"../Tracer.js\"\n\n/** @internal */\nexport const TracerTypeId: Tracer.TracerTypeId = Symbol.for(\"effect/Tracer\") as Tracer.TracerTypeId\n\n/** @internal */\nexport const make = (options: Omit<Tracer.Tracer, Tracer.TracerTypeId>): Tracer.Tracer => ({\n  [TracerTypeId]: TracerTypeId,\n  ...options\n})\n\n/** @internal */\nexport const tracerTag = Context.GenericTag<Tracer.Tracer>(\"effect/Tracer\")\n\n/** @internal */\nexport const spanTag = Context.GenericTag<Tracer.ParentSpan, Tracer.AnySpan>(\"effect/ParentSpan\")\n\nconst randomHexString = (function() {\n  const characters = \"abcdef0123456789\"\n  const charactersLength = characters.length\n  return function(length: number) {\n    let result = \"\"\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n  }\n})()\n\n/** @internal */\nexport class NativeSpan implements Tracer.Span {\n  readonly _tag = \"Span\"\n  readonly spanId: string\n  readonly traceId: string = \"native\"\n  readonly sampled = true\n\n  status: Tracer.SpanStatus\n  attributes: Map<string, unknown>\n  events: Array<[name: string, startTime: bigint, attributes: Record<string, unknown>]> = []\n\n  constructor(\n    readonly name: string,\n    readonly parent: Option.Option<Tracer.AnySpan>,\n    readonly context: Context.Context<never>,\n    readonly links: ReadonlyArray<Tracer.SpanLink>,\n    readonly startTime: bigint,\n    readonly kind: Tracer.SpanKind\n  ) {\n    this.status = {\n      _tag: \"Started\",\n      startTime\n    }\n    this.attributes = new Map()\n    this.traceId = parent._tag === \"Some\" ? parent.value.traceId : randomHexString(32)\n    this.spanId = randomHexString(16)\n  }\n\n  end(endTime: bigint, exit: Exit.Exit<unknown, unknown>): void {\n    this.status = {\n      _tag: \"Ended\",\n      endTime,\n      exit,\n      startTime: this.status.startTime\n    }\n  }\n\n  attribute(key: string, value: unknown): void {\n    this.attributes.set(key, value)\n  }\n\n  event(name: string, startTime: bigint, attributes?: Record<string, unknown>): void {\n    this.events.push([name, startTime, attributes ?? {}])\n  }\n}\n\n/** @internal */\nexport const nativeTracer: Tracer.Tracer = make({\n  span: (name, parent, context, links, startTime, kind) =>\n    new NativeSpan(\n      name,\n      parent,\n      context,\n      links,\n      startTime,\n      kind\n    ),\n  context: (f) => f()\n})\n\n/** @internal */\nexport const externalSpan = (options: {\n  readonly spanId: string\n  readonly traceId: string\n  readonly sampled?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n}): Tracer.ExternalSpan => ({\n  _tag: \"ExternalSpan\",\n  spanId: options.spanId,\n  traceId: options.traceId,\n  sampled: options.sampled ?? true,\n  context: options.context ?? Context.empty()\n})\n\n/** @internal */\nexport const addSpanStackTrace = (options: Tracer.SpanOptions | undefined): Tracer.SpanOptions => {\n  if (options?.captureStackTrace === false) {\n    return options\n  } else if (options?.captureStackTrace !== undefined && typeof options.captureStackTrace !== \"boolean\") {\n    return options\n  }\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 3\n  const traceError = new Error()\n  Error.stackTraceLimit = limit\n  let cache: false | string = false\n  return {\n    ...options,\n    captureStackTrace: () => {\n      if (cache !== false) {\n        return cache\n      }\n      if (traceError.stack !== undefined) {\n        const stack = traceError.stack.split(\"\\n\")\n        if (stack[3] !== undefined) {\n          cache = stack[3].trim()\n          return cache\n        }\n      }\n    }\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * An `Exit<A, E = never>` describes the result of a executing an `Effect` workflow.\n *\n * There are two possible values for an `Exit<A, E>`:\n *   - `Exit.Success` contain a success value of type `A`\n *   - `Exit.Failure` contains a failure `Cause` of type `E`\n *\n * @since 2.0.0\n * @category models\n */\nexport type Exit<A, E = never> = Success<A, E> | Failure<A, E>\n\n/**\n * Represents a failed `Effect` workflow containing the `Cause` of the failure\n * of type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Failure<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Failure\"\n  readonly _op: \"Failure\"\n  readonly cause: Cause.Cause<E>\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: Cause.Cause<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Exit?: () => A[Unify.typeSymbol] extends Exit<infer A0, infer E0> | infer _ ? Exit<A0, E0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * Represents a successful `Effect` workflow and containing the returned value\n * of type `A`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Success<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Success\"\n  readonly _op: \"Success\"\n  readonly value: A\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: A\n}\n\n/**\n * Returns `true` if the specified value is an `Exit`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isExit: (u: unknown) => u is Exit<unknown, unknown> = core.exitIsExit\n\n/**\n * Returns `true` if the specified `Exit` is a `Failure`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailure: <A, E>(self: Exit<A, E>) => self is Failure<A, E> = core.exitIsFailure\n\n/**\n * Returns `true` if the specified `Exit` is a `Success`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuccess: <A, E>(self: Exit<A, E>) => self is Success<A, E> = core.exitIsSuccess\n\n/**\n * Returns `true` if the specified exit is a `Failure` **and** the `Cause` of\n * the failure was due to interruption, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <A, E>(self: Exit<A, E>) => boolean = core.exitIsInterrupted\n\n/**\n * Maps the `Success` value of the specified exit to the provided constant\n * value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  <A2>(value: A2): <A, E>(self: Exit<A, E>) => Exit<A2, E>\n  <A, E, A2>(self: Exit<A, E>, value: A2): Exit<A2, E>\n} = core.exitAs\n\n/**\n * Maps the `Success` value of the specified exit to a void.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E>(self: Exit<A, E>) => Exit<void, E> = core.exitAsVoid\n\n/**\n * Returns a `Some<Cause<E>>` if the specified exit is a `Failure`, `None`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const causeOption: <A, E>(self: Exit<A, E>) => Option.Option<Cause.Cause<E>> = core.exitCauseOption\n\n/**\n * Collects all of the specified exit values into a `Some<Exit<List<A>, E>>`. If\n * the provided iterable contains no elements, `None` will be returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(\n  exits: Iterable<Exit<A, E>>,\n  options?: { readonly parallel?: boolean | undefined } | undefined\n) => Option.Option<Exit<Array<A>, E>> = core.exitCollectAll\n\n/**\n * Constructs a new `Exit.Failure` from the specified unrecoverable defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Exit<never> = core.exitDie\n\n/**\n * Executes the predicate on the value of the specified exit if it is a\n * `Success`, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const exists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit<A, E>) => self is Exit<B>\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit<A, E>) => boolean\n  <A, E, B extends A>(self: Exit<A, E>, refinement: Refinement<A, B>): self is Exit<B>\n  <A, E>(self: Exit<A, E>, predicate: Predicate<A>): boolean\n} = core.exitExists\n\n/**\n * Constructs a new `Exit.Failure` from the specified recoverable error of type\n * `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Exit<never, E> = core.exitFail\n\n/**\n * Constructs a new `Exit.Failure` from the specified `Cause` of type `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Exit<never, E> = core.exitFailCause\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, A2, E2>(f: (a: A) => Exit<A2, E2>): <E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  <A, E, E2, A2>(self: Exit<A, E>, f: (a: A) => Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitFlatMap\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMapEffect: {\n  <A, E, A2, E2, R>(\n    f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>\n  ): (self: Exit<A, E>) => Effect.Effect<Exit<A2, E>, E2, R>\n  <A, E, A2, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>): Effect.Effect<Exit<A2, E>, E2, R>\n} = core.exitFlatMapEffect\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E, E2>(self: Exit<Exit<A, E>, E2>) => Exit<A, E | E2> = core.exitFlatten\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachEffect: {\n  <A, B, E2, R>(f: (a: A) => Effect.Effect<B, E2, R>): <E>(self: Exit<A, E>) => Effect.Effect<Exit<B, E2 | E>, never, R>\n  <A, E, B, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<B, E2, R>): Effect.Effect<Exit<B, E | E2>, never, R>\n} = core.exitForEachEffect\n\n/**\n * Converts an `Either<R, L>` into an `Exit<R, L>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEither: <R, L>(either: Either.Either<R, L>) => Exit<R, L> = core.exitFromEither\n\n/**\n * Converts an `Option<A>` into an `Exit<void, A>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromOption: <A>(option: Option.Option<A>) => Exit<A, void> = core.exitFromOption\n\n/**\n * Returns the `A` if specified exit is a `Success`, otherwise returns the\n * alternate `A` value computed from the specified function which receives the\n * `Cause<E>` of the exit `Failure`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrElse: {\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2): <A>(self: Exit<A, E>) => A2 | A\n  <A, E, A2>(self: Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2): A | A2\n} = core.exitGetOrElse\n\n/**\n * Constructs a new `Exit.Failure` from the specified `FiberId` indicating that\n * the `Fiber` running an `Effect` workflow was terminated due to interruption.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Exit<never> = core.exitInterrupt\n\n/**\n * Maps over the `Success` value of the specified exit using the provided\n * function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E>(self: Exit<A, E>) => Exit<B, E>\n  <A, E, B>(self: Exit<A, E>, f: (a: A) => B): Exit<B, E>\n} = core.exitMap\n\n/**\n * Maps over the `Success` and `Failure` cases of the specified exit using the\n * provided functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  <E, A, E2, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): (self: Exit<A, E>) => Exit<A2, E2>\n  <A, E, E2, A2>(\n    self: Exit<A, E>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Exit<A2, E2>\n} = core.exitMapBoth\n\n/**\n * Maps over the error contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A>(self: Exit<A, E>) => Exit<A, E2>\n  <A, E, E2>(self: Exit<A, E>, f: (e: E) => E2): Exit<A, E2>\n} = core.exitMapError\n\n/**\n * Maps over the `Cause` contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A>(self: Exit<A, E>) => Exit<A, E2>\n  <E, A, E2>(self: Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Exit<A, E2>\n} = core.exitMapErrorCause\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <E, A, Z1, Z2>(\n    options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): (self: Exit<A, E>) => Z1 | Z2\n  <A, E, Z1, Z2>(\n    self: Exit<A, E>,\n    options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): Z1 | Z2\n} = core.exitMatch\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const matchEffect: {\n  <E, A2, E2, R, A, A3, E3, R2>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ): (self: Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n  <A, E, A2, E2, R, A3, E3, R2>(\n    self: Exit<A, E>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2>\n} = core.exitMatchEffect\n\n/**\n * Constructs a new `Exit.Success` containing the specified value of type `A`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Exit<A> = core.exitSucceed\n\nconst void_: Exit<void> = core.exitVoid\nexport {\n  /**\n   * Represents an `Exit` which succeeds with `undefined`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Sequentially zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZip\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipLeft\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipRight\n\n/**\n * Parallelly zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipPar: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZipPar\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParLeft: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipParLeft\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParRight: {\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipParRight\n\n/**\n * Zips this exit together with that exit using the specified combination\n * functions.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, E2, A, C, E>(\n    that: Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<any>\n    }\n  ): (self: Exit<A, E>) => Exit<C, any>\n  <A, E, B, E2, C>(\n    self: Exit<A, E>,\n    that: Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ): Exit<C, E | E2>\n} = core.exitZipWith\n", "/**\n * @since 2.0.0\n */\nimport type { NonEmptyArray } from \"./Array.js\"\nimport * as Equal from \"./Equal.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableHashMap\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableHashMap<out K, out V> extends Iterable<[K, V]>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  /** @internal */\n  readonly referential: Map<K, V>\n  /** @internal */\n  readonly buckets: Map<number, NonEmptyArray<readonly [K & Equal.Equal, V]>>\n  /** @internal */\n  bucketsSize: number\n}\n\nconst MutableHashMapProto: Omit<MutableHashMap<unknown, unknown>, \"referential\" | \"buckets\" | \"bucketsSize\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableHashMap<unknown, unknown>): Iterator<[unknown, unknown]> {\n    return new MutableHashMapIterator(this)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableHashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nclass MutableHashMapIterator<K, V> implements IterableIterator<[K, V]> {\n  readonly referentialIterator: Iterator<[K, V]>\n  bucketIterator: Iterator<[K, V]> | undefined\n\n  constructor(readonly self: MutableHashMap<K, V>) {\n    this.referentialIterator = self.referential[Symbol.iterator]()\n  }\n  next(): IteratorResult<[K, V]> {\n    if (this.bucketIterator !== undefined) {\n      return this.bucketIterator.next()\n    }\n    const result = this.referentialIterator.next()\n    if (result.done) {\n      this.bucketIterator = new BucketIterator(this.self.buckets.values())\n      return this.next()\n    }\n    return result\n  }\n\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return new MutableHashMapIterator(this.self)\n  }\n}\n\nclass BucketIterator<K, V> implements Iterator<[K, V]> {\n  constructor(readonly backing: Iterator<NonEmptyArray<readonly [K, V]>>) {}\n  currentBucket: Iterator<readonly [K, V]> | undefined\n  next(): IteratorResult<[K, V]> {\n    if (this.currentBucket === undefined) {\n      const result = this.backing.next()\n      if (result.done) {\n        return result\n      }\n      this.currentBucket = result.value[Symbol.iterator]()\n    }\n    const result = this.currentBucket.next()\n    if (result.done) {\n      this.currentBucket = undefined\n      return this.next()\n    }\n    return result as IteratorResult<[K, V]>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <K, V>(): MutableHashMap<K, V> => {\n  const self = Object.create(MutableHashMapProto)\n  self.referential = new Map()\n  self.buckets = new Map()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends Array<readonly [any, any]>>(\n  ...entries: Entries\n) => MutableHashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = (...entries) => fromIterable(entries)\n\n/**\n * Creates a new `MutableHashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): MutableHashMap<K, V> => {\n  const self = empty<K, V>()\n  for (const [key, value] of entries) {\n    set(self, key, value)\n  }\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => Option.Option<V>\n  <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V>\n} = dual<\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => Option.Option<V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V> => {\n  if (Equal.isEqual(key) === false) {\n    return self.referential.has(key) ? Option.some(self.referential.get(key)!) : Option.none()\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return Option.none()\n  }\n\n  return getFromBucket(self, bucket, key)\n})\n\nconst getFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal,\n  remove = false\n): Option.Option<V> => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      const value = bucket[i][1]\n      if (remove) {\n        bucket.splice(i, 1)\n        self.bucketsSize--\n      }\n      return Option.some(value)\n    }\n  }\n\n  return Option.none()\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => boolean\n  <K, V>(self: MutableHashMap<K, V>, key: K): boolean\n} = dual<\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => boolean,\n  <K, V>(self: MutableHashMap<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(get(self, key)))\n\n/**\n * @since 2.0.0\n */\nexport const set: {\n  <K, V>(key: K, value: V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V): MutableHashMap<K, V>\n} = dual<\n  <K, V>(key: K, value: V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.set(key, value)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    self.buckets.set(hash, [[key, value]])\n    self.bucketsSize++\n    return self\n  }\n\n  removeFromBucket(self, bucket, key)\n  bucket.push([key, value])\n  self.bucketsSize++\n  return self\n})\n\nconst removeFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal\n) => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      bucket.splice(i, 1)\n      self.bucketsSize--\n      return\n    }\n  }\n}\n\n/**\n * Updates the value of the specified key within the `MutableHashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  <K, V>(key: K, f: (v: V) => V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V): MutableHashMap<K, V>\n} = dual<\n  <K, V>(key: K, f: (v: V) => V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => {\n  if (Equal.isEqual(key) === false) {\n    if (self.referential.has(key)) {\n      self.referential.set(key, f(self.referential.get(key)!))\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n\n  const value = getFromBucket(self, bucket, key, true)\n  if (Option.isNone(value)) {\n    return self\n  }\n  bucket.push([key, f(value.value)])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * Set or remove the specified key in the `MutableHashMap` using the specified\n * update function.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  <K, V>(key: K, f: (value: Option.Option<V>) => Option.Option<V>): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (value: Option.Option<V>) => Option.Option<V>): MutableHashMap<K, V>\n} = dual<\n  <K, V>(\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(\n    self: MutableHashMap<K, V>,\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => MutableHashMap<K, V>\n>(3, (self, key, f) => {\n  if (Equal.isEqual(key) === false) {\n    const result = f(get(self, key))\n    if (Option.isSome(result)) {\n      set(self, key, result.value)\n    } else {\n      remove(self, key)\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    const result = f(Option.none())\n    return Option.isSome(result) ? set(self, key, result.value) : self\n  }\n\n  const result = f(getFromBucket(self, bucket, key, true))\n  if (Option.isNone(result)) {\n    if (bucket.length === 0) {\n      self.buckets.delete(hash)\n    }\n    return self\n  }\n  bucket.push([key, result.value])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const remove: {\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  <K, V>(self: MutableHashMap<K, V>, key: K): MutableHashMap<K, V>\n} = dual<\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  <K, V>(self: MutableHashMap<K, V>, key: K) => MutableHashMap<K, V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.delete(key)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n  removeFromBucket(self, bucket, key)\n  if (bucket.length === 0) {\n    self.buckets.delete(hash)\n  }\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const clear = <K, V>(self: MutableHashMap<K, V>) => {\n  self.referential.clear()\n  self.buckets.clear()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const size = <K, V>(self: MutableHashMap<K, V>): number => {\n  return self.referential.size + self.bucketsSize\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Chunk from \"./Chunk.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as MutableList from \"./MutableList.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableQueue\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const EmptyMutableQueue = Symbol.for(\"effect/mutable/MutableQueue/Empty\")\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface MutableQueue<out A> extends Iterable<A>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  queue: MutableList.MutableList<A>\n  /** @internal */\n  capacity: number | undefined\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace MutableQueue {\n  /**\n   * @since 2.0.0\n   */\n  export type Empty = typeof EmptyMutableQueue\n}\n\nconst MutableQueueProto: Omit<MutableQueue<unknown>, \"queue\" | \"capacity\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator]<A>(this: MutableQueue<A>): Iterator<A> {\n    return Array.from(this.queue)[Symbol.iterator]()\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableQueue\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst make = <A>(capacity: number | undefined): MutableQueue<A> => {\n  const queue = Object.create(MutableQueueProto)\n  queue.queue = MutableList.empty()\n  queue.capacity = capacity\n  return queue\n}\n\n/**\n * Creates a new bounded `MutableQueue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded = <A>(capacity: number): MutableQueue<A> => make(capacity)\n\n/**\n * Creates a new unbounded `MutableQueue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded = <A>(): MutableQueue<A> => make(undefined)\n\n/**\n * Returns the current number of elements in the queue.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const length = <A>(self: MutableQueue<A>): number => MutableList.length(self.queue)\n\n/**\n * Returns `true` if the queue is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty = <A>(self: MutableQueue<A>): boolean => MutableList.isEmpty(self.queue)\n\n/**\n * Returns `true` if the queue is full, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull = <A>(self: MutableQueue<A>): boolean =>\n  self.capacity === undefined ? false : MutableList.length(self.queue) === self.capacity\n\n/**\n * The **maximum** number of elements that a queue can hold.\n *\n * **Note**: unbounded queues can still implement this interface with\n * `capacity = Infinity`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity = <A>(self: MutableQueue<A>): number => self.capacity === undefined ? Infinity : self.capacity\n\n/**\n * Offers an element to the queue.\n *\n * Returns whether the enqueue was successful or not.\n *\n * @since 2.0.0\n */\nexport const offer: {\n  <A>(self: MutableQueue<A>, value: A): boolean\n  <A>(value: A): (self: MutableQueue<A>) => boolean\n} = Dual.dual<\n  <A>(value: A) => (self: MutableQueue<A>) => boolean,\n  <A>(self: MutableQueue<A>, value: A) => boolean\n>(2, <A>(self: MutableQueue<A>, value: A) => {\n  const queueLength = MutableList.length(self.queue)\n  if (self.capacity !== undefined && queueLength === self.capacity) {\n    return false\n  }\n  MutableList.append(value)(self.queue)\n  return true\n})\n\n/**\n * Enqueues a collection of values into the queue.\n *\n * Returns a `Chunk` of the values that were **not** able to be enqueued.\n *\n * @since 2.0.0\n */\nexport const offerAll: {\n  <A>(values: Iterable<A>): (self: MutableQueue<A>) => Chunk.Chunk<A>\n  <A>(self: MutableQueue<A>, values: Iterable<A>): Chunk.Chunk<A>\n} = Dual.dual<\n  <A>(values: Iterable<A>) => (self: MutableQueue<A>) => Chunk.Chunk<A>,\n  <A>(self: MutableQueue<A>, values: Iterable<A>) => Chunk.Chunk<A>\n>(2, <A>(self: MutableQueue<A>, values: Iterable<A>) => {\n  const iterator = values[Symbol.iterator]()\n  let next: IteratorResult<A> | undefined\n  let remainder = Chunk.empty<A>()\n  let offering = true\n  while (offering && (next = iterator.next()) && !next.done) {\n    offering = offer(next.value)(self)\n  }\n  while (next != null && !next.done) {\n    remainder = Chunk.prepend<A>(next.value)(remainder)\n    next = iterator.next()\n  }\n  return Chunk.reverse(remainder)\n})\n\n/**\n * Dequeues an element from the queue.\n *\n * Returns either an element from the queue, or the `def` param.\n *\n * **Note**: if there is no meaningful default for your type, you can always\n * use `poll(MutableQueue.EmptyMutableQueue)`.\n *\n * @since 2.0.0\n */\nexport const poll: {\n  <D>(def: D): <A>(self: MutableQueue<A>) => D | A\n  <A, D>(self: MutableQueue<A>, def: D): A | D\n} = Dual.dual<\n  <D>(def: D) => <A>(self: MutableQueue<A>) => A | D,\n  <A, D>(self: MutableQueue<A>, def: D) => A | D\n>(2, (self, def) => {\n  if (MutableList.isEmpty(self.queue)) {\n    return def\n  }\n  return MutableList.shift(self.queue)!\n})\n\n/**\n * Dequeues up to `n` elements from the queue.\n *\n * Returns a `List` of up to `n` elements.\n *\n * @since 2.0.0\n */\nexport const pollUpTo: {\n  (n: number): <A>(self: MutableQueue<A>) => Chunk.Chunk<A>\n  <A>(self: MutableQueue<A>, n: number): Chunk.Chunk<A>\n} = Dual.dual<\n  (n: number) => <A>(self: MutableQueue<A>) => Chunk.Chunk<A>,\n  <A>(self: MutableQueue<A>, n: number) => Chunk.Chunk<A>\n>(2, <A>(self: MutableQueue<A>, n: number) => {\n  let result = Chunk.empty<A>()\n  let count = 0\n  while (count < n) {\n    const element = poll(EmptyMutableQueue)(self)\n    if (element === EmptyMutableQueue) {\n      break\n    }\n    result = Chunk.prepend(element)(result)\n    count += 1\n  }\n  return Chunk.reverse(result)\n})\n", "/**\n * @since 2.0.0\n */\nimport * as Dual from \"./Function.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableList\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface MutableList<out A> extends Iterable<A>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  head: LinkedListNode<A> | undefined\n  /** @internal */\n  tail: LinkedListNode<A> | undefined\n}\n\nconst MutableListProto: Omit<MutableList<unknown>, \"head\" | \"tail\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableList<unknown>): Iterator<unknown> {\n    let done = false\n    let head: LinkedListNode<unknown> | undefined = this.head\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (head == null) {\n          done = true\n          return this.return!()\n        }\n        const value = head.value\n        head = head.next\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableList\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableListImpl<A> extends MutableList<A> {\n  _length: number\n}\n\n/** @internal */\ninterface LinkedListNode<T> {\n  removed: boolean\n  value: T\n  prev: LinkedListNode<T> | undefined\n  next: LinkedListNode<T> | undefined\n}\n\n/** @internal */\nconst makeNode = <T>(value: T): LinkedListNode<T> => ({\n  value,\n  removed: false,\n  prev: undefined,\n  next: undefined\n})\n\n/**\n * Creates an empty `MutableList`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(): MutableList<A> => {\n  const list = Object.create(MutableListProto)\n  list.head = undefined\n  list.tail = undefined\n  list._length = 0\n  return list\n}\n\n/**\n * Creates a new `MutableList` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(iterable: Iterable<A>): MutableList<A> => {\n  const list = empty<A>()\n  for (const element of iterable) {\n    append(list, element)\n  }\n  return list\n}\n\n/**\n * Creates a new `MutableList` from the specified elements.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <A>(...elements: ReadonlyArray<A>): MutableList<A> => fromIterable(elements)\n\n/**\n * Returns `true` if the list contains zero elements, `false`, otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty = <A>(self: MutableList<A>): boolean => length(self) === 0\n\n/**\n * Returns the length of the list.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const length = <A>(self: MutableList<A>): number => (self as MutableListImpl<A>)._length\n\n/**\n * Returns the last element of the list, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: MutableList<A>): A | undefined => self.tail === undefined ? undefined : self.tail.value\n\n/**\n * Returns the first element of the list, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: MutableList<A>): A | undefined => self.head === undefined ? undefined : self.head.value\n\n/**\n * Executes the specified function `f` for each element in the list.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <A>(f: (element: A) => void): (self: MutableList<A>) => void\n  <A>(self: MutableList<A>, f: (element: A) => void): void\n} = Dual.dual<\n  <A>(f: (element: A) => void) => (self: MutableList<A>) => void,\n  <A>(self: MutableList<A>, f: (element: A) => void) => void\n>(2, (self, f) => {\n  let current = self.head\n  while (current !== undefined) {\n    f(current.value)\n    current = current.next\n  }\n})\n\n/**\n * Removes all elements from the doubly-linked list.\n *\n * @since 2.0.0\n */\nexport const reset = <A>(self: MutableList<A>): MutableList<A> => {\n  ;(self as MutableListImpl<A>)._length = 0\n  self.head = undefined\n  self.tail = undefined\n  return self\n}\n\n/**\n * Appends the specified element to the end of the `MutableList`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  <A>(value: A): (self: MutableList<A>) => MutableList<A>\n  <A>(self: MutableList<A>, value: A): MutableList<A>\n} = Dual.dual<\n  <A>(value: A) => (self: MutableList<A>) => MutableList<A>,\n  <A>(self: MutableList<A>, value: A) => MutableList<A>\n>(2, <A>(self: MutableList<A>, value: A) => {\n  const node = makeNode(value)\n  if (self.head === undefined) {\n    self.head = node\n  }\n  if (self.tail === undefined) {\n    self.tail = node\n  } else {\n    self.tail.next = node\n    node.prev = self.tail\n    self.tail = node\n  }\n  ;(self as MutableListImpl<A>)._length += 1\n  return self\n})\n\n/**\n * Removes the first value from the list and returns it, if it exists.\n *\n * @since 0.0.1\n */\nexport const shift = <A>(self: MutableList<A>): A | undefined => {\n  const head = self.head\n  if (head !== undefined) {\n    remove(self, head)\n    return head.value\n  }\n  return undefined\n}\n\n/**\n * Removes the last value from the list and returns it, if it exists.\n *\n * @since 0.0.1\n */\nexport const pop = <A>(self: MutableList<A>): A | undefined => {\n  const tail = self.tail\n  if (tail !== undefined) {\n    remove(self, tail)\n    return tail.value\n  }\n  return undefined\n}\n\n/**\n * Prepends the specified value to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  <A>(value: A): (self: MutableList<A>) => MutableList<A>\n  <A>(self: MutableList<A>, value: A): MutableList<A>\n} = Dual.dual<\n  <A>(value: A) => (self: MutableList<A>) => MutableList<A>,\n  <A>(self: MutableList<A>, value: A) => MutableList<A>\n>(2, <A>(self: MutableList<A>, value: A) => {\n  const node = makeNode(value)\n  node.next = self.head\n  if (self.head !== undefined) {\n    self.head.prev = node\n  }\n  self.head = node\n  if (self.tail === undefined) {\n    self.tail = node\n  }\n  ;(self as MutableListImpl<A>)._length += 1\n  return self\n})\n\nconst remove = <A>(self: MutableList<A>, node: LinkedListNode<A>): void => {\n  if (node.removed) {\n    return\n  }\n  node.removed = true\n  if (node.prev !== undefined && node.next !== undefined) {\n    node.prev.next = node.next\n    node.next.prev = node.prev\n  } else if (node.prev !== undefined) {\n    self.tail = node.prev\n    node.prev.next = undefined\n  } else if (node.next !== undefined) {\n    self.head = node.next\n    node.next.prev = undefined\n  } else {\n    self.tail = undefined\n    self.head = undefined\n  }\n  if ((self as MutableListImpl<A>)._length > 0) {\n    ;(self as MutableListImpl<A>)._length -= 1\n  }\n}\n", "import type { Exit } from \"effect/Exit\"\nimport { internalCall } from \"effect/Utils\"\nimport * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport type * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constFalse, constTrue, constVoid, dual, identity, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as List from \"../List.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport * as LogSpan from \"../LogSpan.js\"\nimport type * as Metric from \"../Metric.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Option from \"../Option.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type * as runtimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport * as Tracer from \"../Tracer.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport type { Unify } from \"../Unify.js\"\nimport { yieldWrapGet } from \"../Utils.js\"\nimport * as internalCause from \"./cause.js\"\nimport { clockTag } from \"./clock.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport * as doNotation from \"./doNotation.js\"\nimport * as fiberRefsPatch from \"./fiberRefs/patch.js\"\nimport type { FiberRuntime } from \"./fiberRuntime.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as internalTracer from \"./tracer.js\"\n\n/* @internal */\nexport const annotateLogs = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  },\n  {\n    <A, E, R>(effect: Effect.Effect<A, E, R>, key: string, value: unknown): Effect.Effect<A, E, R>\n    <A, E, R>(effect: Effect.Effect<A, E, R>, values: Record<string, unknown>): Effect.Effect<A, E, R>\n  }\n>(\n  (args) => core.isEffect(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return core.fiberRefLocallyWith(\n      args[0] as Effect.Effect<A, E, R>,\n      core.currentLogAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n/* @internal */\nexport const asSome = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Option.Option<A>, E, R> =>\n  core.map(self, Option.some)\n\n/* @internal */\nexport const asSomeError = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, Option.Option<E>, R> =>\n  core.mapError(self, Option.some)\n\n/* @internal */\nexport const try_: {\n  <A, E>(options: {\n    readonly try: LazyArg<A>\n    readonly catch: (error: unknown) => E\n  }): Effect.Effect<A, E>\n  <A>(evaluate: LazyArg<A>): Effect.Effect<A, Cause.UnknownException>\n} = <A, E>(\n  arg: LazyArg<A> | {\n    readonly try: LazyArg<A>\n    readonly catch: (error: unknown) => E\n  }\n) => {\n  let evaluate: LazyArg<A>\n  let onFailure: ((error: unknown) => E) | undefined = undefined\n  if (typeof arg === \"function\") {\n    evaluate = arg\n  } else {\n    evaluate = arg.try\n    onFailure = arg.catch\n  }\n  return core.sync(() => {\n    try {\n      return evaluate()\n    } catch (error) {\n      throw core.makeEffectError(internalCause.fail(\n        onFailure ? onFailure(error) : new core.UnknownException(error)\n      ))\n    }\n  })\n}\n\n/* @internal */\nexport const _catch: {\n  <N extends keyof E, K extends E[N] & string, E, A1, E1, R1>(\n    discriminator: N,\n    options: {\n      readonly failure: K\n      readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect.Effect<A1, E1, R1>\n    }\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<\n    A | A1,\n    Exclude<E, { [n in N]: K }> | E1,\n    R | R1\n  >\n  <A, E, R, N extends keyof E, K extends E[N] & string, A1, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    discriminator: N,\n    options: {\n      readonly failure: K\n      readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect.Effect<A1, E1, R1>\n    }\n  ): Effect.Effect<A | A1, Exclude<E, { [n in N]: K }> | E1, R | R1>\n} = dual(\n  3,\n  (self, tag, options) =>\n    core.catchAll(self, (e) => {\n      if (Predicate.hasProperty(e, tag) && e[tag] === options.failure) {\n        return options.onFailure(e)\n      }\n      return core.fail(e)\n    })\n)\n\n/* @internal */\nexport const catchAllDefect = dual<\n  <A2, E2, R2>(\n    f: (defect: unknown) => Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (defect: unknown) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (defect: unknown) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E | E2, R | R2> =>\n  core.catchAllCause(\n    self,\n    (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n      const option = internalCause.find(cause, (_) => internalCause.isDieType(_) ? Option.some(_) : Option.none())\n      switch (option._tag) {\n        case \"None\": {\n          return core.failCause(cause)\n        }\n        case \"Some\": {\n          return f(option.value.defect)\n        }\n      }\n    }\n  ))\n\n/* @internal */\nexport const catchSomeCause: {\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E | E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E | E2, R2 | R> =>\n    core.matchCauseEffect(self, {\n      onFailure: (cause): Effect.Effect<A2, E | E2, R2> => {\n        const option = f(cause)\n        switch (option._tag) {\n          case \"None\": {\n            return core.failCause(cause)\n          }\n          case \"Some\": {\n            return option.value\n          }\n        }\n      },\n      onSuccess: core.succeed\n    })\n)\n\n/* @internal */\nexport const catchSomeDefect = dual<\n  <A2, E2, R2>(\n    pf: (defect: unknown) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A | A2, E | E2, R | R2> =>\n    core.catchAllCause(\n      self,\n      (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n        const option = internalCause.find(cause, (_) => internalCause.isDieType(_) ? Option.some(_) : Option.none())\n        switch (option._tag) {\n          case \"None\": {\n            return core.failCause(cause)\n          }\n          case \"Some\": {\n            const optionEffect = pf(option.value.defect)\n            return optionEffect._tag === \"Some\" ? optionEffect.value : core.failCause(cause)\n          }\n        }\n      }\n    )\n)\n\n/* @internal */\nexport const catchTag = dual<\n  <K extends (E extends { _tag: string } ? E[\"_tag\"] : never), E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>,\n  <A, E, R, K extends (E extends { _tag: string } ? E[\"_tag\"] : never), R1, E1, A1>(\n    self: Effect.Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>\n>(3, <A, E, R, K extends (E extends { _tag: string } ? E[\"_tag\"] : never), R1, E1, A1>(\n  self: Effect.Effect<A, E, R>,\n  k: K,\n  f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n): Effect.Effect<A | A1, Exclude<E, { _tag: K }> | E1, R | R1> =>\n  core.catchIf(self, Predicate.isTagged(k) as Predicate.Refinement<E, Extract<E, { _tag: K }>>, f) as any)\n\n/** @internal */\nexport const catchTags: {\n  <\n    E,\n    Cases extends (E extends { _tag: string } ? {\n        [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Effect.Effect<any, any, any>\n      } :\n      {})\n  >(\n    cases: Cases\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<infer A, any, any>) ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, infer E, any>) ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, any, infer R>) ? R : never\n    }[keyof Cases]\n  >\n  <\n    R,\n    E,\n    A,\n    Cases extends (E extends { _tag: string } ? {\n        [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Effect.Effect<any, any, any>\n      } :\n      {})\n  >(\n    self: Effect.Effect<A, E, R>,\n    cases: Cases\n  ): Effect.Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<infer A, any, any>) ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, infer E, any>) ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends ((...args: Array<any>) => Effect.Effect<any, any, infer R>) ? R : never\n    }[keyof Cases]\n  >\n} = dual(2, (self, cases) => {\n  let keys: Array<string>\n  return core.catchIf(\n    self,\n    (e): e is { readonly _tag: string } => {\n      keys ??= Object.keys(cases)\n      return Predicate.hasProperty(e, \"_tag\") && Predicate.isString(e[\"_tag\"]) && keys.includes(e[\"_tag\"])\n    },\n    (e) => cases[e[\"_tag\"]](e)\n  )\n})\n\n/* @internal */\nexport const cause = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Cause.Cause<E>, never, R> =>\n  core.matchCause(self, { onFailure: identity, onSuccess: () => internalCause.empty })\n\n/* @internal */\nexport const clockWith: <A, E, R>(f: (clock: Clock.Clock) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  Clock.clockWith\n\n/* @internal */\nexport const clock: Effect.Effect<Clock.Clock> = clockWith(core.succeed)\n\n/* @internal */\nexport const delay = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, duration: Duration.DurationInput) => Effect.Effect<A, E, R>\n>(2, (self, duration) => core.zipRight(Clock.sleep(duration), self))\n\n/* @internal */\nexport const descriptorWith = <A, E, R>(\n  f: (descriptor: Fiber.Fiber.Descriptor) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  core.withFiberRuntime((state, status) =>\n    f({\n      id: state.id(),\n      status,\n      interruptors: internalCause.interruptors(state.getFiberRef(core.currentInterruptedCause))\n    })\n  ) as Effect.Effect<A, E, R>\n\n/* @internal */\nexport const allowInterrupt: Effect.Effect<void> = descriptorWith(\n  (descriptor) =>\n    HashSet.size(descriptor.interruptors) > 0\n      ? core.interrupt\n      : core.void\n)\n\n/* @internal */\nexport const descriptor: Effect.Effect<Fiber.Fiber.Descriptor> = descriptorWith(core.succeed)\n\n/* @internal */\nexport const diffFiberRefs = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[FiberRefsPatch.FiberRefsPatch, A], E, R> => summarized(self, fiberRefs, fiberRefsPatch.diff)\n\n/* @internal */\nexport const diffFiberRefsAndRuntimeFlags = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[[FiberRefsPatch.FiberRefsPatch, runtimeFlagsPatch.RuntimeFlagsPatch], A], E, R> =>\n  summarized(\n    self,\n    core.zip(fiberRefs, core.runtimeFlags),\n    ([refs, flags], [refsNew, flagsNew]) => [fiberRefsPatch.diff(refs, refsNew), runtimeFlags.diff(flags, flagsNew)]\n  )\n\n/* @internal */\nexport const Do: Effect.Effect<{}> = core.succeed({})\n\n/* @internal */\nexport const bind: {\n  <N extends string, A extends object, B, E2, R2>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect.Effect<B, E2, R2>\n  ): <E1, R1>(\n    self: Effect.Effect<A, E1, R1>\n  ) => Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E1, R2 | R1>\n  <A extends object, N extends string, E1, R1, B, E2, R2>(\n    self: Effect.Effect<A, E1, R1>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect.Effect<B, E2, R2>\n  ): Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E1 | E2, R1 | R2>\n} = doNotation.bind<Effect.EffectTypeLambda>(core.map, core.flatMap)\n\n/* @internal */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Effect.Effect<A, E, R>, name: N): Effect.Effect<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<Effect.EffectTypeLambda>(core.map)\n\n/* @internal */\nexport const let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): <E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, N extends string, E, R, B>(\n    self: Effect.Effect<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Effect.Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = doNotation.let_<Effect.EffectTypeLambda>(core.map)\n\n/* @internal */\nexport const dropUntil: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next: IteratorResult<A, any>\n      let dropping: Effect.Effect<boolean, E, R> = core.succeed(false)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        dropping = core.flatMap(dropping, (bool) => {\n          if (bool) {\n            builder.push(a)\n            return core.succeed(true)\n          }\n          return predicate(a, index)\n        })\n      }\n      return core.map(dropping, () => builder)\n    })\n)\n\n/* @internal */\nexport const dropWhile: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next\n      let dropping: Effect.Effect<boolean, E, R> = core.succeed(true)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        dropping = core.flatMap(dropping, (d) =>\n          core.map(d ? predicate(a, index) : core.succeed(false), (b) => {\n            if (!b) {\n              builder.push(a)\n            }\n            return b\n          }))\n      }\n      return core.map(dropping, () => builder)\n    })\n)\n\n/* @internal */\nexport const contextWith = <R, A>(f: (context: Context.Context<R>) => A): Effect.Effect<A, never, R> =>\n  core.map(core.context<R>(), f)\n\n/* @internal */\nexport const eventually = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, never, R> =>\n  core.orElse(self, () => core.flatMap(core.yieldNow(), () => eventually(self)))\n\n/* @internal */\nexport const filterMap = dual<\n  <Eff extends Effect.Effect<any, any, any>, B>(\n    pf: (a: Effect.Effect.Success<Eff>) => Option.Option<B>\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Array<B>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, B>(\n    elements: Iterable<Eff>,\n    pf: (a: Effect.Effect.Success<Eff>) => Option.Option<B>\n  ) => Effect.Effect<Array<B>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(2, (elements, pf) =>\n  core.map(\n    core.forEachSequential(elements, identity),\n    Arr.filterMap(pf)\n  ))\n\n/* @internal */\nexport const filterOrDie: {\n  <A, B extends A>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R, B extends A>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    orDieWith: (a: A) => unknown\n  ): Effect.Effect<B, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orDieWith: (a: A) => unknown\n  ): Effect.Effect<A, E, R>\n} = dual(\n  3,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orDieWith: (a: A) => unknown\n  ): Effect.Effect<A, E, R> => filterOrElse(self, predicate, (a) => core.dieSync(() => orDieWith(a)))\n)\n\n/* @internal */\nexport const filterOrDieMessage: {\n  <A, B extends A>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    message: string\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    message: string\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R, B extends A>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    message: string\n  ): Effect.Effect<B, E, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<A>, message: string): Effect.Effect<A, E, R>\n} = dual(\n  3,\n  <A, E, R>(self: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<A>, message: string): Effect.Effect<A, E, R> =>\n    filterOrElse(self, predicate, () => core.dieMessage(message))\n)\n\n/* @internal */\nexport const filterOrElse: {\n  <A, B extends A, C, E2, R2>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    orElse: (a: NoInfer<A>) => Effect.Effect<C, E2, R2>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B | C, E2 | E, R2 | R>\n  <A, B, E2, R2>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orElse: (a: NoInfer<A>) => Effect.Effect<B, E2, R2>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | B, E2 | E, R2 | R>\n  <A, E, R, B extends A, C, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    orElse: (a: A) => Effect.Effect<C, E2, R2>\n  ): Effect.Effect<B | C, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orElse: (a: A) => Effect.Effect<B, E2, R2>\n  ): Effect.Effect<A | B, E | E2, R | R2>\n} = dual(3, <A, E, R, B, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate.Predicate<A>,\n  orElse: (a: A) => Effect.Effect<B, E2, R2>\n): Effect.Effect<A | B, E | E2, R | R2> =>\n  core.flatMap(\n    self,\n    (a) => predicate(a) ? core.succeed<A | B>(a) : orElse(a)\n  ))\n\n/** @internal */\nexport const liftPredicate = dual<\n  {\n    <A, B extends A, E>(\n      refinement: Predicate.Refinement<NoInfer<A>, B>,\n      orFailWith: (a: NoInfer<A>) => E\n    ): (a: A) => Effect.Effect<B, E>\n    <A, E>(\n      predicate: Predicate.Predicate<NoInfer<A>>,\n      orFailWith: (a: NoInfer<A>) => E\n    ): (a: A) => Effect.Effect<A, E>\n  },\n  {\n    <A, E, B extends A>(\n      self: A,\n      refinement: Predicate.Refinement<A, B>,\n      orFailWith: (a: A) => E\n    ): Effect.Effect<B, E>\n    <A, E>(\n      self: A,\n      predicate: Predicate.Predicate<NoInfer<A>>,\n      orFailWith: (a: NoInfer<A>) => E\n    ): Effect.Effect<A, E>\n  }\n>(\n  3,\n  <A, E>(\n    self: A,\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E\n  ): Effect.Effect<A, E> => core.suspend(() => predicate(self) ? core.succeed(self) : core.fail(orFailWith(self)))\n)\n\n/* @internal */\nexport const filterOrFail: {\n  <A, B extends A, E2>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate.Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2 | E, R>\n  <A, B extends A>(\n    refinement: Predicate.Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, Cause.NoSuchElementException | E, R>\n  <A>(\n    predicate: Predicate.Predicate<NoInfer<A>>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, Cause.NoSuchElementException | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Effect.Effect<B, E | E2, R>\n  <A, E, R, E2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>,\n    orFailWith: (a: A) => E2\n  ): Effect.Effect<A, E | E2, R>\n  <A, E, R, B extends A>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Predicate.Refinement<A, B>\n  ): Effect.Effect<B, E | Cause.NoSuchElementException, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate.Predicate<A>\n  ): Effect.Effect<A, E | Cause.NoSuchElementException, R>\n} = dual((args) => core.isEffect(args[0]), <A, E, R, E2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate.Predicate<A>,\n  orFailWith?: (a: A) => E2\n): Effect.Effect<A, E | E2 | Cause.NoSuchElementException, R> =>\n  filterOrElse(\n    self,\n    predicate,\n    (a): Effect.Effect<never, E2 | Cause.NoSuchElementException, never> =>\n      orFailWith === undefined ? core.fail(new core.NoSuchElementException()) : core.failSync(() => orFailWith(a))\n  ))\n\n/* @internal */\nexport const findFirst: {\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Option.Option<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const next = iterator.next()\n      if (!next.done) {\n        return findLoop(iterator, 0, f, next.value)\n      }\n      return core.succeed(Option.none())\n    })\n)\n\nconst findLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>,\n  value: A\n): Effect.Effect<Option.Option<A>, E, R> =>\n  core.flatMap(f(value, index), (result) => {\n    if (result) {\n      return core.succeed(Option.some(value))\n    }\n    const next = iterator.next()\n    if (!next.done) {\n      return findLoop(iterator, index + 1, f, next.value)\n    }\n    return core.succeed(Option.none())\n  })\n\n/* @internal */\nexport const firstSuccessOf = <Eff extends Effect.Effect<any, any, any>>(\n  effects: Iterable<Eff>\n): Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> =>\n  core.suspend(() => {\n    const list = Chunk.fromIterable(effects)\n    if (!Chunk.isNonEmpty(list)) {\n      return core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`))\n    }\n    return pipe(\n      Chunk.tailNonEmpty(list),\n      Arr.reduce(Chunk.headNonEmpty(list), (left, right) => core.orElse(left, () => right) as Eff)\n    )\n  })\n\n/* @internal */\nexport const flipWith: {\n  <E, A, R, E2, A2, R2>(\n    f: (effect: Effect.Effect<E, A, R>) => Effect.Effect<E2, A2, R2>\n  ): (self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R2>\n  <A, E, R, E2, A2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (effect: Effect.Effect<E, A, R>) => Effect.Effect<E2, A2, R2>\n  ): Effect.Effect<A2, E2, R2>\n} = dual(2, <A, E, R, E2, A2, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (effect: Effect.Effect<E, A, R>) => Effect.Effect<E2, A2, R2>\n): Effect.Effect<A2, E2, R2> => core.flip(f(core.flip(self))))\n\n/* @internal */\nexport const match: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Effect.Effect<A2 | A3, never, R>\n} = dual(2, <A, E, R, A2, A3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (error: E) => A2\n    readonly onSuccess: (value: A) => A3\n  }\n): Effect.Effect<A2 | A3, never, R> =>\n  core.matchEffect(self, {\n    onFailure: (e) => core.succeed(options.onFailure(e)),\n    onSuccess: (a) => core.succeed(options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const every: {\n  <A, E, R>(\n    f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>): Effect.Effect<boolean, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<boolean, E, R> => core.suspend(() => forAllLoop(elements[Symbol.iterator](), 0, f))\n)\n\nconst forAllLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  return next.done\n    ? core.succeed(true)\n    : core.flatMap(\n      f(next.value, index),\n      (b) => b ? forAllLoop(iterator, index + 1, f) : core.succeed(b)\n    )\n}\n\n/* @internal */\nexport const forever = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<never, E, R> => {\n  const loop: Effect.Effect<never, E, R> = core.flatMap(core.flatMap(self, () => core.yieldNow()), () => loop)\n  return loop\n}\n\n/**\n * Inspired by https://github.com/tusharmath/qio/pull/22 (revised)\n  @internal */\nexport const gen: typeof Effect.gen = function() {\n  let f: any\n  if (arguments.length === 1) {\n    f = arguments[0]\n  } else {\n    f = arguments[1].bind(arguments[0])\n  }\n  return core.suspend(() => {\n    const iterator = f(pipe)\n    const state = internalCall(() => iterator.next())\n    const run = (\n      state: IteratorYieldResult<any> | IteratorReturnResult<any>\n    ): Effect.Effect<any, any, any> => {\n      return (state.done\n        ? core.succeed(state.value)\n        : core.flatMap(\n          yieldWrapGet(state.value) as any,\n          (val: any) => run(internalCall(() => iterator.next(val)))\n        ))\n    }\n    return run(state)\n  })\n}\n\n/* @internal */\nexport const fiberRefs: Effect.Effect<FiberRefs.FiberRefs> = core.withFiberRuntime((state) =>\n  core.succeed(state.getFiberRefs())\n)\n\n/* @internal */\nexport const head = <A, E, R>(\n  self: Effect.Effect<Iterable<A>, E, R>\n): Effect.Effect<A, E | Cause.NoSuchElementException, R> =>\n  core.flatMap(self, (as) => {\n    const iterator = as[Symbol.iterator]()\n    const next = iterator.next()\n    if (next.done) {\n      return core.fail(new core.NoSuchElementException())\n    }\n    return core.succeed(next.value)\n  })\n\n/* @internal */\nexport const ignore = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, never, R> =>\n  match(self, { onFailure: constVoid, onSuccess: constVoid })\n\n/* @internal */\nexport const ignoreLogged = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, never, R> =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => logDebug(cause, \"An error was silently ignored because it is not anticipated to be useful\"),\n    onSuccess: () => core.void\n  })\n\n/* @internal */\nexport const inheritFiberRefs = (childFiberRefs: FiberRefs.FiberRefs) =>\n  updateFiberRefs((parentFiberId, parentFiberRefs) => FiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs))\n\n/* @internal */\nexport const isFailure = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<boolean, never, R> =>\n  match(self, { onFailure: constTrue, onSuccess: constFalse })\n\n/* @internal */\nexport const isSuccess = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<boolean, never, R> =>\n  match(self, { onFailure: constFalse, onSuccess: constTrue })\n\n/* @internal */\nexport const iterate: {\n  <A, B extends A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Refinement<A, B>\n      readonly body: (b: B) => Effect.Effect<A, E, R>\n    }\n  ): Effect.Effect<A, E, R>\n  <A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Predicate<A>\n      readonly body: (a: A) => Effect.Effect<A, E, R>\n    }\n  ): Effect.Effect<A, E, R>\n} = <A, E, R>(\n  initial: A,\n  options: {\n    readonly while: Predicate.Predicate<A>\n    readonly body: (z: A) => Effect.Effect<A, E, R>\n  }\n): Effect.Effect<A, E, R> =>\n  core.suspend<A, E, R>(() => {\n    if (options.while(initial)) {\n      return core.flatMap(options.body(initial), (z2) => iterate(z2, options))\n    }\n    return core.succeed(initial)\n  })\n\n/** @internal */\nexport const logWithLevel = (level?: LogLevel.LogLevel) =>\n(\n  ...message: ReadonlyArray<any>\n): Effect.Effect<void> => {\n  const levelOption = Option.fromNullable(level)\n  let cause: Cause.Cause<unknown> | undefined = undefined\n  for (let i = 0, len = message.length; i < len; i++) {\n    const msg = message[i]\n    if (internalCause.isCause(msg)) {\n      if (cause !== undefined) {\n        cause = internalCause.sequential(cause, msg)\n      } else {\n        cause = msg\n      }\n      message = [...message.slice(0, i), ...message.slice(i + 1)]\n      i--\n    }\n  }\n  if (cause === undefined) {\n    cause = internalCause.empty\n  }\n  return core.withFiberRuntime((fiberState) => {\n    fiberState.log(message, cause, levelOption)\n    return core.void\n  })\n}\n\n/** @internal */\nexport const log: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel()\n\n/** @internal */\nexport const logTrace: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Trace\n)\n\n/** @internal */\nexport const logDebug: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Debug\n)\n\n/** @internal */\nexport const logInfo: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Info\n)\n\n/** @internal */\nexport const logWarning: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Warning\n)\n\n/** @internal */\nexport const logError: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Error\n)\n\n/** @internal */\nexport const logFatal: (...message: ReadonlyArray<any>) => Effect.Effect<void, never, never> = logWithLevel(\n  LogLevel.Fatal\n)\n\n/* @internal */\nexport const withLogSpan = dual<\n  (label: string) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, label: string) => Effect.Effect<A, E, R>\n>(2, (effect, label) =>\n  core.flatMap(Clock.currentTimeMillis, (now) =>\n    core.fiberRefLocallyWith(\n      effect,\n      core.currentLogSpan,\n      List.prepend(LogSpan.make(label, now))\n    )))\n\n/* @internal */\nexport const logAnnotations: Effect.Effect<HashMap.HashMap<string, unknown>> = core\n  .fiberRefGet(\n    core.currentLogAnnotations\n  )\n\n/* @internal */\nexport const loop: {\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect.Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<Array<C>, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect.Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<Array<C>, E, R>\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Predicate.Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect.Effect<R, E, C>\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect.Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n} = <A, C, E, R>(\n  initial: A,\n  options: {\n    readonly while: Predicate.Predicate<A>\n    readonly step: (a: A) => A\n    readonly body: (a: A) => Effect.Effect<C, E, R>\n    readonly discard?: boolean | undefined\n  }\n): any =>\n  options.discard\n    ? loopDiscard(initial, options.while, options.step, options.body)\n    : core.map(loopInternal(initial, options.while, options.step, options.body), Arr.fromIterable)\n\nconst loopInternal = <Z, A, E, R>(\n  initial: Z,\n  cont: Predicate.Predicate<Z>,\n  inc: (z: Z) => Z,\n  body: (z: Z) => Effect.Effect<A, E, R>\n): Effect.Effect<List.List<A>, E, R> =>\n  core.suspend(() =>\n    cont(initial)\n      ? core.flatMap(body(initial), (a) =>\n        core.map(\n          loopInternal(inc(initial), cont, inc, body),\n          List.prepend(a)\n        ))\n      : core.sync(() => List.empty())\n  )\n\nconst loopDiscard = <S, X, E, R>(\n  initial: S,\n  cont: Predicate.Predicate<S>,\n  inc: (s: S) => S,\n  body: (s: S) => Effect.Effect<X, E, R>\n): Effect.Effect<void, E, R> =>\n  core.suspend(() =>\n    cont(initial)\n      ? core.flatMap(\n        body(initial),\n        () => loopDiscard(inc(initial), cont, inc, body)\n      )\n      : core.void\n  )\n\n/* @internal */\nexport const mapAccum: {\n  <S, A, B, E, R>(\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect.Effect<readonly [S, B], E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<[S, Array<B>], E, R>\n  <A, S, B, E, R>(\n    elements: Iterable<A>,\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect.Effect<readonly [S, B], E, R>\n  ): Effect.Effect<[S, Array<B>], E, R>\n} = dual(3, <A, S, B, E, R>(\n  elements: Iterable<A>,\n  zero: S,\n  f: (s: S, a: A, i: number) => Effect.Effect<readonly [S, B], E, R>\n): Effect.Effect<[S, Array<B>], E, R> =>\n  core.suspend(() => {\n    const iterator = elements[Symbol.iterator]()\n    const builder: Array<B> = []\n    let result: Effect.Effect<S, E, R> = core.succeed(zero)\n    let next: IteratorResult<A, any>\n    let i = 0\n    while (!(next = iterator.next()).done) {\n      const index = i++\n      const value = next.value\n      result = core.flatMap(result, (state) =>\n        core.map(f(state, value, index), ([z, b]) => {\n          builder.push(b)\n          return z\n        }))\n    }\n    return core.map(result, (z) => [z, builder])\n  }))\n\n/* @internal */\nexport const mapErrorCause: {\n  <E, E2>(\n    f: (cause: Cause.Cause<E>) => Cause.Cause<E2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect.Effect<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect.Effect<A, E2, R> =>\n    core.matchCauseEffect(self, {\n      onFailure: (c) => core.failCauseSync(() => f(c)),\n      onSuccess: core.succeed\n    })\n)\n\n/* @internal */\nexport const memoize = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Effect.Effect<A, E, R>> =>\n  pipe(\n    core.deferredMake<[[FiberRefsPatch.FiberRefsPatch, runtimeFlagsPatch.RuntimeFlagsPatch], A], E>(),\n    core.flatMap((deferred) =>\n      pipe(\n        diffFiberRefsAndRuntimeFlags(self),\n        core.intoDeferred(deferred),\n        once,\n        core.map((complete) =>\n          core.zipRight(\n            complete,\n            pipe(\n              core.deferredAwait(deferred),\n              core.flatMap(([patch, a]) =>\n                core.as(core.zip(patchFiberRefs(patch[0]), core.updateRuntimeFlags(patch[1])), a)\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n\n/* @internal */\nexport const merge = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<E | A, never, R> =>\n  core.matchEffect(self, {\n    onFailure: (e) => core.succeed(e),\n    onSuccess: core.succeed\n  })\n\n/* @internal */\nexport const negate = <E, R>(self: Effect.Effect<boolean, E, R>): Effect.Effect<boolean, E, R> =>\n  core.map(self, (b) => !b)\n\n/* @internal */\nexport const none = <A, E, R>(\n  self: Effect.Effect<Option.Option<A>, E, R>\n): Effect.Effect<void, E | Cause.NoSuchElementException, R> =>\n  core.flatMap(self, (option) => {\n    switch (option._tag) {\n      case \"None\":\n        return core.void\n      case \"Some\":\n        return core.fail(new core.NoSuchElementException())\n    }\n  })\n\n/* @internal */\nexport const once = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Effect.Effect<void, E, R>> =>\n  core.map(\n    Ref.make(true),\n    (ref) => core.asVoid(core.whenEffect(self, Ref.getAndSet(ref, false)))\n  )\n\n/* @internal */\nexport const option = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Option.Option<A>, never, R> =>\n  core.matchEffect(self, {\n    onFailure: () => core.succeed(Option.none()),\n    onSuccess: (a) => core.succeed(Option.some(a))\n  })\n\n/* @internal */\nexport const orElseFail = dual<\n  <E2>(evaluate: LazyArg<E2>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, evaluate: LazyArg<E2>) => Effect.Effect<A, E2, R>\n>(2, (self, evaluate) => core.orElse(self, () => core.failSync(evaluate)))\n\n/* @internal */\nexport const orElseSucceed = dual<\n  <A2>(evaluate: LazyArg<A2>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, never, R>,\n  <A, E, R, A2>(self: Effect.Effect<A, E, R>, evaluate: LazyArg<A2>) => Effect.Effect<A | A2, never, R>\n>(2, (self, evaluate) => core.orElse(self, () => core.sync(evaluate)))\n\n/* @internal */\nexport const parallelErrors = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, Array<E>, R> =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const errors = Arr.fromIterable(internalCause.failures(cause))\n      return errors.length === 0\n        ? core.failCause(cause as Cause.Cause<never>)\n        : core.fail(errors)\n    },\n    onSuccess: core.succeed\n  })\n\n/* @internal */\nexport const patchFiberRefs = (patch: FiberRefsPatch.FiberRefsPatch): Effect.Effect<void> =>\n  updateFiberRefs((fiberId, fiberRefs) => pipe(patch, fiberRefsPatch.patch(fiberId, fiberRefs)))\n\n/* @internal */\nexport const promise = <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Effect.Effect<A> =>\n  evaluate.length >= 1\n    ? core.async((resolve, signal) => {\n      evaluate(signal)\n        .then((a) => resolve(core.exitSucceed(a)), (e) => resolve(core.exitDie(e)))\n    })\n    : core.async((resolve) => {\n      ;(evaluate as LazyArg<PromiseLike<A>>)()\n        .then((a) => resolve(core.exitSucceed(a)), (e) => resolve(core.exitDie(e)))\n    })\n\n/* @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => Effect.Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Effect.Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>> =>\n    core.contextWithEffect((env) =>\n      core.provideContext(\n        self as Effect.Effect<A, E, Context.Tag.Identifier<T> | Exclude<R, Context.Tag.Identifier<T>>>,\n        Context.add(env, tag, service)\n      )\n    )\n)\n\n/* @internal */\nexport const provideServiceEffect = dual<\n  <T extends Context.Tag<any, any>, E1, R1>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>\n  ) => Effect.Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n>(3, <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n  self: Effect.Effect<A, E, R>,\n  tag: T,\n  effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>\n) =>\n  core.contextWithEffect((env: Context.Context<R1 | Exclude<R, Context.Tag.Identifier<T>>>) =>\n    core.flatMap(\n      effect,\n      (service) => core.provideContext(self, pipe(env, Context.add(tag, service)) as Context.Context<R | R1>)\n    )\n  ))\n\n/* @internal */\nexport const random: Effect.Effect<Random.Random> = defaultServices.randomWith(core.succeed)\n\n/* @internal */\nexport const reduce = dual<\n  <Z, A, E, R>(\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Z, E, R>,\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  ) => Effect.Effect<Z, E, R>\n>(\n  3,\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  ) =>\n    Arr.fromIterable(elements).reduce(\n      (acc, el, i) => core.flatMap(acc, (a) => f(a, el, i)),\n      core.succeed(zero) as Effect.Effect<Z, E, R>\n    )\n)\n\n/* @internal */\nexport const reduceRight = dual<\n  <A, Z, R, E>(\n    zero: Z,\n    f: (a: A, z: Z, i: number) => Effect.Effect<Z, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Z, E, R>,\n  <A, Z, R, E>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (a: A, z: Z, i: number) => Effect.Effect<Z, E, R>\n  ) => Effect.Effect<Z, E, R>\n>(\n  3,\n  <A, Z, R, E>(elements: Iterable<A>, zero: Z, f: (a: A, z: Z, i: number) => Effect.Effect<Z, E, R>) =>\n    Arr.fromIterable(elements).reduceRight(\n      (acc, el, i) => core.flatMap(acc, (a) => f(el, a, i)),\n      core.succeed(zero) as Effect.Effect<Z, E, R>\n    )\n)\n\n/* @internal */\nexport const reduceWhile = dual<\n  <Z, A, E, R>(\n    zero: Z,\n    options: {\n      readonly while: Predicate.Predicate<Z>\n      readonly body: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Z, E, R>,\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    options: {\n      readonly while: Predicate.Predicate<Z>\n      readonly body: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n    }\n  ) => Effect.Effect<Z, E, R>\n>(3, <A, Z, E, R>(\n  elements: Iterable<A>,\n  zero: Z,\n  options: {\n    readonly while: Predicate.Predicate<Z>\n    readonly body: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n  }\n) =>\n  core.flatMap(\n    core.sync(() => elements[Symbol.iterator]()),\n    (iterator) => reduceWhileLoop(iterator, 0, zero, options.while, options.body)\n  ))\n\nconst reduceWhileLoop = <A, R, E, Z>(\n  iterator: Iterator<A>,\n  index: number,\n  state: Z,\n  predicate: Predicate.Predicate<Z>,\n  f: (s: Z, a: A, i: number) => Effect.Effect<Z, E, R>\n): Effect.Effect<Z, E, R> => {\n  const next = iterator.next()\n  if (!next.done && predicate(state)) {\n    return core.flatMap(\n      f(state, next.value, index),\n      (nextState) => reduceWhileLoop(iterator, index + 1, nextState, predicate, f)\n    )\n  }\n  return core.succeed(state)\n}\n\n/* @internal */\nexport const repeatN = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Effect.Effect<A, E, R>\n>(2, (self, n) => core.suspend(() => repeatNLoop(self, n)))\n\n/* @internal */\nconst repeatNLoop = <A, E, R>(self: Effect.Effect<A, E, R>, n: number): Effect.Effect<A, E, R> =>\n  core.flatMap(self, (a) =>\n    n <= 0\n      ? core.succeed(a)\n      : core.zipRight(core.yieldNow(), repeatNLoop(self, n - 1)))\n\n/* @internal */\nexport const sandbox = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, Cause.Cause<E>, R> =>\n  core.matchCauseEffect(self, {\n    onFailure: core.fail,\n    onSuccess: core.succeed\n  })\n\n/* @internal */\nexport const setFiberRefs = (fiberRefs: FiberRefs.FiberRefs): Effect.Effect<void> =>\n  core.suspend(() => FiberRefs.setAll(fiberRefs))\n\n/* @internal */\nexport const sleep: (duration: Duration.DurationInput) => Effect.Effect<void> = Clock.sleep\n\n/* @internal */\nexport const succeedNone: Effect.Effect<Option.Option<never>> = core.succeed(Option.none())\n\n/* @internal */\nexport const succeedSome = <A>(value: A): Effect.Effect<Option.Option<A>> => core.succeed(Option.some(value))\n\n/* @internal */\nexport const summarized: {\n  <B, E2, R2, C>(\n    summary: Effect.Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[C, A], E2 | E, R2 | R>\n  <A, E, R, B, E2, R2, C>(\n    self: Effect.Effect<A, E, R>,\n    summary: Effect.Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect.Effect<[C, A], E2 | E, R2 | R>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2, C>(\n    self: Effect.Effect<A, E, R>,\n    summary: Effect.Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect.Effect<[C, A], E2 | E, R2 | R> =>\n    core.flatMap(\n      summary,\n      (start) => core.flatMap(self, (value) => core.map(summary, (end) => [f(start, end), value]))\n    )\n)\n\n/* @internal */\nexport const tagMetrics = dual<\n  {\n    (key: string, value: string): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n    (\n      values: Record<string, string>\n    ): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  },\n  {\n    <A, E, R>(effect: Effect.Effect<A, E, R>, key: string, value: string): Effect.Effect<A, E, R>\n    <A, E, R>(effect: Effect.Effect<A, E, R>, values: Record<string, string>): Effect.Effect<A, E, R>\n  }\n>((args) => core.isEffect(args[0]), function() {\n  return labelMetrics(\n    arguments[0],\n    typeof arguments[1] === \"string\"\n      ? [metricLabel.make(arguments[1], arguments[2])]\n      : Object.entries<string>(arguments[1]).map(([k, v]) => metricLabel.make(k, v))\n  )\n})\n\n/* @internal */\nexport const labelMetrics = dual<\n  (labels: Iterable<MetricLabel.MetricLabel>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, labels: Iterable<MetricLabel.MetricLabel>) => Effect.Effect<A, E, R>\n>(\n  2,\n  (self, labels) => core.fiberRefLocallyWith(self, core.currentMetricLabels, (old) => Arr.union(old, labels))\n)\n\n/* @internal */\nexport const takeUntil: {\n  <A, R, E>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Array<A>, E, R> =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next: IteratorResult<A, any>\n      let effect: Effect.Effect<boolean, E, R> = core.succeed(false)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        effect = core.flatMap(effect, (bool) => {\n          if (bool) {\n            return core.succeed(true)\n          }\n          builder.push(a)\n          return predicate(a, index)\n        })\n      }\n      return core.map(effect, () => builder)\n    })\n)\n\n/* @internal */\nexport const takeWhile = dual<\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>\n  ) => Effect.Effect<Array<A>, E, R>\n>(\n  2,\n  <A, E, R>(elements: Iterable<A>, predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>) =>\n    core.suspend(() => {\n      const iterator = elements[Symbol.iterator]()\n      const builder: Array<A> = []\n      let next: IteratorResult<A, any>\n      let taking: Effect.Effect<boolean, E, R> = core.succeed(true)\n      let i = 0\n      while ((next = iterator.next()) && !next.done) {\n        const a = next.value\n        const index = i++\n        taking = core.flatMap(taking, (taking) =>\n          pipe(\n            taking ? predicate(a, index) : core.succeed(false),\n            core.map((bool) => {\n              if (bool) {\n                builder.push(a)\n              }\n              return bool\n            })\n          ))\n      }\n      return core.map(taking, () => builder)\n    })\n)\n\n/* @internal */\nexport const tapBoth = dual<\n  <E, X, E2, R2, A, X1, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X1, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2 | E3, R | R2 | R3>,\n  <A, E, R, X, E2, R2, X1, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<X, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<X1, E3, R3>\n    }\n  ) => Effect.Effect<A, E | E2 | E3, R | R2 | R3>\n>(2, (self, { onFailure, onSuccess }) =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const either = internalCause.failureOrCause(cause)\n      switch (either._tag) {\n        case \"Left\": {\n          return core.zipRight(onFailure(either.left as any), core.failCause(cause))\n        }\n        case \"Right\": {\n          return core.failCause(cause)\n        }\n      }\n    },\n    onSuccess: (a) => core.as(onSuccess(a as any), a)\n  }))\n\n/* @internal */\nexport const tapDefect = dual<\n  <X, E2, R2>(\n    f: (cause: Cause.Cause<never>) => Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<never>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(2, (self, f) =>\n  core.catchAllCause(self, (cause) =>\n    Option.match(internalCause.keepDefects(cause), {\n      onNone: () => core.failCause(cause),\n      onSome: (a) => core.zipRight(f(a), core.failCause(cause))\n    })))\n\n/* @internal */\nexport const tapError = dual<\n  <E, X, E2, R2>(\n    f: (e: NoInfer<E>) => Effect.Effect<X, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(2, (self, f) =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const either = internalCause.failureOrCause(cause)\n      switch (either._tag) {\n        case \"Left\":\n          return core.zipRight(f(either.left as any), core.failCause(cause))\n        case \"Right\":\n          return core.failCause(cause)\n      }\n    },\n    onSuccess: core.succeed\n  }))\n\n/* @internal */\nexport const tapErrorTag = dual<\n  <K extends (E extends { _tag: string } ? E[\"_tag\"] : never), E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R | R1>,\n  <A, E, R, K extends (E extends { _tag: string } ? E[\"_tag\"] : never), A1, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A, E | E1, R | R1>\n>(3, (self, k, f) =>\n  tapError(self, (e) => {\n    if (Predicate.isTagged(e, k)) {\n      return f(e as any)\n    }\n    return core.void as any\n  }))\n\n/* @internal */\nexport const tapErrorCause = dual<\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect.Effect<X, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(2, (self, f) =>\n  core.matchCauseEffect(self, {\n    onFailure: (cause) => core.zipRight(f(cause), core.failCause(cause)),\n    onSuccess: core.succeed\n  }))\n\n/* @internal */\nexport const timed = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Duration.Duration, A], E, R> => timedWith(self, Clock.currentTimeNanos)\n\n/* @internal */\nexport const timedWith = dual<\n  <E1, R1>(\n    nanoseconds: Effect.Effect<bigint, E1, R1>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[Duration.Duration, A], E | E1, R | R1>,\n  <A, E, R, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    nanoseconds: Effect.Effect<bigint, E1, R1>\n  ) => Effect.Effect<[Duration.Duration, A], E | E1, R | R1>\n>(\n  2,\n  (self, nanos) => summarized(self, nanos, (start, end) => Duration.nanos(end - start))\n)\n\n/* @internal */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer.Tracer) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  Tracer.tracerWith\n\n/** @internal */\nexport const tracer: Effect.Effect<Tracer.Tracer> = tracerWith(core.succeed)\n\n/* @internal */\nexport const tryPromise: {\n  <A, E>(\n    options: {\n      readonly try: (signal: AbortSignal) => PromiseLike<A>\n      readonly catch: (error: unknown) => E\n    }\n  ): Effect.Effect<A, E>\n  <A>(try_: (signal: AbortSignal) => PromiseLike<A>): Effect.Effect<A, Cause.UnknownException>\n} = <A, E>(\n  arg: ((signal: AbortSignal) => PromiseLike<A>) | {\n    readonly try: (signal: AbortSignal) => PromiseLike<A>\n    readonly catch: (error: unknown) => E\n  }\n): Effect.Effect<A, E | Cause.UnknownException> => {\n  let evaluate: (signal?: AbortSignal) => PromiseLike<A>\n  let catcher: ((error: unknown) => E) | undefined = undefined\n  if (typeof arg === \"function\") {\n    evaluate = arg as (signal?: AbortSignal) => PromiseLike<A>\n  } else {\n    evaluate = arg.try as (signal?: AbortSignal) => PromiseLike<A>\n    catcher = arg.catch\n  }\n\n  if (evaluate.length >= 1) {\n    return core.async((resolve, signal) => {\n      try {\n        evaluate(signal)\n          .then((a) => resolve(core.exitSucceed(a)), (e) =>\n            resolve(core.fail(\n              catcher ? catcher(e) : new core.UnknownException(e)\n            )))\n      } catch (e) {\n        resolve(core.fail(\n          catcher ? catcher(e) : new core.UnknownException(e)\n        ))\n      }\n    })\n  }\n\n  return core.async((resolve) => {\n    try {\n      evaluate()\n        .then((a) => resolve(core.exitSucceed(a)), (e) =>\n          resolve(core.fail(\n            catcher ? catcher(e) : new core.UnknownException(e)\n          )))\n    } catch (e) {\n      resolve(core.fail(\n        catcher ? catcher(e) : new core.UnknownException(e)\n      ))\n    }\n  })\n}\n\n/* @internal */\nexport const tryMap = dual<\n  <A, B, E1>(\n    options: {\n      readonly try: (a: A) => B\n      readonly catch: (error: unknown) => E1\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E1, R>,\n  <A, E, R, B, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly try: (a: A) => B\n      readonly catch: (error: unknown) => E1\n    }\n  ) => Effect.Effect<B, E | E1, R>\n>(2, (self, options) =>\n  core.flatMap(self, (a) =>\n    try_({\n      try: () => options.try(a),\n      catch: options.catch\n    })))\n\n/* @internal */\nexport const tryMapPromise = dual<\n  <A, B, E1>(\n    options: {\n      readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>\n      readonly catch: (error: unknown) => E1\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E1, R>,\n  <A, E, R, B, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>\n      readonly catch: (error: unknown) => E1\n    }\n  ) => Effect.Effect<B, E | E1, R>\n>(2, <A, E, R, B, E1>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>\n    readonly catch: (error: unknown) => E1\n  }\n) =>\n  core.flatMap(self, (a) =>\n    tryPromise({\n      try: options.try.length >= 1\n        ? (signal) => options.try(a, signal)\n        : () => (options.try as (a: A) => PromiseLike<B>)(a),\n      catch: options.catch\n    })))\n\n/* @internal */\nexport const unless = dual<\n  (condition: LazyArg<boolean>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, condition: LazyArg<boolean>) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (self, condition) =>\n  core.suspend(() =>\n    condition()\n      ? succeedNone\n      : asSome(self)\n  ))\n\n/* @internal */\nexport const unlessEffect = dual<\n  <E2, R2>(\n    condition: Effect.Effect<boolean, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E | E2, R | R2>,\n  <A, E, R, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    condition: Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<Option.Option<A>, E | E2, R | R2>\n>(2, (self, condition) => core.flatMap(condition, (b) => (b ? succeedNone : asSome(self))))\n\n/* @internal */\nexport const unsandbox = <A, E, R>(self: Effect.Effect<A, Cause.Cause<E>, R>) =>\n  mapErrorCause(self, internalCause.flatten)\n\n/* @internal */\nexport const updateFiberRefs = (\n  f: (fiberId: FiberId.Runtime, fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n): Effect.Effect<void> =>\n  core.withFiberRuntime((state) => {\n    state.setFiberRefs(f(state.id(), state.getFiberRefs()))\n    return core.void\n  })\n\n/* @internal */\nexport const updateService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R | Context.Tag.Identifier<T>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect.Effect<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => Effect.Effect<A, E, R | Context.Tag.Identifier<T>>\n>(3, <A, E, R, T extends Context.Tag<any, any>>(\n  self: Effect.Effect<A, E, R>,\n  tag: T,\n  f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n) =>\n  core.mapInputContext(self, (context) =>\n    Context.add(\n      context,\n      tag,\n      f(Context.unsafeGet(context, tag))\n    )) as Effect.Effect<A, E, R | Context.Tag.Identifier<T>>)\n\n/* @internal */\nexport const when = dual<\n  (condition: LazyArg<boolean>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, condition: LazyArg<boolean>) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (self, condition) =>\n  core.suspend(() =>\n    condition()\n      ? core.map(self, Option.some)\n      : core.succeed(Option.none())\n  ))\n\n/* @internal */\nexport const whenFiberRef = dual<\n  <S>(\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate.Predicate<S>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[S, Option.Option<A>], E, R>,\n  <A, E, R, S>(\n    self: Effect.Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate.Predicate<S>\n  ) => Effect.Effect<[S, Option.Option<A>], E, R>\n>(\n  3,\n  <A, E, R, S>(\n    self: Effect.Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate.Predicate<S>\n  ) =>\n    core.flatMap(core.fiberRefGet(fiberRef), (s) =>\n      predicate(s)\n        ? core.map(self, (a) => [s, Option.some(a)])\n        : core.succeed<[S, Option.Option<A>]>([s, Option.none()]))\n)\n\n/* @internal */\nexport const whenRef = dual<\n  <S>(\n    ref: Ref.Ref<S>,\n    predicate: Predicate.Predicate<S>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[S, Option.Option<A>], E, R>,\n  <A, E, R, S>(\n    self: Effect.Effect<A, E, R>,\n    ref: Ref.Ref<S>,\n    predicate: Predicate.Predicate<S>\n  ) => Effect.Effect<[S, Option.Option<A>], E, R>\n>(\n  3,\n  <A, E, R, S>(self: Effect.Effect<A, E, R>, ref: Ref.Ref<S>, predicate: Predicate.Predicate<S>) =>\n    core.flatMap(Ref.get(ref), (s) =>\n      predicate(s)\n        ? core.map(self, (a) => [s, Option.some(a)])\n        : core.succeed<[S, Option.Option<A>]>([s, Option.none()]))\n)\n\n/* @internal */\nexport const withMetric = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A extends In, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => metric(self))\n\n/** @internal */\nexport const serviceFunctionEffect = <T extends Effect.Effect<any, any, any>, Args extends Array<any>, A, E, R>(\n  getService: T,\n  f: (_: Effect.Effect.Success<T>) => (...args: Args) => Effect.Effect<A, E, R>\n) =>\n(...args: Args): Effect.Effect<A, E | Effect.Effect.Error<T>, R | Effect.Effect.Context<T>> =>\n  core.flatMap(getService, (a) => f(a)(...args))\n\n/** @internal */\nexport const serviceFunction = <T extends Effect.Effect<any, any, any>, Args extends Array<any>, A>(\n  getService: T,\n  f: (_: Effect.Effect.Success<T>) => (...args: Args) => A\n) =>\n(...args: Args): Effect.Effect<A, Effect.Effect.Error<T>, Effect.Effect.Context<T>> =>\n  core.map(getService, (a) => f(a)(...args))\n\n/** @internal */\nexport const serviceFunctions = <S, SE, SR>(\n  getService: Effect.Effect<S, SE, SR>\n): {\n  [k in keyof S as S[k] extends (...args: Array<any>) => Effect.Effect<any, any, any> ? k : never]: S[k] extends\n    (...args: infer Args) => Effect.Effect<infer A, infer E, infer R>\n    ? (...args: Args) => Effect.Effect<A, E | SE, R | SR>\n    : never\n} =>\n  new Proxy({} as any, {\n    get(_target: any, prop: any, _receiver) {\n      return (...args: Array<any>) => core.flatMap(getService, (s: any) => s[prop](...args))\n    }\n  })\n\n/** @internal */\nexport const serviceConstants = <S, SE, SR>(\n  getService: Effect.Effect<S, SE, SR>\n): {\n  [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect.Effect<infer A, infer E, infer R> ?\n    Effect.Effect<A, E | SE, R | SR> :\n    Effect.Effect<S[k], SE, SR>\n} =>\n  new Proxy({} as any, {\n    get(_target: any, prop: any, _receiver) {\n      return core.flatMap(getService, (s: any) => core.isEffect(s[prop]) ? s[prop] : core.succeed(s[prop]))\n    }\n  })\n\n/** @internal */\nexport const serviceMembers = <S, SE, SR>(getService: Effect.Effect<S, SE, SR>): {\n  functions: {\n    [k in keyof S as S[k] extends (...args: Array<any>) => Effect.Effect<any, any, any> ? k : never]: S[k] extends\n      (...args: infer Args) => Effect.Effect<infer A, infer E, infer R>\n      ? (...args: Args) => Effect.Effect<A, E | SE, R | SR>\n      : never\n  }\n  constants: {\n    [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect.Effect<infer A, infer E, infer R> ?\n      Effect.Effect<A, E | SE, R | SR> :\n      Effect.Effect<S[k], SE, SR>\n  }\n} => ({\n  functions: serviceFunctions(getService) as any,\n  constants: serviceConstants(getService)\n})\n\n/** @internal */\nexport const serviceOption = <I, S>(tag: Context.Tag<I, S>) => core.map(core.context<never>(), Context.getOption(tag))\n\n/** @internal */\nexport const serviceOptional = <I, S>(tag: Context.Tag<I, S>) =>\n  core.flatMap(core.context<never>(), Context.getOption(tag))\n\n// -----------------------------------------------------------------------------\n// tracing\n// -----------------------------------------------------------------------------\n\n/* @internal */\nexport const annotateCurrentSpan: {\n  (key: string, value: unknown): Effect.Effect<void>\n  (values: Record<string, unknown>): Effect.Effect<void>\n} = function(): Effect.Effect<void> {\n  const args = arguments\n  return ignore(core.flatMap(\n    currentSpan,\n    (span) =>\n      core.sync(() => {\n        if (typeof args[0] === \"string\") {\n          span.attribute(args[0], args[1])\n        } else {\n          for (const key in args[0]) {\n            span.attribute(key, args[0][key])\n          }\n        }\n      })\n  ))\n}\n\n/* @internal */\nexport const annotateSpans = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  },\n  {\n    <A, E, R>(effect: Effect.Effect<A, E, R>, key: string, value: unknown): Effect.Effect<A, E, R>\n    <A, E, R>(effect: Effect.Effect<A, E, R>, values: Record<string, unknown>): Effect.Effect<A, E, R>\n  }\n>(\n  (args) => core.isEffect(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return core.fiberRefLocallyWith(\n      args[0] as Effect.Effect<A, E, R>,\n      core.currentTracerSpanAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n/** @internal */\nexport const currentParentSpan: Effect.Effect<Tracer.AnySpan, Cause.NoSuchElementException> = serviceOptional(\n  internalTracer.spanTag\n)\n\n/** @internal */\nexport const currentSpan: Effect.Effect<Tracer.Span, Cause.NoSuchElementException> = core.flatMap(\n  core.context<never>(),\n  (context) => {\n    const span = context.unsafeMap.get(internalTracer.spanTag.key) as Tracer.AnySpan | undefined\n    return span !== undefined && span._tag === \"Span\"\n      ? core.succeed(span)\n      : core.fail(new core.NoSuchElementException())\n  }\n)\n\n/* @internal */\nexport const linkSpans = dual<\n  (\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ) => Effect.Effect<A, E, R>\n>(\n  (args) => core.isEffect(args[0]),\n  (self, span, attributes) =>\n    core.fiberRefLocallyWith(\n      self,\n      core.currentTracerSpanLinks,\n      Chunk.append(\n        {\n          _tag: \"SpanLink\",\n          span,\n          attributes: attributes ?? {}\n        } as const\n      )\n    )\n)\n\nconst bigint0 = BigInt(0)\n\n/** @internal */\nexport const unsafeMakeSpan = <XA, XE>(\n  fiber: FiberRuntime<XA, XE>,\n  name: string,\n  options: Tracer.SpanOptions\n) => {\n  const enabled = fiber.getFiberRef(core.currentTracerEnabled)\n  if (enabled === false) {\n    return core.noopSpan(name)\n  }\n\n  const context = fiber.getFiberRef(core.currentContext)\n  const services = fiber.getFiberRef(defaultServices.currentServices)\n\n  const tracer = Context.get(services, internalTracer.tracerTag)\n  const clock = Context.get(services, Clock.Clock)\n  const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n\n  const fiberRefs = fiber.getFiberRefs()\n  const annotationsFromEnv = FiberRefs.get(fiberRefs, core.currentTracerSpanAnnotations)\n  const linksFromEnv = FiberRefs.get(fiberRefs, core.currentTracerSpanLinks)\n\n  const parent = options.parent\n    ? Option.some(options.parent)\n    : options.root\n    ? Option.none()\n    : Context.getOption(context, internalTracer.spanTag)\n\n  const links = linksFromEnv._tag === \"Some\" ?\n    options.links !== undefined ?\n      [\n        ...Chunk.toReadonlyArray(linksFromEnv.value),\n        ...(options.links ?? [])\n      ] :\n      Chunk.toReadonlyArray(linksFromEnv.value) :\n    options.links ?? Arr.empty()\n\n  const span = tracer.span(\n    name,\n    parent,\n    options.context ?? Context.empty(),\n    links,\n    timingEnabled ? clock.unsafeCurrentTimeNanos() : bigint0,\n    options.kind ?? \"internal\"\n  )\n\n  if (typeof options.captureStackTrace === \"function\") {\n    internalCause.spanToTrace.set(span, options.captureStackTrace)\n  }\n\n  if (annotationsFromEnv._tag === \"Some\") {\n    HashMap.forEach(annotationsFromEnv.value, (value, key) => span.attribute(key, value))\n  }\n  if (options.attributes !== undefined) {\n    Object.entries(options.attributes).forEach(([k, v]) => span.attribute(k, v))\n  }\n\n  return span\n}\n\n/** @internal */\nexport const makeSpan = (\n  name: string,\n  options?: Tracer.SpanOptions\n): Effect.Effect<Tracer.Span> => {\n  options = internalTracer.addSpanStackTrace(options)\n  return core.withFiberRuntime((fiber) => core.succeed(unsafeMakeSpan(fiber, name, options)))\n}\n\n/* @internal */\nexport const spanAnnotations: Effect.Effect<HashMap.HashMap<string, unknown>> = core\n  .fiberRefGet(core.currentTracerSpanAnnotations)\n\n/* @internal */\nexport const spanLinks: Effect.Effect<Chunk.Chunk<Tracer.SpanLink>> = core\n  .fiberRefGet(core.currentTracerSpanLinks)\n\n/** @internal */\nexport const endSpan = <A, E>(span: Tracer.Span, exit: Exit<A, E>, clock: Clock.Clock, timingEnabled: boolean) =>\n  core.sync(() => {\n    if (span.status._tag === \"Ended\") {\n      return\n    }\n    if (core.exitIsFailure(exit) && internalCause.spanToTrace.has(span)) {\n      span.attribute(\"code.stacktrace\", internalCause.spanToTrace.get(span)!())\n    }\n    span.end(timingEnabled ? clock.unsafeCurrentTimeNanos() : bigint0, exit)\n  })\n\n/** @internal */\nexport const useSpan: {\n  <A, E, R>(name: string, evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n  <A, E, R>(\n    name: string,\n    options: Tracer.SpanOptions,\n    evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n} = <A, E, R>(\n  name: string,\n  ...args: [evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>] | [\n    options: any,\n    evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R>\n  ]\n) => {\n  const options = internalTracer.addSpanStackTrace(args.length === 1 ? undefined : args[0])\n  const evaluate: (span: Tracer.Span) => Effect.Effect<A, E, R> = args[args.length - 1]\n\n  return core.withFiberRuntime<A, E, R>((fiber) => {\n    const span = unsafeMakeSpan(fiber, name, options)\n    const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n    const clock = Context.get(fiber.getFiberRef(defaultServices.currentServices), clockTag)\n    return core.onExit(evaluate(span), (exit) => endSpan(span, exit, clock, timingEnabled))\n  })\n}\n\n/** @internal */\nexport const withParentSpan = dual<\n  (\n    span: Tracer.AnySpan\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, span: Tracer.AnySpan) => Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n>(2, (self, span) => provideService(self, internalTracer.spanTag, span))\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Effect.Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = internalTracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return useSpan(name, options, (span) => withParentSpan(self, span))\n  }\n  return (self: Effect.Effect<any, any, any>) => useSpan(name, options, (span) => withParentSpan(self, span))\n} as any\n\nexport const functionWithSpan = <Args extends Array<any>, Ret extends Effect.Effect<any, any, any>>(\n  options: {\n    readonly body: (...args: Args) => Ret\n    readonly options: Effect.FunctionWithSpanOptions | ((...args: Args) => Effect.FunctionWithSpanOptions)\n    readonly captureStackTrace?: boolean | undefined\n  }\n): (...args: Args) => Unify<Ret> =>\n  (function(this: any) {\n    let captureStackTrace: LazyArg<string | undefined> | boolean = options.captureStackTrace ?? false\n    if (options.captureStackTrace !== false) {\n      const limit = Error.stackTraceLimit\n      Error.stackTraceLimit = 2\n      const error = new Error()\n      Error.stackTraceLimit = limit\n      let cache: false | string = false\n      captureStackTrace = () => {\n        if (cache !== false) {\n          return cache\n        }\n        if (error.stack) {\n          const stack = error.stack.trim().split(\"\\n\")\n          cache = stack.slice(2).join(\"\\n\").trim()\n          return cache\n        }\n      }\n    }\n    return core.suspend(() => {\n      const opts = typeof options.options === \"function\"\n        ? options.options.apply(null, arguments as any)\n        : options.options\n      return withSpan(\n        core.suspend(() => internalCall(() => options.body.apply(this, arguments as any))),\n        opts.name,\n        {\n          ...opts,\n          captureStackTrace\n        }\n      )\n    })\n  }) as any\n\n// -------------------------------------------------------------------------------------\n// optionality\n// -------------------------------------------------------------------------------------\n\n/* @internal */\nexport const fromNullable = <A>(value: A): Effect.Effect<NonNullable<A>, Cause.NoSuchElementException> =>\n  value == null ? core.fail(new core.NoSuchElementException()) : core.succeed(value as NonNullable<A>)\n\n/* @internal */\nexport const optionFromOptional = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Option.Option<A>, Exclude<E, Cause.NoSuchElementException>, R> =>\n  core.catchAll(\n    core.map(self, Option.some),\n    (error) =>\n      core.isNoSuchElementException(error) ?\n        succeedNone :\n        core.fail(error as Exclude<E, Cause.NoSuchElementException>)\n  )\n", "/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/clock.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ClockTypeId: unique symbol = internal.ClockTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ClockTypeId = typeof ClockTypeId\n\n/**\n * Represents a time-based clock which provides functionality related to time\n * and scheduling.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Clock {\n  readonly [ClockTypeId]: ClockTypeId\n  /**\n   * Unsafely returns the current time in milliseconds.\n   */\n  unsafeCurrentTimeMillis(): number\n  /**\n   * Returns the current time in milliseconds.\n   */\n  readonly currentTimeMillis: Effect.Effect<number>\n  /**\n   * Unsafely returns the current time in nanoseconds.\n   */\n  unsafeCurrentTimeNanos(): bigint\n  /**\n   * Returns the current time in nanoseconds.\n   */\n  readonly currentTimeNanos: Effect.Effect<bigint>\n  /**\n   * Asynchronously sleeps for the specified duration.\n   */\n  sleep(duration: Duration.Duration): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type CancelToken = () => boolean\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ClockScheduler {\n  /**\n   * Unsafely schedules the specified task for the specified duration.\n   */\n  unsafeSchedule(task: Task, duration: Duration.Duration): CancelToken\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (_: void) => Clock = internal.make\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect.Effect<void> = defaultServices.sleep\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const currentTimeMillis: Effect.Effect<number> = defaultServices.currentTimeMillis\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const currentTimeNanos: Effect.Effect<bigint> = defaultServices.currentTimeNanos\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.clockWith\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Clock: Context.Tag<Clock, Clock> = internal.clockTag\n", "import type * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { constFalse } from \"../Function.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst ClockSymbolKey = \"effect/Clock\"\n\n/** @internal */\nexport const ClockTypeId: Clock.ClockTypeId = Symbol.for(ClockSymbolKey) as Clock.ClockTypeId\n\n/** @internal */\nexport const clockTag: Context.Tag<Clock.Clock, Clock.Clock> = Context.GenericTag(\"effect/Clock\")\n\n/** @internal */\nexport const MAX_TIMER_MILLIS = 2 ** 31 - 1\n\n/** @internal */\nexport const globalClockScheduler: Clock.ClockScheduler = {\n  unsafeSchedule(task: Clock.Task, duration: Duration.Duration): Clock.CancelToken {\n    const millis = Duration.toMillis(duration)\n    // If the duration is greater than the value allowable by the JS timer\n    // functions, treat the value as an infinite duration\n    if (millis > MAX_TIMER_MILLIS) {\n      return constFalse\n    }\n    let completed = false\n    const handle = setTimeout(() => {\n      completed = true\n      task()\n    }, millis)\n    return () => {\n      clearTimeout(handle)\n      return !completed\n    }\n  }\n}\n\nconst performanceNowNanos = (function() {\n  const bigint1e6 = BigInt(1_000_000)\n  if (typeof performance === \"undefined\") {\n    return () => BigInt(Date.now()) * bigint1e6\n  } else if (typeof performance.timeOrigin === \"number\" && performance.timeOrigin === 0) {\n    return () => BigInt(Math.round(performance.now() * 1_000_000))\n  }\n  const origin = (BigInt(Date.now()) * bigint1e6) - BigInt(Math.round(performance.now() * 1_000_000))\n  return () => origin + BigInt(Math.round(performance.now() * 1_000_000))\n})()\nconst processOrPerformanceNow = (function() {\n  const processHrtime =\n    typeof process === \"object\" && \"hrtime\" in process && typeof process.hrtime.bigint === \"function\" ?\n      process.hrtime :\n      undefined\n  if (!processHrtime) {\n    return performanceNowNanos\n  }\n  const origin = performanceNowNanos() - processHrtime.bigint()\n  return () => origin + processHrtime.bigint()\n})()\n\n/** @internal */\nclass ClockImpl implements Clock.Clock {\n  readonly [ClockTypeId]: Clock.ClockTypeId = ClockTypeId\n\n  unsafeCurrentTimeMillis(): number {\n    return Date.now()\n  }\n\n  unsafeCurrentTimeNanos(): bigint {\n    return processOrPerformanceNow()\n  }\n\n  currentTimeMillis: Effect.Effect<number> = core.sync(() => this.unsafeCurrentTimeMillis())\n\n  currentTimeNanos: Effect.Effect<bigint> = core.sync(() => this.unsafeCurrentTimeNanos())\n\n  scheduler(): Effect.Effect<Clock.ClockScheduler> {\n    return core.succeed(globalClockScheduler)\n  }\n\n  sleep(duration: Duration.Duration): Effect.Effect<void> {\n    return core.async<void>((resume) => {\n      const canceler = globalClockScheduler.unsafeSchedule(() => resume(core.void), duration)\n      return core.asVoid(core.sync(canceler))\n    })\n  }\n}\n\n/** @internal */\nexport const make = (): Clock.Clock => new ClockImpl()\n", "import * as Array from \"../Array.js\"\nimport type * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type * as Config from \"../Config.js\"\nimport type * as ConfigProvider from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport type * as DefaultServices from \"../DefaultServices.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Random from \"../Random.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as clock from \"./clock.js\"\nimport * as configProvider from \"./configProvider.js\"\nimport * as core from \"./core.js\"\nimport * as console_ from \"./defaultServices/console.js\"\nimport * as random from \"./random.js\"\nimport * as tracer from \"./tracer.js\"\n\n/** @internal */\nexport const liveServices: Context.Context<DefaultServices.DefaultServices> = pipe(\n  Context.empty(),\n  Context.add(clock.clockTag, clock.make()),\n  Context.add(console_.consoleTag, console_.defaultConsole),\n  Context.add(random.randomTag, random.make(Math.random())),\n  Context.add(configProvider.configProviderTag, configProvider.fromEnv()),\n  Context.add(tracer.tracerTag, tracer.nativeTracer)\n)\n\n/**\n * The `FiberRef` holding the default `Effect` services.\n *\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentServices = globalValue(\n  Symbol.for(\"effect/DefaultServices/currentServices\"),\n  () => core.fiberRefUnsafeMakeContext(liveServices)\n)\n\n// circular with Clock\n\n/** @internal */\nexport const sleep = (duration: Duration.DurationInput): Effect.Effect<void> => {\n  const decodedDuration = Duration.decode(duration)\n  return clockWith((clock) => clock.sleep(decodedDuration))\n}\n\n/** @internal */\nexport const clockWith = <A, E, R>(f: (clock: Clock.Clock) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(currentServices, (services) => f(Context.get(services, clock.clockTag)))\n\n/** @internal */\nexport const currentTimeMillis: Effect.Effect<number> = clockWith((clock) => clock.currentTimeMillis)\n\n/** @internal */\nexport const currentTimeNanos: Effect.Effect<bigint> = clockWith((clock) => clock.currentTimeNanos)\n\n/** @internal */\nexport const withClock = dual<\n  <X extends Clock.Clock>(value: X) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <X extends Clock.Clock, A, E, R>(effect: Effect.Effect<A, E, R>, value: X) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(clock.clockTag, value)\n  )(effect))\n\n// circular with ConfigProvider\n\n/** @internal */\nexport const withConfigProvider = dual<\n  (value: ConfigProvider.ConfigProvider) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, value: ConfigProvider.ConfigProvider) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(configProvider.configProviderTag, value)\n  )(effect))\n\n/** @internal */\nexport const configProviderWith = <A, E, R>(\n  f: (configProvider: ConfigProvider.ConfigProvider) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(\n    currentServices,\n    (services) => f(Context.get(services, configProvider.configProviderTag))\n  )\n\n/** @internal */\nexport const config = <A>(config: Config.Config<A>) => configProviderWith((_) => _.load(config))\n\n/** @internal */\nexport const configOrDie = <A>(config: Config.Config<A>) => core.orDie(configProviderWith((_) => _.load(config)))\n\n// circular with Random\n\n/** @internal */\nexport const randomWith = <A, E, R>(f: (random: Random.Random) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(\n    currentServices,\n    (services) => f(Context.get(services, random.randomTag))\n  )\n\n/** @internal */\nexport const withRandom = dual<\n  <X extends Random.Random>(value: X) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <X extends Random.Random, A, E, R>(effect: Effect.Effect<A, E, R>, value: X) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(random.randomTag, value)\n  )(effect))\n\n/** @internal */\nexport const next: Effect.Effect<number> = randomWith((random) => random.next)\n\n/** @internal */\nexport const nextInt: Effect.Effect<number> = randomWith((random) => random.nextInt)\n\n/** @internal */\nexport const nextBoolean: Effect.Effect<boolean> = randomWith((random) => random.nextBoolean)\n\n/** @internal */\nexport const nextRange = (min: number, max: number): Effect.Effect<number> =>\n  randomWith((random) => random.nextRange(min, max))\n\n/** @internal */\nexport const nextIntBetween = (min: number, max: number): Effect.Effect<number> =>\n  randomWith((random) => random.nextIntBetween(min, max))\n\n/** @internal */\nexport const shuffle = <A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> =>\n  randomWith((random) => random.shuffle(elements))\n\n/** @internal */\nexport const choice = <Self extends Iterable<unknown>>(\n  elements: Self\n) => {\n  const array = Array.fromIterable(elements)\n  return core.map(\n    array.length === 0\n      ? core.fail(new core.NoSuchElementException(\"Cannot select a random element from an empty array\"))\n      : randomWith((random) => random.nextIntBetween(0, array.length)),\n    (i) => array[i]\n  ) as any\n}\n\n// circular with Tracer\n\n/** @internal */\nexport const tracerWith = <A, E, R>(f: (tracer: Tracer.Tracer) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.fiberRefGetWith(currentServices, (services) => f(Context.get(services, tracer.tracerTag)))\n\n/** @internal */\nexport const withTracer = dual<\n  (value: Tracer.Tracer) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, value: Tracer.Tracer) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(tracer.tracerTag, value)\n  )(effect))\n", "import * as Arr from \"../Array.js\"\nimport type * as Config from \"../Config.js\"\nimport type * as ConfigError from \"../ConfigError.js\"\nimport type * as ConfigProvider from \"../ConfigProvider.js\"\nimport type * as PathPatch from \"../ConfigProviderPathPatch.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as number from \"../Number.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as regexp from \"../RegExp.js\"\nimport type * as _config from \"./config.js\"\nimport * as configError from \"./configError.js\"\nimport * as pathPatch from \"./configProvider/pathPatch.js\"\nimport * as core from \"./core.js\"\nimport * as OpCodes from \"./opCodes/config.js\"\nimport * as StringUtils from \"./string-utils.js\"\n\ntype KeyComponent = ConfigProvider.ConfigProvider.KeyComponent\n\nconst concat = <A, B>(l: ReadonlyArray<A>, r: ReadonlyArray<B>): ReadonlyArray<A | B> => [...l, ...r]\n\n/** @internal */\nconst ConfigProviderSymbolKey = \"effect/ConfigProvider\"\n\n/** @internal */\nexport const ConfigProviderTypeId: ConfigProvider.ConfigProviderTypeId = Symbol.for(\n  ConfigProviderSymbolKey\n) as ConfigProvider.ConfigProviderTypeId\n\n/** @internal */\nexport const configProviderTag: Context.Tag<ConfigProvider.ConfigProvider, ConfigProvider.ConfigProvider> = Context\n  .GenericTag(\n    \"effect/ConfigProvider\"\n  )\n\n/** @internal */\nconst FlatConfigProviderSymbolKey = \"effect/ConfigProviderFlat\"\n\n/** @internal */\nexport const FlatConfigProviderTypeId: ConfigProvider.FlatConfigProviderTypeId = Symbol.for(\n  FlatConfigProviderSymbolKey\n) as ConfigProvider.FlatConfigProviderTypeId\n\n/** @internal */\nexport const make = (\n  options: {\n    readonly load: <A>(config: Config.Config<A>) => Effect.Effect<A, ConfigError.ConfigError>\n    readonly flattened: ConfigProvider.ConfigProvider.Flat\n  }\n): ConfigProvider.ConfigProvider => ({\n  [ConfigProviderTypeId]: ConfigProviderTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  ...options\n})\n\n/** @internal */\nexport const makeFlat = (\n  options: {\n    readonly load: <A>(\n      path: ReadonlyArray<string>,\n      config: Config.Config.Primitive<A>,\n      split: boolean\n    ) => Effect.Effect<Array<A>, ConfigError.ConfigError>\n    readonly enumerateChildren: (\n      path: ReadonlyArray<string>\n    ) => Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n    readonly patch: PathPatch.PathPatch\n  }\n): ConfigProvider.ConfigProvider.Flat => ({\n  [FlatConfigProviderTypeId]: FlatConfigProviderTypeId,\n  patch: options.patch,\n  load: (path, config, split = true) => options.load(path, config, split),\n  enumerateChildren: options.enumerateChildren\n})\n\n/** @internal */\nexport const fromFlat = (flat: ConfigProvider.ConfigProvider.Flat): ConfigProvider.ConfigProvider =>\n  make({\n    load: (config) =>\n      core.flatMap(fromFlatLoop(flat, Arr.empty(), config, false), (chunk) =>\n        Option.match(Arr.head(chunk), {\n          onNone: () =>\n            core.fail(\n              configError.MissingData(\n                Arr.empty(),\n                `Expected a single value having structure: ${config}`\n              )\n            ),\n          onSome: core.succeed\n        })),\n    flattened: flat\n  })\n\n/** @internal */\nexport const fromEnv = (\n  config?: Partial<ConfigProvider.ConfigProvider.FromEnvConfig>\n): ConfigProvider.ConfigProvider => {\n  const { pathDelim, seqDelim } = Object.assign({}, { pathDelim: \"_\", seqDelim: \",\" }, config)\n  const makePathString = (path: ReadonlyArray<string>): string => pipe(path, Arr.join(pathDelim))\n  const unmakePathString = (pathString: string): ReadonlyArray<string> => pathString.split(pathDelim)\n\n  const getEnv = () =>\n    typeof process !== \"undefined\" && \"env\" in process && typeof process.env === \"object\" ? process.env : {}\n\n  const load = <A>(\n    path: ReadonlyArray<string>,\n    primitive: Config.Config.Primitive<A>,\n    split = true\n  ): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n    const pathString = makePathString(path)\n    const current = getEnv()\n    const valueOpt = pathString in current ? Option.some(current[pathString]!) : Option.none()\n    return pipe(\n      valueOpt,\n      core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the process context`)),\n      core.flatMap((value) => parsePrimitive(value, path, primitive, seqDelim, split))\n    )\n  }\n\n  const enumerateChildren = (\n    path: ReadonlyArray<string>\n  ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError> =>\n    core.sync(() => {\n      const current = getEnv()\n      const keys = Object.keys(current)\n      const keyPaths = keys.map((value) => unmakePathString(value.toUpperCase()))\n      const filteredKeyPaths = keyPaths.filter((keyPath) => {\n        for (let i = 0; i < path.length; i++) {\n          const pathComponent = pipe(path, Arr.unsafeGet(i))\n          const currentElement = keyPath[i]\n          if (currentElement === undefined || pathComponent !== currentElement) {\n            return false\n          }\n        }\n        return true\n      }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1))\n      return HashSet.fromIterable(filteredKeyPaths)\n    })\n\n  return fromFlat(makeFlat({ load, enumerateChildren, patch: pathPatch.empty }))\n}\n\n/** @internal */\nexport const fromMap = (\n  map: Map<string, string>,\n  config?: Partial<ConfigProvider.ConfigProvider.FromMapConfig>\n): ConfigProvider.ConfigProvider => {\n  const { pathDelim, seqDelim } = Object.assign({ seqDelim: \",\", pathDelim: \".\" }, config)\n  const makePathString = (path: ReadonlyArray<string>): string => pipe(path, Arr.join(pathDelim))\n  const unmakePathString = (pathString: string): ReadonlyArray<string> => pathString.split(pathDelim)\n  const mapWithIndexSplit = splitIndexInKeys(\n    map,\n    (str) => unmakePathString(str),\n    makePathString\n  )\n  const load = <A>(\n    path: ReadonlyArray<string>,\n    primitive: Config.Config.Primitive<A>,\n    split = true\n  ): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n    const pathString = makePathString(path)\n    const valueOpt = mapWithIndexSplit.has(pathString) ?\n      Option.some(mapWithIndexSplit.get(pathString)!) :\n      Option.none()\n    return pipe(\n      valueOpt,\n      core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the provided map`)),\n      core.flatMap((value) => parsePrimitive(value, path, primitive, seqDelim, split))\n    )\n  }\n  const enumerateChildren = (\n    path: ReadonlyArray<string>\n  ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError> =>\n    core.sync(() => {\n      const keyPaths = Arr.fromIterable(mapWithIndexSplit.keys()).map(unmakePathString)\n      const filteredKeyPaths = keyPaths.filter((keyPath) => {\n        for (let i = 0; i < path.length; i++) {\n          const pathComponent = pipe(path, Arr.unsafeGet(i))\n          const currentElement = keyPath[i]\n          if (currentElement === undefined || pathComponent !== currentElement) {\n            return false\n          }\n        }\n        return true\n      }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1))\n      return HashSet.fromIterable(filteredKeyPaths)\n    })\n\n  return fromFlat(makeFlat({ load, enumerateChildren, patch: pathPatch.empty }))\n}\n\nconst extend = <A, B>(\n  leftDef: (n: number) => A,\n  rightDef: (n: number) => B,\n  left: ReadonlyArray<A>,\n  right: ReadonlyArray<B>\n): [ReadonlyArray<A>, ReadonlyArray<B>] => {\n  const leftPad = Arr.unfold(\n    left.length,\n    (index) =>\n      index >= right.length ?\n        Option.none() :\n        Option.some([leftDef(index), index + 1])\n  )\n  const rightPad = Arr.unfold(\n    right.length,\n    (index) =>\n      index >= left.length ?\n        Option.none() :\n        Option.some([rightDef(index), index + 1])\n  )\n  const leftExtension = concat(left, leftPad)\n  const rightExtension = concat(right, rightPad)\n  return [leftExtension, rightExtension]\n}\n\nconst appendConfigPath = (path: ReadonlyArray<string>, config: Config.Config<unknown>): ReadonlyArray<string> => {\n  let op = config as _config.ConfigPrimitive\n  if (op._tag === \"Nested\") {\n    const out = path.slice()\n    while (op._tag === \"Nested\") {\n      out.push(op.name)\n      op = op.config as _config.ConfigPrimitive\n    }\n    return out\n  }\n  return path\n}\n\nconst fromFlatLoop = <A>(\n  flat: ConfigProvider.ConfigProvider.Flat,\n  prefix: ReadonlyArray<string>,\n  config: Config.Config<A>,\n  split: boolean\n): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n  const op = config as _config.ConfigPrimitive\n  switch (op._tag) {\n    case OpCodes.OP_CONSTANT: {\n      return core.succeed(Arr.of(op.value)) as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_DESCRIBED: {\n      return core.suspend(\n        () => fromFlatLoop(flat, prefix, op.config, split)\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_FAIL: {\n      return core.fail(configError.MissingData(prefix, op.message)) as Effect.Effect<\n        Array<A>,\n        ConfigError.ConfigError\n      >\n    }\n    case OpCodes.OP_FALLBACK: {\n      return pipe(\n        core.suspend(() => fromFlatLoop(flat, prefix, op.first, split)),\n        core.catchAll((error1) => {\n          if (op.condition(error1)) {\n            return pipe(\n              fromFlatLoop(flat, prefix, op.second, split),\n              core.catchAll((error2) => core.fail(configError.Or(error1, error2)))\n            )\n          }\n          return core.fail(error1)\n        })\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_LAZY: {\n      return core.suspend(() => fromFlatLoop(flat, prefix, op.config(), split)) as Effect.Effect<\n        Array<A>,\n        ConfigError.ConfigError\n      >\n    }\n    case OpCodes.OP_MAP_OR_FAIL: {\n      return core.suspend(() =>\n        pipe(\n          fromFlatLoop(flat, prefix, op.original, split),\n          core.flatMap(\n            core.forEachSequential((a) =>\n              pipe(\n                op.mapOrFail(a),\n                core.mapError(configError.prefixed(appendConfigPath(prefix, op.original)))\n              )\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_NESTED: {\n      return core.suspend(() =>\n        fromFlatLoop(\n          flat,\n          concat(prefix, Arr.of(op.name)),\n          op.config,\n          split\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_PRIMITIVE: {\n      return pipe(\n        pathPatch.patch(prefix, flat.patch),\n        core.flatMap((prefix) =>\n          pipe(\n            flat.load(prefix, op, split),\n            core.flatMap((values) => {\n              if (values.length === 0) {\n                const name = pipe(Arr.last(prefix), Option.getOrElse(() => \"<n/a>\"))\n                return core.fail(configError.MissingData([], `Expected ${op.description} with name ${name}`))\n              }\n              return core.succeed(values)\n            })\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_SEQUENCE: {\n      return pipe(\n        pathPatch.patch(prefix, flat.patch),\n        core.flatMap((patchedPrefix) =>\n          pipe(\n            flat.enumerateChildren(patchedPrefix),\n            core.flatMap(indicesFrom),\n            core.flatMap((indices) => {\n              if (indices.length === 0) {\n                return core.suspend(() =>\n                  core.map(fromFlatLoop(flat, patchedPrefix, op.config, true), Arr.of)\n                ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n              }\n              return pipe(\n                core.forEachSequential(\n                  indices,\n                  (index) => fromFlatLoop(flat, Arr.append(prefix, `[${index}]`), op.config, true)\n                ),\n                core.map((chunkChunk) => {\n                  const flattened = Arr.flatten(chunkChunk)\n                  if (flattened.length === 0) {\n                    return Arr.of(Arr.empty<A>())\n                  }\n                  return Arr.of(flattened)\n                })\n              ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n            })\n          )\n        )\n      )\n    }\n    case OpCodes.OP_HASHMAP: {\n      return core.suspend(() =>\n        pipe(\n          pathPatch.patch(prefix, flat.patch),\n          core.flatMap((prefix) =>\n            pipe(\n              flat.enumerateChildren(prefix),\n              core.flatMap((keys) => {\n                return pipe(\n                  keys,\n                  core.forEachSequential((key) =>\n                    fromFlatLoop(\n                      flat,\n                      concat(prefix, Arr.of(key)),\n                      op.valueConfig,\n                      split\n                    )\n                  ),\n                  core.map((matrix) => {\n                    if (matrix.length === 0) {\n                      return Arr.of(HashMap.empty())\n                    }\n                    return pipe(\n                      transpose(matrix),\n                      Arr.map((values) => HashMap.fromIterable(Arr.zip(Arr.fromIterable(keys), values)))\n                    )\n                  })\n                )\n              })\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_ZIP_WITH: {\n      return core.suspend(() =>\n        pipe(\n          fromFlatLoop(flat, prefix, op.left, split),\n          core.either,\n          core.flatMap((left) =>\n            pipe(\n              fromFlatLoop(flat, prefix, op.right, split),\n              core.either,\n              core.flatMap((right) => {\n                if (Either.isLeft(left) && Either.isLeft(right)) {\n                  return core.fail(configError.And(left.left, right.left))\n                }\n                if (Either.isLeft(left) && Either.isRight(right)) {\n                  return core.fail(left.left)\n                }\n                if (Either.isRight(left) && Either.isLeft(right)) {\n                  return core.fail(right.left)\n                }\n                if (Either.isRight(left) && Either.isRight(right)) {\n                  const path = pipe(prefix, Arr.join(\".\"))\n                  const fail = fromFlatLoopFail(prefix, path)\n                  const [lefts, rights] = extend(\n                    fail,\n                    fail,\n                    pipe(left.right, Arr.map(Either.right)),\n                    pipe(right.right, Arr.map(Either.right))\n                  )\n                  return pipe(\n                    lefts,\n                    Arr.zip(rights),\n                    core.forEachSequential(([left, right]) =>\n                      pipe(\n                        core.zip(left, right),\n                        core.map(([left, right]) => op.zip(left, right))\n                      )\n                    )\n                  )\n                }\n                throw new Error(\n                  \"BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              })\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n  }\n}\n\nconst fromFlatLoopFail =\n  (prefix: ReadonlyArray<string>, path: string) => (index: number): Either.Either<unknown, ConfigError.ConfigError> =>\n    Either.left(\n      configError.MissingData(\n        prefix,\n        `The element at index ${index} in a sequence at path \"${path}\" was missing`\n      )\n    )\n\n/** @internal */\nexport const mapInputPath = dual<\n  (f: (path: string) => string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, f: (path: string) => string) => ConfigProvider.ConfigProvider\n>(2, (self, f) => fromFlat(mapInputPathFlat(self.flattened, f)))\n\nconst mapInputPathFlat = (\n  self: ConfigProvider.ConfigProvider.Flat,\n  f: (path: string) => string\n): ConfigProvider.ConfigProvider.Flat =>\n  makeFlat({\n    load: (path, config, split = true) => self.load(path, config, split),\n    enumerateChildren: (path) => self.enumerateChildren(path),\n    patch: pathPatch.mapName(self.patch, f)\n  })\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, name: string) => ConfigProvider.ConfigProvider\n>(2, (self, name) =>\n  fromFlat(makeFlat({\n    load: (path, config) => self.flattened.load(path, config, true),\n    enumerateChildren: (path) => self.flattened.enumerateChildren(path),\n    patch: pathPatch.nested(self.flattened.patch, name)\n  })))\n\n/** @internal */\nexport const unnested = dual<\n  (name: string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, name: string) => ConfigProvider.ConfigProvider\n>(2, (self, name) =>\n  fromFlat(makeFlat({\n    load: (path, config) => self.flattened.load(path, config, true),\n    enumerateChildren: (path) => self.flattened.enumerateChildren(path),\n    patch: pathPatch.unnested(self.flattened.patch, name)\n  })))\n\n/** @internal */\nexport const orElse = dual<\n  (\n    that: LazyArg<ConfigProvider.ConfigProvider>\n  ) => (\n    self: ConfigProvider.ConfigProvider\n  ) => ConfigProvider.ConfigProvider,\n  (\n    self: ConfigProvider.ConfigProvider,\n    that: LazyArg<ConfigProvider.ConfigProvider>\n  ) => ConfigProvider.ConfigProvider\n>(2, (self, that) => fromFlat(orElseFlat(self.flattened, () => that().flattened)))\n\nconst orElseFlat = (\n  self: ConfigProvider.ConfigProvider.Flat,\n  that: LazyArg<ConfigProvider.ConfigProvider.Flat>\n): ConfigProvider.ConfigProvider.Flat =>\n  makeFlat({\n    load: (path, config, split) =>\n      pipe(\n        pathPatch.patch(path, self.patch),\n        core.flatMap((patch) => self.load(patch, config, split)),\n        core.catchAll((error1) =>\n          pipe(\n            core.sync(that),\n            core.flatMap((that) =>\n              pipe(\n                pathPatch.patch(path, that.patch),\n                core.flatMap((patch) => that.load(patch, config, split)),\n                core.catchAll((error2) => core.fail(configError.Or(error1, error2)))\n              )\n            )\n          )\n        )\n      ),\n    enumerateChildren: (path) =>\n      pipe(\n        pathPatch.patch(path, self.patch),\n        core.flatMap((patch) => self.enumerateChildren(patch)),\n        core.either,\n        core.flatMap((left) =>\n          pipe(\n            core.sync(that),\n            core.flatMap((that) =>\n              pipe(\n                pathPatch.patch(path, that.patch),\n                core.flatMap((patch) => that.enumerateChildren(patch)),\n                core.either,\n                core.flatMap((right) => {\n                  if (Either.isLeft(left) && Either.isLeft(right)) {\n                    return core.fail(configError.And(left.left, right.left))\n                  }\n                  if (Either.isLeft(left) && Either.isRight(right)) {\n                    return core.succeed(right.right)\n                  }\n                  if (Either.isRight(left) && Either.isLeft(right)) {\n                    return core.succeed(left.right)\n                  }\n                  if (Either.isRight(left) && Either.isRight(right)) {\n                    return core.succeed(pipe(left.right, HashSet.union(right.right)))\n                  }\n                  throw new Error(\n                    \"BUG: ConfigProvider.orElseFlat - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                  )\n                })\n              )\n            )\n          )\n        )\n      ),\n    patch: pathPatch.empty\n  })\n\n/** @internal */\nexport const constantCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.constantCase)\n\n/** @internal */\nexport const kebabCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.kebabCase)\n\n/** @internal */\nexport const lowerCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.lowerCase)\n\n/** @internal */\nexport const snakeCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.snakeCase)\n\n/** @internal */\nexport const upperCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.upperCase)\n\n/** @internal */\nexport const within = dual<\n  (\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider\n  ) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (\n    self: ConfigProvider.ConfigProvider,\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider\n  ) => ConfigProvider.ConfigProvider\n>(3, (self, path, f) => {\n  const unnest = Arr.reduce(path, self, (provider, name) => unnested(provider, name))\n  const nest = Arr.reduceRight(path, f(unnest), (provider, name) => nested(provider, name))\n  return orElse(nest, () => self)\n})\n\nconst splitPathString = (text: string, delim: string): Array<string> => {\n  const split = text.split(new RegExp(`\\\\s*${regexp.escape(delim)}\\\\s*`))\n  return split\n}\n\nconst parsePrimitive = <A>(\n  text: string,\n  path: ReadonlyArray<string>,\n  primitive: Config.Config.Primitive<A>,\n  delimiter: string,\n  split: boolean\n): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n  if (!split) {\n    return pipe(\n      primitive.parse(text),\n      core.mapBoth({\n        onFailure: configError.prefixed(path),\n        onSuccess: Arr.of\n      })\n    )\n  }\n  return pipe(\n    splitPathString(text, delimiter),\n    core.forEachSequential((char) => primitive.parse(char.trim())),\n    core.mapError(configError.prefixed(path))\n  )\n}\n\nconst transpose = <A>(array: ReadonlyArray<ReadonlyArray<A>>): Array<Array<A>> => {\n  return Object.keys(array[0]).map((column) => array.map((row) => row[column as any]))\n}\n\nconst indicesFrom = (quotedIndices: HashSet.HashSet<string>): Effect.Effect<Array<number>> =>\n  pipe(\n    core.forEachSequential(quotedIndices, parseQuotedIndex),\n    core.mapBoth({\n      onFailure: () => Arr.empty<number>(),\n      onSuccess: Arr.sort(number.Order)\n    }),\n    core.either,\n    core.map(Either.merge)\n  )\n\nconst STR_INDEX_REGEX = /(^.+)(\\[(\\d+)\\])$/\nconst QUOTED_INDEX_REGEX = /^(\\[(\\d+)\\])$/\n\nconst parseQuotedIndex = (str: string): Option.Option<number> => {\n  const match = str.match(QUOTED_INDEX_REGEX)\n  if (match !== null) {\n    const matchedIndex = match[2]\n    return pipe(\n      matchedIndex !== undefined && matchedIndex.length > 0 ?\n        Option.some(matchedIndex) :\n        Option.none(),\n      Option.flatMap(parseInteger)\n    )\n  }\n  return Option.none()\n}\n\nconst splitIndexInKeys = (\n  map: Map<string, string>,\n  unmakePathString: (str: string) => ReadonlyArray<string>,\n  makePathString: (chunk: ReadonlyArray<string>) => string\n): Map<string, string> => {\n  const newMap: Map<string, string> = new Map()\n  for (const [pathString, value] of map) {\n    const keyWithIndex = pipe(\n      unmakePathString(pathString),\n      Arr.flatMap((key) =>\n        Option.match(splitIndexFrom(key), {\n          onNone: () => Arr.of(key),\n          onSome: ([key, index]) => Arr.make(key, `[${index}]`)\n        })\n      )\n    )\n    newMap.set(makePathString(keyWithIndex), value)\n  }\n  return newMap\n}\n\nconst splitIndexFrom = (key: string): Option.Option<[string, number]> => {\n  const match = key.match(STR_INDEX_REGEX)\n  if (match !== null) {\n    const matchedString = match[1]\n    const matchedIndex = match[3]\n    const optionalString = matchedString !== undefined && matchedString.length > 0 ?\n      Option.some(matchedString) :\n      Option.none()\n    const optionalIndex = pipe(\n      matchedIndex !== undefined && matchedIndex.length > 0 ?\n        Option.some(matchedIndex) :\n        Option.none(),\n      Option.flatMap(parseInteger)\n    )\n    return Option.all([optionalString, optionalIndex])\n  }\n  return Option.none()\n}\n\nconst parseInteger = (str: string): Option.Option<number> => {\n  const parsedIndex = Number.parseInt(str)\n  return Number.isNaN(parsedIndex) ?\n    Option.none() :\n    Option.some(parsedIndex)\n}\n\nconst keyName = (name: string): KeyComponent => ({\n  _tag: \"KeyName\",\n  name\n})\n\nconst keyIndex = (index: number): KeyComponent => ({\n  _tag: \"KeyIndex\",\n  index\n})\n\ninterface JsonMap {\n  [member: string]: string | number | boolean | null | JsonArray | JsonMap\n}\ninterface JsonArray extends Array<string | number | boolean | null | JsonArray | JsonMap> {}\n\n/** @internal */\nexport const fromJson = (json: unknown): ConfigProvider.ConfigProvider => {\n  const hiddenDelimiter = \"\\ufeff\"\n  const indexedEntries = Arr.map(\n    getIndexedEntries(json as JsonMap),\n    ([key, value]): [string, string] => [configPathToString(key).join(hiddenDelimiter), value]\n  )\n  return fromMap(new Map(indexedEntries), {\n    pathDelim: hiddenDelimiter,\n    seqDelim: hiddenDelimiter\n  })\n}\n\nconst configPathToString = (path: ReadonlyArray<KeyComponent>): ReadonlyArray<string> => {\n  const output: Array<string> = []\n  let i = 0\n  while (i < path.length) {\n    const component = path[i]\n    if (component._tag === \"KeyName\") {\n      if (i + 1 < path.length) {\n        const nextComponent = path[i + 1]\n        if (nextComponent._tag === \"KeyIndex\") {\n          output.push(`${component.name}[${nextComponent.index}]`)\n          i += 2\n        } else {\n          output.push(component.name)\n          i += 1\n        }\n      } else {\n        output.push(component.name)\n        i += 1\n      }\n    }\n  }\n  return output\n}\n\nconst getIndexedEntries = (\n  config: JsonMap\n): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> => {\n  const loopAny = (\n    path: ReadonlyArray<KeyComponent>,\n    value: string | number | boolean | JsonMap | JsonArray | null\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> => {\n    if (typeof value === \"string\") {\n      return Arr.make([path, value] as [ReadonlyArray<KeyComponent>, string])\n    }\n    if (typeof value === \"number\" || typeof value === \"boolean\") {\n      return Arr.make([path, String(value)] as [ReadonlyArray<KeyComponent>, string])\n    }\n    if (Arr.isArray(value)) {\n      return loopArray(path, value)\n    }\n    if (typeof value === \"object\" && value !== null) {\n      return loopObject(path, value)\n    }\n    return Arr.empty<[ReadonlyArray<KeyComponent>, string]>()\n  }\n  const loopArray = (\n    path: ReadonlyArray<KeyComponent>,\n    values: JsonArray\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> =>\n    Arr.match(values, {\n      onEmpty: () => Arr.make([path, \"<nil>\"] as [ReadonlyArray<KeyComponent>, string]),\n      onNonEmpty: Arr.flatMap((value, index) => loopAny(Arr.append(path, keyIndex(index)), value))\n    })\n  const loopObject = (\n    path: ReadonlyArray<KeyComponent>,\n    value: JsonMap\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> =>\n    Object.entries(value).flatMap(([key, value]) => {\n      const newPath = Arr.append(path, keyName(key))\n      const result = loopAny(newPath, value)\n      if (Arr.isEmptyReadonlyArray(result)) {\n        return Arr.make([newPath, \"\"] as [ReadonlyArray<KeyComponent>, string])\n      }\n      return result\n    })\n  return loopObject(Arr.empty(), config)\n}\n", "/**\n * This module provides utility functions and type class instances for working with the `number` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Option } from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Number\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber: (input: unknown) => input is number = predicate.isNumber\n\n/**\n * Provides an addition operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { sum } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sum: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self + that)\n\n/**\n * Provides a multiplication operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { multiply } from \"effect/Number\"\n *\n * assert.deepStrictEqual(multiply(2, 3), 6)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiply: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self * that)\n\n/**\n * Provides a subtraction operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { subtract } from \"effect/Number\"\n *\n * assert.deepStrictEqual(subtract(2, 3), -1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const subtract: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self - that)\n\n/**\n * Provides a division operation on `number`s.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { Number, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Number.divide(6, 3), Option.some(2))\n * assert.deepStrictEqual(Number.divide(6, 0), Option.none())\n *\n * @category math\n * @since 2.0.0\n */\nexport const divide: {\n  (that: number): (self: number) => Option<number>\n  (self: number, that: number): Option<number>\n} = dual(\n  2,\n  (self: number, that: number): Option<number> => that === 0 ? option.none : option.some(self / that)\n)\n\n/**\n * Provides a division operation on `number`s.\n *\n * Throws a `RangeError` if the divisor is `0`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { unsafeDivide } from \"effect/Number\"\n *\n * assert.deepStrictEqual(unsafeDivide(6, 3), 2)\n *\n * @category math\n * @since 2.0.0\n */\nexport const unsafeDivide: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self / that)\n\n/**\n * Returns the result of adding `1` to a given number.\n *\n * @param n - A `number` to be incremented.\n *\n * @example\n * import { increment } from \"effect/Number\"\n *\n * assert.deepStrictEqual(increment(2), 3)\n *\n * @category math\n * @since 2.0.0\n */\nexport const increment = (n: number): number => n + 1\n\n/**\n * Decrements a number by `1`.\n *\n * @param n - A `number` to be decremented.\n *\n * @example\n * import { decrement } from \"effect/Number\"\n *\n * assert.deepStrictEqual(decrement(3), 2)\n *\n * @category math\n * @since 2.0.0\n */\nexport const decrement = (n: number): number => n - 1\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<number> = equivalence.number\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<number> = order.number\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { lessThan } from \"effect/Number\"\n *\n * assert.deepStrictEqual(lessThan(2, 3), true)\n * assert.deepStrictEqual(lessThan(3, 3), false)\n * assert.deepStrictEqual(lessThan(4, 3), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThan: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.lessThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is less than or equal to the provided one.\n *\n * @param self - The first `number` to compare with.\n * @param that - The second `number` to compare with.\n *\n * @example\n * import { lessThanOrEqualTo } from \"effect/Number\"\n *\n * assert.deepStrictEqual(lessThanOrEqualTo(2, 3), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(3, 3), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(4, 3), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { greaterThan } from \"effect/Number\"\n *\n * assert.deepStrictEqual(greaterThan(2, 3), false)\n * assert.deepStrictEqual(greaterThan(3, 3), false)\n * assert.deepStrictEqual(greaterThan(4, 3), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThan: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.greaterThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is greater than or equal to the provided one.\n *\n * @param self - The first `number` to compare with.\n * @param that - The second `number` to compare with.\n *\n * @example\n * import { greaterThanOrEqualTo } from \"effect/Number\"\n *\n * assert.deepStrictEqual(greaterThanOrEqualTo(2, 3), false)\n * assert.deepStrictEqual(greaterThanOrEqualTo(3, 3), true)\n * assert.deepStrictEqual(greaterThanOrEqualTo(4, 3), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo: {\n  (that: number): (self: number) => boolean\n  (self: number, that: number): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n *\n * @param self - The `number` to check.\n * @param minimum - The `minimum` value to check.\n * @param maximum - The `maximum` value to check.\n *\n * @example\n * import { Number } from \"effect\"\n *\n * const between = Number.between({ minimum: 0, maximum: 5 })\n *\n * assert.deepStrictEqual(between(3), true)\n * assert.deepStrictEqual(between(-1), false)\n * assert.deepStrictEqual(between(6), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  (options: {\n    minimum: number\n    maximum: number\n  }): (self: number) => boolean\n  (self: number, options: {\n    minimum: number\n    maximum: number\n  }): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `number` to be within the range specified by the `minimum` and `maximum` values.\n *\n * - If the `number` is less than the `minimum` value, the function returns the `minimum` value.\n * - If the `number` is greater than the `maximum` value, the function returns the `maximum` value.\n * - Otherwise, it returns the original `number`.\n *\n * @param self - The `number` to be clamped.\n * @param minimum - The lower end of the range.\n * @param maximum - The upper end of the range.\n *\n * @example\n * import { Number } from \"effect\"\n *\n * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp: {\n  (options: {\n    minimum: number\n    maximum: number\n  }): (self: number) => number\n  (self: number, options: {\n    minimum: number\n    maximum: number\n  }): number\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `number`s.\n *\n * @param self - The first `number`.\n * @param that - The second `number`.\n *\n * @example\n * import { min } from \"effect/Number\"\n *\n * assert.deepStrictEqual(min(2, 3), 2)\n *\n * @since 2.0.0\n */\nexport const min: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `number`s.\n *\n * @param self - The first `number`.\n * @param that - The second `number`.\n *\n * @example\n * import { max } from \"effect/Number\"\n *\n * assert.deepStrictEqual(max(2, 3), 3)\n *\n * @since 2.0.0\n */\nexport const max: {\n  (that: number): (self: number) => number\n  (self: number, that: number): number\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `number`.\n *\n * @param n - The `number` to determine the sign of.\n *\n * @example\n * import { sign } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sign(-5), -1)\n * assert.deepStrictEqual(sign(0), 0)\n * assert.deepStrictEqual(sign(5), 1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sign = (n: number): Ordering => Order(n, 0)\n\n/**\n * Takes an `Iterable` of `number`s and returns their sum as a single `number`.\n *\n * @param collection - The collection of `number`s to sum.\n *\n * @example\n * import { sumAll } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sumAll([2, 3, 4]), 9)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sumAll = (collection: Iterable<number>): number => {\n  let out = 0\n  for (const n of collection) {\n    out += n\n  }\n  return out\n}\n\n/**\n * Takes an `Iterable` of `number`s and returns their multiplication as a single `number`.\n *\n * @param collection - The collection of `number`s to multiply.\n *\n * @example\n * import { multiplyAll } from \"effect/Number\"\n *\n * assert.deepStrictEqual(multiplyAll([2, 3, 4]), 24)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiplyAll = (collection: Iterable<number>): number => {\n  let out = 1\n  for (const n of collection) {\n    if (n === 0) {\n      return 0\n    }\n    out *= n\n  }\n  return out\n}\n\n/**\n * Returns the remainder left over when one operand is divided by a second operand.\n *\n * It always takes the sign of the dividend.\n *\n * @param self - The dividend.\n * @param divisor - The divisor.\n *\n * @example\n * import { remainder } from \"effect/Number\"\n *\n * assert.deepStrictEqual(remainder(2, 2), 0)\n * assert.deepStrictEqual(remainder(3, 2), 1)\n * assert.deepStrictEqual(remainder(-4, 2), -0)\n *\n * @category math\n * @since 2.0.0\n */\nexport const remainder: {\n  (divisor: number): (self: number) => number\n  (self: number, divisor: number): number\n} = dual(2, (self: number, divisor: number): number => {\n  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\n  const selfDecCount = (self.toString().split(\".\")[1] || \"\").length\n  const divisorDecCount = (divisor.toString().split(\".\")[1] || \"\").length\n  const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount\n  const selfInt = parseInt(self.toFixed(decCount).replace(\".\", \"\"))\n  const divisorInt = parseInt(divisor.toFixed(decCount).replace(\".\", \"\"))\n  return (selfInt % divisorInt) / Math.pow(10, decCount)\n})\n\n/**\n * Returns the next power of 2 from the given number.\n *\n * @param self - The number to find the next power of 2 from.\n *\n * @example\n * import { nextPow2 } from \"effect/Number\"\n *\n * assert.deepStrictEqual(nextPow2(5), 8)\n * assert.deepStrictEqual(nextPow2(17), 32)\n *\n * @category math\n * @since 2.0.0\n */\nexport const nextPow2 = (n: number): number => {\n  const nextPow = Math.ceil(Math.log(n) / Math.log(2))\n  return Math.max(Math.pow(2, nextPow), 2)\n}\n\n/**\n * Tries to parse a `number` from a `string` using the `Number()` function.\n * The following special string values are supported: \"NaN\", \"Infinity\", \"-Infinity\".\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const parse = (s: string): Option<number> => {\n  if (s === \"NaN\") {\n    return option.some(NaN)\n  }\n  if (s === \"Infinity\") {\n    return option.some(Infinity)\n  }\n  if (s === \"-Infinity\") {\n    return option.some(-Infinity)\n  }\n  if (s.trim() === \"\") {\n    return option.none\n  }\n  const n = Number(s)\n  return Number.isNaN(n)\n    ? option.none\n    : option.some(n)\n}\n", "/**\n * This module provides utility functions for working with RegExp in TypeScript.\n *\n * @since 2.0.0\n */\n\n/**\n * Escapes special characters in a regular expression pattern.\n *\n * @example\n * import { RegExp } from \"effect\"\n *\n * assert.deepStrictEqual(RegExp.escape(\"a*b\"), \"a\\\\*b\")\n *\n * @since 2.0.0\n */\nexport const escape = (string: string): string => string.replace(/[/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n", "import * as RA from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport type * as ConfigError from \"../ConfigError.js\"\nimport * as Either from \"../Either.js\"\nimport { constFalse, constTrue, dual, pipe } from \"../Function.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as OpCodes from \"./opCodes/configError.js\"\n\n/** @internal */\nconst ConfigErrorSymbolKey = \"effect/ConfigError\"\n\n/** @internal */\nexport const ConfigErrorTypeId: ConfigError.ConfigErrorTypeId = Symbol.for(\n  ConfigErrorSymbolKey\n) as ConfigError.ConfigErrorTypeId\n\n/** @internal */\nexport const proto = {\n  _tag: \"ConfigError\",\n  [ConfigErrorTypeId]: ConfigErrorTypeId\n}\n\n/** @internal */\nexport const And = (self: ConfigError.ConfigError, that: ConfigError.ConfigError): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_AND\n  error.left = self\n  error.right = that\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.And) {\n      return `${this.left} and ${this.right}`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const Or = (self: ConfigError.ConfigError, that: ConfigError.ConfigError): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_OR\n  error.left = self\n  error.right = that\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.Or) {\n      return `${this.left} or ${this.right}`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const InvalidData = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_INVALID_DATA\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.InvalidData) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Invalid data at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const MissingData = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_MISSING_DATA\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.MissingData) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Missing data at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const SourceUnavailable = (\n  path: ReadonlyArray<string>,\n  message: string,\n  cause: Cause.Cause<unknown>,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_SOURCE_UNAVAILABLE\n  error.path = path\n  error.message = message\n  error.cause = cause\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.SourceUnavailable) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Source unavailable at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const Unsupported = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_UNSUPPORTED\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.Unsupported) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Unsupported operation at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const isConfigError = (u: unknown): u is ConfigError.ConfigError => hasProperty(u, ConfigErrorTypeId)\n\n/** @internal */\nexport const isAnd = (self: ConfigError.ConfigError): self is ConfigError.And => self._op === OpCodes.OP_AND\n\n/** @internal */\nexport const isOr = (self: ConfigError.ConfigError): self is ConfigError.Or => self._op === OpCodes.OP_OR\n\n/** @internal */\nexport const isInvalidData = (self: ConfigError.ConfigError): self is ConfigError.InvalidData =>\n  self._op === OpCodes.OP_INVALID_DATA\n\n/** @internal */\nexport const isMissingData = (self: ConfigError.ConfigError): self is ConfigError.MissingData =>\n  self._op === OpCodes.OP_MISSING_DATA\n\n/** @internal */\nexport const isSourceUnavailable = (self: ConfigError.ConfigError): self is ConfigError.SourceUnavailable =>\n  self._op === OpCodes.OP_SOURCE_UNAVAILABLE\n\n/** @internal */\nexport const isUnsupported = (self: ConfigError.ConfigError): self is ConfigError.Unsupported =>\n  self._op === OpCodes.OP_UNSUPPORTED\n\n/** @internal */\nexport const prefixed: {\n  (prefix: ReadonlyArray<string>): (self: ConfigError.ConfigError) => ConfigError.ConfigError\n  (self: ConfigError.ConfigError, prefix: ReadonlyArray<string>): ConfigError.ConfigError\n} = dual<\n  (prefix: ReadonlyArray<string>) => (self: ConfigError.ConfigError) => ConfigError.ConfigError,\n  (self: ConfigError.ConfigError, prefix: ReadonlyArray<string>) => ConfigError.ConfigError\n>(2, (self, prefix) => {\n  switch (self._op) {\n    case OpCodes.OP_AND: {\n      return And(prefixed(self.left, prefix), prefixed(self.right, prefix))\n    }\n    case OpCodes.OP_OR: {\n      return Or(prefixed(self.left, prefix), prefixed(self.right, prefix))\n    }\n    case OpCodes.OP_INVALID_DATA: {\n      return InvalidData([...prefix, ...self.path], self.message)\n    }\n    case OpCodes.OP_MISSING_DATA: {\n      return MissingData([...prefix, ...self.path], self.message)\n    }\n    case OpCodes.OP_SOURCE_UNAVAILABLE: {\n      return SourceUnavailable([...prefix, ...self.path], self.message, self.cause)\n    }\n    case OpCodes.OP_UNSUPPORTED: {\n      return Unsupported([...prefix, ...self.path], self.message)\n    }\n  }\n})\n\n/** @internal */\nconst IsMissingDataOnlyReducer: ConfigError.ConfigErrorReducer<unknown, boolean> = {\n  andCase: (_, left, right) => left && right,\n  orCase: (_, left, right) => left && right,\n  invalidDataCase: constFalse,\n  missingDataCase: constTrue,\n  sourceUnavailableCase: constFalse,\n  unsupportedCase: constFalse\n}\n\n/** @internal */\ntype ConfigErrorCase = AndCase | OrCase\n\n/** @internal */\ninterface AndCase {\n  readonly _op: \"AndCase\"\n}\n\n/** @internal */\ninterface OrCase {\n  readonly _op: \"OrCase\"\n}\n\n/** @internal */\nexport const reduceWithContext = dual<\n  <C, Z>(context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => (self: ConfigError.ConfigError) => Z,\n  <C, Z>(self: ConfigError.ConfigError, context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => Z\n>(3, <C, Z>(self: ConfigError.ConfigError, context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => {\n  const input: Array<ConfigError.ConfigError> = [self]\n  const output: Array<Either.Either<Z, ConfigErrorCase>> = []\n  while (input.length > 0) {\n    const error = input.pop()!\n    switch (error._op) {\n      case OpCodes.OP_AND: {\n        input.push(error.right)\n        input.push(error.left)\n        output.push(Either.left({ _op: \"AndCase\" }))\n        break\n      }\n      case OpCodes.OP_OR: {\n        input.push(error.right)\n        input.push(error.left)\n        output.push(Either.left({ _op: \"OrCase\" }))\n        break\n      }\n      case OpCodes.OP_INVALID_DATA: {\n        output.push(Either.right(reducer.invalidDataCase(context, error.path, error.message)))\n        break\n      }\n      case OpCodes.OP_MISSING_DATA: {\n        output.push(Either.right(reducer.missingDataCase(context, error.path, error.message)))\n        break\n      }\n      case OpCodes.OP_SOURCE_UNAVAILABLE: {\n        output.push(Either.right(reducer.sourceUnavailableCase(context, error.path, error.message, error.cause)))\n        break\n      }\n      case OpCodes.OP_UNSUPPORTED: {\n        output.push(Either.right(reducer.unsupportedCase(context, error.path, error.message)))\n        break\n      }\n    }\n  }\n  const accumulator: Array<Z> = []\n  while (output.length > 0) {\n    const either = output.pop()!\n    switch (either._op) {\n      case \"Left\": {\n        switch (either.left._op) {\n          case \"AndCase\": {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.andCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n          case \"OrCase\": {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.orCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n        }\n        break\n      }\n      case \"Right\": {\n        accumulator.push(either.right)\n        break\n      }\n    }\n  }\n  if (accumulator.length === 0) {\n    throw new Error(\n      \"BUG: ConfigError.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return accumulator.pop()!\n})\n\n/** @internal */\nexport const isMissingDataOnly = (self: ConfigError.ConfigError): boolean =>\n  reduceWithContext(self, void 0, IsMissingDataOnlyReducer)\n", "/** @internal */\nexport type OP_AND = typeof OP_AND\n\n/** @internal */\nexport const OP_AND = \"And\" as const\n\n/** @internal */\nexport type OP_OR = typeof OP_OR\n\n/** @internal */\nexport const OP_OR = \"Or\" as const\n\n/** @internal */\nexport type OP_INVALID_DATA = typeof OP_INVALID_DATA\n\n/** @internal */\nexport const OP_INVALID_DATA = \"InvalidData\" as const\n\n/** @internal */\nexport type OP_MISSING_DATA = typeof OP_MISSING_DATA\n\n/** @internal */\nexport const OP_MISSING_DATA = \"MissingData\" as const\n\n/** @internal */\nexport type OP_SOURCE_UNAVAILABLE = typeof OP_SOURCE_UNAVAILABLE\n\n/** @internal */\nexport const OP_SOURCE_UNAVAILABLE = \"SourceUnavailable\" as const\n\n/** @internal */\nexport type OP_UNSUPPORTED = typeof OP_UNSUPPORTED\n\n/** @internal */\nexport const OP_UNSUPPORTED = \"Unsupported\" as const\n", "import * as RA from \"../../Array.js\"\nimport type * as ConfigError from \"../../ConfigError.js\"\nimport type * as PathPatch from \"../../ConfigProviderPathPatch.js\"\nimport * as Either from \"../../Either.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as List from \"../../List.js\"\nimport * as Option from \"../../Option.js\"\nimport * as configError from \"../configError.js\"\n\n/** @internal */\nexport const empty: PathPatch.PathPatch = {\n  _tag: \"Empty\"\n}\n\n/** @internal */\nexport const andThen = dual<\n  (that: PathPatch.PathPatch) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, that: PathPatch.PathPatch) => PathPatch.PathPatch\n>(2, (self, that) => ({\n  _tag: \"AndThen\",\n  first: self,\n  second: that\n}))\n\n/** @internal */\nexport const mapName = dual<\n  (f: (string: string) => string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, f: (string: string) => string) => PathPatch.PathPatch\n>(2, (self, f) => andThen(self, { _tag: \"MapName\", f }))\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, name: string) => PathPatch.PathPatch\n>(2, (self, name) => andThen(self, { _tag: \"Nested\", name }))\n\n/** @internal */\nexport const unnested = dual<\n  (name: string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, name: string) => PathPatch.PathPatch\n>(2, (self, name) => andThen(self, { _tag: \"Unnested\", name }))\n\n/** @internal */\nexport const patch = dual<\n  (\n    patch: PathPatch.PathPatch\n  ) => (\n    path: ReadonlyArray<string>\n  ) => Either.Either<ReadonlyArray<string>, ConfigError.ConfigError>,\n  (\n    path: ReadonlyArray<string>,\n    patch: PathPatch.PathPatch\n  ) => Either.Either<ReadonlyArray<string>, ConfigError.ConfigError>\n>(2, (path, patch) => {\n  let input: List.List<PathPatch.PathPatch> = List.of(patch)\n  let output: ReadonlyArray<string> = path\n  while (List.isCons(input)) {\n    const patch: PathPatch.PathPatch = input.head\n    switch (patch._tag) {\n      case \"Empty\": {\n        input = input.tail\n        break\n      }\n      case \"AndThen\": {\n        input = List.cons(patch.first, List.cons(patch.second, input.tail))\n        break\n      }\n      case \"MapName\": {\n        output = RA.map(output, patch.f)\n        input = input.tail\n        break\n      }\n      case \"Nested\": {\n        output = RA.prepend(output, patch.name)\n        input = input.tail\n        break\n      }\n      case \"Unnested\": {\n        const containsName = pipe(\n          RA.head(output),\n          Option.contains(patch.name)\n        )\n        if (containsName) {\n          output = RA.tailNonEmpty(output as RA.NonEmptyArray<string>)\n          input = input.tail\n        } else {\n          return Either.left(configError.MissingData(\n            output,\n            `Expected ${patch.name} to be in path in ConfigProvider#unnested`\n          ))\n        }\n        break\n      }\n    }\n  }\n  return Either.right(output)\n})\n", "/** @internal */\nexport type OP_CONSTANT = typeof OP_CONSTANT\n\n/** @internal */\nexport const OP_CONSTANT = \"Constant\" as const\n\n/** @internal */\nexport type OP_FAIL = typeof OP_FAIL\n\n/** @internal */\nexport const OP_FAIL = \"Fail\" as const\n\n/** @internal */\nexport type OP_FALLBACK = typeof OP_FALLBACK\n\n/** @internal */\nexport const OP_FALLBACK = \"Fallback\" as const\n\n/** @internal */\nexport type OP_DESCRIBED = typeof OP_DESCRIBED\n\n/** @internal */\nexport const OP_DESCRIBED = \"Described\" as const\n\n/** @internal */\nexport type OP_LAZY = typeof OP_LAZY\n\n/** @internal */\nexport const OP_LAZY = \"Lazy\" as const\n\n/** @internal */\nexport type OP_MAP_OR_FAIL = typeof OP_MAP_OR_FAIL\n\n/** @internal */\nexport const OP_MAP_OR_FAIL = \"MapOrFail\" as const\n\n/** @internal */\nexport type OP_NESTED = typeof OP_NESTED\n\n/** @internal */\nexport const OP_NESTED = \"Nested\" as const\n\n/** @internal */\nexport type OP_PRIMITIVE = typeof OP_PRIMITIVE\n\n/** @internal */\nexport const OP_PRIMITIVE = \"Primitive\" as const\n\n/** @internal */\nexport type OP_SEQUENCE = typeof OP_SEQUENCE\n\n/** @internal */\nexport const OP_SEQUENCE = \"Sequence\" as const\n\n/** @internal */\nexport type OP_HASHMAP = typeof OP_HASHMAP\n\n/** @internal */\nexport const OP_HASHMAP = \"HashMap\" as const\n\n/** @internal */\nexport type OP_ZIP_WITH = typeof OP_ZIP_WITH\n\n/** @internal */\nexport const OP_ZIP_WITH = \"ZipWith\" as const\n", "import type * as Console from \"../../Console.js\"\nimport * as Context from \"../../Context.js\"\nimport * as core from \"../core.js\"\n\n/** @internal */\nexport const TypeId: Console.TypeId = Symbol.for(\"effect/Console\") as Console.TypeId\n\n/** @internal */\nexport const consoleTag: Context.Tag<Console.Console, Console.Console> = Context.GenericTag<Console.Console>(\n  \"effect/Console\"\n)\n\n/** @internal */\nexport const defaultConsole: Console.Console = {\n  [TypeId]: TypeId,\n  assert(condition, ...args) {\n    return core.sync(() => {\n      console.assert(condition, ...args)\n    })\n  },\n  clear: core.sync(() => {\n    console.clear()\n  }),\n  count(label) {\n    return core.sync(() => {\n      console.count(label)\n    })\n  },\n  countReset(label) {\n    return core.sync(() => {\n      console.countReset(label)\n    })\n  },\n  debug(...args) {\n    return core.sync(() => {\n      console.debug(...args)\n    })\n  },\n  dir(item, options) {\n    return core.sync(() => {\n      console.dir(item, options)\n    })\n  },\n  dirxml(...args) {\n    return core.sync(() => {\n      console.dirxml(...args)\n    })\n  },\n  error(...args) {\n    return core.sync(() => {\n      console.error(...args)\n    })\n  },\n  group(options) {\n    return options?.collapsed ?\n      core.sync(() => console.groupCollapsed(options?.label)) :\n      core.sync(() => console.group(options?.label))\n  },\n  groupEnd: core.sync(() => {\n    console.groupEnd()\n  }),\n  info(...args) {\n    return core.sync(() => {\n      console.info(...args)\n    })\n  },\n  log(...args) {\n    return core.sync(() => {\n      console.log(...args)\n    })\n  },\n  table(tabularData, properties) {\n    return core.sync(() => {\n      console.table(tabularData, properties)\n    })\n  },\n  time(label) {\n    return core.sync(() => console.time(label))\n  },\n  timeEnd(label) {\n    return core.sync(() => console.timeEnd(label))\n  },\n  timeLog(label, ...args) {\n    return core.sync(() => {\n      console.timeLog(label, ...args)\n    })\n  },\n  trace(...args) {\n    return core.sync(() => {\n      console.trace(...args)\n    })\n  },\n  warn(...args) {\n    return core.sync(() => {\n      console.warn(...args)\n    })\n  },\n  unsafe: console\n}\n", "import * as Chunk from \"../Chunk.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as Random from \"../Random.js\"\nimport * as PCGRandom from \"../Utils.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst RandomSymbolKey = \"effect/Random\"\n\n/** @internal */\nexport const RandomTypeId: Random.RandomTypeId = Symbol.for(\n  RandomSymbolKey\n) as Random.RandomTypeId\n\n/** @internal */\nexport const randomTag: Context.Tag<Random.Random, Random.Random> = Context.GenericTag(\"effect/Random\")\n/** @internal */\nclass RandomImpl implements Random.Random {\n  readonly [RandomTypeId]: Random.RandomTypeId = RandomTypeId\n\n  readonly PRNG: PCGRandom.PCGRandom\n\n  constructor(readonly seed: number) {\n    this.PRNG = new PCGRandom.PCGRandom(seed)\n  }\n\n  get next(): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.number())\n  }\n\n  get nextBoolean(): Effect.Effect<boolean> {\n    return core.map(this.next, (n) => n > 0.5)\n  }\n\n  get nextInt(): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.integer(Number.MAX_SAFE_INTEGER))\n  }\n\n  nextRange(min: number, max: number): Effect.Effect<number> {\n    return core.map(this.next, (n) => (max - min) * n + min)\n  }\n\n  nextIntBetween(min: number, max: number): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.integer(max - min) + min)\n  }\n\n  shuffle<A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> {\n    return shuffleWith(elements, (n) => this.nextIntBetween(0, n))\n  }\n}\n\nconst shuffleWith = <A>(\n  elements: Iterable<A>,\n  nextIntBounded: (n: number) => Effect.Effect<number>\n): Effect.Effect<Chunk.Chunk<A>> => {\n  return core.suspend(() =>\n    pipe(\n      core.sync(() => Array.from(elements)),\n      core.flatMap((buffer) => {\n        const numbers: Array<number> = []\n        for (let i = buffer.length; i >= 2; i = i - 1) {\n          numbers.push(i)\n        }\n        return pipe(\n          numbers,\n          core.forEachSequentialDiscard((n) =>\n            pipe(\n              nextIntBounded(n),\n              core.map((k) => swap(buffer, n - 1, k))\n            )\n          ),\n          core.as(Chunk.fromIterable(buffer))\n        )\n      })\n    )\n  )\n}\n\nconst swap = <A>(buffer: Array<A>, index1: number, index2: number): Array<A> => {\n  const tmp = buffer[index1]!\n  buffer[index1] = buffer[index2]!\n  buffer[index2] = tmp\n  return buffer\n}\n\nexport const make = <A>(seed: A): Random.Random => new RandomImpl(Hash.hash(seed))\n", "/**\n * @since 2.0.0\n */\nimport type * as Arr from \"./Array.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/fiberRefs.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberRefsSym: unique symbol = internal.FiberRefsSym\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberRefsSym = typeof FiberRefsSym\n\n/**\n * `FiberRefs` is a data type that represents a collection of `FiberRef` values.\n *\n * This allows safely propagating `FiberRef` values across fiber boundaries, for\n * example between an asynchronous producer and consumer.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberRefs extends Pipeable {\n  readonly [FiberRefsSym]: FiberRefsSym\n  readonly locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n}\n\nconst delete_: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => FiberRefs\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): FiberRefs\n} = internal.delete_\n\nexport {\n  /**\n   * Deletes the specified `FiberRef` from the `FibterRefs`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  delete_ as delete\n}\n\n/**\n * Returns a set of each `FiberRef` in this collection.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const fiberRefs: (self: FiberRefs) => HashSet.HashSet<FiberRef.FiberRef<any>> = internal.fiberRefs\n\n/**\n * Forks this collection of fiber refs as the specified child fiber id. This\n * will potentially modify the value of the fiber refs, as determined by the\n * individual fiber refs that make up the collection.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const forkAs: {\n  (childId: FiberId.Single): (self: FiberRefs) => FiberRefs\n  (self: FiberRefs, childId: FiberId.Single): FiberRefs\n} = internal.forkAs\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => Option.Option<A>\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): Option.Option<A>\n} = internal.get\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or the `initial` value of the `FiberRef` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrDefault: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => A\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): A\n} = internal.getOrDefault\n\n/**\n * Joins this collection of fiber refs to the specified collection, as the\n * specified fiber id. This will perform diffing and merging to ensure\n * preservation of maximum information from both child and parent refs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const joinAs: {\n  (fiberId: FiberId.Single, that: FiberRefs): (self: FiberRefs) => FiberRefs\n  (self: FiberRefs, fiberId: FiberId.Single, that: FiberRefs): FiberRefs\n} = internal.joinAs\n\n/**\n * Set each ref to either its value or its default.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const setAll: (self: FiberRefs) => Effect.Effect<void> = internal.setAll\n\n/**\n * Updates the value of the specified `FiberRef` using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateAs: {\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): (self: FiberRefs) => FiberRefs\n  <A>(\n    self: FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): FiberRefs\n} = internal.updateAs\n\n/**\n * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateManyAs: {\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): (self: FiberRefs) => FiberRefs\n  (\n    self: FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): FiberRefs\n} = internal.updateManyAs\n\n/**\n * Note: it will not copy the provided Map, make sure to provide a fresh one.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n) => FiberRefs = internal.unsafeMake\n\n/**\n * The empty collection of `FiberRef` values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: () => FiberRefs = internal.empty\n", "import * as Arr from \"../Array.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport type * as FiberRefs from \"../FiberRefs.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport function unsafeMake(\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n): FiberRefs.FiberRefs {\n  return new FiberRefsImpl(fiberRefLocals)\n}\n\n/** @internal */\nexport function empty(): FiberRefs.FiberRefs {\n  return unsafeMake(new Map())\n}\n\n/** @internal */\nexport const FiberRefsSym: FiberRefs.FiberRefsSym = Symbol.for(\"effect/FiberRefs\") as FiberRefs.FiberRefsSym\n\n/** @internal */\nexport class FiberRefsImpl implements FiberRefs.FiberRefs {\n  readonly [FiberRefsSym]: FiberRefs.FiberRefsSym = FiberRefsSym\n  constructor(\n    readonly locals: Map<\n      FiberRef.FiberRef<any>,\n      Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>\n    >\n  ) {\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst findAncestor = (\n  _ref: FiberRef.FiberRef<any>,\n  _parentStack: ReadonlyArray<readonly [FiberId.Single, unknown]>,\n  _childStack: ReadonlyArray<readonly [FiberId.Single, unknown]>,\n  _childModified = false\n): readonly [unknown, boolean] => {\n  const ref = _ref\n  let parentStack = _parentStack\n  let childStack = _childStack\n  let childModified = _childModified\n  let ret: readonly [unknown, boolean] | undefined = undefined\n  while (ret === undefined) {\n    if (Arr.isNonEmptyReadonlyArray(parentStack) && Arr.isNonEmptyReadonlyArray(childStack)) {\n      const parentFiberId = Arr.headNonEmpty(parentStack)[0]\n      const parentAncestors = Arr.tailNonEmpty(parentStack)\n      const childFiberId = Arr.headNonEmpty(childStack)[0]\n      const childRefValue = Arr.headNonEmpty(childStack)[1]\n      const childAncestors = Arr.tailNonEmpty(childStack)\n      if (parentFiberId.startTimeMillis < childFiberId.startTimeMillis) {\n        childStack = childAncestors\n        childModified = true\n      } else if (parentFiberId.startTimeMillis > childFiberId.startTimeMillis) {\n        parentStack = parentAncestors\n      } else {\n        if (parentFiberId.id < childFiberId.id) {\n          childStack = childAncestors\n          childModified = true\n        } else if (parentFiberId.id > childFiberId.id) {\n          parentStack = parentAncestors\n        } else {\n          ret = [childRefValue, childModified] as const\n        }\n      }\n    } else {\n      ret = [ref.initial, true] as const\n    }\n  }\n  return ret\n}\n\n/** @internal */\nexport const joinAs = dual<\n  (fiberId: FiberId.Single, that: FiberRefs.FiberRefs) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (self: FiberRefs.FiberRefs, fiberId: FiberId.Single, that: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n>(3, (self, fiberId, that) => {\n  const parentFiberRefs = new Map(self.locals)\n  that.locals.forEach((childStack, fiberRef) => {\n    const childValue = childStack[0][1]\n    if (!childStack[0][0][Equal.symbol](fiberId)) {\n      if (!parentFiberRefs.has(fiberRef)) {\n        if (Equal.equals(childValue, fiberRef.initial)) {\n          return\n        }\n        parentFiberRefs.set(\n          fiberRef,\n          [[fiberId, fiberRef.join(fiberRef.initial, childValue)]]\n        )\n        return\n      }\n      const parentStack = parentFiberRefs.get(fiberRef)!\n      const [ancestor, wasModified] = findAncestor(\n        fiberRef,\n        parentStack,\n        childStack\n      )\n      if (wasModified) {\n        const patch = fiberRef.diff(ancestor, childValue)\n        const oldValue = parentStack[0][1]\n        const newValue = fiberRef.join(oldValue, fiberRef.patch(patch)(oldValue))\n        if (!Equal.equals(oldValue, newValue)) {\n          let newStack: Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, unknown]>\n          const parentFiberId = parentStack[0][0]\n          if (parentFiberId[Equal.symbol](fiberId)) {\n            newStack = [[parentFiberId, newValue] as const, ...parentStack.slice(1)]\n          } else {\n            newStack = [[fiberId, newValue] as const, ...parentStack]\n          }\n          parentFiberRefs.set(fiberRef, newStack)\n        }\n      }\n    }\n  })\n  return new FiberRefsImpl(parentFiberRefs)\n})\n\n/** @internal */\nexport const forkAs = dual<\n  (childId: FiberId.Single) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (self: FiberRefs.FiberRefs, childId: FiberId.Single) => FiberRefs.FiberRefs\n>(2, (self, childId) => {\n  const map = new Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, unknown]>>()\n  unsafeForkAs(self, map, childId)\n  return new FiberRefsImpl(map)\n})\n\nconst unsafeForkAs = (\n  self: FiberRefs.FiberRefs,\n  map: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>,\n  fiberId: FiberId.Single\n) => {\n  self.locals.forEach((stack, fiberRef) => {\n    const oldValue = stack[0][1]\n    const newValue = fiberRef.patch(fiberRef.fork)(oldValue)\n    if (Equal.equals(oldValue, newValue)) {\n      map.set(fiberRef, stack)\n    } else {\n      map.set(fiberRef, [[fiberId, newValue] as const, ...stack])\n    }\n  })\n}\n\n/** @internal */\nexport const fiberRefs = (self: FiberRefs.FiberRefs) => HashSet.fromIterable(self.locals.keys())\n\n/** @internal */\nexport const setAll = (self: FiberRefs.FiberRefs): Effect.Effect<void> =>\n  core.forEachSequentialDiscard(\n    fiberRefs(self),\n    (fiberRef) => core.fiberRefSet(fiberRef, getOrDefault(self, fiberRef))\n  )\n\n/** @internal */\nexport const delete_ = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => FiberRefs.FiberRefs\n>(2, (self, fiberRef) => {\n  const locals = new Map(self.locals)\n  locals.delete(fiberRef)\n  return new FiberRefsImpl(locals)\n})\n\n/** @internal */\nexport const get = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => Option.Option<A>,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => Option.Option<A>\n>(2, (self, fiberRef) => {\n  if (!self.locals.has(fiberRef)) {\n    return Option.none()\n  }\n  return Option.some(Arr.headNonEmpty(self.locals.get(fiberRef)!)[1])\n})\n\n/** @internal */\nexport const getOrDefault = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => A,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => A\n>(2, (self, fiberRef) => pipe(get(self, fiberRef), Option.getOrElse(() => fiberRef.initial)))\n\n/** @internal */\nexport const updateAs = dual<\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  <A>(\n    self: FiberRefs.FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ) => FiberRefs.FiberRefs\n>(2, <A>(self: FiberRefs.FiberRefs, { fiberId, fiberRef, value }: {\n  readonly fiberId: FiberId.Single\n  readonly fiberRef: FiberRef.FiberRef<A>\n  readonly value: A\n}) => {\n  if (self.locals.size === 0) {\n    return new FiberRefsImpl(new Map([[fiberRef, [[fiberId, value] as const]]]))\n  }\n  const locals = new Map(self.locals)\n  unsafeUpdateAs(locals, fiberId, fiberRef, value)\n  return new FiberRefsImpl(locals)\n})\n\nconst unsafeUpdateAs = (\n  locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>,\n  fiberId: FiberId.Single,\n  fiberRef: FiberRef.FiberRef<any>,\n  value: any\n) => {\n  const oldStack: ReadonlyArray<readonly [FiberId.Single, any]> = locals.get(fiberRef) ?? []\n  let newStack: Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]> | undefined\n\n  if (Arr.isNonEmptyReadonlyArray(oldStack)) {\n    const [currentId, currentValue] = Arr.headNonEmpty(oldStack)\n    if (currentId[Equal.symbol](fiberId)) {\n      if (Equal.equals(currentValue, value)) {\n        return\n      } else {\n        newStack = [\n          [fiberId, value] as const,\n          ...oldStack.slice(1)\n        ]\n      }\n    } else {\n      newStack = [\n        [fiberId, value] as const,\n        ...oldStack\n      ]\n    }\n  } else {\n    newStack = [[fiberId, value] as const]\n  }\n\n  locals.set(fiberRef, newStack)\n}\n\n/** @internal */\nexport const updateManyAs = dual<\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: Arr.NonEmptyReadonlyArray<\n        readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n      >\n    }\n  ) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (\n    self: FiberRefs.FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: Arr.NonEmptyReadonlyArray<\n        readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n      >\n    }\n  ) => FiberRefs.FiberRefs\n>(2, (self: FiberRefs.FiberRefs, { entries, forkAs }: {\n  readonly forkAs?: FiberId.Single | undefined\n  readonly entries: Arr.NonEmptyReadonlyArray<\n    readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n  >\n}) => {\n  if (self.locals.size === 0) {\n    return new FiberRefsImpl(new Map(entries))\n  }\n\n  const locals = new Map(self.locals)\n  if (forkAs !== undefined) {\n    unsafeForkAs(self, locals, forkAs)\n  }\n  entries.forEach(([fiberRef, values]) => {\n    if (values.length === 1) {\n      unsafeUpdateAs(locals, values[0][0], fiberRef, values[0][1])\n    } else {\n      values.forEach(([fiberId, value]) => {\n        unsafeUpdateAs(locals, fiberId, fiberRef, value)\n      })\n    }\n  })\n  return new FiberRefsImpl(locals)\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as number from \"./Number.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * A `LogLevel` represents the log level associated with an individual logging\n * operation. Log levels are used both to describe the granularity (or\n * importance) of individual log statements, as well as to enable tuning\n * verbosity of log output.\n *\n * @since 2.0.0\n * @category model\n * @property ordinal - The priority of the log message. Larger values indicate higher priority.\n * @property label - A label associated with the log level.\n * @property syslog -The syslog severity level of the log level.\n */\nexport type LogLevel = All | Fatal | Error | Warning | Info | Debug | Trace | None\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport type Literal = LogLevel[\"_tag\"]\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface All extends Pipeable {\n  readonly _tag: \"All\"\n  readonly label: \"ALL\"\n  readonly syslog: 0\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Fatal extends Pipeable {\n  readonly _tag: \"Fatal\"\n  readonly label: \"FATAL\"\n  readonly syslog: 2\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Error extends Pipeable {\n  readonly _tag: \"Error\"\n  readonly label: \"ERROR\"\n  readonly syslog: 3\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Warning extends Pipeable {\n  readonly _tag: \"Warning\"\n  readonly label: \"WARN\"\n  readonly syslog: 4\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Info extends Pipeable {\n  readonly _tag: \"Info\"\n  readonly label: \"INFO\"\n  readonly syslog: 6\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Debug extends Pipeable {\n  readonly _tag: \"Debug\"\n  readonly label: \"DEBUG\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Trace extends Pipeable {\n  readonly _tag: \"Trace\"\n  readonly label: \"TRACE\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface None extends Pipeable {\n  readonly _tag: \"None\"\n  readonly label: \"OFF\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const All: LogLevel = core.logLevelAll\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Fatal: LogLevel = core.logLevelFatal\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: LogLevel = core.logLevelError\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Warning: LogLevel = core.logLevelWarning\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Info: LogLevel = core.logLevelInfo\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Debug: LogLevel = core.logLevelDebug\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Trace: LogLevel = core.logLevelTrace\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const None: LogLevel = core.logLevelNone\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const allLevels = core.allLogLevels\n\n/**\n * Locally applies the specified `LogLevel` to an `Effect` workflow, reverting\n * to the previous `LogLevel` after the `Effect` workflow completes.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  (self: LogLevel): <A, E, R>(use: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R> =>\n    core.fiberRefLocally(use, core.currentLogLevel, self)\n)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<LogLevel> = pipe(\n  number.Order,\n  order.mapInput((level: LogLevel) => level.ordinal)\n)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThanEqual: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThan: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThanEqual: {\n  (that: LogLevel): (self: LogLevel) => boolean\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const fromLiteral = (literal: Literal): LogLevel => {\n  switch (literal) {\n    case \"All\":\n      return All\n    case \"Debug\":\n      return Debug\n    case \"Error\":\n      return Error\n    case \"Fatal\":\n      return Fatal\n    case \"Info\":\n      return Info\n    case \"Trace\":\n      return Trace\n    case \"None\":\n      return None\n    case \"Warning\":\n      return Warning\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/logSpan.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface LogSpan {\n  readonly label: string\n  readonly startTime: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (label: string, startTime: number) => LogSpan = internal.make\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (now: number) => (self: LogSpan) => string = internal.render\n", "import type * as LogSpan from \"../LogSpan.js\"\n\n/** @internal */\nexport const make = (label: string, startTime: number): LogSpan.LogSpan => ({\n  label,\n  startTime\n})\n\n/** @internal */\nexport const render = (now: number) => (self: LogSpan.LogSpan): string => {\n  const label = self.label.replace(/[\\s=\"]/g, \"_\")\n  return `${label}=${now - self.startTime}ms`\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/ref.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Readable } from \"./Readable.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RefTypeId: unique symbol = internal.RefTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RefTypeId = typeof RefTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Ref<in out A> extends Ref.Variance<A>, Readable<A> {\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Ref {\n  /**\n   * @since 2.0.0\n   */\n  export interface Variance<in out A> {\n    readonly [RefTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Effect.Effect<Ref<A>> = internal.make\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const get: <A>(self: Ref<A>) => Effect.Effect<A> = internal.get\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndSet: {\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, value: A): Effect.Effect<A>\n} = internal.getAndSet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdate: {\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = internal.getAndUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSome: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = internal.getAndUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modify: {\n  <A, B>(f: (a: A) => readonly [B, A]): (self: Ref<A>) => Effect.Effect<B>\n  <A, B>(self: Ref<A>, f: (a: A) => readonly [B, A]): Effect.Effect<B>\n} = internal.modify\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySome: {\n  <B, A>(fallback: B, pf: (a: A) => Option.Option<readonly [B, A]>): (self: Ref<A>) => Effect.Effect<B>\n  <A, B>(self: Ref<A>, fallback: B, pf: (a: A) => Option.Option<readonly [B, A]>): Effect.Effect<B>\n} = internal.modifySome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const set: {\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref<A>, value: A): Effect.Effect<void>\n} = internal.set\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const setAndGet: {\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, value: A): Effect.Effect<A>\n} = internal.setAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const update: {\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<void>\n} = internal.update\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGet: {\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = internal.updateAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSome: {\n  <A>(f: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref<A>, f: (a: A) => Option.Option<A>): Effect.Effect<void>\n} = internal.updateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGet: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = internal.updateSomeAndGet\n\n/**\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A>(value: A) => Ref<A> = internal.unsafeMake\n", "import type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Readable from \"../Readable.js\"\nimport type * as Ref from \"../Ref.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport const RefTypeId: Ref.RefTypeId = Symbol.for(\"effect/Ref\") as Ref.RefTypeId\n\n/** @internal */\nexport const refVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\nclass RefImpl<in out A> implements Ref.Ref<A> {\n  readonly [RefTypeId] = refVariance\n  readonly [Readable.TypeId]: Readable.TypeId\n  constructor(readonly ref: MutableRef.MutableRef<A>) {\n    this[Readable.TypeId] = Readable.TypeId\n    this.get = core.sync(() => MutableRef.get(this.ref))\n  }\n  readonly get: Effect.Effect<A>\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B> {\n    return core.sync(() => {\n      const current = MutableRef.get(this.ref)\n      const [b, a] = f(current)\n      if ((current as unknown) !== (a as unknown)) {\n        MutableRef.set(a)(this.ref)\n      }\n      return b\n    })\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const unsafeMake = <A>(value: A): Ref.Ref<A> => new RefImpl(MutableRef.make(value))\n\n/** @internal */\nexport const make = <A>(value: A): Effect.Effect<Ref.Ref<A>> => core.sync(() => unsafeMake(value))\n\n/** @internal */\nexport const get = <A>(self: Ref.Ref<A>) => self.get\n\n/** @internal */\nexport const set = dual<\n  <A>(value: A) => (self: Ref.Ref<A>) => Effect.Effect<void>,\n  <A>(self: Ref.Ref<A>, value: A) => Effect.Effect<void>\n>(2, <A>(self: Ref.Ref<A>, value: A) => self.modify((): [void, A] => [void 0, value]))\n\n/** @internal */\nexport const getAndSet = dual<\n  <A>(value: A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, value: A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, value: A) => self.modify((a): [A, A] => [a, value]))\n\n/** @internal */\nexport const getAndUpdate = dual<\n  <A>(f: (a: A) => A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => A) => self.modify((a): [A, A] => [a, f(a)]))\n\n/** @internal */\nexport const getAndUpdateSome = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) =>\n  self.modify((value): [A, A] => {\n    const option = pf(value)\n    switch (option._tag) {\n      case \"None\": {\n        return [value, value]\n      }\n      case \"Some\": {\n        return [value, option.value]\n      }\n    }\n  }))\n\n/** @internal */\nexport const setAndGet = dual<\n  <A>(value: A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, value: A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, value: A) => self.modify((): [A, A] => [value, value]))\n\n/** @internal */\nexport const modify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: Ref.Ref<A>) => Effect.Effect<B>,\n  <A, B>(self: Ref.Ref<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, (self, f) => self.modify(f))\n\n/** @internal */\nexport const modifySome = dual<\n  <B, A>(\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ) => (self: Ref.Ref<A>) => Effect.Effect<B>,\n  <A, B>(\n    self: Ref.Ref<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ) => Effect.Effect<B>\n>(3, (self, fallback, pf) =>\n  self.modify((value) => {\n    const option = pf(value)\n    switch (option._tag) {\n      case \"None\": {\n        return [fallback, value]\n      }\n      case \"Some\": {\n        return option.value\n      }\n    }\n  }))\n\n/** @internal */\nexport const update = dual<\n  <A>(f: (a: A) => A) => (self: Ref.Ref<A>) => Effect.Effect<void>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => A) => Effect.Effect<void>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => A) => self.modify((a): [void, A] => [void 0, f(a)]))\n\n/** @internal */\nexport const updateAndGet = dual<\n  <A>(f: (a: A) => A) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => A) =>\n  self.modify((a): [A, A] => {\n    const result = f(a)\n    return [result, result]\n  }))\n\n/** @internal */\nexport const updateSome = dual<\n  <A>(f: (a: A) => Option.Option<A>) => (self: Ref.Ref<A>) => Effect.Effect<void>,\n  <A>(self: Ref.Ref<A>, f: (a: A) => Option.Option<A>) => Effect.Effect<void>\n>(2, <A>(self: Ref.Ref<A>, f: (a: A) => Option.Option<A>) =>\n  self.modify(\n    (a): [void, A] => [\n      void 0,\n      Option.match(f(a), {\n        onNone: () => a,\n        onSome: (b) => b\n      })\n    ]\n  ))\n\n/** @internal */\nexport const updateSomeAndGet = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: Ref.Ref<A>) => Effect.Effect<A>,\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>) =>\n  self.modify((value): [A, A] => {\n    const option = pf(value)\n    switch (option._tag) {\n      case \"None\": {\n        return [value, value]\n      }\n      case \"Some\": {\n        return [option.value, option.value]\n      }\n    }\n  }))\n\n/** @internal */\nexport const unsafeGet = <A>(self: Ref.Ref<A>): A => MutableRef.get((self as RefImpl<A>).ref)\n", "/**\n * @since 2.0.0\n */\nimport type { Effect } from \"./Effect.js\"\nimport { dual } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Readable\")\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Readable<A, E = never, R = never> extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly get: Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isReadable = (u: unknown): u is Readable<unknown, unknown, unknown> => hasProperty(u, TypeId)\n\nconst Proto: Omit<Readable<any>, \"get\"> = {\n  [TypeId]: TypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <A, E, R>(get: Effect<A, E, R>): Readable<A, E, R> => {\n  const self = Object.create(Proto)\n  self.get = get\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category combinators\n */\nexport const map: {\n  <A, B>(f: (a: NoInfer<A>) => B): <E, R>(fa: Readable<A, E, R>) => Readable<B, E, R>\n  <A, E, R, B>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => B): Readable<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => B): Readable<B, E, R> => make(core.map(self.get, f))\n)\n\n/**\n * @since 2.0.0\n * @category combinators\n */\nexport const mapEffect: {\n  <A, B, E2, R2>(\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): <E, R>(fa: Readable<A, E, R>) => Readable<B, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Readable<A, E, R>,\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): Readable<B, E | E2, R | R2>\n} = dual(2, <A, E, R, B, E2, R2>(\n  self: Readable<A, E, R>,\n  f: (a: NoInfer<A>) => Effect<B, E2, R2>\n): Readable<B, E | E2, R | R2> => make(core.flatMap(self.get, f)))\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap = <A, E, R, E1, R1>(\n  effect: Effect<Readable<A, E, R>, E1, R1>\n): Readable<A, E | E1, R | R1> =>\n  make(\n    core.flatMap(effect, (s) => s.get)\n  )\n", "/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as internal from \"./internal/tracer.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n */\nexport const TracerTypeId: unique symbol = internal.TracerTypeId\n\n/**\n * @since 2.0.0\n */\nexport type TracerTypeId = typeof TracerTypeId\n\n/**\n * @since 2.0.0\n */\nexport interface Tracer {\n  readonly [TracerTypeId]: TracerTypeId\n  span(\n    name: string,\n    parent: Option.Option<AnySpan>,\n    context: Context.Context<never>,\n    links: ReadonlyArray<SpanLink>,\n    startTime: bigint,\n    kind: SpanKind\n  ): Span\n  context<X>(f: () => X, fiber: Fiber.RuntimeFiber<any, any>): X\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type SpanStatus = {\n  _tag: \"Started\"\n  startTime: bigint\n} | {\n  _tag: \"Ended\"\n  startTime: bigint\n  endTime: bigint\n  exit: Exit.Exit<unknown, unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type AnySpan = Span | ExternalSpan\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport interface ParentSpan {\n  readonly _: unique symbol\n}\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport const ParentSpan: Context.Tag<ParentSpan, AnySpan> = internal.spanTag\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ExternalSpan {\n  readonly _tag: \"ExternalSpan\"\n  readonly spanId: string\n  readonly traceId: string\n  readonly sampled: boolean\n  readonly context: Context.Context<never>\n}\n\n/**\n * @since 3.1.0\n * @category models\n */\nexport interface SpanOptions {\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<SpanLink> | undefined\n  readonly parent?: AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: SpanKind | undefined\n  readonly captureStackTrace?: boolean | LazyArg<string | undefined> | undefined\n}\n\n/**\n * @since 3.1.0\n * @category models\n */\nexport type SpanKind = \"internal\" | \"server\" | \"client\" | \"producer\" | \"consumer\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Span {\n  readonly _tag: \"Span\"\n  readonly name: string\n  readonly spanId: string\n  readonly traceId: string\n  readonly parent: Option.Option<AnySpan>\n  readonly context: Context.Context<never>\n  readonly status: SpanStatus\n  readonly attributes: ReadonlyMap<string, unknown>\n  readonly links: ReadonlyArray<SpanLink>\n  readonly sampled: boolean\n  readonly kind: SpanKind\n  end(endTime: bigint, exit: Exit.Exit<unknown, unknown>): void\n  attribute(key: string, value: unknown): void\n  event(name: string, startTime: bigint, attributes?: Record<string, unknown>): void\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SpanLink {\n  readonly _tag: \"SpanLink\"\n  readonly span: AnySpan\n  readonly attributes: Readonly<Record<string, unknown>>\n}\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport const Tracer: Context.Tag<Tracer, Tracer> = internal.tracerTag\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (options: Omit<Tracer, typeof TracerTypeId>) => Tracer = internal.make\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const externalSpan: (\n  options: {\n    readonly spanId: string\n    readonly traceId: string\n    readonly sampled?: boolean | undefined\n    readonly context?: Context.Context<never> | undefined\n  }\n) => ExternalSpan = internal.externalSpan\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.tracerWith\n", "import * as Arr from \"../../Array.js\"\nimport { equals } from \"../../Equal.js\"\nimport type * as FiberId from \"../../FiberId.js\"\nimport type * as FiberRefs from \"../../FiberRefs.js\"\nimport type * as FiberRefsPatch from \"../../FiberRefsPatch.js\"\nimport { dual } from \"../../Function.js\"\nimport * as _fiberRefs from \"../fiberRefs.js\"\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_ADD = \"Add\" as const\n\n/** @internal */\nexport type OP_ADD = typeof OP_ADD\n\n/** @internal */\nexport const OP_REMOVE = \"Remove\" as const\n\n/** @internal */\nexport type OP_REMOVE = typeof OP_REMOVE\n\n/** @internal */\nexport const OP_UPDATE = \"Update\" as const\n\n/** @internal */\nexport type OP_UPDATE = typeof OP_UPDATE\n\n/** @internal */\nexport const OP_AND_THEN = \"AndThen\" as const\n\n/** @internal */\nexport type OP_AND_THEN = typeof OP_AND_THEN\n\n/** @internal */\nexport const empty: FiberRefsPatch.FiberRefsPatch = ({\n  _tag: OP_EMPTY\n}) as FiberRefsPatch.FiberRefsPatch\n\n/** @internal */\nexport const diff = (\n  oldValue: FiberRefs.FiberRefs,\n  newValue: FiberRefs.FiberRefs\n): FiberRefsPatch.FiberRefsPatch => {\n  const missingLocals = new Map(oldValue.locals)\n  let patch = empty\n  for (const [fiberRef, pairs] of newValue.locals.entries()) {\n    const newValue = Arr.headNonEmpty(pairs)[1]\n    const old = missingLocals.get(fiberRef)\n    if (old !== undefined) {\n      const oldValue = Arr.headNonEmpty(old)[1]\n      if (!equals(oldValue, newValue)) {\n        patch = combine({\n          _tag: OP_UPDATE,\n          fiberRef,\n          patch: fiberRef.diff(oldValue, newValue)\n        })(patch)\n      }\n    } else {\n      patch = combine({\n        _tag: OP_ADD,\n        fiberRef,\n        value: newValue\n      })(patch)\n    }\n    missingLocals.delete(fiberRef)\n  }\n  for (const [fiberRef] of missingLocals.entries()) {\n    patch = combine({\n      _tag: OP_REMOVE,\n      fiberRef\n    })(patch)\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = dual<\n  (that: FiberRefsPatch.FiberRefsPatch) => (self: FiberRefsPatch.FiberRefsPatch) => FiberRefsPatch.FiberRefsPatch,\n  (self: FiberRefsPatch.FiberRefsPatch, that: FiberRefsPatch.FiberRefsPatch) => FiberRefsPatch.FiberRefsPatch\n>(2, (self, that) => ({\n  _tag: OP_AND_THEN,\n  first: self,\n  second: that\n}))\n\n/** @internal */\nexport const patch = dual<\n  (\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ) => (self: FiberRefsPatch.FiberRefsPatch) => FiberRefs.FiberRefs,\n  (\n    self: FiberRefsPatch.FiberRefsPatch,\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ) => FiberRefs.FiberRefs\n>(3, (self, fiberId, oldValue) => {\n  let fiberRefs: FiberRefs.FiberRefs = oldValue\n  let patches: ReadonlyArray<FiberRefsPatch.FiberRefsPatch> = Arr.of(self)\n  while (Arr.isNonEmptyReadonlyArray(patches)) {\n    const head = Arr.headNonEmpty(patches)\n    const tail = Arr.tailNonEmpty(patches)\n    switch (head._tag) {\n      case OP_EMPTY: {\n        patches = tail\n        break\n      }\n      case OP_ADD: {\n        fiberRefs = _fiberRefs.updateAs(fiberRefs, {\n          fiberId,\n          fiberRef: head.fiberRef,\n          value: head.value\n        })\n        patches = tail\n        break\n      }\n      case OP_REMOVE: {\n        fiberRefs = _fiberRefs.delete_(fiberRefs, head.fiberRef)\n        patches = tail\n        break\n      }\n      case OP_UPDATE: {\n        const value = _fiberRefs.getOrDefault(fiberRefs, head.fiberRef)\n        fiberRefs = _fiberRefs.updateAs(fiberRefs, {\n          fiberId,\n          fiberRef: head.fiberRef,\n          value: head.fiberRef.patch(head.patch)(value)\n        })\n        patches = tail\n        break\n      }\n      case OP_AND_THEN: {\n        patches = Arr.prepend(head.first)(Arr.prepend(head.second)(tail))\n        break\n      }\n    }\n  }\n  return fiberRefs\n})\n", "import * as Equal from \"../../Equal.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricLabel from \"../../MetricLabel.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricLabelSymbolKey = \"effect/MetricLabel\"\n\n/** @internal */\nexport const MetricLabelTypeId: MetricLabel.MetricLabelTypeId = Symbol.for(\n  MetricLabelSymbolKey\n) as MetricLabel.MetricLabelTypeId\n\n/** @internal */\nclass MetricLabelImpl implements MetricLabel.MetricLabel {\n  readonly [MetricLabelTypeId]: MetricLabel.MetricLabelTypeId = MetricLabelTypeId\n  readonly _hash: number\n  constructor(readonly key: string, readonly value: string) {\n    this._hash = Hash.string(MetricLabelSymbolKey + this.key + this.value)\n  }\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isMetricLabel(that) &&\n      this.key === that.key &&\n      this.value === that.value\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = (key: string, value: string): MetricLabel.MetricLabel => {\n  return new MetricLabelImpl(key, value)\n}\n\n/** @internal */\nexport const isMetricLabel = (u: unknown): u is MetricLabel.MetricLabel => hasProperty(u, MetricLabelTypeId)\n", "import { internalCall } from \"effect/Utils\"\nimport * as RA from \"../Array.js\"\nimport * as Boolean from \"../Boolean.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type { ConfigProvider } from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport type * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { EffectTypeId } from \"../Effectable.js\"\nimport type * as Either from \"../Either.js\"\nimport * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport type { Logger } from \"../Logger.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Micro from \"../Micro.js\"\nimport * as MRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type { Entry, Request } from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport { currentScheduler, type Scheduler } from \"../Scheduler.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { Concurrency, NoInfer } from \"../Types.js\"\nimport * as _RequestBlock from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as clock from \"./clock.js\"\nimport { currentRequestMap } from \"./completedRequestMap.js\"\nimport * as concurrency from \"./concurrency.js\"\nimport { configProviderTag } from \"./configProvider.js\"\nimport * as internalEffect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as internalFiber from \"./fiber.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport * as fiberRefs from \"./fiberRefs.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as internalLogger from \"./logger.js\"\nimport * as metric from \"./metric.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport { randomTag } from \"./random.js\"\nimport { complete } from \"./request.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\nimport { OpSupervision } from \"./runtimeFlags.js\"\nimport * as supervisor from \"./supervisor.js\"\nimport * as SupervisorPatch from \"./supervisor/patch.js\"\nimport * as tracer from \"./tracer.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const fiberStarted = metric.counter(\"effect_fiber_started\", { incremental: true })\n/** @internal */\nexport const fiberActive = metric.counter(\"effect_fiber_active\")\n/** @internal */\nexport const fiberSuccesses = metric.counter(\"effect_fiber_successes\", { incremental: true })\n/** @internal */\nexport const fiberFailures = metric.counter(\"effect_fiber_failures\", { incremental: true })\n/** @internal */\nexport const fiberLifetimes = metric.tagged(\n  metric.histogram(\n    \"effect_fiber_lifetimes\",\n    metricBoundaries.exponential({\n      start: 0.5,\n      factor: 2,\n      count: 35\n    })\n  ),\n  \"time_unit\",\n  \"milliseconds\"\n)\n\n/** @internal */\ntype EvaluationSignal =\n  | EvaluationSignalContinue\n  | EvaluationSignalDone\n  | EvaluationSignalYieldNow\n\n/** @internal */\nconst EvaluationSignalContinue = \"Continue\" as const\n\n/** @internal */\ntype EvaluationSignalContinue = typeof EvaluationSignalContinue\n\n/** @internal */\nconst EvaluationSignalDone = \"Done\" as const\n\n/** @internal */\ntype EvaluationSignalDone = typeof EvaluationSignalDone\n\n/** @internal */\nconst EvaluationSignalYieldNow = \"Yield\" as const\n\n/** @internal */\ntype EvaluationSignalYieldNow = typeof EvaluationSignalYieldNow\n\nconst runtimeFiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst absurd = (_: never): never => {\n  throw new Error(\n    `BUG: FiberRuntime - ${\n      Inspectable.toStringUnknown(_)\n    } - please report an issue at https://github.com/Effect-TS/effect/issues`\n  )\n}\n\nconst YieldedOp = Symbol.for(\"effect/internal/fiberRuntime/YieldedOp\")\ntype YieldedOp = typeof YieldedOp\nconst yieldedOpChannel: {\n  currentOp: core.Primitive | null\n} = globalValue(\"effect/internal/fiberRuntime/yieldedOpChannel\", () => ({\n  currentOp: null\n}))\n\nconst contOpSuccess = {\n  [OpCodes.OP_ON_SUCCESS]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccess,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i1(value))\n  },\n  [\"OnStep\"]: (\n    _: FiberRuntime<any, any>,\n    _cont: core.OnStep,\n    value: unknown\n  ) => {\n    return core.exitSucceed(core.exitSucceed(value))\n  },\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccessAndFailure,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i2(value))\n  },\n  [OpCodes.OP_REVERT_FLAGS]: (\n    self: FiberRuntime<any, any>,\n    cont: core.RevertFlags,\n    value: unknown\n  ) => {\n    self.patchRuntimeFlags(self._runtimeFlags, cont.patch)\n    if (_runtimeFlags.interruptible(self._runtimeFlags) && self.isInterrupted()) {\n      return core.exitFailCause(self.getInterruptedCause())\n    } else {\n      return core.exitSucceed(value)\n    }\n  },\n  [OpCodes.OP_WHILE]: (\n    self: FiberRuntime<any, any>,\n    cont: core.While,\n    value: unknown\n  ) => {\n    internalCall(() => cont.effect_instruction_i2(value))\n    if (internalCall(() => cont.effect_instruction_i0())) {\n      self.pushStack(cont)\n      return internalCall(() => cont.effect_instruction_i1())\n    } else {\n      return core.void\n    }\n  }\n}\n\nconst drainQueueWhileRunningTable = {\n  [FiberMessage.OP_INTERRUPT_SIGNAL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_INTERRUPT_SIGNAL }\n  ) => {\n    self.processNewInterruptSignal(message.cause)\n    return _runtimeFlags.interruptible(runtimeFlags) ? core.exitFailCause(message.cause) : cur\n  },\n  [FiberMessage.OP_RESUME]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    _cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage\n  ) => {\n    throw new Error(\"It is illegal to have multiple concurrent run loops in a single fiber\")\n  },\n  [FiberMessage.OP_STATEFUL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_STATEFUL }\n  ) => {\n    message.onFiber(self, FiberStatus.running(runtimeFlags))\n    return cur\n  },\n  [FiberMessage.OP_YIELD_NOW]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_YIELD_NOW }\n  ) => {\n    return core.flatMap(core.yieldNow(), () => cur)\n  }\n}\n\n/**\n * Executes all requests, submitting requests to each data source in parallel.\n */\nconst runBlockedRequests = (self: RequestBlock.RequestBlock) =>\n  core.forEachSequentialDiscard(\n    _RequestBlock.flatten(self),\n    (requestsByRequestResolver) =>\n      forEachConcurrentDiscard(\n        _RequestBlock.sequentialCollectionToChunk(requestsByRequestResolver),\n        ([dataSource, sequential]) => {\n          const map = new Map<Request<any, any>, Entry<any>>()\n          const arr: Array<Array<Entry<any>>> = []\n          for (const block of sequential) {\n            arr.push(Chunk.toReadonlyArray(block) as any)\n            for (const entry of block) {\n              map.set(entry.request as Request<any, any>, entry)\n            }\n          }\n          const flat = arr.flat()\n          return core.fiberRefLocally(\n            invokeWithInterrupt(dataSource.runAll(arr), flat, () =>\n              flat.forEach((entry) => {\n                entry.listeners.interrupted = true\n              })),\n            currentRequestMap,\n            map\n          )\n        },\n        false,\n        false\n      )\n  )\n\n/** @internal */\nexport interface Snapshot {\n  refs: FiberRefs.FiberRefs\n  flags: RuntimeFlags.RuntimeFlags\n}\n\n/** @internal */\nexport class FiberRuntime<in out A, in out E = never> implements Fiber.RuntimeFiber<A, E> {\n  readonly [internalFiber.FiberTypeId] = internalFiber.fiberVariance\n  readonly [internalFiber.RuntimeFiberTypeId] = runtimeFiberVariance\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n\n  private _fiberRefs: FiberRefs.FiberRefs\n  private _fiberId: FiberId.Runtime\n  public _runtimeFlags: RuntimeFlags.RuntimeFlags\n\n  private _queue = new Array<FiberMessage.FiberMessage>()\n  private _children: Set<FiberRuntime<any, any>> | null = null\n  private _observers = new Array<(exit: Exit.Exit<A, E>) => void>()\n  private _running = false\n  private _stack: Array<core.Continuation> = []\n  private _asyncInterruptor: ((effect: Effect.Effect<any, any, any>) => any) | null = null\n  private _asyncBlockingOn: FiberId.FiberId | null = null\n  private _exitValue: Exit.Exit<A, E> | null = null\n  private _steps: Array<Snapshot> = []\n  public _supervisor: Supervisor.Supervisor<any>\n  public _scheduler: Scheduler\n  private _tracer: Tracer.Tracer\n  public currentOpCount: number = 0\n  private isYielding = false\n\n  constructor(\n    fiberId: FiberId.Runtime,\n    fiberRefs0: FiberRefs.FiberRefs,\n    runtimeFlags0: RuntimeFlags.RuntimeFlags\n  ) {\n    this._runtimeFlags = runtimeFlags0\n    this._fiberId = fiberId\n    this._fiberRefs = fiberRefs0\n    this._supervisor = this.getFiberRef(currentSupervisor)\n    this._scheduler = this.getFiberRef(currentScheduler)\n    if (_runtimeFlags.runtimeMetrics(runtimeFlags0)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      fiberStarted.unsafeUpdate(1, tags)\n      fiberActive.unsafeUpdate(1, tags)\n    }\n    this._tracer = Context.get(this.getFiberRef(defaultServices.currentServices), tracer.tracerTag)\n  }\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime {\n    return this._fiberId\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background. This can be called to \"kick off\" execution of a fiber after\n   * it has been created.\n   */\n  resume<A, E>(effect: Effect.Effect<A, E, any>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * The status of the fiber.\n   */\n  get status(): Effect.Effect<FiberStatus.FiberStatus> {\n    return this.ask((_, status) => status)\n  }\n\n  /**\n   * Gets the fiber runtime flags.\n   */\n  get runtimeFlags(): Effect.Effect<RuntimeFlags.RuntimeFlags> {\n    return this.ask((state, status) => {\n      if (FiberStatus.isDone(status)) {\n        return state._runtimeFlags\n      }\n      return status.runtimeFlags\n    })\n  }\n\n  /**\n   * Returns the current `FiberScope` for the fiber.\n   */\n  scope(): fiberScope.FiberScope {\n    return fiberScope.unsafeMake(this)\n  }\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  get children(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return this.ask((fiber) => Array.from(fiber.getChildren()))\n  }\n\n  /**\n   * Gets the fiber's set of children.\n   */\n  getChildren(): Set<FiberRuntime<any, any>> {\n    if (this._children === null) {\n      this._children = new Set()\n    }\n    return this._children\n  }\n\n  /**\n   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`\n   * if the fiber has not been interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getInterruptedCause() {\n    return this.getFiberRef(core.currentInterruptedCause)\n  }\n\n  /**\n   * Retrieves the whole set of fiber refs.\n   */\n  fiberRefs(): Effect.Effect<FiberRefs.FiberRefs> {\n    return this.ask((fiber) => fiber.getFiberRefs())\n  }\n\n  /**\n   * Returns an effect that will contain information computed from the fiber\n   * state and status while running on the fiber.\n   *\n   * This allows the outside world to interact safely with mutable fiber state\n   * without locks or immutable data.\n   */\n  ask<Z>(\n    f: (runtime: FiberRuntime<any, any>, status: FiberStatus.FiberStatus) => Z\n  ): Effect.Effect<Z> {\n    return core.suspend(() => {\n      const deferred = core.deferredUnsafeMake<Z>(this._fiberId)\n      this.tell(\n        FiberMessage.stateful((fiber, status) => {\n          core.deferredUnsafeDone(deferred, core.sync(() => f(fiber, status)))\n        })\n      )\n      return core.deferredAwait(deferred)\n    })\n  }\n\n  /**\n   * Adds a message to be processed by the fiber on the fiber.\n   */\n  tell(message: FiberMessage.FiberMessage): void {\n    this._queue.push(message)\n    if (!this._running) {\n      this._running = true\n      this.drainQueueLaterOnExecutor()\n    }\n  }\n\n  get await(): Effect.Effect<Exit.Exit<A, E>> {\n    return core.async((resume) => {\n      const cb = (exit: Exit.Exit<A, E>) => resume(core.succeed(exit))\n      this.tell(\n        FiberMessage.stateful((fiber, _) => {\n          if (fiber._exitValue !== null) {\n            cb(this._exitValue!)\n          } else {\n            fiber.addObserver(cb)\n          }\n        })\n      )\n      return core.sync(() =>\n        this.tell(\n          FiberMessage.stateful((fiber, _) => {\n            fiber.removeObserver(cb)\n          })\n        )\n      )\n    }, this.id())\n  }\n\n  get inheritAll(): Effect.Effect<void> {\n    return core.withFiberRuntime((parentFiber, parentStatus) => {\n      const parentFiberId = parentFiber.id()\n      const parentFiberRefs = parentFiber.getFiberRefs()\n      const parentRuntimeFlags = parentStatus.runtimeFlags\n      const childFiberRefs = this.getFiberRefs()\n      const updatedFiberRefs = fiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs)\n\n      parentFiber.setFiberRefs(updatedFiberRefs)\n\n      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags)\n\n      const patch = pipe(\n        _runtimeFlags.diff(parentRuntimeFlags, updatedRuntimeFlags),\n        // Do not inherit WindDown or Interruption!\n        RuntimeFlagsPatch.exclude(_runtimeFlags.Interruption),\n        RuntimeFlagsPatch.exclude(_runtimeFlags.WindDown)\n      )\n\n      return core.updateRuntimeFlags(patch)\n    })\n  }\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  get poll(): Effect.Effect<Option.Option<Exit.Exit<A, E>>> {\n    return core.sync(() => Option.fromNullable(this._exitValue))\n  }\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null {\n    return this._exitValue\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void> {\n    return core.sync(() => this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId))))\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId) {\n    this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId)))\n  }\n\n  /**\n   * Adds an observer to the list of observers.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    if (this._exitValue !== null) {\n      observer(this._exitValue!)\n    } else {\n      this._observers.push(observer)\n    }\n  }\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    this._observers = this._observers.filter((o) => o !== observer)\n  }\n  /**\n   * Retrieves all fiber refs of the fiber.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs {\n    this.setFiberRef(currentRuntimeFlags, this._runtimeFlags)\n    return this._fiberRefs\n  }\n\n  /**\n   * Deletes the specified fiber ref.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  unsafeDeleteFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): void {\n    this._fiberRefs = fiberRefs.delete_(this._fiberRefs, fiberRef)\n  }\n\n  /**\n   * Retrieves the state of the fiber ref, or else its initial value.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): X {\n    if (this._fiberRefs.locals.has(fiberRef)) {\n      return this._fiberRefs.locals.get(fiberRef)![0][1] as X\n    }\n    return fiberRef.initial\n  }\n\n  /**\n   * Sets the fiber ref to the specified value.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRef<X>(fiberRef: FiberRef.FiberRef<X>, value: X): void {\n    this._fiberRefs = fiberRefs.updateAs(this._fiberRefs, {\n      fiberId: this._fiberId,\n      fiberRef,\n      value\n    })\n    this.refreshRefCache()\n  }\n\n  refreshRefCache() {\n    this._tracer = Context.get(this.getFiberRef(defaultServices.currentServices), tracer.tracerTag)\n    this._supervisor = this.getFiberRef(currentSupervisor)\n    this._scheduler = this.getFiberRef(currentScheduler)\n  }\n\n  /**\n   * Wholesale replaces all fiber refs of this fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRefs(fiberRefs: FiberRefs.FiberRefs): void {\n    this._fiberRefs = fiberRefs\n    this.refreshRefCache()\n  }\n\n  /**\n   * Adds a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addChild(child: FiberRuntime<any, any>) {\n    this.getChildren().add(child)\n  }\n\n  /**\n   * Removes a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeChild(child: FiberRuntime<any, any>) {\n    this.getChildren().delete(child)\n  }\n\n  /**\n   * On the current thread, executes all messages in the fiber's inbox. This\n   * method may return before all work is done, in the event the fiber executes\n   * an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueOnCurrentThread() {\n    let recurse = true\n    while (recurse) {\n      let evaluationSignal: EvaluationSignal = EvaluationSignalContinue\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        while (evaluationSignal === EvaluationSignalContinue) {\n          evaluationSignal = this._queue.length === 0 ?\n            EvaluationSignalDone :\n            this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]!)\n        }\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n      }\n      // Maybe someone added something to the queue between us checking, and us\n      // giving up the drain. If so, we need to restart the draining, but only\n      // if we beat everyone else to the restart:\n      if (this._queue.length > 0 && !this._running) {\n        this._running = true\n        if (evaluationSignal === EvaluationSignalYieldNow) {\n          this.drainQueueLaterOnExecutor()\n          recurse = false\n        } else {\n          recurse = true\n        }\n      } else {\n        recurse = false\n      }\n    }\n  }\n\n  /**\n   * Schedules the execution of all messages in the fiber's inbox.\n   *\n   * This method will return immediately after the scheduling\n   * operation is completed, but potentially before such messages have been\n   * executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueLaterOnExecutor() {\n    this._scheduler.scheduleTask(\n      this.run,\n      this.getFiberRef(core.currentSchedulingPriority)\n    )\n  }\n\n  /**\n   * Drains the fiber's message queue while the fiber is actively running,\n   * returning the next effect to execute, which may be the input effect if no\n   * additional effect needs to be executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueWhileRunning(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur0: Effect.Effect<any, any, any>\n  ) {\n    let cur = cur0\n    while (this._queue.length > 0) {\n      const message = this._queue.splice(0, 1)[0]\n      // @ts-expect-error\n      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags, cur, message)\n    }\n    return cur\n  }\n\n  /**\n   * Determines if the fiber is interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  isInterrupted(): boolean {\n    return !internalCause.isEmpty(this.getFiberRef(core.currentInterruptedCause))\n  }\n\n  /**\n   * Adds an interruptor to the set of interruptors that are interrupting this\n   * fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addInterruptedCause(cause: Cause.Cause<never>) {\n    const oldSC = this.getFiberRef(core.currentInterruptedCause)\n    this.setFiberRef(core.currentInterruptedCause, internalCause.sequential(oldSC, cause))\n  }\n\n  /**\n   * Processes a new incoming interrupt signal.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  processNewInterruptSignal(cause: Cause.Cause<never>): void {\n    this.addInterruptedCause(cause)\n    this.sendInterruptSignalToAllChildren()\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  sendInterruptSignalToAllChildren(): boolean {\n    if (this._children === null || this._children.size === 0) {\n      return false\n    }\n    let told = false\n    for (const child of this._children) {\n      child.tell(FiberMessage.interruptSignal(internalCause.interrupt(this.id())))\n      told = true\n    }\n    return told\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  interruptAllChildren() {\n    if (this.sendInterruptSignalToAllChildren()) {\n      const it = this._children!.values()\n      this._children = null\n      let isDone = false\n      const body = () => {\n        const next = it.next()\n        if (!next.done) {\n          return core.asVoid(next.value.await)\n        } else {\n          return core.sync(() => {\n            isDone = true\n          })\n        }\n      }\n      return core.whileLoop({\n        while: () => !isDone,\n        body,\n        step: () => {\n          //\n        }\n      })\n    }\n    return null\n  }\n\n  reportExitValue(exit: Exit.Exit<A, E>) {\n    if (_runtimeFlags.runtimeMetrics(this._runtimeFlags)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      const startTimeMillis = this.id().startTimeMillis\n      const endTimeMillis = Date.now()\n      fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags)\n      fiberActive.unsafeUpdate(-1, tags)\n      switch (exit._tag) {\n        case OpCodes.OP_SUCCESS: {\n          fiberSuccesses.unsafeUpdate(1, tags)\n          break\n        }\n        case OpCodes.OP_FAILURE: {\n          fiberFailures.unsafeUpdate(1, tags)\n          break\n        }\n      }\n    }\n    if (exit._tag === \"Failure\") {\n      const level = this.getFiberRef(core.currentUnhandledErrorLogLevel)\n      if (!internalCause.isInterruptedOnly(exit.cause) && level._tag === \"Some\") {\n        this.log(\"Fiber terminated with an unhandled error\", exit.cause, level)\n      }\n    }\n  }\n\n  setExitValue(exit: Exit.Exit<A, E>) {\n    this._exitValue = exit\n    this.reportExitValue(exit)\n    for (let i = this._observers.length - 1; i >= 0; i--) {\n      this._observers[i](exit)\n    }\n  }\n\n  getLoggers() {\n    return this.getFiberRef(currentLoggers)\n  }\n\n  log(\n    message: unknown,\n    cause: Cause.Cause<any>,\n    overrideLogLevel: Option.Option<LogLevel.LogLevel>\n  ): void {\n    const logLevel = Option.isSome(overrideLogLevel) ?\n      overrideLogLevel.value :\n      this.getFiberRef(core.currentLogLevel)\n    const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel)\n    if (LogLevel.greaterThan(minimumLogLevel, logLevel)) {\n      return\n    }\n    const spans = this.getFiberRef(core.currentLogSpan)\n    const annotations = this.getFiberRef(core.currentLogAnnotations)\n    const loggers = this.getLoggers()\n    const contextMap = this.getFiberRefs()\n    if (HashSet.size(loggers) > 0) {\n      const clockService = Context.get(this.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      const date = new Date(clockService.unsafeCurrentTimeMillis())\n      for (const logger of loggers) {\n        logger.log({\n          fiberId: this.id(),\n          logLevel,\n          message,\n          cause,\n          context: contextMap,\n          spans,\n          annotations,\n          date\n        })\n      }\n    }\n  }\n\n  /**\n   * Evaluates a single message on the current thread, while the fiber is\n   * suspended. This method should only be called while evaluation of the\n   * fiber's effect is suspended due to an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateMessageWhileSuspended(message: FiberMessage.FiberMessage): EvaluationSignal {\n    switch (message._tag) {\n      case FiberMessage.OP_YIELD_NOW: {\n        return EvaluationSignalYieldNow\n      }\n      case FiberMessage.OP_INTERRUPT_SIGNAL: {\n        this.processNewInterruptSignal(message.cause)\n        if (this._asyncInterruptor !== null) {\n          this._asyncInterruptor(core.exitFailCause(message.cause))\n          this._asyncInterruptor = null\n        }\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_RESUME: {\n        this._asyncInterruptor = null\n        this._asyncBlockingOn = null\n        this.evaluateEffect(message.effect)\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_STATEFUL: {\n        message.onFiber(\n          this,\n          this._exitValue !== null ?\n            FiberStatus.done :\n            FiberStatus.suspended(this._runtimeFlags, this._asyncBlockingOn!)\n        )\n        return EvaluationSignalContinue\n      }\n      default: {\n        return absurd(message)\n      }\n    }\n  }\n\n  /**\n   * Evaluates an effect until completion, potentially asynchronously.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateEffect(effect0: Effect.Effect<any, any, any>) {\n    this._supervisor.onResume(this)\n    try {\n      let effect: Effect.Effect<any, any, any> | null =\n        _runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted() ?\n          core.exitFailCause(this.getInterruptedCause()) :\n          effect0\n      while (effect !== null) {\n        const eff: Effect.Effect<any, any, any> = effect\n        const exit = this.runLoop(eff)\n        if (exit === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          yieldedOpChannel.currentOp = null\n          if (op._op === OpCodes.OP_YIELD) {\n            if (_runtimeFlags.cooperativeYielding(this._runtimeFlags)) {\n              this.tell(FiberMessage.yieldNow())\n              this.tell(FiberMessage.resume(core.exitVoid))\n              effect = null\n            } else {\n              effect = core.exitVoid\n            }\n          } else if (op._op === OpCodes.OP_ASYNC) {\n            // Terminate this evaluation, async resumption will continue evaluation:\n            effect = null\n          }\n        } else {\n          this._runtimeFlags = pipe(this._runtimeFlags, _runtimeFlags.enable(_runtimeFlags.WindDown))\n          const interruption = this.interruptAllChildren()\n          if (interruption !== null) {\n            effect = core.flatMap(interruption, () => exit)\n          } else {\n            if (this._queue.length === 0) {\n              // No more messages to process, so we will allow the fiber to end life:\n              this.setExitValue(exit)\n            } else {\n              // There are messages, possibly added by the final op executed by\n              // the fiber. To be safe, we should execute those now before we\n              // allow the fiber to end life:\n              this.tell(FiberMessage.resume(exit))\n            }\n            effect = null\n          }\n        }\n      }\n    } finally {\n      this._supervisor.onSuspend(this)\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on the current\n   * thread. This can be called to \"kick off\" execution of a fiber after it has\n   * been created, in hopes that the effect can be executed synchronously.\n   *\n   * This is not the normal way of starting a fiber, but it is useful when the\n   * express goal of executing the fiber is to synchronously produce its exit.\n   */\n  start<R>(effect: Effect.Effect<A, E, R>): void {\n    if (!this._running) {\n      this._running = true\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        this.evaluateEffect(effect)\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n        // Because we're special casing `start`, we have to be responsible\n        // for spinning up the fiber if there were new messages added to\n        // the queue between the completion of the effect and the transition\n        // to the not running state.\n        if (this._queue.length > 0) {\n          this.drainQueueLaterOnExecutor()\n        }\n      }\n    } else {\n      this.tell(FiberMessage.resume(effect))\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background, and on the correct thread pool. This can be called to \"kick\n   * off\" execution of a fiber after it has been created, in hopes that the\n   * effect can be executed synchronously.\n   */\n  startFork<R>(effect: Effect.Effect<A, E, R>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * Takes the current runtime flags, patches them to return the new runtime\n   * flags, and then makes any changes necessary to fiber state based on the\n   * specified patch.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  patchRuntimeFlags(oldRuntimeFlags: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) {\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, patch)\n    ;(globalThis as any)[internalFiber.currentFiberURI] = this\n    this._runtimeFlags = newRuntimeFlags\n    return newRuntimeFlags\n  }\n\n  /**\n   * Initiates an asynchronous operation, by building a callback that will\n   * resume execution, and then feeding that callback to the registration\n   * function, handling error cases and repeated resumptions appropriately.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  initiateAsync(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    asyncRegister: (resume: (effect: Effect.Effect<any, any, any>) => void) => void\n  ) {\n    let alreadyCalled = false\n    const callback = (effect: Effect.Effect<any, any, any>) => {\n      if (!alreadyCalled) {\n        alreadyCalled = true\n        this.tell(FiberMessage.resume(effect))\n      }\n    }\n    if (_runtimeFlags.interruptible(runtimeFlags)) {\n      this._asyncInterruptor = callback\n    }\n    try {\n      asyncRegister(callback)\n    } catch (e) {\n      callback(core.failCause(internalCause.die(e)))\n    }\n  }\n\n  pushStack(cont: core.Continuation) {\n    this._stack.push(cont)\n    if (cont._op === \"OnStep\") {\n      this._steps.push({ refs: this.getFiberRefs(), flags: this._runtimeFlags })\n    }\n  }\n\n  popStack() {\n    const item = this._stack.pop()\n    if (item) {\n      if (item._op === \"OnStep\") {\n        this._steps.pop()\n      }\n      return item\n    }\n    return\n  }\n\n  getNextSuccessCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_FAILURE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  getNextFailCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_SUCCESS && frame._op !== OpCodes.OP_WHILE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  [OpCodes.OP_TAG](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    return core.map(\n      core.fiberRefGet(core.currentContext),\n      (context) => Context.unsafeGet(context, op as unknown as Context.Tag<any, any>)\n    )\n  }\n\n  [\"Left\"](op: core.Primitive & { _op: \"Left\" }) {\n    return core.fail(op.left)\n  }\n\n  [\"None\"](_: core.Primitive & { _op: \"None\" }) {\n    return core.fail(new core.NoSuchElementException())\n  }\n\n  [\"Right\"](op: core.Primitive & { _op: \"Right\" }) {\n    return core.exitSucceed(op.right)\n  }\n\n  [\"Some\"](op: core.Primitive & { _op: \"Some\" }) {\n    return core.exitSucceed(op.value)\n  }\n\n  [\"Micro\"](op: Micro.Micro<any, any, never> & { _op: \"Micro\" }) {\n    return core.unsafeAsync<any, any>((microResume) => {\n      const env = Micro.envUnsafeMakeEmpty().pipe(\n        Micro.envSet(Micro.currentContext, this.getFiberRef(core.currentContext))\n      )\n      let resume = microResume\n      op[Micro.runSymbol](env, (result) => {\n        if (result._tag === \"Right\") {\n          return resume(core.exitSucceed(result.right))\n        }\n        switch (result.left._tag) {\n          case \"Interrupt\": {\n            return resume(core.exitFailCause(internalCause.interrupt(FiberId.none)))\n          }\n          case \"Fail\": {\n            return resume(core.fail(result.left.error))\n          }\n          case \"Die\": {\n            return resume(core.die(result.left.defect))\n          }\n        }\n      })\n      return core.async<void>((abortResume) => {\n        resume = (_: any) => {\n          abortResume(core.void)\n        }\n        Micro.envGet(env, Micro.currentAbortController).abort()\n      })\n    })\n  }\n\n  [OpCodes.OP_SYNC](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    const value = internalCall(() => op.effect_instruction_i0())\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, value)\n    } else {\n      yieldedOpChannel.currentOp = core.exitSucceed(value) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_SUCCESS }) {\n    const oldCur = op\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0)\n    } else {\n      yieldedOpChannel.currentOp = oldCur\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_FAILURE](op: core.Primitive & { _op: OpCodes.OP_FAILURE }) {\n    const cause = op.effect_instruction_i0\n    const cont = this.getNextFailCont()\n    if (cont !== undefined) {\n      switch (cont._op) {\n        case OpCodes.OP_ON_FAILURE:\n        case OpCodes.OP_ON_SUCCESS_AND_FAILURE: {\n          if (!(_runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted())) {\n            return internalCall(() => cont.effect_instruction_i1(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case \"OnStep\": {\n          if (!(_runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted())) {\n            return core.exitSucceed(core.exitFailCause(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case OpCodes.OP_REVERT_FLAGS: {\n          this.patchRuntimeFlags(this._runtimeFlags, cont.patch)\n          if (_runtimeFlags.interruptible(this._runtimeFlags) && this.isInterrupted()) {\n            return core.exitFailCause(internalCause.sequential(cause, this.getInterruptedCause()))\n          } else {\n            return core.exitFailCause(cause)\n          }\n        }\n        default: {\n          absurd(cont)\n        }\n      }\n    } else {\n      yieldedOpChannel.currentOp = core.exitFailCause(cause) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_WITH_RUNTIME](op: core.Primitive & { _op: OpCodes.OP_WITH_RUNTIME }) {\n    return internalCall(() =>\n      op.effect_instruction_i0(\n        this as FiberRuntime<unknown, unknown>,\n        FiberStatus.running(this._runtimeFlags) as FiberStatus.Running\n      )\n    )\n  }\n\n  [\"Blocked\"](op: core.Primitive & { _op: \"Blocked\" }) {\n    const refs = this.getFiberRefs()\n    const flags = this._runtimeFlags\n    if (this._steps.length > 0) {\n      const frames: Array<core.Continuation> = []\n      const snap = this._steps[this._steps.length - 1]\n      let frame = this.popStack()\n      while (frame && frame._op !== \"OnStep\") {\n        frames.push(frame)\n        frame = this.popStack()\n      }\n      this.setFiberRefs(snap.refs)\n      this._runtimeFlags = snap.flags\n      const patchRefs = FiberRefsPatch.diff(snap.refs, refs)\n      const patchFlags = _runtimeFlags.diff(snap.flags, flags)\n      return core.exitSucceed(core.blocked(\n        op.effect_instruction_i0,\n        core.withFiberRuntime<unknown, unknown>((newFiber) => {\n          while (frames.length > 0) {\n            newFiber.pushStack(frames.pop()!)\n          }\n          newFiber.setFiberRefs(\n            FiberRefsPatch.patch(newFiber.id(), newFiber.getFiberRefs())(patchRefs)\n          )\n          newFiber._runtimeFlags = _runtimeFlags.patch(patchFlags)(newFiber._runtimeFlags)\n          return op.effect_instruction_i1\n        })\n      ))\n    }\n    return core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        forkDaemon(core.runRequestBlock(op.effect_instruction_i0)),\n        () => restore(op.effect_instruction_i1)\n      )\n    )\n  }\n\n  [\"RunBlocked\"](op: core.Primitive & { _op: \"RunBlocked\" }) {\n    return runBlockedRequests(op.effect_instruction_i0)\n  }\n\n  [OpCodes.OP_UPDATE_RUNTIME_FLAGS](op: core.Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }) {\n    const updateFlags = op.effect_instruction_i0\n    const oldRuntimeFlags = this._runtimeFlags\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, updateFlags)\n    // One more chance to short circuit: if we're immediately going\n    // to interrupt. Interruption will cause immediate reversion of\n    // the flag, so as long as we \"peek ahead\", there's no need to\n    // set them to begin with.\n    if (_runtimeFlags.interruptible(newRuntimeFlags) && this.isInterrupted()) {\n      return core.exitFailCause(this.getInterruptedCause())\n    } else {\n      // Impossible to short circuit, so record the changes\n      this.patchRuntimeFlags(this._runtimeFlags, updateFlags)\n      if (op.effect_instruction_i1) {\n        // Since we updated the flags, we need to revert them\n        const revertFlags = _runtimeFlags.diff(newRuntimeFlags, oldRuntimeFlags)\n        this.pushStack(new core.RevertFlags(revertFlags, op))\n        return internalCall(() => op.effect_instruction_i1!(oldRuntimeFlags))\n      } else {\n        return core.exitVoid\n      }\n    }\n  }\n\n  [OpCodes.OP_ON_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [\"OnStep\"](op: core.Primitive & { _op: \"OnStep\" }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS_AND_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ASYNC](op: core.Primitive & { _op: OpCodes.OP_ASYNC }) {\n    this._asyncBlockingOn = op.effect_instruction_i1\n    this.initiateAsync(this._runtimeFlags, op.effect_instruction_i0)\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_YIELD](op: core.Primitive & { op: OpCodes.OP_YIELD }) {\n    this.isYielding = false\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_WHILE](op: core.Primitive & { _op: OpCodes.OP_WHILE }) {\n    const check = op.effect_instruction_i0\n    const body = op.effect_instruction_i1\n    if (check()) {\n      this.pushStack(op)\n      return body()\n    } else {\n      return core.exitVoid\n    }\n  }\n\n  [OpCodes.OP_COMMIT](op: core.Primitive & { _op: OpCodes.OP_COMMIT }) {\n    return internalCall(() => op.commit())\n  }\n\n  /**\n   * The main run-loop for evaluating effects.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  runLoop(effect0: Effect.Effect<any, any, any>): Exit.Exit<any, any> | YieldedOp {\n    let cur: Effect.Effect<any, any, any> | YieldedOp = effect0\n    this.currentOpCount = 0\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if ((this._runtimeFlags & OpSupervision) !== 0) {\n        this._supervisor.onEffect(this, cur)\n      }\n      if (this._queue.length > 0) {\n        cur = this.drainQueueWhileRunning(this._runtimeFlags, cur)\n      }\n      if (!this.isYielding) {\n        this.currentOpCount += 1\n        const shouldYield = this._scheduler.shouldYield(this)\n        if (shouldYield !== false) {\n          this.isYielding = true\n          this.currentOpCount = 0\n          const oldCur = cur\n          cur = core.flatMap(core.yieldNow({ priority: shouldYield }), () => oldCur)\n        }\n      }\n      try {\n        if (!(\"_op\" in cur) || !((cur as core.Primitive)._op in this)) {\n          // @ts-expect-error\n          absurd(cur)\n        }\n\n        // @ts-expect-error\n        cur = this._tracer.context(\n          () => {\n            if (version.getCurrentVersion() !== (cur as core.Primitive)[EffectTypeId]._V) {\n              return core.dieMessage(\n                `Cannot execute an Effect versioned ${\n                  (cur as core.Primitive)[EffectTypeId]._V\n                } with a Runtime of version ${version.getCurrentVersion()}`\n              )\n            }\n            // @ts-expect-error\n            return this[(cur as core.Primitive)._op](cur as core.Primitive)\n          },\n          this\n        )\n\n        if (cur === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          if (\n            op._op === OpCodes.OP_YIELD ||\n            op._op === OpCodes.OP_ASYNC\n          ) {\n            return YieldedOp\n          }\n\n          yieldedOpChannel.currentOp = null\n          return (\n              op._op === OpCodes.OP_SUCCESS ||\n              op._op === OpCodes.OP_FAILURE\n            ) ?\n            op as unknown as Exit.Exit<A, E> :\n            core.exitFailCause(internalCause.die(op))\n        }\n      } catch (e) {\n        if (core.isEffectError(e)) {\n          cur = core.exitFailCause(e.cause)\n        } else if (core.isInterruptedException(e)) {\n          cur = core.exitFailCause(\n            internalCause.sequential(internalCause.die(e), internalCause.interrupt(FiberId.none))\n          )\n        } else {\n          cur = core.die(e)\n        }\n      }\n    }\n  }\n\n  run = () => {\n    this.drainQueueOnCurrentThread()\n  }\n}\n\n// circular with Logger\n\n/** @internal */\nexport const currentMinimumLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  \"effect/FiberRef/currentMinimumLogLevel\",\n  () => core.fiberRefUnsafeMake<LogLevel.LogLevel>(LogLevel.fromLiteral(\"Info\"))\n)\n\n/** @internal */\nexport const loggerWithConsoleLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.log(self.log(opts))\n  })\n\n/** @internal */\nexport const loggerWithConsoleError = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.error(self.log(opts))\n  })\n\n/** @internal */\nexport const defaultLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/defaultLogger\"),\n  () => loggerWithConsoleLog(internalLogger.stringLogger)\n)\n\n/** @internal */\nexport const jsonLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/jsonLogger\"),\n  () => loggerWithConsoleLog(internalLogger.jsonLogger)\n)\n\n/** @internal */\nexport const logFmtLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/logFmtLogger\"),\n  () => loggerWithConsoleLog(internalLogger.logfmtLogger)\n)\n\n/** @internal */\nexport const prettyLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/prettyLogger\"),\n  () => internalLogger.prettyLogger()\n)\n\n/** @internal */\nexport const structuredLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/structuredLogger\"),\n  () => loggerWithConsoleLog(internalLogger.structuredLogger)\n)\n\n/** @internal */\nexport const tracerLogger = globalValue(\n  Symbol.for(\"effect/Logger/tracerLogger\"),\n  () =>\n    internalLogger.makeLogger<unknown, void>(({\n      annotations,\n      cause,\n      context,\n      fiberId,\n      logLevel,\n      message\n    }) => {\n      const span = Option.flatMap(fiberRefs.get(context, core.currentContext), Context.getOption(tracer.spanTag))\n      const clockService = Option.map(\n        fiberRefs.get(context, defaultServices.currentServices),\n        (_) => Context.get(_, clock.clockTag)\n      )\n      if (span._tag === \"None\" || span.value._tag === \"ExternalSpan\" || clockService._tag === \"None\") {\n        return\n      }\n\n      const attributes = Object.fromEntries(HashMap.map(annotations, Inspectable.toStringUnknown))\n      attributes[\"effect.fiberId\"] = FiberId.threadName(fiberId)\n      attributes[\"effect.logLevel\"] = logLevel.label\n\n      if (cause !== null && cause._tag !== \"Empty\") {\n        attributes[\"effect.cause\"] = internalCause.pretty(cause)\n      }\n\n      span.value.event(\n        String(message),\n        clockService.value.unsafeCurrentTimeNanos(),\n        attributes\n      )\n    })\n)\n\n/** @internal */\nexport const loggerWithSpanAnnotations = <Message, Output>(self: Logger<Message, Output>): Logger<Message, Output> =>\n  internalLogger.mapInputOptions(self, (options: Logger.Options<Message>) => {\n    const span = Option.flatMap(fiberRefs.get(options.context, core.currentContext), Context.getOption(tracer.spanTag))\n    if (span._tag === \"None\") {\n      return options\n    }\n    return {\n      ...options,\n      annotations: pipe(\n        options.annotations,\n        HashMap.set(\"effect.traceId\", span.value.traceId as unknown),\n        HashMap.set(\"effect.spanId\", span.value.spanId as unknown),\n        span.value._tag === \"Span\" ? HashMap.set(\"effect.spanName\", span.value.name as unknown) : identity\n      )\n    }\n  })\n\n/** @internal */\nexport const currentLoggers: FiberRef.FiberRef<\n  HashSet.HashSet<Logger<unknown, any>>\n> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLoggers\"),\n  () => core.fiberRefUnsafeMakeHashSet(HashSet.make(defaultLogger, tracerLogger))\n)\n\n/** @internal */\nexport const batchedLogger = dual<\n  <Output, R>(\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => <Message>(\n    self: Logger<Message, Output>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>,\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>\n>(3, <Message, Output, R>(\n  self: Logger<Message, Output>,\n  window: Duration.DurationInput,\n  f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n): Effect.Effect<Logger<Message, void>, never, Scope.Scope | R> =>\n  core.flatMap(scope, (scope) => {\n    let buffer: Array<Output> = []\n    const flush = core.suspend(() => {\n      if (buffer.length === 0) {\n        return core.void\n      }\n      const arr = buffer\n      buffer = []\n      return f(arr)\n    })\n\n    return core.uninterruptibleMask((restore) =>\n      pipe(\n        internalEffect.sleep(window),\n        core.zipRight(flush),\n        internalEffect.forever,\n        restore,\n        forkDaemon,\n        core.flatMap((fiber) => core.scopeAddFinalizer(scope, core.interruptFiber(fiber))),\n        core.zipRight(addFinalizer(() => flush)),\n        core.as(\n          internalLogger.makeLogger((options) => {\n            buffer.push(self.log(options))\n          })\n        )\n      )\n    )\n  }))\n\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect.Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect.Effect<void, never, Scope.Scope>\n} = function() {\n  if (typeof arguments[0] === \"string\") {\n    return fiberRefLocallyScopedWith(\n      core.currentLogAnnotations,\n      HashMap.set(arguments[0], arguments[1])\n    )\n  }\n  const entries = Object.entries(arguments[0])\n  return fiberRefLocallyScopedWith(\n    core.currentLogAnnotations,\n    HashMap.mutate((annotations) => {\n      for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i]\n        HashMap.set(annotations, key, value)\n      }\n      return annotations\n    })\n  )\n}\n\n// circular with Effect\n\n/* @internal */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R | Scope.Scope>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R | Scope.Scope>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  core.uninterruptible(\n    core.tap(acquire, (a) => addFinalizer((exit) => release(a, exit)))\n  ))\n\n/* @internal */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, Scope.Scope | R2 | R>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  ensuring(\n    acquire,\n    addFinalizer((exit) => release(exit))\n  ))\n\n/* @internal */\nexport const addFinalizer = <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R>\n): Effect.Effect<void, never, R | Scope.Scope> =>\n  core.withFiberRuntime(\n    (runtime) => {\n      const acquireRefs = runtime.getFiberRefs()\n      const acquireFlags = runtime._runtimeFlags\n      return core.flatMap(scope, (scope) =>\n        core.scopeAddFinalizerExit(scope, (exit) =>\n          core.withFiberRuntime((runtimeFinalizer) => {\n            const preRefs = runtimeFinalizer.getFiberRefs()\n            const preFlags = runtimeFinalizer._runtimeFlags\n            const patchRefs = FiberRefsPatch.diff(preRefs, acquireRefs)\n            const patchFlags = _runtimeFlags.diff(preFlags, acquireFlags)\n            const inverseRefs = FiberRefsPatch.diff(acquireRefs, preRefs)\n            runtimeFinalizer.setFiberRefs(\n              FiberRefsPatch.patch(patchRefs, runtimeFinalizer.id(), acquireRefs)\n            )\n\n            return ensuring(\n              core.withRuntimeFlags(finalizer(exit) as Effect.Effect<X>, patchFlags),\n              core.sync(() => {\n                runtimeFinalizer.setFiberRefs(\n                  FiberRefsPatch.patch(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs())\n                )\n              })\n            )\n          })))\n    }\n  )\n\n/* @internal */\nexport const daemonChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const forkScope = core.fiberRefLocally(core.currentForkScopeOverride, Option.some(fiberScope.globalScope))\n  return forkScope(self)\n}\n\n/** @internal */\nconst _existsParFound = Symbol.for(\"effect/Effect/existsPar/found\")\n\n/* @internal */\nexport const exists: {\n  <A, E, R>(f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }): Effect.Effect<boolean, E, R>\n} = dual(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () => core.suspend(() => existsLoop(elements[Symbol.iterator](), 0, f)),\n      () =>\n        core.matchEffect(\n          forEach(\n            elements,\n            (a, i) => core.if_(f(a, i), { onTrue: () => core.fail(_existsParFound), onFalse: () => core.void }),\n            options\n          ),\n          {\n            onFailure: (e) => e === _existsParFound ? core.succeed(true) : core.fail(e),\n            onSuccess: () => core.succeed(false)\n          }\n        )\n    )\n)\n\nconst existsLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  if (next.done) {\n    return core.succeed(false)\n  }\n  return pipe(core.flatMap(\n    f(next.value, index),\n    (b) => b ? core.succeed(b) : existsLoop(iterator, index + 1, f)\n  ))\n}\n\n/* @internal */\nexport const filter = dual<\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n  }) => Effect.Effect<Array<A>, E, R>\n>(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n  }) => {\n    const predicate = options?.negate ? (a: A, i: number) => core.map(f(a, i), Boolean.not) : f\n    return concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        core.suspend(() =>\n          RA.fromIterable(elements).reduceRight(\n            (effect, a, i) =>\n              core.zipWith(\n                effect,\n                core.suspend(() => predicate(a, i)),\n                (list, b) => b ? [a, ...list] : list\n              ),\n            core.sync(() => new Array<A>()) as Effect.Effect<Array<A>, E, R>\n          )\n        ),\n      () =>\n        core.map(\n          forEach(\n            elements,\n            (a, i) => core.map(predicate(a, i), (b) => (b ? Option.some(a) : Option.none())),\n            options\n          ),\n          RA.getSomes\n        )\n    )\n  }\n)\n\n// === all\n\nconst allResolveInput = (\n  input: Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>\n): [Iterable<Effect.Effect<any, any, any>>, Option.Option<(as: ReadonlyArray<any>) => any>] => {\n  if (Array.isArray(input) || Predicate.isIterable(input)) {\n    return [input, Option.none()]\n  }\n  const keys = Object.keys(input)\n  const size = keys.length\n  return [\n    keys.map((k) => input[k]),\n    Option.some((values: ReadonlyArray<any>) => {\n      const res = {}\n      for (let i = 0; i < size; i++) {\n        ;(res as any)[keys[i]] = values[i]\n      }\n      return res\n    })\n  ]\n}\n\nconst allValidate = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<unknown, never, Either.Either<unknown, unknown>>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n  return core.flatMap(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) => {\n      const none = Option.none()\n      const size = eithers.length\n      const errors: Array<unknown> = new Array(size)\n      const successes: Array<unknown> = new Array(size)\n      let errored = false\n      for (let i = 0; i < size; i++) {\n        const either = eithers[i] as Either.Either<unknown, unknown>\n        if (either._tag === \"Left\") {\n          errors[i] = Option.some(either.left)\n          errored = true\n        } else {\n          successes[i] = either.right\n          errors[i] = none\n        }\n      }\n      if (errored) {\n        return reconcile._tag === \"Some\" ?\n          core.fail(reconcile.value(errors)) :\n          core.fail(errors)\n      } else if (options?.discard) {\n        return core.void\n      }\n      return reconcile._tag === \"Some\" ?\n        core.succeed(reconcile.value(successes)) :\n        core.succeed(successes)\n    }\n  )\n}\n\nconst allEither = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<unknown, never, Either.Either<unknown, unknown>>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n\n  if (options?.discard) {\n    return forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      discard: true\n    })\n  }\n\n  return core.map(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) =>\n      reconcile._tag === \"Some\" ?\n        reconcile.value(eithers) :\n        eithers\n  )\n}\n\n/* @internal */\nexport const all = <\n  const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(\n  arg: Arg,\n  options?: O\n): Effect.All.Return<Arg, O> => {\n  const [effects, reconcile] = allResolveInput(arg)\n\n  if (options?.mode === \"validate\") {\n    return allValidate(effects, reconcile, options) as any\n  } else if (options?.mode === \"either\") {\n    return allEither(effects, reconcile, options) as any\n  }\n\n  return options?.discard !== true && reconcile._tag === \"Some\"\n    ? core.map(\n      forEach(effects, identity, options as any),\n      reconcile.value\n    ) as any\n    : forEach(effects, identity, options as any) as any\n}\n\n/* @internal */\nexport const allWith = <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(options?: O) =>\n<const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>>(\n  arg: Arg\n): Effect.All.Return<Arg, O> => all(arg, options)\n\n/* @internal */\nexport const allSuccesses = <Eff extends Effect.Effect<any, any, any>>(\n  elements: Iterable<Eff>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n): Effect.Effect<Array<Effect.Effect.Success<Eff>>, never, Effect.Effect.Context<Eff>> =>\n  core.map(\n    all(RA.fromIterable(elements).map(core.exit), options),\n    RA.filterMap((exit) => core.exitIsSuccess(exit) ? Option.some(exit.effect_instruction_i0) : Option.none())\n  )\n\n/* @internal */\nexport const replicate = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Array<Effect.Effect<A, E, R>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Array<Effect.Effect<A, E, R>>\n>(2, (self, n) => Array.from({ length: n }, () => self))\n\n/* @internal */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n} = dual(\n  (args) => core.isEffect(args[0]),\n  (self, n, options) => all(replicate(self, n), options)\n)\n\n/* @internal */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect.Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(\n    self: RA.NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect.Effect<RA.NonEmptyArray<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect.Effect<void, E, R>\n} = dual((args) => Predicate.isIterable(args[0]), <A, R, E, B>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n  }\n) =>\n  core.withFiberRuntime<A | void, E, R>((r) => {\n    const isRequestBatchingEnabled = options?.batching === true ||\n      (options?.batching === \"inherit\" && r.getFiberRef(core.currentRequestBatching))\n\n    if (options?.discard) {\n      return concurrency.match(\n        options.concurrency,\n        () =>\n          finalizersMask(ExecutionStrategy.sequential)((restore) =>\n            isRequestBatchingEnabled\n              ? forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), true, false, 1)\n              : core.forEachSequentialDiscard(self, (a, i) => restore(f(a, i)))\n          ),\n        () =>\n          finalizersMask(ExecutionStrategy.parallel)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false)\n          ),\n        (n) =>\n          finalizersMask(ExecutionStrategy.parallelN(n))((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false, n)\n          )\n      )\n    }\n\n    return concurrency.match(\n      options?.concurrency,\n      () =>\n        finalizersMask(ExecutionStrategy.sequential)((restore) =>\n          isRequestBatchingEnabled\n            ? forEachParN(self, 1, (a, i) => restore(f(a, i)), true)\n            : core.forEachSequential(self, (a, i) => restore(f(a, i)))\n        ),\n      () =>\n        finalizersMask(ExecutionStrategy.parallel)((restore) =>\n          forEachParUnbounded(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        ),\n      (n) =>\n        finalizersMask(ExecutionStrategy.parallelN(n))((restore) =>\n          forEachParN(self, n, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        )\n    )\n  }))\n\n/* @internal */\nexport const forEachParUnbounded = <A, B, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.flatMap(f(a, i), (b) => core.sync(() => array[i] = b))\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false), core.succeed(array))\n  })\n\n/** @internal */\nexport const forEachConcurrentDiscard = <A, X, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<X, E, R>,\n  batching: boolean,\n  processAll: boolean,\n  n?: number\n): Effect.Effect<void, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.transplant((graft) =>\n      core.withFiberRuntime((parent) => {\n        let todos = Array.from(self).reverse()\n        let target = todos.length\n        if (target === 0) {\n          return core.void\n        }\n        let counter = 0\n        let interrupted = false\n        const fibersCount = n ? Math.min(todos.length, n) : todos.length\n        const fibers = new Set<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const results = new Array()\n        const interruptAll = () =>\n          fibers.forEach((fiber) => {\n            fiber._scheduler.scheduleTask(() => {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }, 0)\n          })\n        const startOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const joinOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const residual = new Array<core.Blocked>()\n        const collectExits = () => {\n          const exits: Array<Exit.Exit<any, E>> = results\n            .filter(({ exit }) => exit._tag === \"Failure\")\n            .sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1)\n            .map(({ exit }) => exit)\n          if (exits.length === 0) {\n            exits.push(core.exitVoid)\n          }\n          return exits\n        }\n        const runFiber = <A, E, R>(eff: Effect.Effect<A, E, R>, interruptImmediately = false) => {\n          const runnable = core.uninterruptible(graft(eff))\n          const fiber = unsafeForkUnstarted(\n            runnable,\n            parent,\n            parent._runtimeFlags,\n            fiberScope.globalScope\n          )\n          parent._scheduler.scheduleTask(() => {\n            if (interruptImmediately) {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }\n            fiber.resume(runnable)\n          }, 0)\n          return fiber\n        }\n        const onInterruptSignal = () => {\n          if (!processAll) {\n            target -= todos.length\n            todos = []\n          }\n          interrupted = true\n          interruptAll()\n        }\n        const stepOrExit = batching ? core.step : core.exit\n        const processingFiber = runFiber(\n          core.async<any, any, any>((resume) => {\n            const pushResult = <X, E>(res: Exit.Exit<X, E> | Effect.Blocked<X, E>, index: number) => {\n              if (res._op === \"Blocked\") {\n                residual.push(res as core.Blocked)\n              } else {\n                results.push({ index, exit: res })\n                if (res._op === \"Failure\" && !interrupted) {\n                  onInterruptSignal()\n                }\n              }\n            }\n            const next = () => {\n              if (todos.length > 0) {\n                const a = todos.pop()!\n                let index = counter++\n                const returnNextElement = () => {\n                  const a = todos.pop()!\n                  index = counter++\n                  return core.flatMap(core.yieldNow(), () =>\n                    core.flatMap(\n                      stepOrExit(restore(f(a, index))),\n                      onRes\n                    ))\n                }\n                const onRes = (\n                  res: Exit.Exit<X, E> | Effect.Blocked<X, E>\n                ): Effect.Effect<Exit.Exit<X, E> | Effect.Blocked<X, E>, never, R> => {\n                  if (todos.length > 0) {\n                    pushResult(res, index)\n                    if (todos.length > 0) {\n                      return returnNextElement()\n                    }\n                  }\n                  return core.succeed(res)\n                }\n                const todo = core.flatMap(\n                  stepOrExit(restore(f(a, index))),\n                  onRes\n                )\n                const fiber = runFiber(todo)\n                startOrder.push(fiber)\n                fibers.add(fiber)\n                if (interrupted) {\n                  fiber._scheduler.scheduleTask(() => {\n                    fiber.unsafeInterruptAsFork(parent.id())\n                  }, 0)\n                }\n                fiber.addObserver((wrapped) => {\n                  let exit: Exit.Exit<any, any> | core.Blocked\n                  if (wrapped._op === \"Failure\") {\n                    exit = wrapped\n                  } else {\n                    exit = wrapped.effect_instruction_i0 as any\n                  }\n                  joinOrder.push(fiber)\n                  fibers.delete(fiber)\n                  pushResult(exit, index)\n                  if (results.length === target) {\n                    resume(core.succeed(Option.getOrElse(\n                      core.exitCollectAll(collectExits(), { parallel: true }),\n                      () => core.exitVoid\n                    )))\n                  } else if (residual.length + results.length === target) {\n                    const requests = residual.map((blocked) => blocked.effect_instruction_i0).reduce(_RequestBlock.par)\n                    resume(core.succeed(core.blocked(\n                      requests,\n                      forEachConcurrentDiscard(\n                        [\n                          Option.getOrElse(\n                            core.exitCollectAll(collectExits(), { parallel: true }),\n                            () => core.exitVoid\n                          ),\n                          ...residual.map((blocked) => blocked.effect_instruction_i1)\n                        ],\n                        (i) => i,\n                        batching,\n                        true,\n                        n\n                      )\n                    )))\n                  } else {\n                    next()\n                  }\n                })\n              }\n            }\n            for (let i = 0; i < fibersCount; i++) {\n              next()\n            }\n          })\n        )\n        return core.asVoid(\n          core.onExit(\n            core.flatten(restore(internalFiber.join(processingFiber))),\n            core.exitMatch({\n              onFailure: () => {\n                onInterruptSignal()\n                const target = residual.length + 1\n                const concurrency = Math.min(typeof n === \"number\" ? n : residual.length, residual.length)\n                const toPop = Array.from(residual)\n                return core.async<any, any>((cb) => {\n                  const exits: Array<Exit.Exit<any, any>> = []\n                  let count = 0\n                  let index = 0\n                  const check = (index: number, hitNext: boolean) => (exit: Exit.Exit<any, any>) => {\n                    exits[index] = exit\n                    count++\n                    if (count === target) {\n                      cb(Option.getOrThrow(core.exitCollectAll(exits, { parallel: true })))\n                    }\n                    if (toPop.length > 0 && hitNext) {\n                      next()\n                    }\n                  }\n                  const next = () => {\n                    runFiber(toPop.pop()!, true).addObserver(check(index, true))\n                    index++\n                  }\n                  processingFiber.addObserver(check(index, false))\n                  index++\n                  for (let i = 0; i < concurrency; i++) {\n                    next()\n                  }\n                }) as any\n              },\n              onSuccess: () => core.forEachSequential(joinOrder, (f) => f.inheritAll)\n            })\n          )\n        )\n      })\n    )\n  )\n\n/* @internal */\nexport const forEachParN = <A, B, E, R>(\n  self: Iterable<A>,\n  n: number,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.map(f(a, i), (b) => array[i] = b)\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false, n), core.succeed(array))\n  })\n\n/* @internal */\nexport const fork = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((state, status) => core.succeed(unsafeFork(self, state, status.runtimeFlags)))\n\n/* @internal */\nexport const forkDaemon = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  forkWithScopeOverride(self, fiberScope.globalScope)\n\n/* @internal */\nexport const forkWithErrorHandler = dual<\n  <E, X>(\n    handler: (e: E) => Effect.Effect<X>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    handler: (e: E) => Effect.Effect<X>\n  ) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(2, (self, handler) =>\n  fork(core.onError(self, (cause) => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return handler(either.left)\n      case \"Right\":\n        return core.failCause(either.right)\n    }\n  })))\n\n/** @internal */\nexport const unsafeFork = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  childFiber.resume(effect)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeForkUnstarted = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeMakeChildFiber = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childId = FiberId.unsafeMake()\n  const parentFiberRefs = parentFiber.getFiberRefs()\n  const childFiberRefs = fiberRefs.forkAs(parentFiberRefs, childId)\n  const childFiber = new FiberRuntime<A, E>(childId, childFiberRefs, parentRuntimeFlags)\n  const childContext = fiberRefs.getOrDefault(\n    childFiberRefs,\n    core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>\n  )\n  const supervisor = childFiber._supervisor\n\n  supervisor.onStart(\n    childContext,\n    effect,\n    Option.some(parentFiber),\n    childFiber\n  )\n\n  childFiber.addObserver((exit) => supervisor.onEnd(exit, childFiber))\n\n  const parentScope = overrideScope !== null ? overrideScope : pipe(\n    parentFiber.getFiberRef(core.currentForkScopeOverride),\n    Option.getOrElse(() => parentFiber.scope())\n  )\n\n  parentScope.add(parentRuntimeFlags, childFiber)\n\n  return childFiber\n}\n\n/* @internal */\nconst forkWithScopeOverride = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  scopeOverride: fiberScope.FiberScope\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((parentFiber, parentStatus) =>\n    core.succeed(unsafeFork(self, parentFiber, parentStatus.runtimeFlags, scopeOverride))\n  )\n\n/* @internal */\nexport const mergeAll = dual<\n  <Z, Eff extends Effect.Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(\n  (args) => Predicate.isFunction(args[2]),\n  <A, E, R, Z>(elements: Iterable<Effect.Effect<A, E, R>>, zero: Z, f: (z: Z, a: A, i: number) => Z, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        RA.fromIterable(elements).reduce(\n          (acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)),\n          core.succeed(zero) as Effect.Effect<Z, E, R>\n        ),\n      () =>\n        core.flatMap(Ref.make(zero), (acc) =>\n          core.flatMap(\n            forEach(\n              elements,\n              (effect, i) => core.flatMap(effect, (a) => Ref.update(acc, (b) => f(b, a, i))),\n              options\n            ),\n            () => Ref.get(acc)\n          ))\n    )\n)\n\n/* @internal */\nexport const partition = dual<\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n>((args) => Predicate.isIterable(args[0]), (elements, f, options) =>\n  pipe(\n    forEach(elements, (a, i) => core.either(f(a, i)), options),\n    core.map((chunk) => core.partitionMap(chunk, identity))\n  ))\n\n/* @internal */\nexport const validateAll = dual<\n  {\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>\n  },\n  {\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n      }\n    ): Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n      }\n    ): Effect.Effect<void, Array<E>, R>\n  }\n>(\n  (args) => Predicate.isIterable(args[0]),\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n  }): Effect.Effect<any, Array<E>, R> =>\n    core.flatMap(\n      partition(elements, f, {\n        concurrency: options?.concurrency,\n        batching: options?.batching\n      }),\n      ([es, bs]) =>\n        es.length === 0\n          ? options?.discard ? core.void : core.succeed(bs)\n          : core.fail(es)\n    )\n)\n\n/* @internal */\nexport const raceAll: <Eff extends Effect.Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> = <\n  A,\n  E,\n  R\n>(all: Iterable<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> => {\n  const list = Chunk.fromIterable(all)\n  if (!Chunk.isNonEmpty(list)) {\n    return core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`))\n  }\n  const self = Chunk.headNonEmpty(list)\n  const effects = Chunk.tailNonEmpty(list)\n  const inheritAll = (res: readonly [A, Fiber.Fiber<A, E>]) =>\n    pipe(\n      internalFiber.inheritAll(res[1]),\n      core.as(res[0])\n    )\n  return pipe(\n    core.deferredMake<readonly [A, Fiber.Fiber<A, E>], E>(),\n    core.flatMap((done) =>\n      pipe(\n        Ref.make(effects.length),\n        core.flatMap((fails) =>\n          core.uninterruptibleMask<A, E, R>((restore) =>\n            pipe(\n              fork(core.interruptible(self)),\n              core.flatMap((head) =>\n                pipe(\n                  effects,\n                  core.forEachSequential((effect) => fork(core.interruptible(effect))),\n                  core.map((fibers) => Chunk.unsafeFromArray(fibers)),\n                  core.map((tail) => pipe(tail, Chunk.prepend(head)) as Chunk.Chunk<Fiber.RuntimeFiber<A, E>>),\n                  core.tap((fibers) =>\n                    pipe(\n                      fibers,\n                      RA.reduce(core.void, (effect, fiber) =>\n                        pipe(\n                          effect,\n                          core.zipRight(\n                            pipe(\n                              internalFiber._await(fiber),\n                              core.flatMap(raceAllArbiter(fibers, fiber, done, fails)),\n                              fork,\n                              core.asVoid\n                            )\n                          )\n                        ))\n                    )\n                  ),\n                  core.flatMap((fibers) =>\n                    pipe(\n                      restore(pipe(Deferred.await(done), core.flatMap(inheritAll))),\n                      core.onInterrupt(() =>\n                        pipe(\n                          fibers,\n                          RA.reduce(\n                            core.void,\n                            (effect, fiber) => pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\nconst raceAllArbiter = <E, E1, A, A1>(\n  fibers: Iterable<Fiber.Fiber<A | A1, E | E1>>,\n  winner: Fiber.Fiber<A | A1, E | E1>,\n  deferred: Deferred.Deferred<readonly [A | A1, Fiber.Fiber<A | A1, E | E1>], E | E1>,\n  fails: Ref.Ref<number>\n) =>\n(exit: Exit.Exit<A | A1, E | E1>): Effect.Effect<void> =>\n  core.exitMatchEffect(exit, {\n    onFailure: (cause) =>\n      pipe(\n        Ref.modify(fails, (fails) =>\n          [\n            fails === 0 ?\n              pipe(core.deferredFailCause(deferred, cause), core.asVoid) :\n              core.void,\n            fails - 1\n          ] as const),\n        core.flatten\n      ),\n    onSuccess: (value): Effect.Effect<void> =>\n      pipe(\n        core.deferredSucceed(deferred, [value, winner] as const),\n        core.flatMap((set) =>\n          set ?\n            pipe(\n              Chunk.fromIterable(fibers),\n              RA.reduce(\n                core.void,\n                (effect, fiber) =>\n                  fiber === winner ?\n                    effect :\n                    pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n              )\n            ) :\n            core.void\n        )\n      )\n  })\n\n/* @internal */\nexport const reduceEffect = dual<\n  <Z, E, R, Eff extends Effect.Effect<any, any, any>>(\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>\n>((args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]), <A, E, R, Z>(\n  elements: Iterable<Effect.Effect<A, E, R>>,\n  zero: Effect.Effect<Z, E, R>,\n  f: (acc: NoInfer<Z>, a: NoInfer<A>, i: number) => Z,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n) =>\n  concurrency.matchSimple(\n    options?.concurrency,\n    () => RA.fromIterable(elements).reduce((acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)), zero),\n    () =>\n      core.suspend(() =>\n        pipe(\n          mergeAll(\n            [zero, ...elements],\n            Option.none<Z>(),\n            (acc, elem, i) => {\n              switch (acc._tag) {\n                case \"None\": {\n                  return Option.some(elem as Z)\n                }\n                case \"Some\": {\n                  return Option.some(f(acc.value, elem as A, i))\n                }\n              }\n            },\n            options\n          ),\n          core.map((option) => {\n            switch (option._tag) {\n              case \"None\": {\n                throw new Error(\n                  \"BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              }\n              case \"Some\": {\n                return option.value\n              }\n            }\n          })\n        )\n      )\n  ))\n\n/* @internal */\nexport const parallelFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return self\n          case \"Sequential\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.parallel),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const parallelNFinalizers =\n  (parallelism: number) => <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self,\n        onSome: (scope) => {\n          if (scope.strategy._tag === \"ParallelN\" && scope.strategy.parallelism === parallelism) {\n            return self\n          }\n          return core.flatMap(\n            core.scopeFork(scope, ExecutionStrategy.parallelN(parallelism)),\n            (inner) => scopeExtend(self, inner)\n          )\n        }\n      })\n    )\n\n/* @internal */\nexport const finalizersMask = (strategy: ExecutionStrategy.ExecutionStrategy) =>\n<A, E, R>(\n  self: (restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self(identity),\n      onSome: (scope) => {\n        const patch = strategy._tag === \"Parallel\"\n          ? parallelFinalizers\n          : strategy._tag === \"Sequential\"\n          ? sequentialFinalizers\n          : parallelNFinalizers(strategy.parallelism)\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return patch(self(parallelFinalizers))\n          case \"Sequential\":\n            return patch(self(sequentialFinalizers))\n          case \"ParallelN\":\n            return patch(self(parallelNFinalizers(scope.strategy.parallelism)))\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const scopeWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | Scope.Scope> => core.flatMap(scopeTag, f)\n\n/* @internal */\nexport const scopedEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>> =>\n  core.flatMap(scopeMake(), (scope) => scopeUse(effect, scope))\n\n/* @internal */\nexport const sequentialFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Sequential\":\n            return self\n          case \"Parallel\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.sequential),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const tagMetricsScoped = (key: string, value: string): Effect.Effect<void, never, Scope.Scope> =>\n  labelMetricsScoped([metricLabel.make(key, value)])\n\n/* @internal */\nexport const labelMetricsScoped = (\n  labels: Iterable<MetricLabel.MetricLabel>\n): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(core.currentMetricLabels, (old) => RA.union(old, labels))\n\n/* @internal */\nexport const using = dual<\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>\n>(2, (self, use) =>\n  core.acquireUseRelease(\n    scopeMake(),\n    (scope) => core.flatMap(scopeExtend(self, scope), use),\n    (scope, exit) => core.scopeClose(scope, exit)\n  ))\n\n/** @internal */\nexport const validate = dual<\n  <B, E1, R1>(\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[A, B], E | E1, R | R1>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<[A, B], E | E1, R | R1>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => validateWith(self, that, (a, b) => [a, b], options)\n)\n\n/** @internal */\nexport const validateWith = dual<\n  <B, E1, R1, A, C>(\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<C, E | E1, R | R1>,\n  <A, E, R, B, E1, R1, C>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<C, E | E1, R | R1>\n>((args) => core.isEffect(args[1]), (self, that, f, options) =>\n  core.flatten(zipWithOptions(\n    core.exit(self),\n    core.exit(that),\n    (ea, eb) =>\n      core.exitZipWith(ea, eb, {\n        onSuccess: f,\n        onFailure: (ca, cb) => options?.concurrent ? internalCause.parallel(ca, cb) : internalCause.sequential(ca, cb)\n      }),\n    options\n  )))\n\n/* @internal */\nexport const validateAllPar = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => Effect.Effect<Array<B>, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, bs]) =>\n      es.length === 0\n        ? core.succeed(bs)\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateAllParDiscard = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<void, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, _]) =>\n      es.length === 0\n        ? core.void\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateFirst = dual<\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) => (elements: Iterable<A>) => Effect.Effect<B, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) => Effect.Effect<B, Array<E>, R>\n>(\n  (args) => Predicate.isIterable(args[0]),\n  (elements, f, options) => core.flip(forEach(elements, (a, i) => core.flip(f(a, i)), options))\n)\n\n/* @internal */\nexport const withClockScoped = <A extends Clock.Clock>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clock.clockTag, value))\n\n/* @internal */\nexport const withRandomScoped = <A extends Random.Random>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(randomTag, value))\n\n/* @internal */\nexport const withConfigProviderScoped = (value: ConfigProvider) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(configProviderTag, value))\n\n/* @internal */\nexport const withEarlyRelease = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Effect.Effect<void>, A], E, R | Scope.Scope> =>\n  scopeWith((parent) =>\n    core.flatMap(core.scopeFork(parent, executionStrategy.sequential), (child) =>\n      pipe(\n        self,\n        scopeExtend(child),\n        core.map((value) => [\n          core.fiberIdWith((fiberId) => core.scopeClose(child, core.exitInterrupt(fiberId))),\n          value\n        ])\n      ))\n  )\n\n/** @internal */\nexport const zipOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>((args) => core.isEffect(args[1]), (\n  self,\n  that,\n  options\n) => zipWithOptions(self, that, (a, b) => [a, b], options))\n\n/** @internal */\nexport const zipLeftOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => {\n    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n      return core.zipLeft(self, that)\n    }\n    return zipWithOptions(self, that, (a, _) => a, options)\n  }\n)\n\n/** @internal */\nexport const zipRightOptions: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect.Effect<A2, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n): Effect.Effect<A2, E2 | E, R2 | R> => {\n  if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n    return core.zipRight(self, that)\n  }\n  return zipWithOptions(self, that, (_, b) => b, options)\n})\n\n/** @internal */\nexport const zipWithOptions: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect.Effect<B, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }\n): Effect.Effect<B, E2 | E, R2 | R> =>\n  core.map(\n    all([self, that], {\n      concurrency: options?.concurrent ? 2 : 1,\n      batching: options?.batching\n    }),\n    ([a, a2]) => f(a, a2)\n  ))\n\n/* @internal */\nexport const withRuntimeFlagsScoped = (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n): Effect.Effect<void, never, Scope.Scope> => {\n  if (update === RuntimeFlagsPatch.empty) {\n    return core.void\n  }\n  return pipe(\n    core.runtimeFlags,\n    core.flatMap((runtimeFlags) => {\n      const updatedRuntimeFlags = _runtimeFlags.patch(runtimeFlags, update)\n      const revertRuntimeFlags = _runtimeFlags.diff(updatedRuntimeFlags, runtimeFlags)\n      return pipe(\n        core.updateRuntimeFlags(update),\n        core.zipRight(addFinalizer(() => core.updateRuntimeFlags(revertRuntimeFlags))),\n        core.asVoid\n      )\n    }),\n    core.uninterruptible\n  )\n}\n\n// circular with Scope\n\n/** @internal */\nexport const scopeTag = Context.GenericTag<Scope.Scope>(\"effect/Scope\")\n\n/* @internal */\nexport const scope: Effect.Effect<Scope.Scope, never, Scope.Scope> = scopeTag\n\ninterface ScopeImpl extends Scope.CloseableScope {\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<Scope.Scope.Finalizer>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: Exit.Exit<unknown, unknown>\n  }\n}\n\nconst scopeUnsafeAddFinalizer = (scope: ScopeImpl, fin: Scope.Scope.Finalizer): void => {\n  if (scope.state._tag === \"Open\") {\n    scope.state.finalizers.add(fin)\n  }\n}\n\nconst ScopeImplProto: Omit<ScopeImpl, \"strategy\" | \"state\"> = {\n  [core.ScopeTypeId]: core.ScopeTypeId,\n  [core.CloseableScopeTypeId]: core.CloseableScopeTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  fork(this: ScopeImpl, strategy) {\n    return core.sync(() => {\n      const newScope = scopeUnsafeMake(strategy)\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      const fin = (exit: Exit.Exit<unknown, unknown>) => newScope.close(exit)\n      this.state.finalizers.add(fin)\n      scopeUnsafeAddFinalizer(newScope, (_) =>\n        core.sync(() => {\n          if (this.state._tag === \"Open\") {\n            this.state.finalizers.delete(fin)\n          }\n        }))\n      return newScope\n    })\n  },\n  close(this: ScopeImpl, exit) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return core.void\n      }\n      const finalizers = Array.from(this.state.finalizers.values()).reverse()\n      this.state = { _tag: \"Closed\", exit }\n      if (finalizers.length === 0) {\n        return core.void\n      }\n      return executionStrategy.isSequential(this.strategy) ?\n        pipe(\n          core.forEachSequential(finalizers, (fin) => core.exit(fin(exit))),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        executionStrategy.isParallel(this.strategy) ?\n        pipe(\n          forEachParUnbounded(finalizers, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        pipe(\n          forEachParN(finalizers, this.strategy.parallelism, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        )\n    })\n  },\n  addFinalizer(this: ScopeImpl, fin) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return fin(this.state.exit)\n      }\n      this.state.finalizers.add(fin)\n      return core.void\n    })\n  }\n}\n\nconst scopeUnsafeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): ScopeImpl => {\n  const scope = Object.create(ScopeImplProto)\n  scope.strategy = strategy\n  scope.state = { _tag: \"Open\", finalizers: new Set() }\n  return scope\n}\n\n/* @internal */\nexport const scopeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): Effect.Effect<Scope.Scope.Closeable> => core.sync(() => scopeUnsafeMake(strategy))\n\n/* @internal */\nexport const scopeExtend = dual<\n  (scope: Scope.Scope) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) =>\n    core.mapInputContext<A, E, R, Exclude<R, Scope.Scope>>(\n      effect,\n      // @ts-expect-error\n      Context.merge(Context.make(scopeTag, scope))\n    )\n)\n\n/* @internal */\nexport const scopeUse = dual<\n  (\n    scope: Scope.Scope.Closeable\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    scope: Scope.Scope.Closeable\n  ) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(2, (effect, scope) =>\n  pipe(\n    effect,\n    scopeExtend(scope),\n    core.onExit((exit) => scope.close(exit))\n  ))\n\n// circular with Supervisor\n\n/** @internal */\nexport const fiberRefUnsafeMakeSupervisor = (\n  initial: Supervisor.Supervisor<any>\n): FiberRef.FiberRef<Supervisor.Supervisor<any>> =>\n  core.fiberRefUnsafeMakePatch(initial, {\n    differ: SupervisorPatch.differ,\n    fork: SupervisorPatch.empty\n  })\n\n// circular with FiberRef\n\n/* @internal */\nexport const fiberRefLocallyScoped = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, value) =>\n  core.asVoid(\n    acquireRelease(\n      core.flatMap(\n        core.fiberRefGet(self),\n        (oldValue) => core.as(core.fiberRefSet(self, value), oldValue)\n      ),\n      (oldValue) => core.fiberRefSet(self, oldValue)\n    )\n  ))\n\n/* @internal */\nexport const fiberRefLocallyScopedWith = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, f) => core.fiberRefGetWith(self, (a) => fiberRefLocallyScoped(self, f(a))))\n\n/* @internal */\nexport const fiberRefMake = <A>(\n  initial: A,\n  options?: {\n    readonly fork?: ((a: A) => A) | undefined\n    readonly join?: ((left: A, right: A) => A) | undefined\n  }\n): Effect.Effect<FiberRef.FiberRef<A>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMake(initial, options))\n\n/* @internal */\nexport const fiberRefMakeWith = <Value>(\n  ref: LazyArg<FiberRef.FiberRef<Value>>\n): Effect.Effect<FiberRef.FiberRef<Value>, never, Scope.Scope> =>\n  acquireRelease(\n    core.tap(core.sync(ref), (ref) => core.fiberRefUpdate(ref, identity)),\n    (fiberRef) => core.fiberRefDelete(fiberRef)\n  )\n\n/* @internal */\nexport const fiberRefMakeContext = <A>(\n  initial: Context.Context<A>\n): Effect.Effect<FiberRef.FiberRef<Context.Context<A>>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeContext(initial))\n\n/* @internal */\nexport const fiberRefMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): Effect.Effect<FiberRef.FiberRef<RuntimeFlags.RuntimeFlags>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeRuntimeFlags(initial))\n\n/** @internal */\nexport const currentRuntimeFlags: FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> = core.fiberRefUnsafeMakeRuntimeFlags(\n  _runtimeFlags.none\n)\n\n/** @internal */\nexport const currentSupervisor: FiberRef.FiberRef<Supervisor.Supervisor<any>> = fiberRefUnsafeMakeSupervisor(\n  supervisor.none\n)\n\n// circular with Fiber\n\n/* @internal */\nexport const fiberAwaitAll = (fibers: Iterable<Fiber.Fiber<any, any>>): Effect.Effect<void> =>\n  core.asVoid(internalFiber._await(fiberAll(fibers)))\n\n/** @internal */\nexport const fiberAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Fiber.Fiber<Array<A>, E> => ({\n  [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n  id: () =>\n    RA.fromIterable(fibers).reduce((id, fiber) => FiberId.combine(id, fiber.id()), FiberId.none as FiberId.FiberId),\n  await: core.exit(forEachParUnbounded(fibers, (fiber) => core.flatten(fiber.await), false)),\n  children: core.map(forEachParUnbounded(fibers, (fiber) => fiber.children, false), RA.flatten),\n  inheritAll: core.forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),\n  poll: core.map(\n    core.forEachSequential(fibers, (fiber) => fiber.poll),\n    RA.reduceRight(\n      Option.some<Exit.Exit<Array<A>, E>>(core.exitSucceed(new Array())),\n      (optionB, optionA) => {\n        switch (optionA._tag) {\n          case \"None\": {\n            return Option.none()\n          }\n          case \"Some\": {\n            switch (optionB._tag) {\n              case \"None\": {\n                return Option.none()\n              }\n              case \"Some\": {\n                return Option.some(\n                  core.exitZipWith(optionA.value, optionB.value, {\n                    onSuccess: (a, chunk) => [a, ...chunk],\n                    onFailure: internalCause.parallel\n                  })\n                )\n              }\n            }\n          }\n        }\n      }\n    )\n  ),\n  interruptAsFork: (fiberId) => core.forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId)),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/* @internal */\nexport const fiberInterruptFork = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> =>\n  core.asVoid(forkDaemon(core.interruptFiber(self)))\n\n/* @internal */\nexport const fiberJoinAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Effect.Effect<Array<A>, E> =>\n  internalFiber.join(fiberAll(fibers))\n\n/* @internal */\nexport const fiberScoped = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Fiber.Fiber<A, E>, never, Scope.Scope> =>\n  acquireRelease(core.succeed(self), core.interruptFiber)\n\n//\n// circular race\n//\n\n/** @internal */\nexport const raceWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, (self, other, options) =>\n  raceFibersWith(self, other, {\n    onSelfWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onSelfDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onSelfDone(exit, loser)\n          }\n        }\n      }),\n    onOtherWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onOtherDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onOtherDone(exit, loser)\n          }\n        }\n      })\n  }))\n\n/** @internal */\nexport const disconnect = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.fiberIdWith((fiberId) =>\n      core.flatMap(forkDaemon(restore(self)), (fiber) =>\n        pipe(\n          restore(internalFiber.join(fiber)),\n          core.onInterrupt(() => pipe(fiber, internalFiber.interruptAsFork(fiberId)))\n        ))\n    )\n  )\n\n/** @internal */\nexport const race = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  (self, that) =>\n    core.fiberIdWith((parentFiberId) =>\n      raceWith(self, that, {\n        onSelfDone: (exit, right) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(right),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause, cause2))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                right,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          }),\n        onOtherDone: (exit, left) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(left),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause2, cause))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                left,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          })\n      })\n    )\n)\n\n/** @internal */\nexport const raceFibersWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  other: Effect.Effect<A1, E1, R1>,\n  options: {\n    readonly onSelfWin: (\n      winner: Fiber.RuntimeFiber<A, E>,\n      loser: Fiber.RuntimeFiber<A1, E1>\n    ) => Effect.Effect<A2, E2, R2>\n    readonly onOtherWin: (\n      winner: Fiber.RuntimeFiber<A1, E1>,\n      loser: Fiber.RuntimeFiber<A, E>\n    ) => Effect.Effect<A3, E3, R3>\n    readonly selfScope?: fiberScope.FiberScope | undefined\n    readonly otherScope?: fiberScope.FiberScope | undefined\n  }\n) =>\n  core.withFiberRuntime((parentFiber, parentStatus) => {\n    const parentRuntimeFlags = parentStatus.runtimeFlags\n    const raceIndicator = MRef.make(true)\n    const leftFiber: FiberRuntime<A, E> = unsafeMakeChildFiber(\n      self,\n      parentFiber,\n      parentRuntimeFlags,\n      options.selfScope\n    )\n    const rightFiber: FiberRuntime<A1, E1> = unsafeMakeChildFiber(\n      other,\n      parentFiber,\n      parentRuntimeFlags,\n      options.otherScope\n    )\n    return core.async((cb) => {\n      leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb))\n      rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb))\n      leftFiber.startFork(self)\n      rightFiber.startFork(other)\n    }, FiberId.combine(leftFiber.id(), rightFiber.id()))\n  }))\n\nconst completeRace = <A2, A3, E2, E3, R, R1, R2, R3>(\n  winner: Fiber.RuntimeFiber<any, any>,\n  loser: Fiber.RuntimeFiber<any, any>,\n  cont: (winner: Fiber.RuntimeFiber<any, any>, loser: Fiber.RuntimeFiber<any, any>) => Effect.Effect<any, any, any>,\n  ab: MRef.MutableRef<boolean>,\n  cb: (_: Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>) => void\n): void => {\n  if (MRef.compareAndSet(true, false)(ab)) {\n    cb(cont(winner, loser))\n  }\n}\n\n/** @internal */\nexport const ensuring: {\n  <X, R1>(\n    finalizer: Effect.Effect<X, never, R1>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R> =>\n    core.uninterruptibleMask((restore) =>\n      core.matchCauseEffect(restore(self), {\n        onFailure: (cause1) =>\n          core.matchCauseEffect(finalizer, {\n            onFailure: (cause2) => core.failCause(internalCause.sequential(cause1, cause2)),\n            onSuccess: () => core.failCause(cause1)\n          }),\n        onSuccess: (a) => core.as(finalizer, a)\n      })\n    )\n)\n\n/** @internal */\nexport const invokeWithInterrupt: <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) => Effect.Effect<void, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) =>\n  core.fiberIdWith((id) =>\n    core.flatMap(\n      core.flatMap(\n        forkDaemon(core.interruptible(self)),\n        (processing) =>\n          core.async<void, E>((cb) => {\n            const counts = entries.map((_) => _.listeners.count)\n            const checkDone = () => {\n              if (counts.every((count) => count === 0)) {\n                if (\n                  entries.every((_) => {\n                    if (_.result.state.current._tag === \"Pending\") {\n                      return true\n                    } else if (\n                      _.result.state.current._tag === \"Done\" &&\n                      core.exitIsExit(_.result.state.current.effect) &&\n                      _.result.state.current.effect._tag === \"Failure\" &&\n                      internalCause.isInterrupted(_.result.state.current.effect.cause)\n                    ) {\n                      return true\n                    } else {\n                      return false\n                    }\n                  })\n                ) {\n                  cleanup.forEach((f) => f())\n                  onInterrupt?.()\n                  cb(core.interruptFiber(processing))\n                }\n              }\n            }\n            processing.addObserver((exit) => {\n              cleanup.forEach((f) => f())\n              cb(exit)\n            })\n            const cleanup = entries.map((r, i) => {\n              const observer = (count: number) => {\n                counts[i] = count\n                checkDone()\n              }\n              r.listeners.addObserver(observer)\n              return () => r.listeners.removeObserver(observer)\n            })\n            checkDone()\n            return core.sync(() => {\n              cleanup.forEach((f) => f())\n            })\n          })\n      ),\n      () =>\n        core.suspend(() => {\n          const residual = entries.flatMap((entry) => {\n            if (!entry.state.completed) {\n              return [entry]\n            }\n            return []\n          })\n          return core.forEachSequentialDiscard(\n            residual,\n            (entry) => complete(entry.request as any, core.exitInterrupt(id))\n          )\n        })\n    )\n  )\n\n/** @internal */\nexport const interruptWhenPossible = dual<\n  (all: Iterable<Request<any, any>>) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<void, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    all: Iterable<Request<any, any>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, all) =>\n  core.fiberRefGetWith(\n    currentRequestMap,\n    (map) =>\n      core.suspend(() => {\n        const entries = RA.fromIterable(all).flatMap((_) => map.has(_) ? [map.get(_)!] : [])\n        return invokeWithInterrupt(self, entries)\n      })\n  ))\n\n// circular Tracer\n\n/** @internal */\nexport const makeSpanScoped = (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n): Effect.Effect<Tracer.Span, never, Scope.Scope> => {\n  options = tracer.addSpanStackTrace(options)\n  return core.uninterruptible(\n    core.withFiberRuntime((fiber) => {\n      const scope = Context.unsafeGet(fiber.getFiberRef(core.currentContext), scopeTag)\n      const span = internalEffect.unsafeMakeSpan(fiber, name, options)\n      const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n      const clock_ = Context.get(fiber.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      return core.as(\n        core.scopeAddFinalizerExit(scope, (exit) => internalEffect.endSpan(span, exit, clock_, timingEnabled)),\n        span\n      )\n    })\n  )\n}\n\n/* @internal */\nexport const withTracerScoped = (value: Tracer.Tracer): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(tracer.tracerTag, value))\n\n/** @internal */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n  }\n  return (self: Effect.Effect<any, any, any>) =>\n    core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n} as any\n", "/**\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/effectable.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const EffectTypeId: Effect.EffectTypeId = internal.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type EffectTypeId = Effect.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const StreamTypeId: Stream.StreamTypeId = internal.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type StreamTypeId = Stream.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const SinkTypeId: Sink.SinkTypeId = internal.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type SinkTypeId = Sink.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const ChannelTypeId: Channel.ChannelTypeId = internal.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type ChannelTypeId = Channel.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface CommitPrimitive {\n  new<A, E = never, R = never>(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const EffectPrototype: Effect.Effect<never> = internal.EffectPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const CommitPrototype: Effect.Effect<never> = internal.CommitPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const StructuralCommitPrototype: Effect.Effect<never> = internal.StructuralCommitPrototype\n\nconst Base: CommitPrimitive = internal.Base\nconst StructuralBase: CommitPrimitive = internal.StructuralBase\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class Class<A, E = never, R = never> extends Base<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class StructuralClass<A, E = never, R = never> extends StructuralBase<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n", "/**\n * @since 2.0.0\n */\nimport type { LazyArg } from \"./Function.js\"\nimport * as internal from \"./internal/executionStrategy.js\"\n\n/**\n * Describes a strategy for evaluating multiple effects, potentially in\n * parallel.\n *\n * There are 3 possible execution strategies: `Sequential`, `Parallel`,\n * `ParallelN`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type ExecutionStrategy = Sequential | Parallel | ParallelN\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential {\n  readonly _tag: \"Sequential\"\n}\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel {\n  readonly _tag: \"Parallel\"\n}\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ParallelN {\n  readonly _tag: \"ParallelN\"\n  readonly parallelism: number\n}\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: ExecutionStrategy = internal.sequential\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: ExecutionStrategy = internal.parallel\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallelN: (parallelism: number) => ExecutionStrategy = internal.parallelN\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequential: (self: ExecutionStrategy) => self is Sequential = internal.isSequential\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallel: (self: ExecutionStrategy) => self is Parallel = internal.isParallel\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelN: (self: ExecutionStrategy) => self is ParallelN = internal.isParallelN\n\n/**\n * Folds over the specified `ExecutionStrategy` using the provided case\n * functions.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <A>(options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }): (self: ExecutionStrategy) => A\n  <A>(self: ExecutionStrategy, options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }): A\n} = internal.match\n", "import type * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport { dual } from \"../Function.js\"\nimport type { LazyArg } from \"../Function.js\"\n\n/** @internal */\nexport const OP_SEQUENTIAL = \"Sequential\" as const\n\n/** @internal */\nexport type OP_SEQUENTIAL = typeof OP_SEQUENTIAL\n\n/** @internal */\nexport const OP_PARALLEL = \"Parallel\" as const\n\n/** @internal */\nexport type OP_PARALLEL = typeof OP_PARALLEL\n\n/** @internal */\nexport const OP_PARALLEL_N = \"ParallelN\" as const\n\n/** @internal */\nexport type OP_PARALLEL_N = typeof OP_PARALLEL_N\n\n/** @internal */\nexport const sequential: ExecutionStrategy.ExecutionStrategy = { _tag: OP_SEQUENTIAL }\n\n/** @internal */\nexport const parallel: ExecutionStrategy.ExecutionStrategy = { _tag: OP_PARALLEL }\n\n/** @internal */\nexport const parallelN = (parallelism: number): ExecutionStrategy.ExecutionStrategy => ({\n  _tag: OP_PARALLEL_N,\n  parallelism\n})\n\n/** @internal */\nexport const isSequential = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.Sequential =>\n  self._tag === OP_SEQUENTIAL\n\n/** @internal */\nexport const isParallel = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.Parallel =>\n  self._tag === OP_PARALLEL\n\n/** @internal */\nexport const isParallelN = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.ParallelN =>\n  self._tag === OP_PARALLEL_N\n\n/** @internal */\nexport const match = dual<\n  <A>(options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }) => (self: ExecutionStrategy.ExecutionStrategy) => A,\n  <A>(\n    self: ExecutionStrategy.ExecutionStrategy,\n    options: {\n      readonly onSequential: LazyArg<A>\n      readonly onParallel: LazyArg<A>\n      readonly onParallelN: (n: number) => A\n    }\n  ) => A\n>(2, (self, options) => {\n  switch (self._tag) {\n    case OP_SEQUENTIAL: {\n      return options.onSequential()\n    }\n    case OP_PARALLEL: {\n      return options.onParallel()\n    }\n    case OP_PARALLEL_N: {\n      return options.onParallelN(self.parallelism)\n    }\n  }\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport * as internal from \"./internal/fiberRefs/patch.js\"\n\n/**\n * A `FiberRefsPatch` captures the changes in `FiberRef` values made by a single\n * fiber as a value. This allows fibers to apply the changes made by a workflow\n * without inheriting all the `FiberRef` values of the fiber that executed the\n * workflow.\n *\n * @since 2.0.0\n * @category models\n */\nexport type FiberRefsPatch = Empty | Add | Remove | Update | AndThen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Empty {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Add {\n  readonly _tag: \"Add\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly value: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Remove {\n  readonly _tag: \"Remove\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Update {\n  readonly _tag: \"Update\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly patch: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface AndThen {\n  readonly _tag: \"AndThen\"\n  readonly first: FiberRefsPatch\n  readonly second: FiberRefsPatch\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: FiberRefsPatch = internal.empty\n\n/**\n * Constructs a patch that describes the changes between the specified\n * collections of `FiberRef`\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const diff: (oldValue: FiberRefs.FiberRefs, newValue: FiberRefs.FiberRefs) => FiberRefsPatch = internal.diff\n\n/**\n * Combines this patch and the specified patch to create a new patch that\n * describes applying the changes from this patch and the specified patch\n * sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  (that: FiberRefsPatch): (self: FiberRefsPatch) => FiberRefsPatch\n  (self: FiberRefsPatch, that: FiberRefsPatch): FiberRefsPatch\n} = internal.combine\n\n/**\n * Applies the changes described by this patch to the specified collection\n * of `FiberRef` values.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const patch: {\n  (fiberId: FiberId.Runtime, oldValue: FiberRefs.FiberRefs): (self: FiberRefsPatch) => FiberRefs.FiberRefs\n  (self: FiberRefsPatch, fiberId: FiberId.Runtime, oldValue: FiberRefs.FiberRefs): FiberRefs.FiberRefs\n} = internal.patch\n", "/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport * as internal from \"./internal/fiberStatus.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberStatusTypeId: unique symbol = internal.FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberStatusTypeId = typeof FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberStatus = Done | Running | Suspended\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done extends Equal.Equal {\n  readonly _tag: \"Done\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Running extends Equal.Equal {\n  readonly _tag: \"Running\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Suspended extends Equal.Equal {\n  readonly _tag: \"Suspended\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n  readonly blockingOn: FiberId.FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: FiberStatus = internal.done\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const running: (runtimeFlags: RuntimeFlags.RuntimeFlags) => FiberStatus = internal.running\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const suspended: (runtimeFlags: RuntimeFlags.RuntimeFlags, blockingOn: FiberId.FiberId) => FiberStatus =\n  internal.suspended\n\n/**\n * Returns `true` if the specified value is a `FiberStatus`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberStatus: (u: unknown) => u is FiberStatus = internal.isFiberStatus\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Done`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: FiberStatus) => self is Done = internal.isDone\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Running`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRunning: (self: FiberStatus) => self is Running = internal.isRunning\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Suspended`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuspended: (self: FiberStatus) => self is Suspended = internal.isSuspended\n", "import * as Equal from \"../Equal.js\"\nimport type { FiberId } from \"../FiberId.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { RuntimeFlags } from \"../RuntimeFlags.js\"\n\nconst FiberStatusSymbolKey = \"effect/FiberStatus\"\n\n/** @internal */\nexport const FiberStatusTypeId: FiberStatus.FiberStatusTypeId = Symbol.for(\n  FiberStatusSymbolKey\n) as FiberStatus.FiberStatusTypeId\n\n/** @internal */\nexport const OP_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_DONE = typeof OP_DONE\n\n/** @internal */\nexport const OP_RUNNING = \"Running\" as const\n\n/** @internal */\nexport type OP_RUNNING = typeof OP_RUNNING\n\n/** @internal */\nexport const OP_SUSPENDED = \"Suspended\" as const\n\n/** @internal */\nexport type OP_SUSPENDED = typeof OP_SUSPENDED\n\nconst DoneHash = Hash.string(`${FiberStatusSymbolKey}-${OP_DONE}`)\n\n/** @internal */\nclass Done implements FiberStatus.Done {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_DONE;\n  [Hash.symbol](): number {\n    return DoneHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberStatus(that) && that._tag === OP_DONE\n  }\n}\n\n/** @internal */\nclass Running implements FiberStatus.Running {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_RUNNING\n  constructor(readonly runtimeFlags: RuntimeFlags) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(FiberStatusSymbolKey),\n      Hash.combine(Hash.hash(this._tag)),\n      Hash.combine(Hash.hash(this.runtimeFlags)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return (\n      isFiberStatus(that) &&\n      that._tag === OP_RUNNING &&\n      this.runtimeFlags === that.runtimeFlags\n    )\n  }\n}\n\n/** @internal */\nclass Suspended implements FiberStatus.Suspended {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_SUSPENDED\n  constructor(\n    readonly runtimeFlags: RuntimeFlags,\n    readonly blockingOn: FiberId\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(FiberStatusSymbolKey),\n      Hash.combine(Hash.hash(this._tag)),\n      Hash.combine(Hash.hash(this.runtimeFlags)),\n      Hash.combine(Hash.hash(this.blockingOn)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return (\n      isFiberStatus(that) &&\n      that._tag === OP_SUSPENDED &&\n      this.runtimeFlags === that.runtimeFlags &&\n      Equal.equals(this.blockingOn, that.blockingOn)\n    )\n  }\n}\n\n/** @internal */\nexport const done: FiberStatus.FiberStatus = new Done()\n\n/** @internal */\nexport const running = (runtimeFlags: RuntimeFlags): FiberStatus.FiberStatus => new Running(runtimeFlags)\n\n/** @internal */\nexport const suspended = (\n  runtimeFlags: RuntimeFlags,\n  blockingOn: FiberId\n): FiberStatus.FiberStatus => new Suspended(runtimeFlags, blockingOn)\n\n/** @internal */\nexport const isFiberStatus = (u: unknown): u is FiberStatus.FiberStatus => hasProperty(u, FiberStatusTypeId)\n\n/** @internal */\nexport const isDone = (self: FiberStatus.FiberStatus): self is FiberStatus.Done => self._tag === OP_DONE\n\n/** @internal */\nexport const isRunning = (self: FiberStatus.FiberStatus): self is FiberStatus.Running => self._tag === OP_RUNNING\n\n/** @internal */\nexport const isSuspended = (self: FiberStatus.FiberStatus): self is FiberStatus.Suspended => self._tag === OP_SUSPENDED\n", "/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */\nimport type { Channel, ChannelTypeId } from \"./Channel.js\"\nimport * as Context from \"./Context.js\"\nimport type { Effect, EffectTypeId, EffectUnify, EffectUnifyIgnore } from \"./Effect.js\"\nimport * as Effectable from \"./Effectable.js\"\nimport * as Either from \"./Either.js\"\nimport { constTrue, constVoid, dual, identity, type LazyArg } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol, toStringUnknown } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport { SingleShotGen } from \"./internal/singleShotGen.js\"\nimport * as Option from \"./Option.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { isIterable, isTagged, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { ReadonlyRecord } from \"./Record.js\"\nimport type { Sink, SinkTypeId } from \"./Sink.js\"\nimport type { Stream, StreamTypeId } from \"./Stream.js\"\nimport type { Concurrency, Covariant, Equals, NoInfer, NotFunction, Simplify } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport { YieldWrap, yieldWrapGet } from \"./Utils.js\"\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Micro\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport const runSymbol: unique symbol = Symbol.for(\"effect/Micro/runSymbol\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport type runSymbol = typeof runSymbol\n\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface Micro<out A, out E = never, out R = never> extends Effect<A, E, R> {\n  readonly [TypeId]: Micro.Variance<A, E, R>\n  readonly [runSymbol]: (env: Env<any>, onExit: (exit: MicroExit<A, E>) => void) => void\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: MicroUnify<this>\n  [Unify.ignoreSymbol]?: MicroUnifyIgnore\n  [Symbol.iterator](): MicroIterator<Micro<A, E, R>>\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnify<A extends { [Unify.typeSymbol]?: any }> extends EffectUnify<A> {\n  Micro?: () => A[Unify.typeSymbol] extends Micro<infer A0, infer E0, infer R0> | infer _ ? Micro<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnifyIgnore extends EffectUnifyIgnore {\n  Effect?: true\n}\n/**\n * @category type lambdas\n * @since 3.4.1\n */\nexport interface MicroTypeLambda extends TypeLambda {\n  readonly type: Micro<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace Micro {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Variance<A, E, R> {\n    _A: Covariant<A>\n    _E: Covariant<E>\n    _R: Covariant<R>\n  }\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Success<T> = T extends Micro<infer _A, infer _E, infer _R> ? _A : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Error<T> = T extends Micro<infer _A, infer _E, infer _R> ? _E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Context<T> = T extends Micro<infer _A, infer _E, infer _R> ? _R : never\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nexport const isMicro = (u: unknown): u is Micro<any, any, any> => typeof u === \"object\" && u !== null && TypeId in u\n\n/**\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface MicroIterator<T extends Micro<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Micro.Success<T>>\n}\n\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const MicroCauseTypeId = Symbol.for(\"effect/Micro/MicroCause\")\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCauseTypeId = typeof MicroCauseTypeId\n\n/**\n * A Micro Cause is a data type that represents the different ways a Micro can fail.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCause<E> = MicroCause.Die | MicroCause.Fail<E> | MicroCause.Interrupt\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport declare namespace MicroCause {\n  /**\n   * @since 3.4.6\n   * @experimental\n   */\n  export type Error<T> = T extends MicroCause.Fail<infer E> ? E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Proto<Tag extends string, E> extends Pipeable, globalThis.Error {\n    readonly [MicroCauseTypeId]: {\n      _E: Covariant<E>\n    }\n    readonly _tag: Tag\n    readonly traces: ReadonlyArray<string>\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Die extends Proto<\"Die\", never> {\n    readonly defect: unknown\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Fail<E> extends Proto<\"Fail\", E> {\n    readonly error: E\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Interrupt extends Proto<\"Interrupt\", never> {}\n}\n\nconst microCauseVariance = {\n  _E: identity\n}\n\nabstract class MicroCauseImpl<Tag extends string, E> extends globalThis.Error implements MicroCause.Proto<Tag, E> {\n  readonly [MicroCauseTypeId]: {\n    _E: Covariant<E>\n  }\n  constructor(\n    readonly _tag: Tag,\n    originalError: unknown,\n    readonly traces: ReadonlyArray<string>\n  ) {\n    const causeName = `MicroCause.${_tag}`\n    let name: string\n    let message: string\n    let stack: string\n    if (originalError instanceof globalThis.Error) {\n      name = `(${causeName}) ${originalError.name}`\n      message = originalError.message as string\n      const messageLines = message.split(\"\\n\").length\n      stack = originalError.stack\n        ? `(${causeName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}`\n        : `${name}: ${message}`\n    } else {\n      name = causeName\n      message = toStringUnknown(originalError, 0)\n      stack = `${name}: ${message}`\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`\n    }\n    super(message)\n    this[MicroCauseTypeId] = microCauseVariance\n    this.name = name\n    this.stack = stack\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toString() {\n    return this.stack\n  }\n  [NodeInspectSymbol]() {\n    return this.stack\n  }\n}\n\nclass FailImpl<E> extends MicroCauseImpl<\"Fail\", E> implements MicroCause.Fail<E> {\n  constructor(readonly error: E, traces: ReadonlyArray<string> = []) {\n    super(\"Fail\", error, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeFail = <E>(error: E, traces: ReadonlyArray<string> = []): MicroCause<E> => new FailImpl(error, traces)\n\nclass DieImpl extends MicroCauseImpl<\"Die\", never> implements MicroCause.Die {\n  constructor(readonly defect: unknown, traces: ReadonlyArray<string> = []) {\n    super(\"Die\", defect, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeDie = (defect: unknown, traces: ReadonlyArray<string> = []): MicroCause<never> =>\n  new DieImpl(defect, traces)\n\nclass InterruptImpl extends MicroCauseImpl<\"Interrupt\", never> implements MicroCause.Interrupt {\n  constructor(traces: ReadonlyArray<string> = []) {\n    super(\"Interrupt\", \"interrupted\", traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeInterrupt = (traces: ReadonlyArray<string> = []): MicroCause<never> => new InterruptImpl(traces)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsFail = <E>(self: MicroCause<E>): self is MicroCause.Fail<E> => self._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsDie = <E>(self: MicroCause<E>): self is MicroCause.Die => self._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsInterrupt = <E>(self: MicroCause<E>): self is MicroCause.Interrupt => self._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeSquash = <E>(self: MicroCause<E>): unknown =>\n  self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeWithTrace: {\n  (trace: string): <E>(self: MicroCause<E>) => MicroCause<E>\n  <E>(self: MicroCause<E>, trace: string): MicroCause<E>\n} = dual(2, <E>(self: MicroCause<E>, trace: string): MicroCause<E> => {\n  const traces = [...self.traces, trace]\n  switch (self._tag) {\n    case \"Die\":\n      return causeDie(self.defect, traces)\n    case \"Interrupt\":\n      return causeInterrupt(traces)\n    case \"Fail\":\n      return causeFail(self.error, traces)\n  }\n})\n\n// ----------------------------------------------------------------------------\n// MicroExit\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport declare namespace MicroExit {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export type Success<A, E = never> = Either.Right<MicroCause<E>, A>\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export type Failure<A, E = never> = Either.Left<MicroCause<E>, A>\n}\n\n/**\n * The MicroExit type is a data type that represents the result of a Micro\n * computation.\n *\n * It uses the `Either` data type to represent the success and failure cases.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport type MicroExit<A, E = never> = MicroExit.Success<A, E> | MicroExit.Failure<A, E>\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitInterrupt: MicroExit<never> = Either.left(causeInterrupt())\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitSucceed: <A>(a: A) => MicroExit<A, never> = Either.right\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFail = <E>(e: E): MicroExit<never, E> => Either.left(causeFail(e))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitDie = (defect: unknown): MicroExit<never> => Either.left(causeDie(defect))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFailCause: <E>(cause: MicroCause<E>) => MicroExit<never, E> = Either.left\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsSuccess: <A, E>(self: MicroExit<A, E>) => self is MicroExit.Success<A, E> = Either.isRight\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFailure: <A, E>(self: MicroExit<A, E>) => self is MicroExit.Failure<A, E> = Either.isLeft\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsInterrupt = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Interrupt, A> =>\n  exitIsFailure(self) && self.left._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFail = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Fail<E>, A> =>\n  exitIsFailure(self) && self.left._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsDie = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Die, A> =>\n  exitIsFailure(self) && self.left._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitVoid: MicroExit<void> = exitSucceed(void 0)\n\n// ----------------------------------------------------------------------------\n// env\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvTypeId = Symbol.for(\"effect/Micro/Env\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport type EnvTypeId = typeof EnvTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport interface Env<R> extends Pipeable {\n  readonly [EnvTypeId]: {\n    _R: Covariant<R>\n  }\n  readonly refs: ReadonlyRecord<string, unknown>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvRefTypeId: unique symbol = Symbol.for(\"effect/Micro/EnvRef\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport type EnvRefTypeId = typeof EnvRefTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport interface EnvRef<A> {\n  readonly [EnvRefTypeId]: EnvRefTypeId\n  readonly key: string\n  readonly initial: A\n}\n\nconst EnvProto = {\n  [EnvTypeId]: {\n    _R: identity\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMake = <R = never>(\n  refs: Record<string, unknown>\n): Env<R> => {\n  const self = Object.create(EnvProto)\n  self.refs = refs\n  return self\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envUnsafeMakeEmpty = (): Env<never> => {\n  const controller = new AbortController()\n  const refs = Object.create(null)\n  refs[currentAbortController.key] = controller\n  refs[currentAbortSignal.key] = controller.signal\n  refs[currentScheduler.key] = new MicroSchedulerDefault()\n  return envMake(refs)\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envGet: {\n  <A>(ref: EnvRef<A>): <R>(self: Env<R>) => A\n  <A, R>(self: Env<R>, ref: EnvRef<A>): A\n} = dual(2, <R, A>(self: Env<R>, ref: EnvRef<A>): A => ref.key in self.refs ? (self.refs[ref.key] as A) : ref.initial)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envSet: {\n  <A>(ref: EnvRef<A>, value: A): <R>(self: Env<R>) => Env<R>\n  <A, R>(self: Env<R>, ref: EnvRef<A>, value: A): Env<R>\n} = dual(3, <R, A>(self: Env<R>, ref: EnvRef<A>, value: A): Env<R> => {\n  const refs = Object.assign(Object.create(null), self.refs)\n  refs[ref.key] = value\n  return envMake(refs)\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMutate: {\n  (f: (map: Record<string, unknown>) => void): <R>(self: Env<R>) => Env<R>\n  <R>(self: Env<R>, f: (map: Record<string, unknown>) => void): Env<R>\n} = dual(\n  2,\n  <R>(self: Env<R>, f: (map: Record<string, unknown>) => ReadonlyRecord<string, unknown>): Env<R> =>\n    envMake(f(Object.assign(Object.create(null), self.refs)))\n)\n\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const service = <I, S>(tag: Context.Tag<I, S>): Micro<S, never, I> =>\n  make(function(env, onExit) {\n    onExit(exitSucceed(Context.get(envGet(env, currentContext) as Context.Context<I>, tag as any) as S))\n  })\n\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const serviceOption = <I, S>(tag: Context.Tag<I, S>): Micro<Option.Option<S>> =>\n  make(function(env, onExit) {\n    onExit(exitSucceed(Context.getOption(envGet(env, currentContext) as Context.Context<I>, tag)))\n  })\n\n/**\n * Retrieve the current value of the given `EnvRef`.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const getEnvRef = <A>(envRef: EnvRef<A>): Micro<A> =>\n  make((env, onExit) => onExit(Either.right(envGet(env, envRef))))\n\n/**\n * Set the value of the given `EnvRef` for the duration of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const locally: {\n  <A>(fiberRef: EnvRef<A>, value: A): <XA, E, R>(self: Micro<XA, E, R>) => Micro<XA, E, R>\n  <XA, E, R, A>(self: Micro<XA, E, R>, fiberRef: EnvRef<A>, value: A): Micro<XA, E, R>\n} = dual(\n  3,\n  <XA, E, R, A>(self: Micro<XA, E, R>, fiberRef: EnvRef<A>, value: A): Micro<XA, E, R> =>\n    make((env, onExit) => self[runSymbol](envSet(env, fiberRef, value), onExit))\n)\n\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const context = <R>(): Micro<Context.Context<R>> => getEnvRef(currentContext) as any\n\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideContext: {\n  <XR>(context: Context.Context<XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, XR>>\n  <A, E, R, XR>(self: Micro<A, E, R>, context: Context.Context<XR>): Micro<A, E, Exclude<R, XR>>\n} = dual(\n  2,\n  <A, E, R, XR>(self: Micro<A, E, R>, provided: Context.Context<XR>): Micro<A, E, Exclude<R, XR>> =>\n    make(function(env, onExit) {\n      const context = envGet(env, currentContext)\n      const nextEnv = envSet(env, currentContext, Context.merge(context, provided))\n      self[runSymbol](nextEnv, onExit)\n    })\n)\n\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideService: {\n  <I, S>(tag: Context.Tag<I, S>, service: S): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, I>>\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>>\n} = dual(\n  3,\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>> =>\n    make(function(env, onExit) {\n      const context = envGet(env, currentContext)\n      const nextEnv = envSet(env, currentContext, Context.add(context, tag, service))\n      self[runSymbol](nextEnv, onExit)\n    })\n)\n\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */\nexport const provideServiceEffect: {\n  <I, S, E2, R2>(\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | E2, Exclude<R, I> | R2>\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2>\n} = dual(\n  3,\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2> => flatMap(acquire, (service) => provideService(self, tag, service))\n)\n\n// ----------------------------------------------------------------------------\n// scheduler\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport interface MicroScheduler {\n  readonly scheduleTask: (task: () => void, priority: number) => void\n  readonly shouldYield: (env: Env<unknown>) => boolean\n  readonly flush: () => void\n}\n\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : (f: () => void) => setTimeout(f, 0)\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport class MicroSchedulerDefault implements MicroScheduler {\n  private tasks: Array<() => void> = []\n  private running = false\n\n  /**\n   * @since 3.5.9\n   */\n  scheduleTask(task: () => void, _priority: number) {\n    this.tasks.push(task)\n    if (!this.running) {\n      this.running = true\n      setImmediate(this.afterScheduled)\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  afterScheduled = () => {\n    this.running = false\n    this.runTasks()\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  runTasks() {\n    const tasks = this.tasks\n    this.tasks = []\n    for (let i = 0, len = tasks.length; i < len; i++) {\n      tasks[i]()\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  shouldYield(_env: Env<unknown>) {\n    return false\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  flush() {\n    while (this.tasks.length > 0) {\n      this.runTasks()\n    }\n  }\n}\n\n// ========================================================================\n// Env refs\n// ========================================================================\n\nconst EnvRefProto = {\n  [EnvRefTypeId]: EnvRefTypeId\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const envRefMake = <A>(key: string, initial: LazyArg<A>): EnvRef<A> =>\n  globalValue(key, () => {\n    const self = Object.create(EnvRefProto)\n    self.key = key\n    self.initial = initial()\n    return self\n  })\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortController: EnvRef<AbortController> = envRefMake(\n  \"effect/Micro/currentAbortController\",\n  () => undefined as any\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortSignal: EnvRef<AbortSignal> = envRefMake(\n  \"effect/Micro/currentAbortSignal\",\n  () => undefined as any\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentContext: EnvRef<Context.Context<never>> = envRefMake(\n  \"effect/Micro/currentContext\",\n  () => Context.empty()\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentConcurrency: EnvRef<\"unbounded\" | number> = envRefMake(\n  \"effect/Micro/currentConcurrency\",\n  () => \"unbounded\"\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentMaxDepthBeforeYield: EnvRef<number> = envRefMake(\n  \"effect/Micro/currentMaxDepthBeforeYield\",\n  () => 2048\n)\n\nconst currentInterruptible: EnvRef<boolean> = envRefMake(\n  \"effect/Micro/currentInterruptible\",\n  () => true\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentScheduler: EnvRef<MicroScheduler> = envRefMake(\n  \"effect/Micro/currentScheduler\",\n  () => new MicroSchedulerDefault()\n)\n\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n */\nexport const withConcurrency: {\n  (concurrency: \"unbounded\" | number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R> =>\n    locally(self, currentConcurrency, concurrency)\n)\n\n// ----------------------------------------------------------------------------\n// constructors\n// ----------------------------------------------------------------------------\n\nconst MicroProto = {\n  ...Effectable.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: {\n    _A: identity,\n    _E: identity,\n    _R: identity\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  }\n}\n\nconst microDepthState = globalValue(\"effect/Micro/microDepthState\", () => ({\n  depth: 0,\n  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial\n}))\n\nconst unsafeMake = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void\n): Micro<A, E, R> => {\n  const self = Object.create(MicroProto)\n  self[runSymbol] = run\n  return self\n}\n\nconst unsafeMakeOptions = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void,\n  checkAbort: boolean\n): Micro<A, E, R> =>\n  unsafeMake(function execute(env, onExit) {\n    if (\n      checkAbort && env.refs[currentInterruptible.key] !== false &&\n      (env.refs[currentAbortSignal.key] as AbortSignal).aborted\n    ) {\n      return onExit(exitInterrupt)\n    }\n    microDepthState.depth++\n    if (microDepthState.depth === 1) {\n      microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield)\n    }\n    const scheduler = env.refs[currentScheduler.key] as MicroScheduler\n    if (microDepthState.depth >= microDepthState.maxDepthBeforeYield || scheduler.shouldYield(env)) {\n      scheduler.scheduleTask(() => execute(env, onExit), 0)\n    } else {\n      try {\n        run(env, onExit)\n      } catch (err) {\n        onExit(exitDie(err))\n      }\n    }\n    microDepthState.depth--\n  })\n\n/**\n * A low-level constructor for creating a `Micro` effect. It takes a function\n * that receives an environment and a callback which should be called with the\n * result of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const make = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void\n): Micro<A, E, R> => unsafeMakeOptions(run, true)\n\n/**\n * Converts a `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExit = <A, E>(self: MicroExit<A, E>): Micro<A, E> =>\n  make(function(_env, onExit) {\n    onExit(self)\n  })\n\n/**\n * Converts a lazy `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExitSync = <A, E>(self: LazyArg<MicroExit<A, E>>): Micro<A, E> =>\n  make(function(_env, onExit) {\n    onExit(self())\n  })\n\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeed = <A>(a: A): Micro<A> => fromExit(exitSucceed(a))\n\n/**\n * Creates a `Micro` effect that will succeed with `Option.Some` of the value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedSome = <A>(a: A): Micro<Option.Option<A>> => succeed(Option.some(a))\n\n/**\n * Creates a `Micro` effect that will succeed with `Option.None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedNone: Micro<Option.Option<never>> = succeed(Option.none())\n\n/**\n * Creates a `Micro` effect that will fail with the specified error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fail = <E>(e: E): Micro<never, E> => fromExit(exitFail(e))\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const failSync = <E>(e: LazyArg<E>): Micro<never, E> =>\n  make(function(_env, onExit) {\n    onExit(exitFail(e()))\n  })\n\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This will result in a `CauseDie`, where the error is not tracked at\n * the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const die = (defect: unknown): Micro<never> => fromExit(exitDie(defect))\n\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCause = <E>(cause: MicroCause<E>): Micro<never, E> => fromExit(exitFailCause(cause))\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCauseSync = <E>(cause: LazyArg<MicroCause<E>>): Micro<never, E> =>\n  fromExitSync(() => exitFailCause(cause()))\n\n/**\n * Creates a `Micro` effect that will succeed with the lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const sync = <A>(evaluate: LazyArg<A>): Micro<A> =>\n  make(function(_env, onExit) {\n    onExit(exitSucceed(evaluate()))\n  })\n\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromOption = <A>(option: Option.Option<A>): Micro<A, NoSuchElementException> =>\n  make(function(_env, onExit) {\n    onExit(option._tag === \"Some\" ? exitSucceed(option.value) : exitFail(new NoSuchElementException({})))\n  })\n\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromEither = <R, L>(either: Either.Either<R, L>): Micro<R, L> =>\n  make(function(_env, onExit) {\n    onExit(either._tag === \"Right\" ? either as MicroExit<R, never> : exitFail(either.left))\n  })\n\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const suspend = <A, E, R>(evaluate: LazyArg<Micro<A, E, R>>): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    evaluate()[runSymbol](env, onExit)\n  })\n\nconst void_: Micro<void> = succeed(void 0)\nexport {\n  /**\n   * A `Micro` effect that will succeed with `void` (`undefined`).\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const async = <A, E = never, R = never>(\n  register: (resume: (effect: Micro<A, E, R>) => void, signal: AbortSignal) => void | Micro<void, never, R>\n): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    let resumed = false\n    const controller = register.length > 1 ? new AbortController() : undefined\n    const signal = envGet(env, currentAbortSignal)\n    let cleanup: Micro<void, never, R> | void = undefined\n    function onAbort() {\n      if (cleanup) {\n        resume(uninterruptible(andThen(cleanup, fromExit(exitInterrupt))))\n      } else {\n        resume(fromExit(exitInterrupt))\n      }\n      if (controller !== undefined) {\n        controller.abort()\n      }\n    }\n    function resume(effect: Micro<A, E, R>) {\n      if (resumed) {\n        return\n      }\n      resumed = true\n      signal.removeEventListener(\"abort\", onAbort)\n      effect[runSymbol](env, onExit)\n    }\n    cleanup = controller === undefined\n      ? (register as any)(resume)\n      : register(resume, controller.signal)\n    if (resumed) return\n    signal.addEventListener(\"abort\", onAbort)\n  })\n\nconst try_ = <A, E>(options: {\n  try: LazyArg<A>\n  catch: (error: unknown) => E\n}): Micro<A, E> =>\n  make(function(_env, onExit) {\n    try {\n      onExit(exitSucceed(options.try()))\n    } catch (err) {\n      onExit(exitFail(options.catch(err)))\n    }\n  })\nexport {\n  /**\n   * The `Micro` equivalent of a try / catch block, which allows you to map\n   * thrown errors to a specific error type.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   * @example\n   * import { Micro } from \"effect\"\n   *\n   * Micro.try({\n   *   try: () => throw new Error(\"boom\"),\n   *   catch: (cause) => new Error(\"caught\", { cause })\n   * })\n   */\n  try_ as try\n}\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will result in a\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const promise = <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Micro<A> =>\n  async<A>(function(resume, signal) {\n    evaluate(signal).then(\n      (a) => resume(succeed(a)),\n      (e) => resume(die(e))\n    )\n  })\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\nexport const tryPromise = <A, E>(options: {\n  readonly try: (signal: AbortSignal) => PromiseLike<A>\n  readonly catch: (error: unknown) => E\n}): Micro<A, E> =>\n  async<A, E>(function(resume, signal) {\n    try {\n      options.try(signal).then(\n        (a) => resume(succeed(a)),\n        (e) => resume(fail(options.catch(e)))\n      )\n    } catch (err) {\n      resume(fail(options.catch(err)))\n    }\n  })\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * You can specify a priority for the task, which will determine when it is\n * executed relative to other tasks.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldWithPriority = (priority: number): Micro<void> =>\n  make(function(env, onExit) {\n    envGet(env, currentScheduler).scheduleTask(() => onExit(exitVoid), priority)\n  })\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldNow: Micro<void> = yieldWithPriority(0)\n\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldFlush: Micro<void> = make(function(env, onExit) {\n  envGet(env, currentScheduler).flush()\n  onExit(exitVoid)\n})\n\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const never: Micro<never> = async<never>(function() {\n  const interval = setInterval(constVoid, 2147483646)\n  return sync(() => clearInterval(interval))\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const gen = <Self, Eff extends YieldWrap<Micro<any, any, any>>, AEff>(\n  ...args:\n    | [self: Self, body: (this: Self) => Generator<Eff, AEff, never>]\n    | [body: () => Generator<Eff, AEff, never>]\n): Micro<\n  AEff,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer E, infer _R>>] ? E : never,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer _E, infer R>>] ? R : never\n> =>\n  make(function(env, onExit) {\n    const iterator: Generator<Eff, AEff, any> = args.length === 1 ? args[0]() : args[1].call(args[0])\n    let running = false\n    let value: any = undefined\n    function run() {\n      running = true\n      try {\n        let shouldContinue = true\n        while (shouldContinue) {\n          const result = iterator.next(value)\n          if (result.done) {\n            return onExit(exitSucceed(result.value))\n          }\n          shouldContinue = false\n          yieldWrapGet(result.value)[runSymbol](env, function(exit) {\n            if (exit._tag === \"Left\") {\n              onExit(exit)\n            } else {\n              shouldContinue = true\n              value = exit.right\n              if (!running) run()\n            }\n          })\n        }\n      } catch (err) {\n        onExit(exitDie(err))\n      }\n      running = false\n    }\n    run()\n  })\n\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatten = <A, E, R, E2, R2>(self: Micro<Micro<A, E, R>, E2, R2>): Micro<A, E | E2, R | R2> =>\n  make(function(env, onExit) {\n    self[runSymbol](\n      env,\n      (exit) => exit._tag === \"Left\" ? onExit(exit as MicroExit<never, E2>) : exit.right[runSymbol](env, onExit)\n    )\n  })\n\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      onExit(exit._tag === \"Left\" ? exit as MicroExit<never, E> : exitSucceed(f(exit.right)))\n    })\n  }))\n\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const as: {\n  <A, B>(value: B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R> => map(self, (_) => value))\n\n/**\n * Wrap the success value of this `Micro` effect in an `Option.Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asSome = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, E, R> => map(self, Option.some)\n\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatMap: {\n  <A, B, E2, R2>(f: (a: A) => Micro<B, E2, R2>): <E, R>(self: Micro<A, E, R>) => Micro<B, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, E>)\n        }\n        f(exit.right)[runSymbol](env, onExit)\n      })\n    })\n)\n\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flip = <A, E, R>(self: Micro<A, E, R>): Micro<E, A, R> =>\n  matchEffect(self, {\n    onFailure: succeed,\n    onSuccess: fail\n  })\n\n/**\n * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n * a single api.\n *\n * It also allows you to pass in a `Micro` effect directly, which will be\n * executed after the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const andThen: {\n  <A, X>(\n    f: (a: A) => X\n  ): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: (a: A) => X\n  ): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: any): Micro<B, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, E>)\n        } else if (envGet(env, currentAbortSignal).aborted) {\n          return onExit(exitInterrupt)\n        }\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(exit.right) : f\n        if (isMicro(value)) {\n          value[runSymbol](env, onExit)\n        } else {\n          onExit(exitSucceed(value))\n        }\n      })\n    })\n)\n\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const tap: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(selfExit) {\n        if (selfExit._tag === \"Left\") {\n          return onExit(selfExit as MicroExit<never, E>)\n        } else if (envGet(env, currentAbortSignal).aborted) {\n          return onExit(exitInterrupt)\n        }\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(selfExit.right) : f\n        if (isMicro(value)) {\n          value[runSymbol](env, function(tapExit) {\n            if (tapExit._tag === \"Left\") {\n              return onExit(tapExit)\n            }\n            onExit(selfExit)\n          })\n        } else {\n          onExit(selfExit)\n        }\n      })\n    })\n)\n\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asVoid = <A, E, R>(self: Micro<A, E, R>): Micro<void, E, R> => map(self, (_) => void 0)\n\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */\nexport const exit = <A, E, R>(self: Micro<A, E, R>): Micro<MicroExit<A, E>, never, R> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      onExit(exitSucceed(exit))\n    })\n  })\n\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const sandbox = <A, E, R>(self: Micro<A, E, R>): Micro<A, MicroCause<E>, R> =>\n  catchAllCause(self, (cause) => fail(cause))\n\nfunction forkSignal(env: Env<any>) {\n  const controller = new AbortController()\n  const parentSignal = envGet(env, currentAbortSignal)\n  function onAbort() {\n    controller.abort()\n    parentSignal.removeEventListener(\"abort\", onAbort)\n  }\n  parentSignal.addEventListener(\"abort\", onAbort)\n  const envWithSignal = envMutate(env, function(refs) {\n    refs[currentAbortController.key] = controller\n    refs[currentAbortSignal.key] = controller.signal\n    return refs\n  })\n  return [envWithSignal, onAbort] as const\n}\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAll = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  make(function(env, onExit) {\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    const effects = Array.from(all)\n    let len = effects.length\n    let index = 0\n    let done = 0\n    let exit: MicroExit<any, any> | undefined = undefined\n    const causes: Array<MicroCause<any>> = []\n    function onDone(exit_: MicroExit<any, any>) {\n      done++\n      if (exit_._tag === \"Right\" && exit === undefined) {\n        len = index\n        exit = exit_\n        onAbort()\n      } else if (exit_._tag === \"Left\") {\n        causes.push(exit_.left)\n      }\n      if (done >= len) {\n        onExit(exit ?? Either.left(causes[0]))\n      }\n    }\n\n    for (; index < len; index++) {\n      effects[index][runSymbol](envWithSignal, onDone)\n    }\n  })\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAllFirst = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  make(function(env, onExit) {\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    const effects = Array.from(all)\n    let len = effects.length\n    let index = 0\n    let done = 0\n    let exit: MicroExit<any, any> | undefined = undefined\n    const causes: Array<MicroCause<any>> = []\n    function onDone(exit_: MicroExit<any, any>) {\n      done++\n      if (exit === undefined) {\n        len = index\n        exit = exit_\n        onAbort()\n      }\n      if (done >= len) {\n        onExit(exit ?? Either.left(causes[0]))\n      }\n    }\n\n    for (; index < len; index++) {\n      effects[index][runSymbol](envWithSignal, onDone)\n    }\n  })\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const race: {\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAll([self, that])\n)\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceFirst: {\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAllFirst([self, that])\n)\n\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nexport const zip: {\n  <A2, E2, R2>(\n    that: Micro<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined }\n      | undefined\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<[A, A2], E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<[A, A2], E | E2, R | R2>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<[A, A2], E | E2, R | R2> => zipWith(self, that, (a, a2) => [a, a2], options))\n\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<B, E2 | E, R2 | R>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<B, E2 | E, R2 | R> => {\n  if (options?.concurrent) {\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    return map(all([self, that], { concurrency: \"unbounded\" }), ([a, a2]) => f(a, a2))\n  }\n  return flatMap(self, (a) => map(that, (a2) => f(a, a2)))\n})\n\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFailCause: {\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<B, E | E2, R>\n  <A, E, R, E2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<A>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => MicroCause<E2>\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : failCause(orFailWith(a))))\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Micro<B, E | E2, R>\n  <A, E, R, E2>(self: Micro<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => E2\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : fail(orFailWith(a))))\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const when: {\n  <E2 = never, R2 = never>(\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E | E2, R | R2>\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2> =>\n    flatMap(isMicro(condition) ? condition : sync(condition), (pass) => pass ? asSome(self) : succeed(Option.none()))\n)\n\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */\nexport const repeatExit: {\n  <A, E>(options: {\n    while: Predicate<MicroExit<A, E>>\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  }): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, options: {\n    while: Predicate<MicroExit<A, E>>\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  }): Micro<A, E, R>\n} = dual(2, <A, E, R>(self: Micro<A, E, R>, options: {\n  while: Predicate<MicroExit<A, E>>\n  times?: number | undefined\n  schedule?: MicroSchedule | undefined\n}): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    const startedAt = options.schedule ? Date.now() : 0\n    let attempt = 0\n    self[runSymbol](env, function loop(exit) {\n      if (options.while !== undefined && !options.while(exit)) {\n        return onExit(exit)\n      } else if (options.times !== undefined && attempt >= options.times) {\n        return onExit(exit)\n      }\n      attempt++\n      let delayEffect = yieldNow\n      if (options.schedule !== undefined) {\n        const elapsed = Date.now() - startedAt\n        const duration = options.schedule(attempt, elapsed)\n        if (Option.isNone(duration)) {\n          return onExit(exit)\n        }\n        delayEffect = sleep(duration.value)\n      }\n      delayEffect[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, never>)\n        }\n        self[runSymbol](env, loop)\n      })\n    })\n  }))\n\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const repeat: {\n  <A, E>(\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<A> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) => exit._tag === \"Right\" && (options?.while === undefined || options.while(exit.right))\n  }))\n\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const forever = <A, E, R>(self: Micro<A, E, R>): Micro<never, E, R> => repeat(self) as any\n\n// ----------------------------------------------------------------------------\n// scheduling\n// ----------------------------------------------------------------------------\n\n/**\n * The `MicroSchedule` type represents a function that can be used to calculate\n * the delay between repeats.\n *\n * The function takes the current attempt number and the elapsed time since the\n * first attempt, and returns the delay for the next attempt. If the function\n * returns `None`, the repetition will stop.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport type MicroSchedule = (attempt: number, elapsed: number) => Option.Option<number>\n\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleRecurs = (n: number): MicroSchedule => (attempt) => attempt <= n ? Option.some(0) : Option.none()\n\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleSpaced = (millis: number): MicroSchedule => () => Option.some(millis)\n\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleExponential = (baseMillis: number, factor = 2): MicroSchedule => (attempt) =>\n  Option.some(Math.pow(factor, attempt) * baseMillis)\n\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleAddDelay: {\n  (f: () => number): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, f: () => number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, f: () => number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => duration + f())\n)\n\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxDelay: {\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => Math.min(duration, max))\n)\n\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxElapsed: {\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    elapsed < max ? self(attempt, elapsed) : Option.none()\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleUnion: {\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2))\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleIntersect: {\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2))\n)\n\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllCause: {\n  <E, B, E2, R2>(\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchCauseIf(self, constTrue, f) as Micro<A | B, E2, R | R2>\n)\n\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchCauseIf: {\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  <E, B, E2, R2>(\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E | E2, R | R2>\n} = dual(3, <A, E, R, B, E2, R2>(\n  self: Micro<A, E, R>,\n  predicate: Predicate<MicroCause<E>>,\n  f: (cause: MicroCause<E>) => Micro<B, E2, R2>\n): Micro<A | B, E | E2, R | R2> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      if (exit._tag === \"Right\" || !predicate(exit.left)) {\n        onExit(exit)\n      } else {\n        f(exit.left)[runSymbol](env, onExit)\n      }\n    })\n  }))\n\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected (`MicroCause.Fail`) errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAll: {\n  <E, B, E2, R2>(\n    f: (e: NoInfer<E>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<E>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchAllCause(self, (cause) => causeIsFail(cause) ? f(cause.error) : failCause(cause))\n)\n\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllDefect: {\n  <E, B, E2, R2>(\n    f: (defect: unknown) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2> =>\n    catchCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapErrorCause: {\n  <E, B, E2, R2>(\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => tapErrorCauseIf(self, constTrue, f)\n)\n\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const tapErrorCauseIf: {\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <E, B, E2, R2>(\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => catchCauseIf(self, refinement, (cause) => andThen(f(cause), failCause(cause)))\n)\n\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapError: {\n  <E, B, E2, R2>(\n    f: (e: NoInfer<E>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsFail, (fail) => f(fail.error))\n)\n\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapDefect: {\n  <E, B, E2, R2>(\n    f: (defect: unknown) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Micro<A2, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E2 | Exclude<E, EB>, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2> =>\n    catchCauseIf(\n      self,\n      (f): f is MicroCause.Fail<E> => causeIsFail(f) && predicate(f.error),\n      (fail) => f(fail.error)\n    )\n)\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchTag: {\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Micro<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = dual(3, <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n  self: Micro<A, E, R>,\n  k: K,\n  f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1> =>\n  catchIf(self, isTagged(k) as Refinement<E, Extract<E, { _tag: K }>>, f) as any)\n\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const mapErrorCause: {\n  <E, E2>(f: (e: MicroCause<E>) => MicroCause<E2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R> =>\n    catchAllCause(self, (cause) => failCause(f(cause)))\n)\n\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R> => catchAll(self, (error) => fail(f(error)))\n)\n\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orDie = <A, E, R>(self: Micro<A, E, R>): Micro<A, never, R> => catchAll(self, die)\n\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orElseSucceed: {\n  <B>(f: LazyArg<B>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | B, never, R>\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R> => catchAll(self, (_) => sync(f))\n)\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignore = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, { onFailure: (_) => void_, onSuccess: (_) => void_ })\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignoreLogged = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, {\n    onFailure: (error) => sync(() => console.error(error)),\n    onSuccess: (_) => void_\n  })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const option = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, never, R> =>\n  match(self, { onFailure: (_) => Option.none(), onSuccess: Option.some })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const either = <A, E, R>(self: Micro<A, E, R>): Micro<Either.Either<A, E>, never, R> =>\n  match(self, { onFailure: Either.left, onSuccess: Either.right })\n\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const retry: {\n  <A, E>(\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<E> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) =>\n      exit._tag === \"Left\" && exit.left._tag === \"Fail\" &&\n      (options?.while === undefined || options.while(exit.left.error))\n  }))\n\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const withTrace: {\n  (name: string): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, name: string): Micro<A, E, R>\n} = function() {\n  const prevLimit = globalThis.Error.stackTraceLimit\n  globalThis.Error.stackTraceLimit = 2\n  const error = new globalThis.Error()\n  globalThis.Error.stackTraceLimit = prevLimit\n  function generate(name: string, cause: MicroCause<any>) {\n    const stack = error.stack\n    if (!stack) {\n      return cause\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\")\n    if (!line) {\n      return cause\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/)\n    return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`)\n  }\n  const f = (name: string) => (self: Micro<any, any, any>) =>\n    unsafeMakeOptions(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        onExit(exit._tag === \"Left\" ? Either.left(generate(name, exit.left)) : exit)\n      })\n    }, false)\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0])\n  }\n  return f(arguments[0])\n} as any\n\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        try {\n          const next = exit._tag === \"Left\" ? options.onFailure(exit.left) : options.onSuccess(exit.right)\n          next[runSymbol](env, onExit)\n        } catch (err) {\n          onExit(exitDie(err))\n        }\n      })\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => sync(() => options.onFailure(cause)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n      onSuccess: options.onSuccess\n    })\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nexport const match: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchEffect(self, {\n      onFailure: (error) => sync(() => options.onFailure(error)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const sleep = (millis: number): Micro<void> =>\n  async(function(resume) {\n    const timeout = setTimeout(function() {\n      resume(void_)\n    }, millis)\n    return sync(() => {\n      return clearTimeout(timeout)\n    })\n  })\n\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const delay: {\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R> => andThen(sleep(millis), self)\n)\n\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOrElse: {\n  <A2, E2, R2>(options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): Micro<A | A2, E | E2, R | R2> =>\n    raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout))\n)\n\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeout: {\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | TimeoutException, R>\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R> =>\n    timeoutOrElse(self, { duration: millis, onTimeout: () => fail(new TimeoutException()) })\n)\n\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E, R>\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R> =>\n    raceFirst(\n      asSome(self),\n      as(interruptible(sleep(millis)), Option.none())\n    )\n)\n\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScopeTypeId: unique symbol = Symbol.for(\"effect/Micro/MicroScope\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport type MicroScopeTypeId = typeof MicroScopeTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport interface MicroScope {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  readonly addFinalizer: (finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>) => Micro<void>\n  readonly fork: Micro<MicroScope.Closeable>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport declare namespace MicroScope {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  export interface Closeable extends MicroScope {\n    readonly close: (exit: MicroExit<any, any>) => Micro<void>\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScope: Context.Tag<MicroScope, MicroScope> = Context.GenericTag<MicroScope>(\"effect/Micro/MicroScope\")\n\nclass MicroScopeImpl implements MicroScope.Closeable {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<(exit: MicroExit<any, any>) => Micro<void>>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: MicroExit<any, any>\n  } = { _tag: \"Open\", finalizers: new Set() }\n\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId\n  }\n\n  unsafeAddFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer)\n    }\n  }\n  addFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer)\n        return void_\n      }\n      return finalizer(this.state.exit)\n    })\n  }\n  unsafeRemoveFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer)\n    }\n  }\n  close(microExit: MicroExit<any, any>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse()\n        this.state = { _tag: \"Closed\", exit: microExit }\n        return flatMap(\n          forEach(finalizers, (finalizer) => exit(finalizer(microExit))),\n          (exits) => asVoid(fromExit(Either.all(exits)))\n        )\n      }\n      return void_\n    })\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new MicroScopeImpl()\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      function fin(exit: MicroExit<any, any>) {\n        return newScope.close(exit)\n      }\n      this.state.finalizers.add(fin)\n      newScope.unsafeAddFinalizer((_) => sync(() => this.unsafeRemoveFinalizer(fin)))\n      return newScope\n    })\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeMake: Micro<MicroScope.Closeable> = sync(() => new MicroScopeImpl())\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeUnsafeMake = (): MicroScope.Closeable => new MicroScopeImpl()\n\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scope: Micro<MicroScope, never, MicroScope> = service(MicroScope)\n\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const provideScope: {\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, MicroScope>>\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>> =>\n    provideService(self, MicroScope, scope)\n)\n\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scoped = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, Exclude<R, MicroScope>> =>\n  suspend(function() {\n    const scope = new MicroScopeImpl()\n    return onExit(provideService(self, MicroScope, scope), (exit) => scope.close(exit))\n  })\n\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireRelease = <A, E, R>(\n  acquire: Micro<A, E, R>,\n  release: (a: A, exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<A, E, R | MicroScope> =>\n  uninterruptible(flatMap(\n    scope,\n    (scope) => tap(acquire, (a) => scope.addFinalizer((exit) => release(a, exit)))\n  ))\n\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const addFinalizer = (\n  finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<void, never, MicroScope> => flatMap(scope, (scope) => scope.addFinalizer(finalizer))\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExit: {\n  <A, E, XE, XR>(\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, constTrue, f)\n)\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExitIf: {\n  <A, E, XE, XR, B extends MicroExit<A, E>>(\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, XE, XR>(\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  3,\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> =>\n    uninterruptibleMask((restore) =>\n      make(function(env, onExit) {\n        restore(self)[runSymbol](env, function(exit) {\n          if (!refinement(exit)) {\n            return onExit(exit)\n          }\n          f(exit)[runSymbol](env, function(finalizerExit) {\n            if (finalizerExit._tag === \"Left\") {\n              return onExit(finalizerExit as MicroExit<never, XE>)\n            }\n            onExit(exit)\n          })\n        })\n      })\n    )\n)\n\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const ensuring: {\n  <XE, XR>(\n    finalizer: Micro<void, XE, XR>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExit(self, (_) => finalizer)\n)\n\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onError: {\n  <A, E, XE, XR>(\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, exitIsFailure, (exit) => f(exit.left))\n)\n\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onInterrupt: {\n  <XE, XR>(\n    finalizer: Micro<void, XE, XR>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExitIf(self, exitIsInterrupt, (_) => finalizer)\n)\n\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireUseRelease = <Resource, E, R, A, E2, R2, E3, R3>(\n  acquire: Micro<Resource, E, R>,\n  use: (a: Resource) => Micro<A, E2, R2>,\n  release: (a: Resource, exit: MicroExit<A, E2>) => Micro<void, E3, R3>\n): Micro<A, E | E2 | E3, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(\n          exit(restore(use(a))),\n          (exit) => andThen(release(a, exit), fromExit(exit))\n        )\n    )\n  )\n\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */\nexport const interrupt: Micro<never> = make(function(env, onExit) {\n  const controller = envGet(env, currentAbortController)\n  controller.abort()\n  onExit(exitInterrupt)\n})\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const uninterruptible = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, R> =>\n  unsafeMakeOptions(function(env, onExit) {\n    const nextEnv = envMutate(env, function(env) {\n      env[currentInterruptible.key] = false\n      env[currentAbortSignal.key] = new AbortController().signal\n      return env\n    })\n    self[runSymbol](nextEnv, onExit)\n  }, false)\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (restore: <A, E, R>(effect: Micro<A, E, R>) => Micro<A, E, R>) => Micro<A, E, R>\n): Micro<A, E, R> =>\n  unsafeMakeOptions((env, onExit) => {\n    const isInterruptible = envGet(env, currentInterruptible)\n    const effect = isInterruptible ? f(interruptible) : f(identity)\n    const nextEnv = isInterruptible ?\n      envMutate(env, function(env) {\n        env[currentInterruptible.key] = false\n        env[currentAbortSignal.key] = new AbortController().signal\n        return env\n      }) :\n      env\n    effect[runSymbol](nextEnv, onExit)\n  }, false)\n\n/**\n * Wrap the given `Micro` effect in an interruptible region, allowing the effect\n * to be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const interruptible = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, R> =>\n  make((env, onExit) => {\n    const isInterruptible = envGet(env, currentInterruptible)\n    let newEnv = env\n    if (!isInterruptible) {\n      const controller = envGet(env, currentAbortController)\n      newEnv = envMutate(env, function(env) {\n        env[currentInterruptible.key] = true\n        env[currentAbortSignal.key] = controller.signal\n        return env\n      })\n    }\n    self[runSymbol](newEnv, onExit)\n  })\n\n// ========================================================================\n// collecting & elements\n// ========================================================================\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace All {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type MicroAny = Micro<any, any, any>\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnIterable<T extends Iterable<MicroAny>, Discard extends boolean> = [T] extends\n    [Iterable<Micro<infer A, infer E, infer R>>] ? Micro<\n      Discard extends true ? void : Array<A>,\n      E,\n      R\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean> = Micro<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : { -readonly [K in keyof T]: T[K] extends Micro<infer _A, infer _E, infer _R> ? _A : never },\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _E\n      : never,\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnObject<T, Discard extends boolean> = [T] extends [{ [K: string]: MicroAny }] ? Micro<\n      Discard extends true ? void :\n        { -readonly [K in keyof T]: [T[K]] extends [Micro<infer _A, infer _E, infer _R>] ? _A : never },\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _E\n        : never,\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _R\n        : never\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Return<\n    Arg extends Iterable<MicroAny> | Record<string, MicroAny>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: boolean | undefined\n    }\n  > = [Arg] extends [ReadonlyArray<MicroAny>] ? ReturnTuple<Arg, IsDiscard<O>>\n    : [Arg] extends [Iterable<MicroAny>] ? ReturnIterable<Arg, IsDiscard<O>>\n    : [Arg] extends [Record<string, MicroAny>] ? ReturnObject<Arg, IsDiscard<O>>\n    : never\n}\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const all = <\n  const Arg extends Iterable<Micro<any, any, any>> | Record<string, Micro<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard?: boolean | undefined\n  }\n>(arg: Arg, options?: O): All.Return<Arg, O> => {\n  if (Array.isArray(arg) || isIterable(arg)) {\n    return (forEach as any)(arg, identity, options)\n  } else if (options?.discard) {\n    return (forEach as any)(Object.values(arg), identity, options)\n  }\n  return suspend(() => {\n    const out: Record<string, unknown> = {}\n    return as(\n      forEach(Object.entries(arg), ([key, effect]) =>\n        map(effect, (value) => {\n          out[key] = value\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  }) as any\n}\n\n/**\n * For each element of the provided iterable, run the effect and collect the results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run in\n * parallel. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const forEach: {\n  <A, B, E, R>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard?: false | undefined\n  }): Micro<Array<B>, E, R>\n  <A, B, E, R>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options: {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard: true\n  }): Micro<void, E, R>\n} = <\n  A,\n  B,\n  E,\n  R\n>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly discard?: boolean | undefined\n}): Micro<any, E, R> =>\n  make(function(env, onExit) {\n    const concurrencyOption = options?.concurrency === \"inherit\"\n      ? envGet(env, currentConcurrency)\n      : options?.concurrency ?? 1\n    const concurrency = concurrencyOption === \"unbounded\"\n      ? Number.POSITIVE_INFINITY\n      : Math.max(1, concurrencyOption)\n\n    // abort\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    // iterate\n    let result: MicroExit<any, any> | undefined = undefined\n    const items = Array.from(iterable)\n    let length = items.length\n    const out: Array<B> | undefined = options?.discard ? undefined : new Array(length)\n    let index = 0\n    let inProgress = 0\n    let doneCount = 0\n    let pumping = false\n    function pump() {\n      pumping = true\n      while (inProgress < concurrency && index < length) {\n        const currentIndex = index\n        const item = items[currentIndex]\n        index++\n        inProgress++\n        try {\n          f(item, currentIndex)[runSymbol](envWithSignal, function(exit) {\n            if (exit._tag === \"Left\") {\n              if (result === undefined) {\n                result = exit\n                length = index\n                onAbort()\n              }\n            } else if (out !== undefined) {\n              out[currentIndex] = exit.right\n            }\n            doneCount++\n            inProgress--\n            if (doneCount === length) {\n              onExit(result ?? Either.right(out))\n            } else if (!pumping && inProgress < concurrency) {\n              pump()\n            }\n          })\n        } catch (err) {\n          result = exitDie(err)\n          length = index\n          onAbort()\n        }\n      }\n      pumping = false\n    }\n    pump()\n  })\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filter = <A, E, R>(iterable: Iterable<A>, f: (a: NoInfer<A>) => Micro<boolean, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly negate?: boolean | undefined\n}): Micro<Array<A>, E, R> =>\n  filterMap(iterable, (a) =>\n    map(f(a), (pass) => {\n      pass = options?.negate ? !pass : pass\n      return pass ? Option.some(a) : Option.none()\n    }), options)\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filterMap = <A, B, E, R>(\n  iterable: Iterable<A>,\n  f: (a: NoInfer<A>) => Micro<Option.Option<B>, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n  }\n): Micro<Array<B>, E, R> =>\n  suspend(() => {\n    const out: Array<B> = []\n    return as(\n      forEach(iterable, (a) =>\n        map(f(a), (o) => {\n          if (o._tag === \"Some\") {\n            out.push(o.value)\n          }\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  })\n\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const Do: Micro<{}> = succeed({})\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Micro<A, E, R>) => Micro<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Micro<A, E, R>, name: N): Micro<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<MicroTypeLambda>(map)\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bind: {\n  <N extends string, A extends Record<string, any>, B, E2, R2>(\n    name: N,\n    f: (a: A) => Micro<B, E2, R2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n  <A extends Record<string, any>, E, R, B, E2, R2, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: A) => Micro<B, E2, R2>\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n} = doNotation.bind<MicroTypeLambda>(map, flatMap)\n\nconst let_: {\n  <N extends string, A extends Record<string, any>, B>(\n    name: N,\n    f: (a: A) => B\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n  <A extends Record<string, any>, E, R, B, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: A) => B\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n} = doNotation.let_<MicroTypeLambda>(map)\n\nexport {\n  /**\n   * Bind the result of a synchronous computation to the given name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  let_ as let\n}\n\n// ----------------------------------------------------------------------------\n// handle & forking\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const HandleTypeId: unique symbol = Symbol.for(\"effect/Micro/Handle\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport type HandleTypeId = typeof HandleTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport interface Handle<A, E = never> {\n  readonly [HandleTypeId]: HandleTypeId\n  readonly await: Micro<MicroExit<A, E>>\n  readonly join: Micro<A, E>\n  readonly interrupt: Micro<MicroExit<A, E>>\n  readonly unsafeInterrupt: () => void\n  readonly addObserver: (observer: (exit: MicroExit<A, E>) => void) => void\n  readonly removeObserver: (observer: (exit: MicroExit<A, E>) => void) => void\n  readonly unsafePoll: () => MicroExit<A, E> | null\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const isHandle = (u: unknown): u is Handle<unknown, unknown> =>\n  typeof u === \"object\" && u !== null && HandleTypeId in u\n\nclass HandleImpl<A, E> implements Handle<A, E> {\n  readonly [HandleTypeId]: HandleTypeId\n\n  readonly observers: Set<(exit: MicroExit<A, E>) => void> = new Set()\n  private _exit: MicroExit<A, E> | undefined = undefined\n  _controller: AbortController\n  readonly isRoot: boolean\n\n  constructor(readonly parentSignal: AbortSignal, controller?: AbortController) {\n    this[HandleTypeId] = HandleTypeId\n    this.isRoot = controller !== undefined\n    this._controller = controller ?? new AbortController()\n    if (!this.isRoot) {\n      parentSignal.addEventListener(\"abort\", this.unsafeInterrupt)\n    }\n  }\n\n  unsafePoll(): MicroExit<A, E> | null {\n    return this._exit ?? null\n  }\n\n  unsafeInterrupt = () => {\n    this._controller.abort()\n  }\n\n  emit(exit: MicroExit<A, E>): void {\n    if (this._exit) {\n      return\n    }\n    this._exit = exit\n    if (!this.isRoot) {\n      this.parentSignal.removeEventListener(\"abort\", this.unsafeInterrupt)\n    }\n    this.observers.forEach((observer) => observer(exit))\n    this.observers.clear()\n  }\n\n  addObserver(observer: (exit: MicroExit<A, E>) => void): void {\n    if (this._exit) {\n      return observer(this._exit)\n    }\n    this.observers.add(observer)\n  }\n\n  removeObserver(observer: (exit: MicroExit<A, E>) => void): void {\n    this.observers.delete(observer)\n  }\n\n  get await(): Micro<MicroExit<A, E>> {\n    return suspend(() => {\n      if (this._exit) {\n        return succeed(this._exit)\n      }\n      return async((resume) => {\n        function observer(exit: MicroExit<A, E>) {\n          resume(succeed(exit))\n        }\n        this.addObserver(observer)\n        return sync(() => {\n          this.removeObserver(observer)\n        })\n      })\n    })\n  }\n\n  get join(): Micro<A, E> {\n    return flatMap(this.await, fromExit)\n  }\n\n  get interrupt(): Micro<MicroExit<A, E>> {\n    return suspend(() => {\n      this.unsafeInterrupt()\n      return this.await\n    })\n  }\n}\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const fork = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R> =>\n  make(function(env, onExit) {\n    const signal = envGet(env, currentAbortSignal)\n    const handle = new HandleImpl<A, E>(signal)\n    const nextEnv = envMutate(env, (map) => {\n      map[currentAbortController.key] = handle._controller\n      map[currentAbortSignal.key] = handle._controller.signal\n      return map\n    })\n    envGet(env, currentScheduler).scheduleTask(() => {\n      self[runSymbol](nextEnv, (exit) => {\n        handle.emit(exit)\n      })\n    }, 0)\n    onExit(Either.right(handle))\n  })\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkDaemon = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R> =>\n  make(function(env, onExit) {\n    const controller = new AbortController()\n    const handle = new HandleImpl<A, E>(controller.signal, controller)\n    const nextEnv = envMutate(env, (map) => {\n      map[currentAbortController.key] = controller\n      map[currentAbortSignal.key] = controller.signal\n      return map\n    })\n    envGet(env, currentScheduler).scheduleTask(() => {\n      self[runSymbol](nextEnv, (exit) => {\n        handle.emit(exit)\n      })\n    }, 0)\n    onExit(Either.right(handle))\n  })\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkIn: {\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<Handle<A, E>, never, R>\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<Handle<A, E>, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<Handle<A, E>, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(scope.fork, (scope) =>\n        tap(\n          restore(forkDaemon(onExit(self, (exit) => scope.close(exit)))),\n          (fiber) => scope.addFinalizer((_) => asVoid(fiber.interrupt))\n        ))\n    )\n)\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkScoped = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R | MicroScope> =>\n  flatMap(scope, (scope) => forkIn(self, scope))\n\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n\n/**\n * Execute the `Micro` effect and return a `Handle` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n */\nexport const runFork = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Handle<A, E> => {\n  const controller = new AbortController()\n  const refs = Object.create(null)\n  refs[currentAbortController.key] = controller\n  refs[currentAbortSignal.key] = controller.signal\n  refs[currentScheduler.key] = options?.scheduler ?? new MicroSchedulerDefault()\n  const env = envMake(refs)\n  const handle = new HandleImpl<A, E>(controller.signal, controller)\n  effect[runSymbol](envSet(env, currentAbortSignal, handle._controller.signal), (exit) => {\n    handle.emit(exit)\n    if (options?.signal) {\n      options.signal.removeEventListener(\"abort\", handle.unsafeInterrupt)\n    }\n  })\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      handle.unsafeInterrupt()\n    } else {\n      options.signal.addEventListener(\"abort\", handle.unsafeInterrupt, { once: true })\n    }\n  }\n  return handle\n}\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runPromiseExit = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<MicroExit<A, E>> =>\n  new Promise((resolve, _reject) => {\n    const handle = runFork(effect, options)\n    handle.addObserver(resolve)\n  })\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runPromise = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<A> =>\n  runPromiseExit(effect, options).then((exit) => {\n    if (exit._tag === \"Left\") {\n      throw exit.left\n    }\n    return exit.right\n  })\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `Handle`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runSyncExit = <A, E>(effect: Micro<A, E>): MicroExit<A, E> => {\n  const scheduler = new MicroSchedulerDefault()\n  const handle = runFork(effect, { scheduler })\n  scheduler.flush()\n  const exit = handle.unsafePoll()\n  if (exit === null) {\n    return exitDie(handle)\n  }\n  return exit\n}\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runSync = <A, E>(effect: Micro<A, E>): A => {\n  const exit = runSyncExit(effect)\n  if (exit._tag === \"Left\") {\n    throw exit.left\n  }\n  return exit.right\n}\n\n// ----------------------------------------------------------------------------\n// Errors\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [EffectTypeId]: Effect.VarianceStruct<never, this, never>\n  readonly [StreamTypeId]: Stream.VarianceStruct<never, this, never>\n  readonly [SinkTypeId]: Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [ChannelTypeId]: Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  readonly [TypeId]: Micro.Variance<never, this, never>\n  readonly [runSymbol]: (env: Env<any>, onExit: (exit: MicroExit<never, this>) => void) => void\n  [Symbol.iterator](): MicroIterator<Micro<never, this, never>>\n}\n\nconst YieldableError: new(message?: string) => YieldableError = (function() {\n  class YieldableError extends globalThis.Error {\n    [runSymbol](_env: any, onExit: any) {\n      onExit(exitFail(this))\n    }\n    toString() {\n      return this.message ? `${this.name}: ${this.message}` : this.name\n    }\n    toJSON() {\n      return { ...this }\n    }\n    [NodeInspectSymbol](): string {\n      const stack = this.stack\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`\n      }\n      return this.toString()\n    }\n  }\n  Object.assign(YieldableError.prototype, MicroProto, StructuralPrototype)\n  return YieldableError as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => YieldableError & Readonly<A> = (function() {\n  return class extends YieldableError {\n    constructor(args: any) {\n      super()\n      if (args) {\n        Object.assign(this, args)\n      }\n    }\n  } as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  class Base extends Error<{}> {\n    readonly _tag = tag\n  }\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class NoSuchElementException extends TaggedError(\"NoSuchElementException\")<{ message?: string | undefined }> {}\n\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class TimeoutException extends TaggedError(\"TimeoutException\") {}\n", "/**\n * @since 2.0.0\n */\n\nimport type { Effect } from \"./Effect.js\"\nimport type { RuntimeFiber } from \"./Fiber.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport { dual } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as core from \"./internal/core.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Scheduler {\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false\n  scheduleTask(task: Task, priority: number): void\n}\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport class PriorityBuckets<in out T = Task> {\n  /**\n   * @since 2.0.0\n   */\n  public buckets: Array<[number, Array<T>]> = []\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: T, priority: number) {\n    let bucket: [number, Array<T>] | undefined = undefined\n    let index: number\n    for (index = 0; index < this.buckets.length; index++) {\n      if (this.buckets[index][0] <= priority) {\n        bucket = this.buckets[index]\n      } else {\n        break\n      }\n    }\n    if (bucket) {\n      bucket[1].push(task)\n    } else {\n      const newBuckets: Array<[number, Array<T>]> = []\n      for (let i = 0; i < index; i++) {\n        newBuckets.push(this.buckets[i])\n      }\n      newBuckets.push([priority, [task]])\n      for (let i = index; i < this.buckets.length; i++) {\n        newBuckets.push(this.buckets[i])\n      }\n      this.buckets = newBuckets\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class MixedScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  running = false\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly maxNextTickBeforeTimer: number\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  private starveInternal(depth: number) {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (this.tasks.buckets.length === 0) {\n      this.running = false\n    } else {\n      this.starve(depth)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  private starve(depth = 0) {\n    if (depth >= this.maxNextTickBeforeTimer) {\n      setTimeout(() => this.starveInternal(0), 0)\n    } else {\n      Promise.resolve(void 0).then(() => this.starveInternal(depth + 1))\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    this.tasks.scheduleTask(task, priority)\n    if (!this.running) {\n      this.running = true\n      this.starve()\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category schedulers\n */\nexport const defaultScheduler: Scheduler = globalValue(\n  Symbol.for(\"effect/Scheduler/defaultScheduler\"),\n  () => new MixedScheduler(2048)\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class SyncScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  flush() {\n    while (this.tasks.buckets.length > 0) {\n      const tasks = this.tasks.buckets\n      this.tasks.buckets = []\n      for (const [_, toRun] of tasks) {\n        for (let i = 0; i < toRun.length; i++) {\n          toRun[i]()\n        }\n      }\n    }\n    this.deferred = true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class ControlledScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  step() {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeMatrix = (...record: Array<[number, Scheduler]>): Scheduler => {\n  const index = record.sort(([p0], [p1]) => p0 < p1 ? -1 : p0 > p1 ? 1 : 0)\n  return {\n    shouldYield(fiber) {\n      for (const scheduler of record) {\n        const priority = scheduler[1].shouldYield(fiber)\n        if (priority !== false) {\n          return priority\n        }\n      }\n      return false\n    },\n    scheduleTask(task, priority) {\n      let scheduler: Scheduler | undefined = undefined\n      for (const i of index) {\n        if (priority >= i[0]) {\n          scheduler = i[1]\n        } else {\n          return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n        }\n      }\n      return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category utilities\n */\nexport const defaultShouldYield: Scheduler[\"shouldYield\"] = (fiber) => {\n  return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n    ? fiber.getFiberRef(core.currentSchedulingPriority)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = (\n  scheduleTask: Scheduler[\"scheduleTask\"],\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n): Scheduler => ({\n  scheduleTask,\n  shouldYield\n})\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeBatched = (\n  callback: (runBatch: () => void) => void,\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n) => {\n  let running = false\n  const tasks = new PriorityBuckets()\n  const starveInternal = () => {\n    const tasksToRun = tasks.buckets\n    tasks.buckets = []\n    for (const [_, toRun] of tasksToRun) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (tasks.buckets.length === 0) {\n      running = false\n    } else {\n      starve()\n    }\n  }\n\n  const starve = () => callback(starveInternal)\n\n  return make((task, priority) => {\n    tasks.scheduleTask(task, priority)\n    if (!running) {\n      running = true\n      starve()\n    }\n  }, shouldYield)\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timer = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  make((task) => setTimeout(task, ms), shouldYield)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timerBatched = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  makeBatched((task) => setTimeout(task, ms), shouldYield)\n\n/** @internal */\nexport const currentScheduler: FiberRef<Scheduler> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentScheduler\"),\n  () => core.fiberRefUnsafeMake(defaultScheduler)\n)\n\n/** @internal */\nexport const withScheduler = dual<\n  (scheduler: Scheduler) => <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>,\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler) => Effect<A, E, R>\n>(2, (self, scheduler) => core.fiberRefLocally(self, currentScheduler, scheduler))\n", "import { globalValue } from \"../GlobalValue.js\"\nimport type * as Request from \"../Request.js\"\nimport { fiberRefUnsafeMake } from \"./core.js\"\n\n/** @internal */\nexport const currentRequestMap = globalValue(\n  Symbol.for(\"effect/FiberRef/currentRequestMap\"),\n  () => fiberRefUnsafeMake(new Map<any, Request.Entry<any>>())\n)\n", "import type { Effect } from \"../Effect.js\"\nimport type { Concurrency } from \"../Types.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport const match = <A, E, R>(\n  concurrency: Concurrency | undefined,\n  sequential: () => Effect<A, E, R>,\n  unbounded: () => Effect<A, E, R>,\n  bounded: (limit: number) => Effect<A, E, R>\n): Effect<A, E, R> => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return unbounded()\n    case \"inherit\":\n      return core.fiberRefGetWith(\n        core.currentConcurrency,\n        (concurrency) =>\n          concurrency === \"unbounded\" ?\n            unbounded() :\n            concurrency > 1 ?\n            bounded(concurrency) :\n            sequential()\n      )\n    default:\n      return concurrency > 1 ? bounded(concurrency) : sequential()\n  }\n}\n\n/** @internal */\nexport const matchSimple = <A, E, R>(\n  concurrency: Concurrency | undefined,\n  sequential: () => Effect<A, E, R>,\n  concurrent: () => Effect<A, E, R>\n): Effect<A, E, R> => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return concurrent()\n    case \"inherit\":\n      return core.fiberRefGetWith(\n        core.currentConcurrency,\n        (concurrency) =>\n          concurrency === \"unbounded\" || concurrency > 1 ?\n            concurrent() :\n            sequential()\n      )\n    default:\n      return concurrency > 1 ? concurrent() : sequential()\n  }\n}\n", "import type * as Cause from \"../Cause.js\"\nimport * as Clock from \"../Clock.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as number from \"../Number.js\"\nimport * as Option from \"../Option.js\"\nimport * as order from \"../Order.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as core from \"./core.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\n\n/** @internal */\nconst FiberSymbolKey = \"effect/Fiber\"\n\n/** @internal */\nexport const FiberTypeId: Fiber.FiberTypeId = Symbol.for(\n  FiberSymbolKey\n) as Fiber.FiberTypeId\n\n/** @internal */\nexport const fiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\n/** @internal */\nconst fiberProto = {\n  [FiberTypeId]: fiberVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst RuntimeFiberSymbolKey = \"effect/Fiber\"\n\n/** @internal */\nexport const RuntimeFiberTypeId: Fiber.RuntimeFiberTypeId = Symbol.for(\n  RuntimeFiberSymbolKey\n) as Fiber.RuntimeFiberTypeId\n\n/** @internal */\nexport const Order: order.Order<Fiber.RuntimeFiber<unknown, unknown>> = pipe(\n  order.tuple(number.Order, number.Order),\n  order.mapInput((fiber: Fiber.RuntimeFiber<unknown, unknown>) =>\n    [\n      (fiber.id() as FiberId.Runtime).startTimeMillis,\n      (fiber.id() as FiberId.Runtime).id\n    ] as const\n  )\n)\n\n/** @internal */\nexport const isFiber = (u: unknown): u is Fiber.Fiber<unknown, unknown> => hasProperty(u, FiberTypeId)\n\n/** @internal */\nexport const isRuntimeFiber = <A, E>(self: Fiber.Fiber<A, E>): self is Fiber.RuntimeFiber<A, E> =>\n  RuntimeFiberTypeId in self\n\n/** @internal */\nexport const _await = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Exit.Exit<A, E>> => self.await\n\n/** @internal */\nexport const children = <A, E>(\n  self: Fiber.Fiber<A, E>\n): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> => self.children\n\n/** @internal */\nexport const done = <A, E>(exit: Exit.Exit<A, E>): Fiber.Fiber<A, E> => ({\n  ...fiberProto,\n  id: () => FiberId.none,\n  await: core.succeed(exit),\n  children: core.succeed([]),\n  inheritAll: core.void,\n  poll: core.succeed(Option.some(exit)),\n  interruptAsFork: () => core.void\n})\n\n/** @internal */\nexport const dump = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<Fiber.Fiber.Dump> =>\n  core.map(self.status, (status) => ({ id: self.id(), status }))\n\n/** @internal */\nexport const dumpAll = (\n  fibers: Iterable<Fiber.RuntimeFiber<unknown, unknown>>\n): Effect.Effect<Array<Fiber.Fiber.Dump>> => core.forEachSequential(fibers, dump)\n\n/** @internal */\nexport const fail = <E>(error: E): Fiber.Fiber<never, E> => done(Exit.fail(error))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Fiber.Fiber<never, E> => done(Exit.failCause(cause))\n\n/** @internal */\nexport const fromEffect = <A, E>(effect: Effect.Effect<A, E>): Effect.Effect<Fiber.Fiber<A, E>> =>\n  core.map(core.exit(effect), done)\n\n/** @internal */\nexport const id = <A, E>(self: Fiber.Fiber<A, E>): FiberId.FiberId => self.id()\n\n/** @internal */\nexport const inheritAll = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> => self.inheritAll\n\n/** @internal */\nexport const interrupted = (fiberId: FiberId.FiberId): Fiber.Fiber<never> => done(Exit.interrupt(fiberId))\n\n/** @internal */\nexport const interruptAll = (fibers: Iterable<Fiber.Fiber<any, any>>): Effect.Effect<void> =>\n  core.flatMap(core.fiberId, (fiberId) => pipe(fibers, interruptAllAs(fiberId)))\n\n/** @internal */\nexport const interruptAllAs = dual<\n  (fiberId: FiberId.FiberId) => (fibers: Iterable<Fiber.Fiber<any, any>>) => Effect.Effect<void>,\n  (fibers: Iterable<Fiber.Fiber<any, any>>, fiberId: FiberId.FiberId) => Effect.Effect<void>\n>(2, (fibers, fiberId) =>\n  pipe(\n    core.forEachSequentialDiscard(fibers, interruptAsFork(fiberId)),\n    core.zipRight(pipe(fibers, core.forEachSequentialDiscard(_await)))\n  ))\n\n/** @internal */\nexport const interruptAsFork = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Fiber.Fiber<A, E>) => Effect.Effect<void>,\n  <A, E>(self: Fiber.Fiber<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<void>\n>(2, (self, fiberId) => self.interruptAsFork(fiberId))\n\n/** @internal */\nexport const join = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<A, E> =>\n  core.zipLeft(core.flatten(self.await), self.inheritAll)\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<B, E>,\n  <A, E, B>(self: Fiber.Fiber<A, E>, f: (a: A) => B) => Fiber.Fiber<B, E>\n>(2, (self, f) => mapEffect(self, (a) => core.sync(() => f(a))))\n\n/** @internal */\nexport const mapEffect = dual<\n  <A, A2, E2>(f: (a: A) => Effect.Effect<A2, E2>) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, f: (a: A) => Effect.Effect<A2, E2>) => Fiber.Fiber<A2, E | E2>\n>(2, (self, f) => ({\n  ...fiberProto,\n  id: () => self.id(),\n  await: core.flatMap(self.await, Exit.forEachEffect(f)),\n  children: self.children,\n  inheritAll: self.inheritAll,\n  poll: core.flatMap(self.poll, (result) => {\n    switch (result._tag) {\n      case \"None\":\n        return core.succeed(Option.none())\n      case \"Some\":\n        return pipe(\n          Exit.forEachEffect(result.value, f),\n          core.map(Option.some)\n        )\n    }\n  }),\n  interruptAsFork: (id) => self.interruptAsFork(id)\n}))\n\n/** @internal */\nexport const mapFiber = dual<\n  <E, E2, A, B>(\n    f: (a: A) => Fiber.Fiber<B, E2>\n  ) => (self: Fiber.Fiber<A, E>) => Effect.Effect<Fiber.Fiber<B, E | E2>>,\n  <A, E, E2, B>(\n    self: Fiber.Fiber<A, E>,\n    f: (a: A) => Fiber.Fiber<B, E2>\n  ) => Effect.Effect<Fiber.Fiber<B, E | E2>>\n>(2, <A, E, E2, B>(\n  self: Fiber.Fiber<A, E>,\n  f: (a: A) => Fiber.Fiber<B, E2>\n) =>\n  core.map(\n    self.await,\n    Exit.match({\n      onFailure: (cause): Fiber.Fiber<B, E | E2> => failCause(cause),\n      onSuccess: (a) => f(a)\n    })\n  ))\n\n/** @internal */\nexport const match = dual<\n  <A, E, Z>(\n    options: {\n      readonly onFiber: (fiber: Fiber.Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: Fiber.RuntimeFiber<A, E>) => Z\n    }\n  ) => (self: Fiber.Fiber<A, E>) => Z,\n  <A, E, Z>(\n    self: Fiber.Fiber<A, E>,\n    options: {\n      readonly onFiber: (fiber: Fiber.Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: Fiber.RuntimeFiber<A, E>) => Z\n    }\n  ) => Z\n>(2, (self, { onFiber, onRuntimeFiber }) => {\n  if (isRuntimeFiber(self)) {\n    return onRuntimeFiber(self)\n  }\n  return onFiber(self)\n})\n\n/** @internal */\nexport const never: Fiber.Fiber<never> = {\n  ...fiberProto,\n  id: () => FiberId.none,\n  await: core.never,\n  children: core.succeed([]),\n  inheritAll: core.never,\n  poll: core.succeed(Option.none()),\n  interruptAsFork: () => core.never\n}\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A | A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A | A2, E | E2>\n>(2, (self, that) => ({\n  ...fiberProto,\n  id: () => FiberId.getOrElse(self.id(), that.id()),\n  await: core.zipWith(\n    self.await,\n    that.await,\n    (exit1, exit2) => (Exit.isSuccess(exit1) ? exit1 : exit2)\n  ),\n  children: self.children,\n  inheritAll: core.zipRight(that.inheritAll, self.inheritAll),\n  poll: core.zipWith(\n    self.poll,\n    that.poll,\n    (option1, option2) => {\n      switch (option1._tag) {\n        case \"None\": {\n          return Option.none()\n        }\n        case \"Some\": {\n          return Exit.isSuccess(option1.value) ? option1 : option2\n        }\n      }\n    }\n  ),\n  interruptAsFork: (id) =>\n    pipe(\n      core.interruptAsFiber(self, id),\n      core.zipRight(pipe(that, core.interruptAsFiber(id))),\n      core.asVoid\n    )\n}))\n\n/** @internal */\nexport const orElseEither = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<Either.Either<A2, A>, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<Either.Either<A2, A>, E | E2>\n>(2, (self, that) => orElse(map(self, Either.left), map(that, Either.right)))\n\n/** @internal */\nexport const poll = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Option.Option<Exit.Exit<A, E>>> => self.poll\n\n// forked from https://github.com/sindresorhus/parse-ms/blob/4da2ffbdba02c6e288c08236695bdece0adca173/index.js\n// MIT License\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n/** @internal */\nconst parseMs = (milliseconds: number) => {\n  const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil\n  return {\n    days: roundTowardsZero(milliseconds / 86400000),\n    hours: roundTowardsZero(milliseconds / 3600000) % 24,\n    minutes: roundTowardsZero(milliseconds / 60000) % 60,\n    seconds: roundTowardsZero(milliseconds / 1000) % 60,\n    milliseconds: roundTowardsZero(milliseconds) % 1000,\n    microseconds: roundTowardsZero(milliseconds * 1000) % 1000,\n    nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000\n  }\n}\n\n/** @internal */\nconst renderStatus = (status: FiberStatus.FiberStatus): string => {\n  if (FiberStatus.isDone(status)) {\n    return \"Done\"\n  }\n  if (FiberStatus.isRunning(status)) {\n    return \"Running\"\n  }\n\n  const isInterruptible = runtimeFlags.interruptible(status.runtimeFlags) ?\n    \"interruptible\" :\n    \"uninterruptible\"\n  return `Suspended(${isInterruptible})`\n}\n\n/** @internal */\nexport const pretty = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<string> =>\n  core.flatMap(Clock.currentTimeMillis, (now) =>\n    core.map(dump(self), (dump) => {\n      const time = now - dump.id.startTimeMillis\n      const { days, hours, milliseconds, minutes, seconds } = parseMs(time)\n      const lifeMsg = (days === 0 ? \"\" : `${days}d`) +\n        (days === 0 && hours === 0 ? \"\" : `${hours}h`) +\n        (days === 0 && hours === 0 && minutes === 0 ? \"\" : `${minutes}m`) +\n        (days === 0 && hours === 0 && minutes === 0 && seconds === 0 ? \"\" : `${seconds}s`) +\n        `${milliseconds}ms`\n      const waitMsg = FiberStatus.isSuspended(dump.status) ?\n        (() => {\n          const ids = FiberId.ids(dump.status.blockingOn)\n          return HashSet.size(ids) > 0\n            ? `waiting on ` + Array.from(ids).map((id) => `${id}`).join(\", \")\n            : \"\"\n        })() :\n        \"\"\n      const statusMsg = renderStatus(dump.status)\n      return `[Fiber](#${dump.id.id}) (${lifeMsg}) ${waitMsg}\\n   Status: ${statusMsg}`\n    }))\n\n/** @internal */\nexport const unsafeRoots = (): Array<Fiber.RuntimeFiber<any, any>> => Array.from(fiberScope.globalScope.roots)\n\n/** @internal */\nexport const roots: Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> = core.sync(unsafeRoots)\n\n/** @internal */\nexport const status = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<FiberStatus.FiberStatus> => self.status\n\n/** @internal */\nexport const succeed = <A>(value: A): Fiber.Fiber<A> => done(Exit.succeed(value))\n\nconst void_: Fiber.Fiber<void> = succeed(void 0)\nexport {\n  /** @internal */\n  void_ as void\n}\n\n/** @internal */\nexport const currentFiberURI = \"effect/FiberCurrent\"\n\n/** @internal */\nexport const getCurrentFiber = (): Option.Option<Fiber.RuntimeFiber<any, any>> =>\n  Option.fromNullable((globalThis as any)[currentFiberURI])\n", "import * as FiberId from \"../FiberId.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\n\n/** @internal */\nconst FiberScopeSymbolKey = \"effect/FiberScope\"\n\n/** @internal */\nexport const FiberScopeTypeId = Symbol.for(FiberScopeSymbolKey)\n\nexport type FiberScopeTypeId = typeof FiberScopeTypeId\n\n/**\n * A `FiberScope` represents the scope of a fiber lifetime. The scope of a\n * fiber can be retrieved using `Effect.descriptor`, and when forking fibers,\n * you can specify a custom scope to fork them on by using the `forkIn`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId\n  get fiberId(): FiberId.FiberId\n  add(runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void\n}\n\n/** @internal */\nclass Global implements FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId = FiberScopeTypeId\n  readonly fiberId = FiberId.none\n  readonly roots = new Set<FiberRuntime.FiberRuntime<any, any>>()\n  add(_runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void {\n    this.roots.add(child)\n    child.addObserver(() => {\n      this.roots.delete(child)\n    })\n  }\n}\n\n/** @internal */\nclass Local implements FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId = FiberScopeTypeId\n  constructor(\n    readonly fiberId: FiberId.FiberId,\n    readonly parent: FiberRuntime.FiberRuntime<any, any>\n  ) {\n  }\n  add(_runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void {\n    this.parent.tell(\n      FiberMessage.stateful((parentFiber) => {\n        parentFiber.addChild(child)\n        child.addObserver(() => {\n          parentFiber.removeChild(child)\n        })\n      })\n    )\n  }\n}\n\n/** @internal */\nexport const unsafeMake = (fiber: FiberRuntime.FiberRuntime<any, any>): FiberScope => {\n  return new Local(fiber.id(), fiber)\n}\n\n/** @internal */\nexport const globalScope = globalValue(\n  Symbol.for(\"effect/FiberScope/Global\"),\n  () => new Global()\n)\n", "import type * as Cause from \"../Cause.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\n\n/** @internal */\nexport type FiberMessage = InterruptSignal | Stateful | Resume | YieldNow\n\n/** @internal */\nexport const OP_INTERRUPT_SIGNAL = \"InterruptSignal\" as const\n\n/** @internal */\nexport type OP_INTERRUPT_SIGNAL = typeof OP_INTERRUPT_SIGNAL\n\n/** @internal */\nexport const OP_STATEFUL = \"Stateful\" as const\n\n/** @internal */\nexport type OP_STATEFUL = typeof OP_STATEFUL\n\n/** @internal */\nexport const OP_RESUME = \"Resume\" as const\n\n/** @internal */\nexport type OP_RESUME = typeof OP_RESUME\n\n/** @internal */\nexport const OP_YIELD_NOW = \"YieldNow\" as const\n\n/** @internal */\nexport type OP_YIELD_NOW = typeof OP_YIELD_NOW\n\n/** @internal */\nexport interface InterruptSignal {\n  readonly _tag: OP_INTERRUPT_SIGNAL\n  readonly cause: Cause.Cause<never>\n}\n\n/** @internal */\nexport interface Stateful {\n  readonly _tag: OP_STATEFUL\n  onFiber(fiber: FiberRuntime.FiberRuntime<any, any>, status: FiberStatus.FiberStatus): void\n}\n\n/** @internal */\nexport interface Resume {\n  readonly _tag: OP_RESUME\n  readonly effect: Effect.Effect<any, any, any>\n}\n\n/** @internal */\nexport interface YieldNow {\n  readonly _tag: OP_YIELD_NOW\n}\n\n/** @internal */\nexport const interruptSignal = (cause: Cause.Cause<never>): FiberMessage => ({\n  _tag: OP_INTERRUPT_SIGNAL,\n  cause\n})\n\n/** @internal */\nexport const stateful = (\n  onFiber: (\n    fiber: FiberRuntime.FiberRuntime<any, any>,\n    status: FiberStatus.FiberStatus\n  ) => void\n): FiberMessage => ({\n  _tag: OP_STATEFUL,\n  onFiber\n})\n\n/** @internal */\nexport const resume = (effect: Effect.Effect<any, any, any>): FiberMessage => ({\n  _tag: OP_RESUME,\n  effect\n})\n\n/** @internal */\nexport const yieldNow = (): FiberMessage => ({\n  _tag: OP_YIELD_NOW\n})\n", "import * as Arr from \"../Array.js\"\nimport * as Context from \"../Context.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport * as List from \"../List.js\"\nimport type * as Logger from \"../Logger.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport * as LogSpan from \"../LogSpan.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Cause from \"./cause.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as _fiberId from \"./fiberId.js\"\n\n/** @internal */\nconst LoggerSymbolKey = \"effect/Logger\"\n\n/** @internal */\nexport const LoggerTypeId: Logger.LoggerTypeId = Symbol.for(\n  LoggerSymbolKey\n) as Logger.LoggerTypeId\n\nconst loggerVariance = {\n  /* c8 ignore next */\n  _Message: (_: unknown) => _,\n  /* c8 ignore next */\n  _Output: (_: never) => _\n}\n\n/** @internal */\nexport const makeLogger = <Message, Output>(\n  log: (options: Logger.Logger.Options<Message>) => Output\n): Logger.Logger<Message, Output> => ({\n  [LoggerTypeId]: loggerVariance,\n  log,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const mapInput = dual<\n  <Message, Message2>(\n    f: (message: Message2) => Message\n  ) => <Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message2, Output>,\n  <Output, Message, Message2>(\n    self: Logger.Logger<Message, Output>,\n    f: (message: Message2) => Message\n  ) => Logger.Logger<Message2, Output>\n>(2, (self, f) =>\n  makeLogger(\n    (options) => self.log({ ...options, message: f(options.message) })\n  ))\n\n/** @internal */\nexport const mapInputOptions = dual<\n  <Message, Message2>(\n    f: (options: Logger.Logger.Options<Message2>) => Logger.Logger.Options<Message>\n  ) => <Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message2, Output>,\n  <Output, Message, Message2>(\n    self: Logger.Logger<Message, Output>,\n    f: (options: Logger.Logger.Options<Message2>) => Logger.Logger.Options<Message>\n  ) => Logger.Logger<Message2, Output>\n>(2, (self, f) => makeLogger((options) => self.log(f(options))))\n\n/** @internal */\nexport const filterLogLevel = dual<\n  (\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ) => <Message, Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message, Option.Option<Output>>,\n  <Message, Output>(\n    self: Logger.Logger<Message, Output>,\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ) => Logger.Logger<Message, Option.Option<Output>>\n>(2, (self, f) =>\n  makeLogger((options) =>\n    f(options.logLevel)\n      ? Option.some(self.log(options))\n      : Option.none()\n  ))\n\n/** @internal */\nexport const map = dual<\n  <Output, Output2>(\n    f: (output: Output) => Output2\n  ) => <Message>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message, Output2>,\n  <Message, Output, Output2>(\n    self: Logger.Logger<Message, Output>,\n    f: (output: Output) => Output2\n  ) => Logger.Logger<Message, Output2>\n>(2, (self, f) => makeLogger((options) => f(self.log(options))))\n\n/** @internal */\nexport const none: Logger.Logger<unknown, void> = {\n  [LoggerTypeId]: loggerVariance,\n  log: constVoid,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as Logger.Logger<unknown, void>\n\n/** @internal */\nexport const simple = <A, B>(log: (a: A) => B): Logger.Logger<A, B> => ({\n  [LoggerTypeId]: loggerVariance,\n  log: ({ message }) => log(message),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const succeed = <A>(value: A): Logger.Logger<unknown, A> => {\n  return simple(() => value)\n}\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Logger.Logger<unknown, A> => {\n  return simple(evaluate)\n}\n\n/** @internal */\nexport const zip = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, [Output, Output2]>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, [Output, Output2]>\n>(2, (self, that) => makeLogger((options) => [self.log(options), that.log(options)]))\n\n/** @internal */\nexport const zipLeft = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, Output>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, Output>\n>(2, (self, that) => map(zip(self, that), (tuple) => tuple[0]))\n\n/** @internal */\nexport const zipRight = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, Output2>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, Output2>\n>(2, (self, that) => map(zip(self, that), (tuple) => tuple[1]))\n\n/** @internal */\nexport const stringLogger: Logger.Logger<unknown, string> = makeLogger(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const nowMillis = date.getTime()\n\n    const outputArray = [\n      `timestamp=${date.toISOString()}`,\n      `level=${logLevel.label}`,\n      `fiber=${_fiberId.threadName(fiberId)}`\n    ]\n\n    let output = outputArray.join(\" \")\n\n    const messageArr = Arr.ensure(message)\n    for (let i = 0; i < messageArr.length; i++) {\n      const stringMessage = Inspectable.toStringUnknown(messageArr[i])\n      if (stringMessage.length > 0) {\n        output = output + \" message=\"\n        output = appendQuoted(stringMessage, output)\n      }\n    }\n\n    if (cause != null && cause._tag !== \"Empty\") {\n      output = output + \" cause=\"\n      output = appendQuoted(Cause.pretty(cause, { renderErrorCause: true }), output)\n    }\n\n    if (List.isCons(spans)) {\n      output = output + \" \"\n\n      let first = true\n      for (const span of spans) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + pipe(span, LogSpan.render(nowMillis))\n      }\n    }\n\n    if (HashMap.size(annotations) > 0) {\n      output = output + \" \"\n\n      let first = true\n      for (const [key, value] of annotations) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + filterKeyName(key)\n        output = output + \"=\"\n        output = appendQuoted(Inspectable.toStringUnknown(value), output)\n      }\n    }\n\n    return output\n  }\n)\n\n/** @internal */\nconst escapeDoubleQuotes = (str: string) => `\"${str.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"`\n\nconst textOnly = /^[^\\s\"=]+$/\n\n/** @internal */\nconst appendQuoted = (label: string, output: string): string =>\n  output + (label.match(textOnly) ? label : escapeDoubleQuotes(label))\n\n/** @internal */\nexport const logfmtLogger = makeLogger<unknown, string>(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const nowMillis = date.getTime()\n\n    const outputArray = [\n      `timestamp=${date.toISOString()}`,\n      `level=${logLevel.label}`,\n      `fiber=${_fiberId.threadName(fiberId)}`\n    ]\n\n    let output = outputArray.join(\" \")\n\n    const messageArr = Arr.ensure(message)\n    for (let i = 0; i < messageArr.length; i++) {\n      const stringMessage = Inspectable.toStringUnknown(messageArr[i], 0)\n      if (stringMessage.length > 0) {\n        output = output + \" message=\"\n        output = appendQuotedLogfmt(stringMessage, output)\n      }\n    }\n\n    if (cause != null && cause._tag !== \"Empty\") {\n      output = output + \" cause=\"\n      output = appendQuotedLogfmt(Cause.pretty(cause, { renderErrorCause: true }), output)\n    }\n\n    if (List.isCons(spans)) {\n      output = output + \" \"\n\n      let first = true\n      for (const span of spans) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + pipe(span, renderLogSpanLogfmt(nowMillis))\n      }\n    }\n\n    if (HashMap.size(annotations) > 0) {\n      output = output + \" \"\n\n      let first = true\n      for (const [key, value] of annotations) {\n        if (first) {\n          first = false\n        } else {\n          output = output + \" \"\n        }\n        output = output + filterKeyName(key)\n        output = output + \"=\"\n        output = appendQuotedLogfmt(Inspectable.toStringUnknown(value, 0), output)\n      }\n    }\n\n    return output\n  }\n)\n\n/** @internal */\nexport const structuredLogger = makeLogger<unknown, {\n  readonly logLevel: string\n  readonly fiberId: string\n  readonly timestamp: string\n  readonly message: unknown\n  readonly cause: string | undefined\n  readonly annotations: Record<string, unknown>\n  readonly spans: Record<string, number>\n}>(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const now = date.getTime()\n    const annotationsObj: Record<string, unknown> = {}\n    const spansObj: Record<string, number> = {}\n\n    if (HashMap.size(annotations) > 0) {\n      for (const [k, v] of annotations) {\n        annotationsObj[k] = structuredMessage(v)\n      }\n    }\n\n    if (List.isCons(spans)) {\n      for (const span of spans) {\n        spansObj[span.label] = now - span.startTime\n      }\n    }\n\n    const messageArr = Arr.ensure(message)\n    return {\n      message: messageArr.length === 1 ? structuredMessage(messageArr[0]) : messageArr.map(structuredMessage),\n      logLevel: logLevel.label,\n      timestamp: date.toISOString(),\n      cause: Cause.isEmpty(cause) ? undefined : Cause.pretty(cause, { renderErrorCause: true }),\n      annotations: annotationsObj,\n      spans: spansObj,\n      fiberId: _fiberId.threadName(fiberId)\n    }\n  }\n)\n\nexport const structuredMessage = (u: unknown): unknown => {\n  switch (typeof u) {\n    case \"bigint\":\n    case \"function\":\n    case \"symbol\": {\n      return String(u)\n    }\n    default: {\n      return u\n    }\n  }\n}\n\n/** @internal */\nexport const jsonLogger = map(structuredLogger, Inspectable.stringifyCircular)\n\n/** @internal */\nconst filterKeyName = (key: string) => key.replace(/[\\s=\"]/g, \"_\")\n\n/** @internal */\nconst escapeDoubleQuotesLogfmt = (str: string) => JSON.stringify(str)\n\n/** @internal */\nconst appendQuotedLogfmt = (label: string, output: string): string =>\n  output + (label.match(textOnly) ? label : escapeDoubleQuotesLogfmt(label))\n\n/** @internal */\nconst renderLogSpanLogfmt = (now: number) => (self: LogSpan.LogSpan): string => {\n  const label = filterKeyName(self.label)\n  return `${label}=${now - self.startTime}ms`\n}\n\n/** @internal */\nexport const isLogger = (u: unknown): u is Logger.Logger<unknown, unknown> => {\n  return typeof u === \"object\" && u != null && LoggerTypeId in u\n}\n\nconst withColor = (text: string, ...colors: ReadonlyArray<string>) => {\n  let out = \"\"\n  for (let i = 0; i < colors.length; i++) {\n    out += `\\x1b[${colors[i]}m`\n  }\n  return out + text + \"\\x1b[0m\"\n}\nconst withColorNoop = (text: string, ..._colors: ReadonlyArray<string>) => text\nconst colors = {\n  bold: \"1\",\n  red: \"31\",\n  green: \"32\",\n  yellow: \"33\",\n  blue: \"34\",\n  cyan: \"36\",\n  white: \"37\",\n  gray: \"90\",\n  black: \"30\",\n  bgBrightRed: \"101\"\n} as const\n\nconst logLevelColors: Record<LogLevel.LogLevel[\"_tag\"], ReadonlyArray<string>> = {\n  None: [],\n  All: [],\n  Trace: [colors.gray],\n  Debug: [colors.blue],\n  Info: [colors.green],\n  Warning: [colors.yellow],\n  Error: [colors.red],\n  Fatal: [colors.bgBrightRed, colors.black]\n}\nconst logLevelStyle: Record<LogLevel.LogLevel[\"_tag\"], string> = {\n  None: \"\",\n  All: \"\",\n  Trace: \"color:gray\",\n  Debug: \"color:blue\",\n  Info: \"color:green\",\n  Warning: \"color:orange\",\n  Error: \"color:red\",\n  Fatal: \"background-color:red;color:white\"\n}\n\nconst defaultDateFormat = (date: Date): string =>\n  `${date.getHours().toString().padStart(2, \"0\")}:${date.getMinutes().toString().padStart(2, \"0\")}:${\n    date.getSeconds().toString().padStart(2, \"0\")\n  }.${date.getMilliseconds().toString().padStart(3, \"0\")}`\n\nconst processStdoutIsTTY = typeof process === \"object\" &&\n  process !== null &&\n  typeof process.stdout === \"object\" &&\n  process.stdout !== null &&\n  process.stdout.isTTY === true\nconst hasWindow = typeof window === \"object\"\nconst isWorker = typeof self === \"object\" &&\n  self !== null &&\n  typeof self.constructor === \"function\" &&\n  self.constructor.name.includes(\"Worker\")\n\n/** @internal */\nexport const prettyLogger = (options?: {\n  readonly colors?: \"auto\" | boolean | undefined\n  readonly stderr?: boolean | undefined\n  readonly formatDate?: ((date: Date) => string) | undefined\n  readonly mode?: \"browser\" | \"tty\" | \"auto\" | undefined\n}) => {\n  const mode_ = options?.mode ?? \"auto\"\n  const mode = mode_ === \"auto\" ? (hasWindow || isWorker ? \"browser\" : \"tty\") : mode_\n  const isBrowser = mode === \"browser\"\n  const showColors = typeof options?.colors === \"boolean\" ? options.colors : processStdoutIsTTY || isBrowser\n  const formatDate = options?.formatDate ?? defaultDateFormat\n  return isBrowser\n    ? prettyLoggerBrowser({ colors: showColors, formatDate })\n    : prettyLoggerTty({ colors: showColors, formatDate, stderr: options?.stderr === true })\n}\n\nconst prettyLoggerTty = (options: {\n  readonly colors: boolean\n  readonly stderr: boolean\n  readonly formatDate: (date: Date) => string\n}) => {\n  const processIsBun = typeof process === \"object\" && \"isBun\" in process && process.isBun === true\n  const color = options.colors && processStdoutIsTTY ? withColor : withColorNoop\n  return makeLogger<unknown, void>(\n    ({ annotations, cause, context, date, fiberId, logLevel, message: message_, spans }) => {\n      const services = FiberRefs.getOrDefault(context, defaultServices.currentServices)\n      const console = Context.get(services, consoleTag).unsafe\n      const log = options.stderr === true ? console.error : console.log\n\n      const message = Arr.ensure(message_)\n\n      let firstLine = color(`[${options.formatDate(date)}]`, colors.white)\n        + ` ${color(logLevel.label, ...logLevelColors[logLevel._tag])}`\n        + ` (${_fiberId.threadName(fiberId)})`\n\n      if (List.isCons(spans)) {\n        const now = date.getTime()\n        const render = renderLogSpanLogfmt(now)\n        for (const span of spans) {\n          firstLine += \" \" + render(span)\n        }\n      }\n\n      firstLine += \":\"\n      let messageIndex = 0\n      if (message.length > 0) {\n        const firstMaybeString = structuredMessage(message[0])\n        if (typeof firstMaybeString === \"string\") {\n          firstLine += \" \" + color(firstMaybeString, colors.bold, colors.cyan)\n          messageIndex++\n        }\n      }\n\n      log(firstLine)\n      if (!processIsBun) console.group()\n\n      if (!Cause.isEmpty(cause)) {\n        log(Cause.pretty(cause, { renderErrorCause: true }))\n      }\n\n      if (messageIndex < message.length) {\n        for (; messageIndex < message.length; messageIndex++) {\n          log(message[messageIndex])\n        }\n      }\n\n      if (HashMap.size(annotations) > 0) {\n        for (const [key, value] of annotations) {\n          log(color(`${key}:`, colors.bold, colors.white), value)\n        }\n      }\n\n      if (!processIsBun) console.groupEnd()\n    }\n  )\n}\n\nconst prettyLoggerBrowser = (options: {\n  readonly colors: boolean\n  readonly formatDate: (date: Date) => string\n}) => {\n  const color = options.colors ? \"%c\" : \"\"\n  return makeLogger<unknown, void>(\n    ({ annotations, cause, context, date, fiberId, logLevel, message: message_, spans }) => {\n      const services = FiberRefs.getOrDefault(context, defaultServices.currentServices)\n      const console = Context.get(services, consoleTag).unsafe\n      const message = Arr.ensure(message_)\n\n      let firstLine = `${color}[${options.formatDate(date)}]`\n      const firstParams = []\n      if (options.colors) {\n        firstParams.push(\"color:gray\")\n      }\n      firstLine += ` ${color}${logLevel.label}${color} (${_fiberId.threadName(fiberId)})`\n      if (options.colors) {\n        firstParams.push(logLevelStyle[logLevel._tag], \"\")\n      }\n      if (List.isCons(spans)) {\n        const now = date.getTime()\n        const render = renderLogSpanLogfmt(now)\n        for (const span of spans) {\n          firstLine += \" \" + render(span)\n        }\n      }\n\n      firstLine += \":\"\n\n      let messageIndex = 0\n      if (message.length > 0) {\n        const firstMaybeString = structuredMessage(message[0])\n        if (typeof firstMaybeString === \"string\") {\n          firstLine += ` ${color}${firstMaybeString}`\n          if (options.colors) {\n            firstParams.push(\"color:deepskyblue\")\n          }\n          messageIndex++\n        }\n      }\n\n      console.groupCollapsed(firstLine, ...firstParams)\n\n      if (!Cause.isEmpty(cause)) {\n        console.error(Cause.pretty(cause, { renderErrorCause: true }))\n      }\n\n      if (messageIndex < message.length) {\n        for (; messageIndex < message.length; messageIndex++) {\n          console.log(message[messageIndex])\n        }\n      }\n\n      if (HashMap.size(annotations) > 0) {\n        for (const [key, value] of annotations) {\n          if (options.colors) {\n            console.log(`%c${key}:`, \"color:gray\", value)\n          } else {\n            console.log(`${key}:`, value)\n          }\n        }\n      }\n\n      console.groupEnd()\n    }\n  )\n}\n", "import * as Arr from \"../Array.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Metric from \"../Metric.js\"\nimport type * as MetricBoundaries from \"../MetricBoundaries.js\"\nimport type * as MetricHook from \"../MetricHook.js\"\nimport type * as MetricKey from \"../MetricKey.js\"\nimport type * as MetricKeyType from \"../MetricKeyType.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport type * as MetricPair from \"../MetricPair.js\"\nimport type * as MetricRegistry from \"../MetricRegistry.js\"\nimport type * as MetricState from \"../MetricState.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Cause from \"./cause.js\"\nimport * as _effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricKey from \"./metric/key.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as metricRegistry from \"./metric/registry.js\"\n\n/** @internal */\nconst MetricSymbolKey = \"effect/Metric\"\n\n/** @internal */\nexport const MetricTypeId: Metric.MetricTypeId = Symbol.for(\n  MetricSymbolKey\n) as Metric.MetricTypeId\n\nconst metricVariance = {\n  /* c8 ignore next */\n  _Type: (_: any) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nexport const globalMetricRegistry: MetricRegistry.MetricRegistry = globalValue(\n  Symbol.for(\"effect/Metric/globalMetricRegistry\"),\n  () => metricRegistry.make()\n)\n\n/** @internal */\nexport const make: Metric.MetricApply = function<Type, In, Out>(\n  keyType: Type,\n  unsafeUpdate: (input: In, extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => void,\n  unsafeValue: (extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => Out\n): Metric.Metric<Type, In, Out> {\n  const metric: Metric.Metric<Type, In, Out> = Object.assign(\n    <A extends In, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n      core.tap(effect, (a) => update(metric, a)),\n    {\n      [MetricTypeId]: metricVariance,\n      keyType,\n      unsafeUpdate,\n      unsafeValue,\n      register() {\n        this.unsafeValue([])\n        return this as any\n      },\n      pipe() {\n        return pipeArguments(this, arguments)\n      }\n    } as const\n  )\n  return metric\n}\n\n/** @internal */\nexport const mapInput = dual<\n  <In, In2>(f: (input: In2) => In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In2, Out>,\n  <Type, In, Out, In2>(self: Metric.Metric<Type, In, Out>, f: (input: In2) => In) => Metric.Metric<Type, In2, Out>\n>(2, (self, f) =>\n  make(\n    self.keyType,\n    (input, extraTags) => self.unsafeUpdate(f(input), extraTags),\n    self.unsafeValue\n  ))\n\n/** @internal */\nexport const counter: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n    readonly incremental?: boolean | undefined\n  }): Metric.Metric.Counter<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n    readonly incremental?: boolean | undefined\n  }): Metric.Metric.Counter<bigint>\n} = (name, options) => fromMetricKey(metricKey.counter(name, options as any)) as any\n\n/** @internal */\nexport const frequency = (name: string, options?: {\n  readonly description?: string | undefined\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): Metric.Metric.Frequency<string> => fromMetricKey(metricKey.frequency(name, options))\n\n/** @internal */\nexport const withConstantInput = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, unknown, Out>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Metric.Metric<Type, unknown, Out>\n>(2, (self, input) => mapInput(self, () => input))\n\n/** @internal */\nexport const fromMetricKey = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  key: MetricKey.MetricKey<Type>\n): Metric.Metric<\n  Type,\n  MetricKeyType.MetricKeyType.InType<Type>,\n  MetricKeyType.MetricKeyType.OutType<Type>\n> => {\n  let untaggedHook:\n    | MetricHook.MetricHook<\n      MetricKeyType.MetricKeyType.InType<Type>,\n      MetricKeyType.MetricKeyType.OutType<Type>\n    >\n    | undefined\n  const hookCache = new WeakMap<ReadonlyArray<MetricLabel.MetricLabel>, MetricHook.MetricHook<any, any>>()\n\n  const hook = (extraTags: ReadonlyArray<MetricLabel.MetricLabel>): MetricHook.MetricHook<\n    MetricKeyType.MetricKeyType.InType<Type>,\n    MetricKeyType.MetricKeyType.OutType<Type>\n  > => {\n    if (extraTags.length === 0) {\n      if (untaggedHook !== undefined) {\n        return untaggedHook\n      }\n      untaggedHook = globalMetricRegistry.get(key)\n      return untaggedHook\n    }\n\n    let hook = hookCache.get(extraTags)\n    if (hook !== undefined) {\n      return hook\n    }\n    hook = globalMetricRegistry.get(metricKey.taggedWithLabels(key, extraTags))\n    hookCache.set(extraTags, hook)\n    return hook\n  }\n\n  return make(\n    key.keyType,\n    (input, extraTags) => hook(extraTags).update(input),\n    (extraTags) => hook(extraTags).get()\n  )\n}\n\n/** @internal */\nexport const gauge: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n  }): Metric.Metric.Gauge<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n  }): Metric.Metric.Gauge<bigint>\n} = (name, options) => fromMetricKey(metricKey.gauge(name, options as any)) as any\n\n/** @internal */\nexport const histogram = (name: string, boundaries: MetricBoundaries.MetricBoundaries, description?: string) =>\n  fromMetricKey(metricKey.histogram(name, boundaries, description))\n\n/* @internal */\nexport const increment = (\n  self: Metric.Metric.Counter<number> | Metric.Metric.Counter<bigint>\n): Effect.Effect<void> => update(self as Metric.Metric.Counter<number>, self.keyType.bigint ? BigInt(1) as any : 1)\n\n/* @internal */\nexport const incrementBy = dual<\n  {\n    (amount: number): (self: Metric.Metric.Counter<number>) => Effect.Effect<void>\n    (amount: bigint): (self: Metric.Metric.Counter<bigint>) => Effect.Effect<void>\n  },\n  {\n    (self: Metric.Metric.Counter<number>, amount: number): Effect.Effect<void>\n    (self: Metric.Metric.Counter<bigint>, amount: bigint): Effect.Effect<void>\n  }\n>(2, (self, amount) => update(self as any, amount))\n\n/** @internal */\nexport const map = dual<\n  <Out, Out2>(f: (out: Out) => Out2) => <Type, In>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out2>,\n  <Type, In, Out, Out2>(self: Metric.Metric<Type, In, Out>, f: (out: Out) => Out2) => Metric.Metric<Type, In, Out2>\n>(2, (self, f) =>\n  make(\n    self.keyType,\n    self.unsafeUpdate,\n    (extraTags) => f(self.unsafeValue(extraTags))\n  ))\n\n/** @internal */\nexport const mapType = dual<\n  <Type, Type2>(\n    f: (type: Type) => Type2\n  ) => <In, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => Metric.Metric<Type2, In, Out>,\n  <Type, In, Out, Type2>(\n    self: Metric.Metric<Type, In, Out>,\n    f: (type: Type) => Type2\n  ) => Metric.Metric<Type2, In, Out>\n>(2, (self, f) => make(f(self.keyType), self.unsafeUpdate, self.unsafeValue))\n\n/* @internal */\nexport const set = dual<\n  {\n    (value: number): (self: Metric.Metric.Gauge<number>) => Effect.Effect<void>\n    (value: bigint): (self: Metric.Metric.Gauge<bigint>) => Effect.Effect<void>\n  },\n  {\n    (self: Metric.Metric.Gauge<number>, value: number): Effect.Effect<void>\n    (self: Metric.Metric.Gauge<bigint>, value: bigint): Effect.Effect<void>\n  }\n>(2, (self, value) => update(self as any, value))\n\n/** @internal */\nexport const succeed = <Out>(out: Out): Metric.Metric<void, unknown, Out> => make(void 0 as void, constVoid, () => out)\n\n/** @internal */\nexport const sync = <Out>(evaluate: LazyArg<Out>): Metric.Metric<void, unknown, Out> =>\n  make(void 0 as void, constVoid, evaluate)\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): Metric.Metric.Summary<number> => withNow(summaryTimestamp(options))\n\n/** @internal */\nexport const summaryTimestamp = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): Metric.Metric.Summary<readonly [value: number, timestamp: number]> => fromMetricKey(metricKey.summary(options))\n\n/** @internal */\nexport const tagged = dual<\n  <Type, In, Out>(key: string, value: string) => (self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, key: string, value: string) => Metric.Metric<Type, In, Out>\n>(3, (self, key, value) => taggedWithLabels(self, [metricLabel.make(key, value)]))\n\n/** @internal */\nexport const taggedWithLabelsInput = dual<\n  <In>(\n    f: (input: In) => Iterable<MetricLabel.MetricLabel>\n  ) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, void>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    f: (input: In) => Iterable<MetricLabel.MetricLabel>\n  ) => Metric.Metric<Type, In, void>\n>(2, (self, f) =>\n  map(\n    make(\n      self.keyType,\n      (input, extraTags) =>\n        self.unsafeUpdate(\n          input,\n          Arr.union(f(input), extraTags)\n        ),\n      self.unsafeValue\n    ),\n    constVoid\n  ))\n\n/** @internal */\nexport const taggedWithLabels = dual<\n  <Type, In, Out>(\n    extraTags: Iterable<MetricLabel.MetricLabel>\n  ) => (self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    extraTags: Iterable<MetricLabel.MetricLabel>\n  ) => Metric.Metric<Type, In, Out>\n>(2, (self, extraTags) => {\n  return make(\n    self.keyType,\n    (input, extraTags1) => self.unsafeUpdate(input, Arr.union(extraTags, extraTags1)),\n    (extraTags1) => self.unsafeValue(Arr.union(extraTags, extraTags1))\n  )\n})\n\n/** @internal */\nexport const timer = (name: string, description?: string): Metric.Metric<\n  MetricKeyType.MetricKeyType.Histogram,\n  Duration.Duration,\n  MetricState.MetricState.Histogram\n> => {\n  const boundaries = metricBoundaries.exponential({\n    start: 0.5,\n    factor: 2,\n    count: 35\n  })\n  const base = pipe(histogram(name, boundaries, description), tagged(\"time_unit\", \"milliseconds\"))\n  return mapInput(base, Duration.toMillis)\n}\n\n/** @internal */\nexport const timerWithBoundaries = (\n  name: string,\n  boundaries: ReadonlyArray<number>,\n  description?: string\n): Metric.Metric<\n  MetricKeyType.MetricKeyType.Histogram,\n  Duration.Duration,\n  MetricState.MetricState.Histogram\n> => {\n  const base = pipe(\n    histogram(name, metricBoundaries.fromIterable(boundaries), description),\n    tagged(\"time_unit\", \"milliseconds\")\n  )\n  return mapInput(base, Duration.toMillis)\n}\n\n/* @internal */\nexport const trackAll = dual<\n  <In>(\n    input: In\n  ) => <Type, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    input: In\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, input) => (effect) =>\n  core.matchCauseEffect(effect, {\n    onFailure: (cause) => core.zipRight(update(self, input), core.failCause(cause)),\n    onSuccess: (value) => core.zipRight(update(self, input), core.succeed(value))\n  }))\n\n/* @internal */\nexport const trackDefect = dual<\n  <Type, Out>(\n    metric: Metric.Metric<Type, unknown, Out>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, unknown, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => trackDefectWith(self, metric, identity))\n\n/* @internal */\nexport const trackDefectWith = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (defect: unknown) => In\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (defect: unknown) => In\n  ) => Effect.Effect<A, E, R>\n>(3, (self, metric, f) => {\n  const updater = (defect: unknown) => update(metric, f(defect))\n  return _effect.tapDefect(self, (cause) => core.forEachSequentialDiscard(Cause.defects(cause), updater))\n})\n\n/* @internal */\nexport const trackDuration = dual<\n  <Type, Out>(\n    metric: Metric.Metric<Type, Duration.Duration, Out>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, Duration.Duration, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => trackDurationWith(self, metric, identity))\n\n/* @internal */\nexport const trackDurationWith = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (duration: Duration.Duration) => In\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (duration: Duration.Duration) => In\n  ) => Effect.Effect<A, E, R>\n>(3, (self, metric, f) =>\n  Clock.clockWith((clock) => {\n    const startTime = clock.unsafeCurrentTimeNanos()\n    return core.tap(self, (_) => {\n      const endTime = clock.unsafeCurrentTimeNanos()\n      const duration = Duration.nanos(endTime - startTime)\n      return update(metric, f(duration))\n    })\n  }))\n\n/* @internal */\nexport const trackError = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A, E extends In, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E extends In, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, <A, E extends In, R, Type, In, Out>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>\n) => trackErrorWith(self, metric, (a: In) => a))\n\n/* @internal */\nexport const trackErrorWith = dual<\n  <Type, In, Out, In2>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (error: In2) => In\n  ) => <A, E extends In2, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E extends In2, R, Type, In, Out, In2>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (error: In2) => In\n  ) => Effect.Effect<A, E, R>\n>(3, <A, E extends In2, R, Type, In, Out, In2>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>,\n  f: (error: In2) => In\n) => {\n  const updater = (error: E): Effect.Effect<void> => update(metric, f(error))\n  return _effect.tapError(self, updater)\n})\n\n/* @internal */\nexport const trackSuccess = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A extends In, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, <A extends In, E, R, Type, In, Out>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>\n) => trackSuccessWith(self, metric, (a: In) => a))\n\n/* @internal */\nexport const trackSuccessWith = dual<\n  <Type, In, Out, In2>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (value: In2) => In\n  ) => <A extends In2, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In2, E, R, Type, In, Out, In2>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (value: In2) => In\n  ) => Effect.Effect<A, E, R>\n>(3, <A extends In2, E, R, Type, In, Out, In2>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>,\n  f: (value: In2) => In\n) => {\n  const updater = (value: A): Effect.Effect<void> => update(metric, f(value))\n  return core.tap(self, updater)\n})\n\n/* @internal */\nexport const update = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Effect.Effect<void>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Effect.Effect<void>\n>(2, (self, input) =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeUpdate(input, tags))\n  ))\n\n/* @internal */\nexport const value = <Type, In, Out>(\n  self: Metric.Metric<Type, In, Out>\n): Effect.Effect<Out> =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeValue(tags))\n  )\n\n/** @internal */\nexport const withNow = <Type, In, Out>(\n  self: Metric.Metric<Type, readonly [In, number], Out>\n): Metric.Metric<Type, In, Out> => mapInput(self, (input: In) => [input, Date.now()] as const)\n\n/** @internal */\nexport const zip = dual<\n  <Type2, In2, Out2>(\n    that: Metric.Metric<Type2, In2, Out2>\n  ) => <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => Metric.Metric<readonly [Type, Type2], readonly [In, In2], [Out, Out2]>,\n  <Type, In, Out, Type2, In2, Out2>(\n    self: Metric.Metric<Type, In, Out>,\n    that: Metric.Metric<Type2, In2, Out2>\n  ) => Metric.Metric<readonly [Type, Type2], readonly [In, In2], [Out, Out2]>\n>(\n  2,\n  <Type, In, Out, Type2, In2, Out2>(self: Metric.Metric<Type, In, Out>, that: Metric.Metric<Type2, In2, Out2>) =>\n    make(\n      [self.keyType, that.keyType] as const,\n      (input: readonly [In, In2], extraTags) => {\n        const [l, r] = input\n        self.unsafeUpdate(l, extraTags)\n        that.unsafeUpdate(r, extraTags)\n      },\n      (extraTags) => [self.unsafeValue(extraTags), that.unsafeValue(extraTags)]\n    )\n)\n\n/** @internal */\nexport const unsafeSnapshot = (): Array<MetricPair.MetricPair.Untyped> => globalMetricRegistry.snapshot()\n\n/** @internal */\nexport const snapshot: Effect.Effect<Array<MetricPair.MetricPair.Untyped>> = core.sync(\n  unsafeSnapshot\n)\n", "import * as Arr from \"../../Array.js\"\nimport * as Chunk from \"../../Chunk.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricBoundariesSymbolKey = \"effect/MetricBoundaries\"\n\n/** @internal */\nexport const MetricBoundariesTypeId: MetricBoundaries.MetricBoundariesTypeId = Symbol.for(\n  MetricBoundariesSymbolKey\n) as MetricBoundaries.MetricBoundariesTypeId\n\n/** @internal */\nclass MetricBoundariesImpl implements MetricBoundaries.MetricBoundaries {\n  readonly [MetricBoundariesTypeId]: MetricBoundaries.MetricBoundariesTypeId = MetricBoundariesTypeId\n  constructor(readonly values: ReadonlyArray<number>) {\n    this._hash = pipe(\n      Hash.string(MetricBoundariesSymbolKey),\n      Hash.combine(Hash.array(this.values))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isMetricBoundaries(u) && Equal.equals(this.values, u.values)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isMetricBoundaries = (u: unknown): u is MetricBoundaries.MetricBoundaries =>\n  hasProperty(u, MetricBoundariesTypeId)\n\n/** @internal */\nexport const fromIterable = (iterable: Iterable<number>): MetricBoundaries.MetricBoundaries => {\n  const values = pipe(\n    iterable,\n    Arr.appendAll(Chunk.of(Number.POSITIVE_INFINITY)),\n    Arr.dedupe\n  )\n  return new MetricBoundariesImpl(values)\n}\n\n/** @internal */\nexport const linear = (options: {\n  readonly start: number\n  readonly width: number\n  readonly count: number\n}): MetricBoundaries.MetricBoundaries =>\n  pipe(\n    Arr.makeBy(options.count - 1, (i) => options.start + i * options.width),\n    Chunk.unsafeFromArray,\n    fromIterable\n  )\n\n/** @internal */\nexport const exponential = (options: {\n  readonly start: number\n  readonly factor: number\n  readonly count: number\n}): MetricBoundaries.MetricBoundaries =>\n  pipe(\n    Arr.makeBy(options.count - 1, (i) => options.start * Math.pow(options.factor, i)),\n    Chunk.unsafeFromArray,\n    fromIterable\n  )\n", "import * as Arr from \"../../Array.js\"\nimport type * as Duration from \"../../Duration.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricLabel from \"../../MetricLabel.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\nimport * as metricKeyType from \"./keyType.js\"\nimport * as metricLabel from \"./label.js\"\n\n/** @internal */\nconst MetricKeySymbolKey = \"effect/MetricKey\"\n\n/** @internal */\nexport const MetricKeyTypeId: MetricKey.MetricKeyTypeId = Symbol.for(\n  MetricKeySymbolKey\n) as MetricKey.MetricKeyTypeId\n\nconst metricKeyVariance = {\n  /* c8 ignore next */\n  _Type: (_: never) => _\n}\n\nconst arrayEquivilence = Arr.getEquivalence(Equal.equals)\n\n/** @internal */\nclass MetricKeyImpl<out Type extends MetricKeyType.MetricKeyType<any, any>> implements MetricKey.MetricKey<Type> {\n  readonly [MetricKeyTypeId] = metricKeyVariance\n  constructor(\n    readonly name: string,\n    readonly keyType: Type,\n    readonly description: Option.Option<string>,\n    readonly tags: ReadonlyArray<MetricLabel.MetricLabel> = []\n  ) {\n    this._hash = pipe(\n      Hash.string(this.name + this.description),\n      Hash.combine(Hash.hash(this.keyType)),\n      Hash.combine(Hash.array(this.tags))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isMetricKey(u) &&\n      this.name === u.name &&\n      Equal.equals(this.keyType, u.keyType) &&\n      Equal.equals(this.description, u.description) &&\n      arrayEquivilence(this.tags, u.tags)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isMetricKey = (u: unknown): u is MetricKey.MetricKey<MetricKeyType.MetricKeyType<unknown, unknown>> =>\n  hasProperty(u, MetricKeyTypeId)\n\n/** @internal */\nexport const counter: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n    readonly incremental?: boolean | undefined\n  }): MetricKey.MetricKey.Counter<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n    readonly incremental?: boolean | undefined\n  }): MetricKey.MetricKey.Counter<bigint>\n} = (name: string, options) =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.counter(options as any),\n    Option.fromNullable(options?.description)\n  )\n\n/** @internal */\nexport const frequency = (name: string, options?: {\n  readonly description?: string | undefined\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): MetricKey.MetricKey.Frequency =>\n  new MetricKeyImpl(name, metricKeyType.frequency(options), Option.fromNullable(options?.description))\n\n/** @internal */\nexport const gauge: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n  }): MetricKey.MetricKey.Gauge<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n  }): MetricKey.MetricKey.Gauge<bigint>\n} = (name, options) =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.gauge(options as any),\n    Option.fromNullable(options?.description)\n  )\n\n/** @internal */\nexport const histogram = (\n  name: string,\n  boundaries: MetricBoundaries.MetricBoundaries,\n  description?: string\n): MetricKey.MetricKey.Histogram =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.histogram(boundaries),\n    Option.fromNullable(description)\n  )\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): MetricKey.MetricKey.Summary =>\n  new MetricKeyImpl(\n    options.name,\n    metricKeyType.summary(options),\n    Option.fromNullable(options.description)\n  )\n\n/** @internal */\nexport const tagged = dual<\n  (\n    key: string,\n    value: string\n  ) => <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>\n  ) => MetricKey.MetricKey<Type>,\n  <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>,\n    key: string,\n    value: string\n  ) => MetricKey.MetricKey<Type>\n>(3, (self, key, value) => taggedWithLabels(self, [metricLabel.make(key, value)]))\n\n/** @internal */\nexport const taggedWithLabels = dual<\n  (\n    extraTags: ReadonlyArray<MetricLabel.MetricLabel>\n  ) => <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>\n  ) => MetricKey.MetricKey<Type>,\n  <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>,\n    extraTags: ReadonlyArray<MetricLabel.MetricLabel>\n  ) => MetricKey.MetricKey<Type>\n>(2, (self, extraTags) =>\n  extraTags.length === 0\n    ? self\n    : new MetricKeyImpl(self.name, self.keyType, self.description, Arr.union(self.tags, extraTags)))\n", "import * as Duration from \"../../Duration.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricKeyTypeSymbolKey = \"effect/MetricKeyType\"\n\n/** @internal */\nexport const MetricKeyTypeTypeId: MetricKeyType.MetricKeyTypeTypeId = Symbol.for(\n  MetricKeyTypeSymbolKey\n) as MetricKeyType.MetricKeyTypeTypeId\n\n/** @internal */\nconst CounterKeyTypeSymbolKey = \"effect/MetricKeyType/Counter\"\n\n/** @internal */\nexport const CounterKeyTypeTypeId: MetricKeyType.CounterKeyTypeTypeId = Symbol.for(\n  CounterKeyTypeSymbolKey\n) as MetricKeyType.CounterKeyTypeTypeId\n\n/** @internal */\nconst FrequencyKeyTypeSymbolKey = \"effect/MetricKeyType/Frequency\"\n\n/** @internal */\nexport const FrequencyKeyTypeTypeId: MetricKeyType.FrequencyKeyTypeTypeId = Symbol.for(\n  FrequencyKeyTypeSymbolKey\n) as MetricKeyType.FrequencyKeyTypeTypeId\n\n/** @internal */\nconst GaugeKeyTypeSymbolKey = \"effect/MetricKeyType/Gauge\"\n\n/** @internal */\nexport const GaugeKeyTypeTypeId: MetricKeyType.GaugeKeyTypeTypeId = Symbol.for(\n  GaugeKeyTypeSymbolKey\n) as MetricKeyType.GaugeKeyTypeTypeId\n\n/** @internal */\nconst HistogramKeyTypeSymbolKey = \"effect/MetricKeyType/Histogram\"\n\n/** @internal */\nexport const HistogramKeyTypeTypeId: MetricKeyType.HistogramKeyTypeTypeId = Symbol.for(\n  HistogramKeyTypeSymbolKey\n) as MetricKeyType.HistogramKeyTypeTypeId\n\n/** @internal */\nconst SummaryKeyTypeSymbolKey = \"effect/MetricKeyType/Summary\"\n\n/** @internal */\nexport const SummaryKeyTypeTypeId: MetricKeyType.SummaryKeyTypeTypeId = Symbol.for(\n  SummaryKeyTypeSymbolKey\n) as MetricKeyType.SummaryKeyTypeTypeId\n\nconst metricKeyTypeVariance = {\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nclass CounterKeyType<A extends (number | bigint)> implements MetricKeyType.MetricKeyType.Counter<A> {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [CounterKeyTypeTypeId]: MetricKeyType.CounterKeyTypeTypeId = CounterKeyTypeTypeId\n  constructor(readonly incremental: boolean, readonly bigint: boolean) {\n    this._hash = Hash.string(CounterKeyTypeSymbolKey)\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isCounterKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst FrequencyKeyTypeHash = Hash.string(FrequencyKeyTypeSymbolKey)\n\n/** @internal */\nclass FrequencyKeyType implements MetricKeyType.MetricKeyType.Frequency {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [FrequencyKeyTypeTypeId]: MetricKeyType.FrequencyKeyTypeTypeId = FrequencyKeyTypeTypeId\n  constructor(readonly preregisteredWords: ReadonlyArray<string>) {}\n  [Hash.symbol](): number {\n    return FrequencyKeyTypeHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFrequencyKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst GaugeKeyTypeHash = Hash.string(GaugeKeyTypeSymbolKey)\n\n/** @internal */\nclass GaugeKeyType<A extends (number | bigint)> implements MetricKeyType.MetricKeyType.Gauge<A> {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [GaugeKeyTypeTypeId]: MetricKeyType.GaugeKeyTypeTypeId = GaugeKeyTypeTypeId\n  constructor(readonly bigint: boolean) {}\n  [Hash.symbol](): number {\n    return GaugeKeyTypeHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isGaugeKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport class HistogramKeyType implements MetricKeyType.MetricKeyType.Histogram {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [HistogramKeyTypeTypeId]: MetricKeyType.HistogramKeyTypeTypeId = HistogramKeyTypeTypeId\n  constructor(readonly boundaries: MetricBoundaries.MetricBoundaries) {\n    this._hash = pipe(\n      Hash.string(HistogramKeyTypeSymbolKey),\n      Hash.combine(Hash.hash(this.boundaries))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isHistogramKey(that) && Equal.equals(this.boundaries, that.boundaries)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass SummaryKeyType implements MetricKeyType.MetricKeyType.Summary {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [SummaryKeyTypeTypeId]: MetricKeyType.SummaryKeyTypeTypeId = SummaryKeyTypeTypeId\n  constructor(\n    readonly maxAge: Duration.Duration,\n    readonly maxSize: number,\n    readonly error: number,\n    readonly quantiles: ReadonlyArray<number>\n  ) {\n    this._hash = pipe(\n      Hash.string(SummaryKeyTypeSymbolKey),\n      Hash.combine(Hash.hash(this.maxAge)),\n      Hash.combine(Hash.hash(this.maxSize)),\n      Hash.combine(Hash.hash(this.error)),\n      Hash.combine(Hash.array(this.quantiles))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isSummaryKey(that) &&\n      Equal.equals(this.maxAge, that.maxAge) &&\n      this.maxSize === that.maxSize &&\n      this.error === that.error &&\n      Equal.equals(this.quantiles, that.quantiles)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const counter: <A extends number | bigint>(options?: {\n  readonly bigint: boolean\n  readonly incremental: boolean\n}) => CounterKeyType<A> = (options) =>\n  new CounterKeyType(\n    options?.incremental ?? false,\n    options?.bigint ?? false\n  )\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const frequency = (options?: {\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): MetricKeyType.MetricKeyType.Frequency => new FrequencyKeyType(options?.preregisteredWords ?? [])\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const gauge: <A extends number | bigint>(options?: {\n  readonly bigint: boolean\n}) => GaugeKeyType<A> = (options) =>\n  new GaugeKeyType(\n    options?.bigint ?? false\n  )\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const histogram = (boundaries: MetricBoundaries.MetricBoundaries): MetricKeyType.MetricKeyType.Histogram => {\n  return new HistogramKeyType(boundaries)\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const summary = (\n  options: {\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n  }\n): MetricKeyType.MetricKeyType.Summary => {\n  return new SummaryKeyType(Duration.decode(options.maxAge), options.maxSize, options.error, options.quantiles)\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isMetricKeyType = (u: unknown): u is MetricKeyType.MetricKeyType<unknown, unknown> =>\n  hasProperty(u, MetricKeyTypeTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isCounterKey = (u: unknown): u is MetricKeyType.MetricKeyType.Counter<number | bigint> =>\n  hasProperty(u, CounterKeyTypeTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isFrequencyKey = (u: unknown): u is MetricKeyType.MetricKeyType.Frequency =>\n  hasProperty(u, FrequencyKeyTypeTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isGaugeKey = (u: unknown): u is MetricKeyType.MetricKeyType.Gauge<number | bigint> =>\n  hasProperty(u, GaugeKeyTypeTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHistogramKey = (u: unknown): u is MetricKeyType.MetricKeyType.Histogram =>\n  hasProperty(u, HistogramKeyTypeTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSummaryKey = (u: unknown): u is MetricKeyType.MetricKeyType.Summary =>\n  hasProperty(u, SummaryKeyTypeTypeId)\n", "import { pipe } from \"../../Function.js\"\nimport type * as MetricHook from \"../../MetricHook.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricPair from \"../../MetricPair.js\"\nimport type * as MetricRegistry from \"../../MetricRegistry.js\"\nimport * as MutableHashMap from \"../../MutableHashMap.js\"\nimport * as Option from \"../../Option.js\"\nimport * as metricHook from \"./hook.js\"\nimport * as metricKeyType from \"./keyType.js\"\nimport * as metricPair from \"./pair.js\"\n\n/** @internal */\nconst MetricRegistrySymbolKey = \"effect/MetricRegistry\"\n\n/** @internal */\nexport const MetricRegistryTypeId: MetricRegistry.MetricRegistryTypeId = Symbol.for(\n  MetricRegistrySymbolKey\n) as MetricRegistry.MetricRegistryTypeId\n\n/** @internal */\nclass MetricRegistryImpl implements MetricRegistry.MetricRegistry {\n  readonly [MetricRegistryTypeId]: MetricRegistry.MetricRegistryTypeId = MetricRegistryTypeId\n\n  private map = MutableHashMap.empty<\n    MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n    MetricHook.MetricHook.Root\n  >()\n\n  snapshot(): Array<MetricPair.MetricPair.Untyped> {\n    const result: Array<MetricPair.MetricPair.Untyped> = []\n    for (const [key, hook] of this.map) {\n      result.push(metricPair.unsafeMake(key, hook.get()))\n    }\n    return result\n  }\n\n  get<Type extends MetricKeyType.MetricKeyType<any, any>>(\n    key: MetricKey.MetricKey<Type>\n  ): MetricHook.MetricHook<\n    MetricKeyType.MetricKeyType.InType<typeof key[\"keyType\"]>,\n    MetricKeyType.MetricKeyType.OutType<typeof key[\"keyType\"]>\n  > {\n    const hook = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (hook == null) {\n      if (metricKeyType.isCounterKey(key.keyType)) {\n        return this.getCounter(key as unknown as MetricKey.MetricKey.Counter<any>) as any\n      }\n      if (metricKeyType.isGaugeKey(key.keyType)) {\n        return this.getGauge(key as unknown as MetricKey.MetricKey.Gauge<any>) as any\n      }\n      if (metricKeyType.isFrequencyKey(key.keyType)) {\n        return this.getFrequency(key as unknown as MetricKey.MetricKey.Frequency) as any\n      }\n      if (metricKeyType.isHistogramKey(key.keyType)) {\n        return this.getHistogram(key as unknown as MetricKey.MetricKey.Histogram) as any\n      }\n      if (metricKeyType.isSummaryKey(key.keyType)) {\n        return this.getSummary(key as unknown as MetricKey.MetricKey.Summary) as any\n      }\n      throw new Error(\n        \"BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/effect/issues\"\n      )\n    } else {\n      return hook as any\n    }\n  }\n\n  getCounter<A extends (number | bigint)>(key: MetricKey.MetricKey.Counter<A>): MetricHook.MetricHook.Counter<A> {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const counter = metricHook.counter(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            counter as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = counter\n    }\n    return value as MetricHook.MetricHook.Counter<A>\n  }\n\n  getFrequency(key: MetricKey.MetricKey.Frequency): MetricHook.MetricHook.Frequency {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const frequency = metricHook.frequency(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            frequency as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = frequency\n    }\n    return value as MetricHook.MetricHook.Frequency\n  }\n\n  getGauge<A extends (number | bigint)>(key: MetricKey.MetricKey.Gauge<A>): MetricHook.MetricHook.Gauge<A> {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const gauge = metricHook.gauge(key as any, key.keyType.bigint ? BigInt(0) as any : 0)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            gauge as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = gauge\n    }\n    return value as MetricHook.MetricHook.Gauge<A>\n  }\n\n  getHistogram(key: MetricKey.MetricKey.Histogram): MetricHook.MetricHook.Histogram {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const histogram = metricHook.histogram(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            histogram as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = histogram\n    }\n    return value as MetricHook.MetricHook.Histogram\n  }\n\n  getSummary(key: MetricKey.MetricKey.Summary): MetricHook.MetricHook.Summary {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const summary = metricHook.summary(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            summary as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = summary\n    }\n    return value as MetricHook.MetricHook.Summary\n  }\n}\n\n/** @internal */\nexport const make = (): MetricRegistry.MetricRegistry => {\n  return new MetricRegistryImpl()\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Duration from \"../../Duration.js\"\nimport type { LazyArg } from \"../../Function.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport type * as MetricHook from \"../../MetricHook.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport * as number from \"../../Number.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport * as metricState from \"./state.js\"\n\n/** @internal */\nconst MetricHookSymbolKey = \"effect/MetricHook\"\n\n/** @internal */\nexport const MetricHookTypeId: MetricHook.MetricHookTypeId = Symbol.for(\n  MetricHookSymbolKey\n) as MetricHook.MetricHookTypeId\n\nconst metricHookVariance = {\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nexport const make = <In, Out>(\n  options: {\n    readonly get: LazyArg<Out>\n    readonly update: (input: In) => void\n  }\n): MetricHook.MetricHook<In, Out> => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  ...options\n})\n\n/** @internal */\nexport const onUpdate = dual<\n  <In, Out>(f: (input: In) => void) => (self: MetricHook.MetricHook<In, Out>) => MetricHook.MetricHook<In, Out>,\n  <In, Out>(self: MetricHook.MetricHook<In, Out>, f: (input: In) => void) => MetricHook.MetricHook<In, Out>\n>(2, (self, f) => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  get: self.get,\n  update: (input) => {\n    self.update(input)\n    return f(input)\n  }\n}))\n\nconst bigint0 = BigInt(0)\n\n/** @internal */\nexport const counter = <A extends (number | bigint)>(\n  key: MetricKey.MetricKey.Counter<A>\n): MetricHook.MetricHook.Counter<A> => {\n  let sum: A = key.keyType.bigint ? bigint0 as A : 0 as A\n  const canUpdate = key.keyType.incremental\n    ? key.keyType.bigint\n      ? (value: A) => value >= bigint0\n      : (value: A) => value >= 0\n    : (_value: A) => true\n  return make({\n    get: () => metricState.counter(sum as number) as unknown as MetricState.MetricState.Counter<A>,\n    update: (value) => {\n      if (canUpdate(value)) {\n        sum = (sum as any) + value\n      }\n    }\n  })\n}\n\n/** @internal */\nexport const frequency = (key: MetricKey.MetricKey.Frequency): MetricHook.MetricHook.Frequency => {\n  const values = new Map<string, number>()\n  for (const word of key.keyType.preregisteredWords) {\n    values.set(word, 0)\n  }\n  const update = (word: string) => {\n    const slotCount = values.get(word) ?? 0\n    values.set(word, slotCount + 1)\n  }\n  return make({\n    get: () => metricState.frequency(values),\n    update\n  })\n}\n\n/** @internal */\nexport const gauge: {\n  (key: MetricKey.MetricKey.Gauge<number>, startAt: number): MetricHook.MetricHook.Gauge<number>\n  (key: MetricKey.MetricKey.Gauge<bigint>, startAt: bigint): MetricHook.MetricHook.Gauge<bigint>\n} = <A extends (number | bigint)>(\n  _key: MetricKey.MetricKey.Gauge<A>,\n  startAt: A\n): MetricHook.MetricHook.Gauge<A> => {\n  let value = startAt\n  return make({\n    get: () => metricState.gauge(value as number) as unknown as MetricState.MetricState.Gauge<A>,\n    update: (v) => {\n      value = v\n    }\n  })\n}\n\n/** @internal */\nexport const histogram = (key: MetricKey.MetricKey.Histogram): MetricHook.MetricHook.Histogram => {\n  const bounds = key.keyType.boundaries.values\n  const size = bounds.length\n  const values = new Uint32Array(size + 1)\n  const boundaries = new Float32Array(size)\n  let count = 0\n  let sum = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n\n  pipe(\n    bounds,\n    Arr.sort(number.Order),\n    Arr.map((n, i) => {\n      boundaries[i] = n\n    })\n  )\n\n  // Insert the value into the right bucket with a binary search\n  const update = (value: number) => {\n    let from = 0\n    let to = size\n    while (from !== to) {\n      const mid = Math.floor(from + (to - from) / 2)\n      const boundary = boundaries[mid]\n      if (value <= boundary) {\n        to = mid\n      } else {\n        from = mid\n      }\n      // The special case when to / from have a distance of one\n      if (to === from + 1) {\n        if (value <= boundaries[from]) {\n          to = from\n        } else {\n          from = to\n        }\n      }\n    }\n    values[from] = values[from]! + 1\n    count = count + 1\n    sum = sum + value\n    if (value < min) {\n      min = value\n    }\n    if (value > max) {\n      max = value\n    }\n  }\n\n  const getBuckets = (): ReadonlyArray<readonly [number, number]> => {\n    const builder: Array<readonly [number, number]> = Arr.allocate(size) as any\n    let cumulated = 0\n    for (let i = 0; i < size; i++) {\n      const boundary = boundaries[i]\n      const value = values[i]\n      cumulated = cumulated + value\n      builder[i] = [boundary, cumulated]\n    }\n    return builder\n  }\n\n  return make({\n    get: () =>\n      metricState.histogram({\n        buckets: getBuckets(),\n        count,\n        min,\n        max,\n        sum\n      }),\n    update\n  })\n}\n\n/** @internal */\nexport const summary = (key: MetricKey.MetricKey.Summary): MetricHook.MetricHook.Summary => {\n  const { error, maxAge, maxSize, quantiles } = key.keyType\n  const sortedQuantiles = pipe(quantiles, Arr.sort(number.Order))\n  const values = Arr.allocate<readonly [number, number]>(maxSize)\n\n  let head = 0\n  let count = 0\n  let sum = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n\n  // Just before the snapshot we filter out all values older than maxAge\n  const snapshot = (now: number): ReadonlyArray<readonly [number, Option.Option<number>]> => {\n    const builder: Array<number> = []\n    // If the buffer is not full yet it contains valid items at the 0..last\n    // indices and null values at the rest of the positions.\n    //\n    // If the buffer is already full then all elements contains a valid\n    // measurement with timestamp.\n    //\n    // At any given point in time we can enumerate all the non-null elements in\n    // the buffer and filter them by timestamp to get a valid view of a time\n    // window.\n    //\n    // The order does not matter because it gets sorted before passing to\n    // `calculateQuantiles`.\n    let i = 0\n    while (i !== maxSize - 1) {\n      const item = values[i]\n      if (item != null) {\n        const [t, v] = item\n        const age = Duration.millis(now - t)\n        if (Duration.greaterThanOrEqualTo(age, Duration.zero) && age <= maxAge) {\n          builder.push(v)\n        }\n      }\n      i = i + 1\n    }\n    return calculateQuantiles(\n      error,\n      sortedQuantiles,\n      Arr.sort(builder, number.Order)\n    )\n  }\n\n  const observe = (value: number, timestamp: number) => {\n    if (maxSize > 0) {\n      head = head + 1\n      const target = head % maxSize\n      values[target] = [timestamp, value] as const\n    }\n    count = count + 1\n    sum = sum + value\n    if (value < min) {\n      min = value\n    }\n    if (value > max) {\n      max = value\n    }\n  }\n\n  return make({\n    get: () =>\n      metricState.summary({\n        error,\n        quantiles: snapshot(Date.now()),\n        count,\n        min,\n        max,\n        sum\n      }),\n    update: ([value, timestamp]) => observe(value, timestamp)\n  })\n}\n\n/** @internal */\ninterface ResolvedQuantile {\n  /**\n   * The quantile that shall be resolved.\n   */\n  readonly quantile: number\n  /**\n   * `Some<number>` if a value for the quantile could be found, otherwise\n   * `None`.\n   */\n  readonly value: Option.Option<number>\n  /**\n   * How many samples have been consumed prior to this quantile.\n   */\n  readonly consumed: number\n  /**\n   * The rest of the samples after the quantile has been resolved.\n   */\n  readonly rest: ReadonlyArray<number>\n}\n\n/** @internal */\nconst calculateQuantiles = (\n  error: number,\n  sortedQuantiles: ReadonlyArray<number>,\n  sortedSamples: ReadonlyArray<number>\n): ReadonlyArray<readonly [number, Option.Option<number>]> => {\n  // The number of samples examined\n  const sampleCount = sortedSamples.length\n  if (!Arr.isNonEmptyReadonlyArray(sortedQuantiles)) {\n    return Arr.empty()\n  }\n  const head = sortedQuantiles[0]\n  const tail = sortedQuantiles.slice(1)\n  const resolvedHead = resolveQuantile(\n    error,\n    sampleCount,\n    Option.none(),\n    0,\n    head,\n    sortedSamples\n  )\n  const resolved = Arr.of(resolvedHead)\n  tail.forEach((quantile) => {\n    resolved.push(\n      resolveQuantile(\n        error,\n        sampleCount,\n        resolvedHead.value,\n        resolvedHead.consumed,\n        quantile,\n        resolvedHead.rest\n      )\n    )\n  })\n  return Arr.map(resolved, (rq) => [rq.quantile, rq.value] as const)\n}\n\n/** @internal */\nconst resolveQuantile = (\n  error: number,\n  sampleCount: number,\n  current: Option.Option<number>,\n  consumed: number,\n  quantile: number,\n  rest: ReadonlyArray<number>\n): ResolvedQuantile => {\n  let error_1 = error\n  let sampleCount_1 = sampleCount\n  let current_1 = current\n  let consumed_1 = consumed\n  let quantile_1 = quantile\n  let rest_1 = rest\n  let error_2 = error\n  let sampleCount_2 = sampleCount\n  let current_2 = current\n  let consumed_2 = consumed\n  let quantile_2 = quantile\n  let rest_2 = rest\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    // If the remaining list of samples is empty, there is nothing more to resolve\n    if (!Arr.isNonEmptyReadonlyArray(rest_1)) {\n      return {\n        quantile: quantile_1,\n        value: Option.none(),\n        consumed: consumed_1,\n        rest: []\n      }\n    }\n    // If the quantile is the 100% quantile, we can take the maximum of all the\n    // remaining values as the result\n    if (quantile_1 === 1) {\n      return {\n        quantile: quantile_1,\n        value: Option.some(Arr.lastNonEmpty(rest_1)),\n        consumed: consumed_1 + rest_1.length,\n        rest: []\n      }\n    }\n    // Split into two chunks - the first chunk contains all elements of the same\n    // value as the chunk head\n    const sameHead = Arr.span(rest_1, (n) => n <= rest_1[0])\n    // How many elements do we want to accept for this quantile\n    const desired = quantile_1 * sampleCount_1\n    // The error margin\n    const allowedError = (error_1 / 2) * desired\n    // Taking into account the elements consumed from the samples so far and the\n    // number of same elements at the beginning of the chunk, calculate the number\n    // of elements we would have if we selected the current head as result\n    const candConsumed = consumed_1 + sameHead[0].length\n    const candError = Math.abs(candConsumed - desired)\n    // If we haven't got enough elements yet, recurse\n    if (candConsumed < desired - allowedError) {\n      error_2 = error_1\n      sampleCount_2 = sampleCount_1\n      current_2 = Arr.head(rest_1)\n      consumed_2 = candConsumed\n      quantile_2 = quantile_1\n      rest_2 = sameHead[1]\n      error_1 = error_2\n      sampleCount_1 = sampleCount_2\n      current_1 = current_2\n      consumed_1 = consumed_2\n      quantile_1 = quantile_2\n      rest_1 = rest_2\n      continue\n    }\n    // If we have too many elements, select the previous value and hand back the\n    // the rest as leftover\n    if (candConsumed > desired + allowedError) {\n      return {\n        quantile: quantile_1,\n        value: current_1,\n        consumed: consumed_1,\n        rest: rest_1\n      }\n    }\n    // If we are in the target interval, select the current head and hand back the leftover after dropping all elements\n    // from the sample chunk that are equal to the current head\n    switch (current_1._tag) {\n      case \"None\": {\n        error_2 = error_1\n        sampleCount_2 = sampleCount_1\n        current_2 = Arr.head(rest_1)\n        consumed_2 = candConsumed\n        quantile_2 = quantile_1\n        rest_2 = sameHead[1]\n        error_1 = error_2\n        sampleCount_1 = sampleCount_2\n        current_1 = current_2\n        consumed_1 = consumed_2\n        quantile_1 = quantile_2\n        rest_1 = rest_2\n        continue\n      }\n      case \"Some\": {\n        const prevError = Math.abs(desired - current_1.value)\n        if (candError < prevError) {\n          error_2 = error_1\n          sampleCount_2 = sampleCount_1\n          current_2 = Arr.head(rest_1)\n          consumed_2 = candConsumed\n          quantile_2 = quantile_1\n          rest_2 = sameHead[1]\n          error_1 = error_2\n          sampleCount_1 = sampleCount_2\n          current_1 = current_2\n          consumed_1 = consumed_2\n          quantile_1 = quantile_2\n          rest_1 = rest_2\n          continue\n        }\n        return {\n          quantile: quantile_1,\n          value: Option.some(current_1.value),\n          consumed: consumed_1,\n          rest: rest_1\n        }\n      }\n    }\n  }\n  throw new Error(\n    \"BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport type * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricStateSymbolKey = \"effect/MetricState\"\n\n/** @internal */\nexport const MetricStateTypeId: MetricState.MetricStateTypeId = Symbol.for(\n  MetricStateSymbolKey\n) as MetricState.MetricStateTypeId\n\n/** @internal */\nconst CounterStateSymbolKey = \"effect/MetricState/Counter\"\n\n/** @internal */\nexport const CounterStateTypeId: MetricState.CounterStateTypeId = Symbol.for(\n  CounterStateSymbolKey\n) as MetricState.CounterStateTypeId\n\n/** @internal */\nconst FrequencyStateSymbolKey = \"effect/MetricState/Frequency\"\n\n/** @internal */\nexport const FrequencyStateTypeId: MetricState.FrequencyStateTypeId = Symbol.for(\n  FrequencyStateSymbolKey\n) as MetricState.FrequencyStateTypeId\n\n/** @internal */\nconst GaugeStateSymbolKey = \"effect/MetricState/Gauge\"\n\n/** @internal */\nexport const GaugeStateTypeId: MetricState.GaugeStateTypeId = Symbol.for(\n  GaugeStateSymbolKey\n) as MetricState.GaugeStateTypeId\n\n/** @internal */\nconst HistogramStateSymbolKey = \"effect/MetricState/Histogram\"\n\n/** @internal */\nexport const HistogramStateTypeId: MetricState.HistogramStateTypeId = Symbol.for(\n  HistogramStateSymbolKey\n) as MetricState.HistogramStateTypeId\n\n/** @internal */\nconst SummaryStateSymbolKey = \"effect/MetricState/Summary\"\n\n/** @internal */\nexport const SummaryStateTypeId: MetricState.SummaryStateTypeId = Symbol.for(\n  SummaryStateSymbolKey\n) as MetricState.SummaryStateTypeId\n\nconst metricStateVariance = {\n  /* c8 ignore next */\n  _A: (_: unknown) => _\n}\n\n/** @internal */\nclass CounterState<A extends (number | bigint)> implements MetricState.MetricState.Counter<A> {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [CounterStateTypeId]: MetricState.CounterStateTypeId = CounterStateTypeId\n  constructor(readonly count: A) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(CounterStateSymbolKey),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isCounterState(that) && this.count === that.count\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst arrayEquals = Arr.getEquivalence(Equal.equals)\n\n/** @internal */\nclass FrequencyState implements MetricState.MetricState.Frequency {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [FrequencyStateTypeId]: MetricState.FrequencyStateTypeId = FrequencyStateTypeId\n  constructor(readonly occurrences: ReadonlyMap<string, number>) {}\n  _hash: number | undefined;\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.string(FrequencyStateSymbolKey),\n      Hash.combine(Hash.array(Arr.fromIterable(this.occurrences.entries()))),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFrequencyState(that) && arrayEquals(\n      Arr.fromIterable(this.occurrences.entries()),\n      Arr.fromIterable(that.occurrences.entries())\n    )\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass GaugeState<A extends (number | bigint)> implements MetricState.MetricState.Gauge<A> {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [GaugeStateTypeId]: MetricState.GaugeStateTypeId = GaugeStateTypeId\n  constructor(readonly value: A) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(GaugeStateSymbolKey),\n      Hash.combine(Hash.hash(this.value)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isGaugeState(u) && this.value === u.value\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class HistogramState implements MetricState.MetricState.Histogram {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [HistogramStateTypeId]: MetricState.HistogramStateTypeId = HistogramStateTypeId\n  constructor(\n    readonly buckets: ReadonlyArray<readonly [number, number]>,\n    readonly count: number,\n    readonly min: number,\n    readonly max: number,\n    readonly sum: number\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(HistogramStateSymbolKey),\n      Hash.combine(Hash.hash(this.buckets)),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.combine(Hash.hash(this.min)),\n      Hash.combine(Hash.hash(this.max)),\n      Hash.combine(Hash.hash(this.sum)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isHistogramState(that) &&\n      Equal.equals(this.buckets, that.buckets) &&\n      this.count === that.count &&\n      this.min === that.min &&\n      this.max === that.max &&\n      this.sum === that.sum\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class SummaryState implements MetricState.MetricState.Summary {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [SummaryStateTypeId]: MetricState.SummaryStateTypeId = SummaryStateTypeId\n  constructor(\n    readonly error: number,\n    readonly quantiles: ReadonlyArray<readonly [number, Option.Option<number>]>,\n    readonly count: number,\n    readonly min: number,\n    readonly max: number,\n    readonly sum: number\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(SummaryStateSymbolKey),\n      Hash.combine(Hash.hash(this.error)),\n      Hash.combine(Hash.hash(this.quantiles)),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.combine(Hash.hash(this.min)),\n      Hash.combine(Hash.hash(this.max)),\n      Hash.combine(Hash.hash(this.sum)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isSummaryState(that) &&\n      this.error === that.error &&\n      Equal.equals(this.quantiles, that.quantiles) &&\n      this.count === that.count &&\n      this.min === that.min &&\n      this.max === that.max &&\n      this.sum === that.sum\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const counter: {\n  (count: number): MetricState.MetricState.Counter<number>\n  (count: bigint): MetricState.MetricState.Counter<bigint>\n} = (count) => new CounterState(count) as any\n\n/** @internal */\nexport const frequency = (occurrences: ReadonlyMap<string, number>): MetricState.MetricState.Frequency => {\n  return new FrequencyState(occurrences)\n}\n\n/** @internal */\nexport const gauge: {\n  (count: number): MetricState.MetricState.Gauge<number>\n  (count: bigint): MetricState.MetricState.Gauge<bigint>\n} = (count) => new GaugeState(count) as any\n\n/** @internal */\nexport const histogram = (\n  options: {\n    readonly buckets: ReadonlyArray<readonly [number, number]>\n    readonly count: number\n    readonly min: number\n    readonly max: number\n    readonly sum: number\n  }\n): MetricState.MetricState.Histogram =>\n  new HistogramState(\n    options.buckets,\n    options.count,\n    options.min,\n    options.max,\n    options.sum\n  )\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly error: number\n    readonly quantiles: ReadonlyArray<readonly [number, Option.Option<number>]>\n    readonly count: number\n    readonly min: number\n    readonly max: number\n    readonly sum: number\n  }\n): MetricState.MetricState.Summary =>\n  new SummaryState(\n    options.error,\n    options.quantiles,\n    options.count,\n    options.min,\n    options.max,\n    options.sum\n  )\n\n/** @internal */\nexport const isMetricState = (u: unknown): u is MetricState.MetricState.Counter<number | bigint> =>\n  hasProperty(u, MetricStateTypeId)\n\n/** @internal */\nexport const isCounterState = (u: unknown): u is MetricState.MetricState.Counter<number | bigint> =>\n  hasProperty(u, CounterStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isFrequencyState = (u: unknown): u is MetricState.MetricState.Frequency =>\n  hasProperty(u, FrequencyStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isGaugeState = (u: unknown): u is MetricState.MetricState.Gauge<number | bigint> =>\n  hasProperty(u, GaugeStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHistogramState = (u: unknown): u is MetricState.MetricState.Histogram =>\n  hasProperty(u, HistogramStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSummaryState = (u: unknown): u is MetricState.MetricState.Summary => hasProperty(u, SummaryStateTypeId)\n", "import type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricPair from \"../../MetricPair.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\n\n/** @internal */\nconst MetricPairSymbolKey = \"effect/MetricPair\"\n\n/** @internal */\nexport const MetricPairTypeId: MetricPair.MetricPairTypeId = Symbol.for(\n  MetricPairSymbolKey\n) as MetricPair.MetricPairTypeId\n\nconst metricPairVariance = {\n  /* c8 ignore next */\n  _Type: (_: never) => _\n}\n\n/** @internal */\nexport const make = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  metricKey: MetricKey.MetricKey<Type>,\n  metricState: MetricState.MetricState<MetricKeyType.MetricKeyType.OutType<Type>>\n): MetricPair.MetricPair.Untyped => {\n  return {\n    [MetricPairTypeId]: metricPairVariance,\n    metricKey,\n    metricState,\n    pipe() {\n      return pipeArguments(this, arguments)\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeMake = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  metricKey: MetricKey.MetricKey<Type>,\n  metricState: MetricState.MetricState.Untyped\n): MetricPair.MetricPair.Untyped => {\n  return {\n    [MetricPairTypeId]: metricPairVariance,\n    metricKey,\n    metricState,\n    pipe() {\n      return pipeArguments(this, arguments)\n    }\n  }\n}\n", "import type * as Cause from \"../Cause.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as Types from \"../Types.js\"\nimport * as completedRequestMap from \"./completedRequestMap.js\"\nimport * as core from \"./core.js\"\nimport { StructuralPrototype } from \"./effectable.js\"\n\n/** @internal */\nconst RequestSymbolKey = \"effect/Request\"\n\n/** @internal */\nexport const RequestTypeId: Request.RequestTypeId = Symbol.for(\n  RequestSymbolKey\n) as Request.RequestTypeId\n\nconst requestVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst RequestPrototype = {\n  ...StructuralPrototype,\n  [RequestTypeId]: requestVariance\n}\n\n/** @internal */\nexport const isRequest = (u: unknown): u is Request.Request<unknown, unknown> => hasProperty(u, RequestTypeId)\n\n/** @internal */\nexport const of = <R extends Request.Request<any, any>>(): Request.Request.Constructor<R> => (args) =>\n  Object.assign(Object.create(RequestPrototype), args)\n\n/** @internal */\nexport const tagged = <R extends Request.Request<any, any> & { _tag: string }>(\n  tag: R[\"_tag\"]\n): Request.Request.Constructor<R, \"_tag\"> =>\n(args) => {\n  const request = Object.assign(Object.create(RequestPrototype), args)\n  request._tag = tag\n  return request\n}\n\n/** @internal */\nexport const Class: new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request.Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Request.Request<unknown, unknown> ? never : P]: A[P] }\n) => Request.Request<Success, Error> & Readonly<A> = (function() {\n  function Class(this: any, args: any) {\n    if (args) {\n      Object.assign(this, args)\n    }\n  }\n  Class.prototype = RequestPrototype\n  return Class as any\n})()\n\n/** @internal */\nexport const TaggedClass = <Tag extends string>(\n  tag: Tag\n): new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request.Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" | keyof Request.Request<unknown, unknown> ? never : P]: A[P] }\n) => Request.Request<Success, Error> & Readonly<A> & { readonly _tag: Tag } => {\n  return class TaggedClass extends Class<any, any, any> {\n    readonly _tag = tag\n  } as any\n}\n\n/** @internal */\nexport const complete = dual<\n  <A extends Request.Request<any, any>>(\n    result: Request.Request.Result<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    result: Request.Request.Result<A>\n  ) => Effect.Effect<void>\n>(2, (self, result) =>\n  core.fiberRefGetWith(\n    completedRequestMap.currentRequestMap,\n    (map) =>\n      core.sync(() => {\n        if (map.has(self)) {\n          const entry = map.get(self)!\n          if (!entry.state.completed) {\n            entry.state.completed = true\n            core.deferredUnsafeDone(entry.result, result)\n          }\n        }\n      })\n  ))\n\n/** @internal */\nexport const completeEffect = dual<\n  <A extends Request.Request<any, any>, R>(\n    effect: Effect.Effect<Request.Request.Success<A>, Request.Request.Error<A>, R>\n  ) => (self: A) => Effect.Effect<void, never, R>,\n  <A extends Request.Request<any, any>, R>(\n    self: A,\n    effect: Effect.Effect<Request.Request.Success<A>, Request.Request.Error<A>, R>\n  ) => Effect.Effect<void, never, R>\n>(2, (self, effect) =>\n  core.matchEffect(effect, {\n    onFailure: (error) => complete(self, core.exitFail(error) as any),\n    onSuccess: (value) => complete(self, core.exitSucceed(value) as any)\n  }))\n\n/** @internal */\nexport const fail = dual<\n  <A extends Request.Request<any, any>>(\n    error: Request.Request.Error<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    error: Request.Request.Error<A>\n  ) => Effect.Effect<void>\n>(2, (self, error) => complete(self, core.exitFail(error) as any))\n\n/** @internal */\nexport const failCause = dual<\n  <A extends Request.Request<any, any>>(\n    cause: Cause.Cause<Request.Request.Error<A>>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    cause: Cause.Cause<Request.Request.Error<A>>\n  ) => Effect.Effect<void>\n>(2, (self, cause) => complete(self, core.exitFailCause(cause) as any))\n\n/** @internal */\nexport const succeed = dual<\n  <A extends Request.Request<any, any>>(\n    value: Request.Request.Success<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    value: Request.Request.Success<A>\n  ) => Effect.Effect<void>\n>(2, (self, value) => complete(self, core.exitSucceed(value) as any))\n\n/** @internal */\nexport class Listeners {\n  count = 0\n  observers: Set<(count: number) => void> = new Set()\n  interrupted = false\n  addObserver(f: (count: number) => void): void {\n    this.observers.add(f)\n  }\n  removeObserver(f: (count: number) => void): void {\n    this.observers.delete(f)\n  }\n  increment() {\n    this.count++\n    this.observers.forEach((f) => f(this.count))\n  }\n  decrement() {\n    this.count--\n    this.observers.forEach((f) => f(this.count))\n  }\n}\n\n/**\n * @internal\n */\nexport const filterOutCompleted = <A extends Request.Request<any, any>>(requests: Array<A>) =>\n  core.fiberRefGetWith(\n    completedRequestMap.currentRequestMap,\n    (map) =>\n      core.succeed(\n        requests.filter((request) => !(map.get(request)?.state.completed === true))\n      )\n  )\n", "import type * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport { pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty, isTagged } from \"../Predicate.js\"\nimport * as SortedSet from \"../SortedSet.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst SupervisorSymbolKey = \"effect/Supervisor\"\n\n/** @internal */\nexport const SupervisorTypeId: Supervisor.SupervisorTypeId = Symbol.for(\n  SupervisorSymbolKey\n) as Supervisor.SupervisorTypeId\n\n/** @internal */\nexport const supervisorVariance = {\n  /* c8 ignore next */\n  _T: (_: never) => _\n}\n\n/** @internal */\nexport class ProxySupervisor<out T> implements Supervisor.Supervisor<T> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(\n    readonly underlying: Supervisor.Supervisor<any>,\n    readonly value0: Effect.Effect<T>\n  ) {\n  }\n\n  get value(): Effect.Effect<T> {\n    return this.value0\n  }\n\n  onStart<A, E, R>(\n    context: Context.Context<R>,\n    effect: Effect.Effect<A, E, R>,\n    parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.underlying.onStart(context, effect, parent, fiber)\n  }\n\n  onEnd<A, E>(value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onEnd(value, fiber)\n  }\n\n  onEffect<A, E>(fiber: Fiber.RuntimeFiber<A, E>, effect: Effect.Effect<any, any, any>): void {\n    this.underlying.onEffect(fiber, effect)\n  }\n\n  onSuspend<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onSuspend(fiber)\n  }\n\n  onResume<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onResume(fiber)\n  }\n\n  map<B>(f: (a: T) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<B>(right: Supervisor.Supervisor<B>): Supervisor.Supervisor<[T, B]> {\n    return new Zip(this, right)\n  }\n}\n\n/** @internal */\nexport class Zip<out T0, out T1> implements Supervisor.Supervisor<readonly [T0, T1]> {\n  readonly _tag = \"Zip\"\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(\n    readonly left: Supervisor.Supervisor<T0>,\n    readonly right: Supervisor.Supervisor<T1>\n  ) {\n  }\n\n  get value(): Effect.Effect<[T0, T1]> {\n    return core.zip(this.left.value, this.right.value)\n  }\n\n  onStart<A, E, R>(\n    context: Context.Context<R>,\n    effect: Effect.Effect<A, E, R>,\n    parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.left.onStart(context, effect, parent, fiber)\n    this.right.onStart(context, effect, parent, fiber)\n  }\n\n  onEnd<A, E>(value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onEnd(value, fiber)\n    this.right.onEnd(value, fiber)\n  }\n\n  onEffect<A, E>(fiber: Fiber.RuntimeFiber<A, E>, effect: Effect.Effect<any, any, any>): void {\n    this.left.onEffect(fiber, effect)\n    this.right.onEffect(fiber, effect)\n  }\n\n  onSuspend<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onSuspend(fiber)\n    this.right.onSuspend(fiber)\n  }\n\n  onResume<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onResume(fiber)\n    this.right.onResume(fiber)\n  }\n\n  map<B>(f: (a: [T0, T1]) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(right: Supervisor.Supervisor<A>): Supervisor.Supervisor<[[T0, T1], A]> {\n    return new Zip(this, right)\n  }\n}\n\n/** @internal */\nexport const isZip = (self: unknown): self is Zip<any, any> =>\n  hasProperty(self, SupervisorTypeId) && isTagged(self, \"Zip\")\n\n/** @internal */\nexport class Track implements Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  readonly fibers: Set<Fiber.RuntimeFiber<any, any>> = new Set()\n\n  get value(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return core.sync(() => Array.from(this.fibers))\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.fibers.add(fiber)\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.fibers.delete(fiber)\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: Array<Fiber.RuntimeFiber<any, any>>) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(\n    right: Supervisor.Supervisor<A>\n  ): Supervisor.Supervisor<[Array<Fiber.RuntimeFiber<any, any>>, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\n/** @internal */\nexport class Const<out T> implements Supervisor.Supervisor<T> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(readonly effect: Effect.Effect<T>) {\n  }\n\n  get value(): Effect.Effect<T> {\n    return this.effect\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    _fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    //\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, _fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: T) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(right: Supervisor.Supervisor<A>): Supervisor.Supervisor<[T, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\nclass FibersIn implements Supervisor.Supervisor<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(readonly ref: MutableRef.MutableRef<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>) {\n  }\n\n  get value(): Effect.Effect<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>> {\n    return core.sync(() => MutableRef.get(this.ref))\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    pipe(this.ref, MutableRef.set(pipe(MutableRef.get(this.ref), SortedSet.add(fiber))))\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    pipe(this.ref, MutableRef.set(pipe(MutableRef.get(this.ref), SortedSet.remove(fiber))))\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(\n    right: Supervisor.Supervisor<A>\n  ): Supervisor.Supervisor<[SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\n/** @internal */\nexport const unsafeTrack = (): Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>> => {\n  return new Track()\n}\n\n/** @internal */\nexport const track: Effect.Effect<Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>>> = core.sync(unsafeTrack)\n\n/** @internal */\nexport const fromEffect = <A>(effect: Effect.Effect<A>): Supervisor.Supervisor<A> => {\n  return new Const(effect)\n}\n\n/** @internal */\nexport const none = globalValue(\"effect/Supervisor/none\", () => fromEffect(core.void))\n\n/** @internal */\nexport const fibersIn = (\n  ref: MutableRef.MutableRef<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>\n): Effect.Effect<Supervisor.Supervisor<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>> =>\n  core.sync(() => new FibersIn(ref))\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as Equivalence from \"./Equivalence.js\"\nimport * as Dual from \"./Function.js\"\nimport { pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport * as RBT from \"./RedBlackTree.js\"\nimport type { Invariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/SortedSet\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SortedSet<in out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Invariant<A>\n  }\n  /** @internal */\n  readonly keyTree: RBT.RedBlackTree<A, boolean>\n}\n\nconst SortedSetProto: Omit<SortedSet<unknown>, \"keyTree\"> = {\n  [TypeId]: {\n    _A: (_: any) => _\n  },\n  [Hash.symbol]<A>(this: SortedSet<A>): number {\n    return pipe(\n      Hash.hash(this.keyTree),\n      Hash.combine(Hash.hash(TypeId)),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol]<A>(this: SortedSet<A>, that: unknown): boolean {\n    return isSortedSet(that) && Equal.equals(this.keyTree, that.keyTree)\n  },\n  [Symbol.iterator]<A>(this: SortedSet<A>): Iterator<A> {\n    return RBT.keys(this.keyTree)\n  },\n  toString<A>(this: SortedSet<A>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"SortedSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst fromTree = <A>(keyTree: RBT.RedBlackTree<A, boolean>): SortedSet<A> => {\n  const a = Object.create(SortedSetProto)\n  a.keyTree = keyTree\n  return a\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSortedSet: {\n  <A>(u: Iterable<A>): u is SortedSet<A>\n  (u: unknown): u is SortedSet<unknown>\n} = (u: unknown): u is SortedSet<unknown> => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(O: Order<A>): SortedSet<A> => fromTree(RBT.empty(O))\n\n/**\n * Creates a new `SortedSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  <B>(ord: Order<B>): <A extends B>(iterable: Iterable<A>) => SortedSet<A>\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A>\n} = Dual.dual(\n  2,\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A> =>\n    fromTree(RBT.fromIterable(Array.from(iterable).map((k) => [k, true]), ord))\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make =\n  <K>(ord: Order<K>) => <Entries extends ReadonlyArray<K>>(...entries: Entries): SortedSet<Entries[number]> =>\n    fromIterable(entries, ord)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const add: {\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) =>\n  RBT.has(self.keyTree, value)\n    ? self\n    : fromTree(RBT.insert(self.keyTree, value, true)))\n\n/**\n * @since 2.0.0\n */\nexport const difference: {\n  <A, B extends A>(that: Iterable<B>): (self: SortedSet<A>) => SortedSet<A>\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>): SortedSet<A>\n} = Dual.dual<\n  <A, B extends A>(that: Iterable<B>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => SortedSet<A>\n>(2, <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => {\n  let out = self\n  for (const value of that) {\n    out = remove<A | B>(out, value)\n  }\n  return out\n})\n\n/**\n * Check if a predicate holds true for every `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean => {\n  for (const value of self) {\n    if (!predicate(value)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <A, B extends A>(predicate: Predicate<B>): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A>\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A> => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    if (predicate(value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>): (self: SortedSet<A>) => SortedSet<B>\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>) => (self: SortedSet<A>) => SortedSet<B>,\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    for (const b of f(a)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <A>(f: (a: A) => void): (self: SortedSet<A>) => void\n  <A>(self: SortedSet<A>, f: (a: A) => void): void\n} = Dual.dual<\n  <A>(f: (a: A) => void) => (self: SortedSet<A>) => void,\n  <A>(self: SortedSet<A>, f: (a: A) => void) => void\n>(2, (self, f) => RBT.forEach(self.keyTree, f))\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <A>(value: A): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, value: A): boolean\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, value: A) => boolean\n>(2, (self, value) => RBT.has(self.keyTree, value))\n\n/**\n * @since 2.0.0\n */\nexport const intersection: {\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, (self, that) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty(ord)\n  for (const value of that) {\n    if (has(self, value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  <A>(that: SortedSet<A>): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, that: SortedSet<A>): boolean\n} = Dual.dual<\n  <A>(that: SortedSet<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, that: SortedSet<A>) => boolean\n>(2, (self, that) => every(self, (a) => has(that, a)))\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <B, A>(O: Order<B>, f: (a: A) => B): (self: SortedSet<A>) => SortedSet<B>\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => B) => (self: SortedSet<A>) => SortedSet<B>,\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    const b = f(a)\n    if (!has(out, b)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const partition: {\n  <A>(\n    predicate: (a: NoInfer<A>) => boolean\n  ): (self: SortedSet<A>) => [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n} = Dual.dual(\n  2,\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>] => {\n    const ord = RBT.getOrder(self.keyTree)\n    let right = empty(ord)\n    let left = empty(ord)\n    for (const value of self) {\n      if (predicate(value)) {\n        right = add(right, value)\n      } else {\n        left = add(left, value)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const remove: {\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => fromTree(RBT.removeFirst(self.keyTree, value)))\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: SortedSet<A>): number => RBT.size(self.keyTree)\n\n/**\n * Check if a predicate holds true for some `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual<\n  <A>(predicate: Predicate<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, predicate: Predicate<A>) => boolean\n>(2, (self, predicate) => {\n  for (const value of self) {\n    if (predicate(value)) {\n      return true\n    }\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const toggle: {\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/**\n * @since 2.0.0\n */\nexport const union: {\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, <A>(self: SortedSet<A>, that: Iterable<A>) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    out = add(value)(out)\n  }\n  for (const value of that) {\n    out = add(value)(out)\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const values = <A>(self: SortedSet<A>): IterableIterator<A> => RBT.keys(self.keyTree)\n\n/**\n * @since 2.0.0\n * @category equivalence\n */\nexport const getEquivalence = <A>(): Equivalence.Equivalence<SortedSet<A>> => (a, b) => isSubset(a, b) && isSubset(b, a)\n", "/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as RBT from \"./internal/redBlackTree.js\"\nimport * as RBTI from \"./internal/redBlackTree/iterator.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\nconst TypeId: unique symbol = RBT.RedBlackTreeTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category constants\n */\nexport const Direction = RBTI.Direction\n\n/**\n * A Red-Black Tree.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RedBlackTree<in out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Key: Types.Invariant<Key>\n    readonly _Value: Types.Covariant<Value>\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace RedBlackTree {\n  /**\n   * @since 2.0.0\n   */\n  export type Direction = number & {\n    readonly Direction: unique symbol\n  }\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isRedBlackTree: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is RedBlackTree<K, V>\n  (u: unknown): u is RedBlackTree<unknown, unknown>\n} = RBT.isRedBlackTree\n\n/**\n * Creates an empty `RedBlackTree`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K, V = never>(ord: Order<K>) => RedBlackTree<K, V> = RBT.empty\n\n/**\n * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  <B>(ord: Order<B>): <K extends B, V>(entries: Iterable<readonly [K, V]>) => RedBlackTree<K, V>\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order<B>): RedBlackTree<K, V>\n} = RBT.fromIterable\n\n/**\n * Constructs a new `RedBlackTree` from the specified entries.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <K>(\n  ord: Order<K>\n) => <Entries extends Array<readonly [K, any]>>(\n  ...entries: Entries\n) => RedBlackTree<K, Entries[number] extends readonly [any, infer V] ? V : never> = RBT.make\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const at: {\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atForwards\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const atReversed: {\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atBackwards\n\n/**\n * Finds all values in the tree associated with the specified key.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const findAll: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Chunk<V>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Chunk<V>\n} = RBT.findAll\n\n/**\n * Finds the first value in the tree associated with the specified key, if it exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Option<V>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Option<V>\n} = RBT.findFirst\n\n/**\n * Returns the first entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const first: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.first\n\n/**\n * Returns the element at the specified index within the tree or `None` if the\n * specified index does not exist.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getAt: {\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, index: number): Option<[K, V]>\n} = RBT.getAt\n\n/**\n * Gets the `Order<K>` that the `RedBlackTree<K, V>` is using.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrder: <K, V>(self: RedBlackTree<K, V>) => Order<K> = RBT.getOrder\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThan: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqual: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqualReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualBackwards\n\n/**\n * Finds the item with key, if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => boolean\n  <K, V>(self: RedBlackTree<K, V>, key: K): boolean\n} = RBT.has\n\n/**\n * Insert a new item into the tree.\n *\n * @since 2.0.0\n */\nexport const insert: {\n  <K, V>(key: K, value: V): (self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  <K, V>(self: RedBlackTree<K, V>, key: K, value: V): RedBlackTree<K, V>\n} = RBT.insert\n\n/**\n * Get all the keys present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysForward\n\n/**\n * Get all the keys present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keysReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysBackward\n\n/**\n * Returns the last entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.last\n\n/**\n * Returns an iterator that traverse entries in order with keys less than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThan: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys less than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqual: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqualReversed: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualBackwards\n\n/**\n * Execute the specified function for each node of the tree, in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  <K, V>(f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  <K, V>(self: RedBlackTree<K, V>, f: (key: K, value: V) => void): void\n} = RBT.forEach\n\n/**\n * Visit each node of the tree in order with key greater then or equal to max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachGreaterThanEqual: {\n  <K, V>(min: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  <K, V>(self: RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void): void\n} = RBT.forEachGreaterThanEqual\n\n/**\n * Visit each node of the tree in order with key lower then max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachLessThan: {\n  <K, V>(max: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  <K, V>(self: RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void): void\n} = RBT.forEachLessThan\n\n/**\n * Visit each node of the tree in order with key lower than max and greater\n * than or equal to min.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachBetween: {\n  <K, V>(\n    options: {\n      readonly min: K\n      readonly max: K\n      readonly body: (key: K, value: V) => void\n    }\n  ): (self: RedBlackTree<K, V>) => void\n  <K, V>(\n    self: RedBlackTree<K, V>,\n    options: {\n      readonly min: K\n      readonly max: K\n      readonly body: (key: K, value: V) => void\n    }\n  ): void\n} = RBT.forEachBetween\n\n/**\n * Reduce a state over the entries of the tree.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: RedBlackTree<K, V>) => Z\n  <Z, V, K>(self: RedBlackTree<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z): Z\n} = RBT.reduce\n\n/**\n * Removes the entry with the specified key, if it exists.\n *\n * @since 2.0.0\n */\nexport const removeFirst: {\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  <K, V>(self: RedBlackTree<K, V>, key: K): RedBlackTree<K, V>\n} = RBT.removeFirst\n\n/**\n * Traverse the tree in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const reversed: <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]> = RBT.reversed\n\n/**\n * Returns the size of the tree.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: RedBlackTree<K, V>) => number = RBT.size\n\n/**\n * Get all values present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesForward\n\n/**\n * Get all values present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const valuesReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesBackward\n", "import * as Chunk from \"../Chunk.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Order from \"../Order.js\"\nimport type * as Ordering from \"../Ordering.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as RBT from \"../RedBlackTree.js\"\nimport { Direction, RedBlackTreeIterator } from \"./redBlackTree/iterator.js\"\nimport * as Node from \"./redBlackTree/node.js\"\nimport * as Stack from \"./stack.js\"\n\nconst RedBlackTreeSymbolKey = \"effect/RedBlackTree\"\n\n/** @internal */\nexport const RedBlackTreeTypeId: RBT.TypeId = Symbol.for(RedBlackTreeSymbolKey) as RBT.TypeId\n\n/** @internal */\nexport interface RedBlackTreeImpl<in out K, out V> extends RBT.RedBlackTree<K, V> {\n  readonly _ord: Order.Order<K>\n  readonly _root: Node.Node<K, V> | undefined\n}\n\nconst redBlackTreeVariance = {\n  /* c8 ignore next */\n  _Key: (_: any) => _,\n  /* c8 ignore next */\n  _Value: (_: never) => _\n}\n\nconst RedBlackTreeProto: RBT.RedBlackTree<unknown, unknown> = {\n  [RedBlackTreeTypeId]: redBlackTreeVariance,\n  [Hash.symbol](this: RBT.RedBlackTree<unknown, unknown>): number {\n    let hash = Hash.hash(RedBlackTreeSymbolKey)\n    for (const item of this) {\n      hash ^= pipe(Hash.hash(item[0]), Hash.combine(Hash.hash(item[1])))\n    }\n    return Hash.cached(this, hash)\n  },\n  [Equal.symbol]<K, V>(this: RedBlackTreeImpl<K, V>, that: unknown): boolean {\n    if (isRedBlackTree(that)) {\n      if ((this._root?.count ?? 0) !== ((that as RedBlackTreeImpl<K, V>)._root?.count ?? 0)) {\n        return false\n      }\n      const entries = Array.from(that)\n      return Array.from(this).every((itemSelf, i) => {\n        const itemThat = entries[i]\n        return Equal.equals(itemSelf[0], itemThat[0]) && Equal.equals(itemSelf[1], itemThat[1])\n      })\n    }\n    return false\n  },\n  [Symbol.iterator]<K, V>(this: RedBlackTreeImpl<K, V>): RedBlackTreeIterator<K, V> {\n    const stack: Array<Node.Node<K, V>> = []\n    let n = this._root\n    while (n != null) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack, Direction.Forward)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"RedBlackTree\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeImpl = <K, V>(ord: Order.Order<K>, root: Node.Node<K, V> | undefined): RedBlackTreeImpl<K, V> => {\n  const tree = Object.create(RedBlackTreeProto)\n  tree._ord = ord\n  tree._root = root\n  return tree\n}\n\n/** @internal */\nexport const isRedBlackTree: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is RBT.RedBlackTree<K, V>\n  (u: unknown): u is RBT.RedBlackTree<unknown, unknown>\n} = (u: unknown): u is RBT.RedBlackTree<unknown, unknown> => hasProperty(u, RedBlackTreeTypeId)\n\n/** @internal */\nexport const empty = <K, V = never>(ord: Order.Order<K>): RBT.RedBlackTree<K, V> => makeImpl<K, V>(ord, undefined)\n\n/** @internal */\nexport const fromIterable = dual<\n  <B>(ord: Order.Order<B>) => <K extends B, V>(entries: Iterable<readonly [K, V]>) => RBT.RedBlackTree<K, V>,\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order.Order<B>) => RBT.RedBlackTree<K, V>\n>(2, <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order.Order<B>) => {\n  let tree = empty<K, V>(ord)\n  for (const [key, value] of entries) {\n    tree = insert(tree, key, value)\n  }\n  return tree\n})\n\n/** @internal */\nexport const make =\n  <K>(ord: Order.Order<K>) =>\n  <Entries extends Array<readonly [K, any]>>(...entries: Entries): RBT.RedBlackTree<\n    K,\n    Entries[number] extends readonly [any, infer V] ? V : never\n  > => {\n    return fromIterable(entries, ord)\n  }\n\n/** @internal */\nexport const atBackwards = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Iterable<[K, V]>\n>(2, (self, index) => at(self, index, Direction.Backward))\n\n/** @internal */\nexport const atForwards = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Iterable<[K, V]>\n>(2, (self, index) => at(self, index, Direction.Forward))\n\nconst at = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  index: number,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      if (index < 0) {\n        return new RedBlackTreeIterator(self, [], direction)\n      }\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack: Array<Node.Node<K, V>> = []\n      while (node !== undefined) {\n        stack.push(node)\n        if (node.left !== undefined) {\n          if (index < node.left.count) {\n            node = node.left\n            continue\n          }\n          index -= node.left.count\n        }\n        if (!index) {\n          return new RedBlackTreeIterator(self, stack, direction)\n        }\n        index -= 1\n        if (node.right !== undefined) {\n          if (index >= node.right.count) {\n            break\n          }\n          node = node.right\n        } else {\n          break\n        }\n      }\n      return new RedBlackTreeIterator(self, [], direction)\n    }\n  }\n}\n\n/** @internal */\nexport const findAll = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Chunk.Chunk<V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Chunk.Chunk<V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  const stack: Array<Node.Node<K, V>> = []\n  let node = (self as RedBlackTreeImpl<K, V>)._root\n  let result = Chunk.empty<V>()\n  while (node !== undefined || stack.length > 0) {\n    if (node) {\n      stack.push(node)\n      node = node.left\n    } else {\n      const current = stack.pop()!\n      if (Equal.equals(key, current.key)) {\n        result = Chunk.prepend(current.value)(result)\n      }\n      node = current.right\n    }\n  }\n  return result\n})\n\n/** @internal */\nexport const findFirst = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Option.Option<V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n  let node = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    const d = cmp(key, node.key)\n    if (Equal.equals(key, node.key)) {\n      return Option.some(node.value)\n    }\n    if (d <= 0) {\n      node = node.left\n    } else {\n      node = node.right\n    }\n  }\n  return Option.none()\n})\n\n/** @internal */\nexport const first = <K, V>(self: RBT.RedBlackTree<K, V>): Option.Option<[K, V]> => {\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  let current: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    current = node\n    node = node.left\n  }\n  return current ? Option.some([current.key, current.value]) : Option.none()\n}\n\n/** @internal */\nexport const getAt = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Option.Option<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Option.Option<[K, V]>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => {\n  if (index < 0) {\n    return Option.none()\n  }\n  let root = (self as RedBlackTreeImpl<K, V>)._root\n  let node: Node.Node<K, V> | undefined = undefined\n  while (root !== undefined) {\n    node = root\n    if (root.left) {\n      if (index < root.left.count) {\n        root = root.left\n        continue\n      }\n      index -= root.left.count\n    }\n    if (!index) {\n      return Option.some([node.key, node.value])\n    }\n    index -= 1\n    if (root.right) {\n      if (index >= root.right.count) {\n        break\n      }\n      root = root.right\n    } else {\n      break\n    }\n  }\n  return Option.none()\n})\n\n/** @internal */\nexport const getOrder = <K, V>(tree: RBT.RedBlackTree<K, V>): Order.Order<K> => (tree as RedBlackTreeImpl<K, V>)._ord\n\n/** @internal */\nexport const has = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => boolean,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(findFirst(self, key)))\n\n/** @internal */\nexport const insert = dual<\n  <K, V>(key: K, value: V) => (self: RBT.RedBlackTree<K, V>) => RBT.RedBlackTree<K, V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K, value: V) => RBT.RedBlackTree<K, V>\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, key: K, value: V) => {\n  const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n  // Find point to insert new node at\n  let n: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  const n_stack: Array<Node.Node<K, V>> = []\n  const d_stack: Array<Ordering.Ordering> = []\n  while (n != null) {\n    const d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if (d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  // Rebuild path to leaf node\n  n_stack.push({\n    color: Node.Color.Red,\n    key,\n    value,\n    left: undefined,\n    right: undefined,\n    count: 1\n  })\n  for (let s = n_stack.length - 2; s >= 0; --s) {\n    const n2 = n_stack[s]!\n    if (d_stack[s]! <= 0) {\n      n_stack[s] = {\n        color: n2.color,\n        key: n2.key,\n        value: n2.value,\n        left: n_stack[s + 1],\n        right: n2.right,\n        count: n2.count + 1\n      }\n    } else {\n      n_stack[s] = {\n        color: n2.color,\n        key: n2.key,\n        value: n2.value,\n        left: n2.left,\n        right: n_stack[s + 1],\n        count: n2.count + 1\n      }\n    }\n  }\n  // Rebalance tree using rotations\n  for (let s = n_stack.length - 1; s > 1; --s) {\n    const p = n_stack[s - 1]!\n    const n3 = n_stack[s]!\n    if (p.color === Node.Color.Black || n3.color === Node.Color.Black) {\n      break\n    }\n    const pp = n_stack[s - 2]!\n    if (pp.left === p) {\n      if (p.left === n3) {\n        const y = pp.right\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.right = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          pp.color = Node.Color.Red\n          pp.left = p.right\n          p.color = Node.Color.Black\n          p.right = pp\n          n_stack[s - 2] = p\n          n_stack[s - 1] = n3\n          Node.recount(pp)\n          Node.recount(p)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        const y = pp.right\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.right = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          p.right = n3.left\n          pp.color = Node.Color.Red\n          pp.left = n3.right\n          n3.color = Node.Color.Black\n          n3.left = p\n          n3.right = pp\n          n_stack[s - 2] = n3\n          n_stack[s - 1] = p\n          Node.recount(pp)\n          Node.recount(p)\n          Node.recount(n3)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.left === pp) {\n              ppp.left = n3\n            } else {\n              ppp.right = n3\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if (p.right === n3) {\n        const y = pp.left\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.left = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          pp.color = Node.Color.Red\n          pp.right = p.left\n          p.color = Node.Color.Black\n          p.left = pp\n          n_stack[s - 2] = p\n          n_stack[s - 1] = n3\n          Node.recount(pp)\n          Node.recount(p)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        const y = pp.left\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.left = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          p.left = n3.right\n          pp.color = Node.Color.Red\n          pp.right = n3.left\n          n3.color = Node.Color.Black\n          n3.right = p\n          n3.left = pp\n          n_stack[s - 2] = n3\n          n_stack[s - 1] = p\n          Node.recount(pp)\n          Node.recount(p)\n          Node.recount(n3)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.right === pp) {\n              ppp.right = n3\n            } else {\n              ppp.left = n3\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  // Return new tree\n  n_stack[0]!.color = Node.Color.Black\n  return makeImpl((self as RedBlackTreeImpl<K, V>)._ord, n_stack[0])\n})\n\n/** @internal */\nexport const keysForward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<K> => keys(self, Direction.Forward)\n\n/** @internal */\nexport const keysBackward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<K> => keys(self, Direction.Backward)\n\nconst keys = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  direction: RBT.RedBlackTree.Direction\n): IterableIterator<K> => {\n  const begin: RedBlackTreeIterator<K, V> = self[Symbol.iterator]() as RedBlackTreeIterator<K, V>\n  let count = 0\n  return {\n    [Symbol.iterator]: () => keys(self, direction),\n    next: (): IteratorResult<K, number> => {\n      count++\n      const entry = begin.key\n      if (direction === Direction.Forward) {\n        begin.moveNext()\n      } else {\n        begin.movePrev()\n      }\n      switch (entry._tag) {\n        case \"None\": {\n          return { done: true, value: count }\n        }\n        case \"Some\": {\n          return { done: false, value: entry.value }\n        }\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const last = <K, V>(self: RBT.RedBlackTree<K, V>): Option.Option<[K, V]> => {\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  let current: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    current = node\n    node = node.right\n  }\n  return current ? Option.some([current.key, current.value]) : Option.none()\n}\n\n/** @internal */\nexport const reversed = <K, V>(self: RBT.RedBlackTree<K, V>): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const stack: Array<Node.Node<K, V>> = []\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      while (node !== undefined) {\n        stack.push(node)\n        node = node.right\n      }\n      return new RedBlackTreeIterator(self, stack, Direction.Backward)\n    }\n  }\n}\n\n/** @internal */\nexport const greaterThanBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThan(self, key, Direction.Backward))\n\n/** @internal */\nexport const greaterThanForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThan(self, key, Direction.Forward))\n\nconst greaterThan = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d < 0) {\n          last_ptr = stack.length\n        }\n        if (d < 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const greaterThanEqualBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThanEqual(self, key, Direction.Backward))\n\n/** @internal */\nexport const greaterThanEqualForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThanEqual(self, key, Direction.Forward))\n\nconst greaterThanEqual = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction = Direction.Forward\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d <= 0) {\n          last_ptr = stack.length\n        }\n        if (d <= 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const lessThanBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThan(self, key, Direction.Backward))\n\n/** @internal */\nexport const lessThanForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThan(self, key, Direction.Forward))\n\nconst lessThan = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d > 0) {\n          last_ptr = stack.length\n        }\n        if (d <= 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const lessThanEqualBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThanEqual(self, key, Direction.Backward))\n\n/** @internal */\nexport const lessThanEqualForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThanEqual(self, key, Direction.Forward))\n\nconst lessThanEqual = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d >= 0) {\n          last_ptr = stack.length\n        }\n        if (d < 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const forEach = dual<\n  <K, V>(f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, f: (key: K, value: V) => void) => void\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  if (root !== undefined) {\n    visitFull(root, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachGreaterThanEqual = dual<\n  <K, V>(min: K, f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void) => void\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root !== undefined) {\n    visitGreaterThanEqual(root, min, ord, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachLessThan = dual<\n  <K, V>(max: K, f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void) => void\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root !== undefined) {\n    visitLessThan(root, max, ord, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachBetween = dual<\n  <K, V>(options: {\n    readonly min: K\n    readonly max: K\n    readonly body: (key: K, value: V) => void\n  }) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, options: {\n    readonly min: K\n    readonly max: K\n    readonly body: (key: K, value: V) => void\n  }) => void\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, { body, max, min }: {\n  readonly min: K\n  readonly max: K\n  readonly body: (key: K, value: V) => void\n}) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root) {\n    visitBetween(root, min, max, ord, (key, value) => {\n      body(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const reduce = dual<\n  <Z, V, K>(\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ) => (self: RBT.RedBlackTree<K, V>) => Z,\n  <Z, V, K>(self: RBT.RedBlackTree<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => Z\n>(3, (self, zero, f) => {\n  let accumulator = zero\n  for (const entry of self) {\n    accumulator = f(accumulator, entry[1], entry[0])\n  }\n  return accumulator\n})\n\n/** @internal */\nexport const removeFirst = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => RBT.RedBlackTree<K, V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => RBT.RedBlackTree<K, V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  if (!has(self, key)) {\n    return self\n  }\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  const cmp = ord\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  const stack = []\n  while (node !== undefined) {\n    const d = cmp(key, node.key)\n    stack.push(node)\n    if (Equal.equals(key, node.key)) {\n      node = undefined\n    } else if (d <= 0) {\n      node = node.left\n    } else {\n      node = node.right\n    }\n  }\n  if (stack.length === 0) {\n    return self\n  }\n  const cstack = new Array<Node.Node<K, V>>(stack.length)\n  let n = stack[stack.length - 1]!\n  cstack[cstack.length - 1] = {\n    color: n.color,\n    key: n.key,\n    value: n.value,\n    left: n.left,\n    right: n.right,\n    count: n.count\n  }\n  for (let i = stack.length - 2; i >= 0; --i) {\n    n = stack[i]!\n    if (n.left === stack[i + 1]) {\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: cstack[i + 1],\n        right: n.right,\n        count: n.count\n      }\n    } else {\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: n.left,\n        right: cstack[i + 1],\n        count: n.count\n      }\n    }\n  }\n  // Get node\n  n = cstack[cstack.length - 1]!\n  // If not leaf, then swap with previous node\n  if (n.left !== undefined && n.right !== undefined) {\n    // First walk to previous leaf\n    const split = cstack.length\n    n = n.left\n    while (n.right != null) {\n      cstack.push(n)\n      n = n.right\n    }\n    // Copy path to leaf\n    const v = cstack[split - 1]\n    cstack.push({\n      color: n.color,\n      key: v!.key,\n      value: v!.value,\n      left: n.left,\n      right: n.right,\n      count: n.count\n    })\n    cstack[split - 1]!.key = n.key\n    cstack[split - 1]!.value = n.value\n    // Fix up stack\n    for (let i = cstack.length - 2; i >= split; --i) {\n      n = cstack[i]!\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: n.left,\n        right: cstack[i + 1],\n        count: n.count\n      }\n    }\n    cstack[split - 1]!.left = cstack[split]\n  }\n\n  // Remove leaf node\n  n = cstack[cstack.length - 1]!\n  if (n.color === Node.Color.Red) {\n    // Easy case: removing red leaf\n    const p = cstack[cstack.length - 2]!\n    if (p.left === n) {\n      p.left = undefined\n    } else if (p.right === n) {\n      p.right = undefined\n    }\n    cstack.pop()\n    for (let i = 0; i < cstack.length; ++i) {\n      cstack[i]!.count--\n    }\n    return makeImpl(ord, cstack[0])\n  } else {\n    if (n.left !== undefined || n.right !== undefined) {\n      // Second easy case:  Single child black parent\n      if (n.left !== undefined) {\n        Node.swap(n, n.left)\n      } else if (n.right !== undefined) {\n        Node.swap(n, n.right)\n      }\n      // Child must be red, so repaint it black to balance color\n      n.color = Node.Color.Black\n      for (let i = 0; i < cstack.length - 1; ++i) {\n        cstack[i]!.count--\n      }\n      return makeImpl(ord, cstack[0])\n    } else if (cstack.length === 1) {\n      // Third easy case: root\n      return makeImpl(ord, undefined)\n    } else {\n      // Hard case: Repaint n, and then do some nasty stuff\n      for (let i = 0; i < cstack.length; ++i) {\n        cstack[i]!.count--\n      }\n      const parent = cstack[cstack.length - 2]\n      fixDoubleBlack(cstack)\n      // Fix up links\n      if (parent!.left === n) {\n        parent!.left = undefined\n      } else {\n        parent!.right = undefined\n      }\n    }\n  }\n  return makeImpl(ord, cstack[0])\n})\n\n/** @internal */\nexport const size = <K, V>(self: RBT.RedBlackTree<K, V>): number => (self as RedBlackTreeImpl<K, V>)._root?.count ?? 0\n\n/** @internal */\nexport const valuesForward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<V> =>\n  values(self, Direction.Forward)\n\n/** @internal */\nexport const valuesBackward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<V> =>\n  values(self, Direction.Backward)\n\n/** @internal */\nconst values = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  direction: RBT.RedBlackTree.Direction\n): IterableIterator<V> => {\n  const begin: RedBlackTreeIterator<K, V> = self[Symbol.iterator]() as RedBlackTreeIterator<K, V>\n  let count = 0\n  return {\n    [Symbol.iterator]: () => values(self, direction),\n    next: (): IteratorResult<V, number> => {\n      count++\n      const entry = begin.value\n      if (direction === Direction.Forward) {\n        begin.moveNext()\n      } else {\n        begin.movePrev()\n      }\n      switch (entry._tag) {\n        case \"None\": {\n          return { done: true, value: count }\n        }\n        case \"Some\": {\n          return { done: false, value: entry.value }\n        }\n      }\n    }\n  }\n}\n\nconst visitFull = <K, V, A>(\n  node: Node.Node<K, V>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current != null) {\n      stack = Stack.make(current, stack)\n      current = current.left\n    } else if (stack != null) {\n      const value = visit(stack.value.key, stack.value.value)\n      if (Option.isSome(value)) {\n        return value\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitGreaterThanEqual = <K, V, A>(\n  node: Node.Node<K, V>,\n  min: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      if (ord(min, current.key) <= 0) {\n        current = current.left\n      } else {\n        current = undefined\n      }\n    } else if (stack !== undefined) {\n      if (ord(min, stack.value.key) <= 0) {\n        const value = visit(stack.value.key, stack.value.value)\n        if (Option.isSome(value)) {\n          return value\n        }\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitLessThan = <K, V, A>(\n  node: Node.Node<K, V>,\n  max: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      current = current.left\n    } else if (stack !== undefined && ord(max, stack.value.key) > 0) {\n      const value = visit(stack.value.key, stack.value.value)\n      if (Option.isSome(value)) {\n        return value\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitBetween = <K, V, A>(\n  node: Node.Node<K, V>,\n  min: K,\n  max: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      if (ord(min, current.key) <= 0) {\n        current = current.left\n      } else {\n        current = undefined\n      }\n    } else if (stack !== undefined && ord(max, stack.value.key) > 0) {\n      if (ord(min, stack.value.key) <= 0) {\n        const value = visit(stack.value.key, stack.value.value)\n        if (Option.isSome(value)) {\n          return value\n        }\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\n/**\n * Fix up a double black node in a Red-Black Tree.\n */\nconst fixDoubleBlack = <K, V>(stack: Array<Node.Node<K, V>>) => {\n  let n, p, s, z\n  for (let i = stack.length - 1; i >= 0; --i) {\n    n = stack[i]!\n    if (i === 0) {\n      n.color = Node.Color.Black\n      return\n    }\n    p = stack[i - 1]!\n    if (p.left === n) {\n      s = p.right\n      if (s !== undefined && s.right !== undefined && s.right.color === Node.Color.Red) {\n        s = p.right = Node.clone(s)\n        z = s.right = Node.clone(s.right!)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s.color = p.color\n        n.color = Node.Color.Black\n        p.color = Node.Color.Black\n        z.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i - 1] = s\n        return\n      } else if (s !== undefined && s.left !== undefined && s.left.color === Node.Color.Red) {\n        s = p.right = Node.clone(s)\n        z = s.left = Node.clone(s.left!)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z.color = p.color\n        p.color = Node.Color.Black\n        s.color = Node.Color.Black\n        n.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        Node.recount(z)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i - 1] = z\n        return\n      }\n      if (s !== undefined && s.color === Node.Color.Black) {\n        if (p.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          p.right = Node.repaint(s, Node.Color.Red)\n          return\n        } else {\n          p.right = Node.repaint(s, Node.Color.Red)\n          continue\n        }\n      } else if (s !== undefined) {\n        s = Node.clone(s)\n        p.right = s.left\n        s.left = p\n        s.color = p.color\n        p.color = Node.Color.Red\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i - 1] = s\n        stack[i] = p\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i + 2\n      }\n    } else {\n      s = p.left\n      if (s !== undefined && s.left !== undefined && s.left.color === Node.Color.Red) {\n        s = p.left = Node.clone(s)\n        z = s.left = Node.clone(s.left!)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s.color = p.color\n        n.color = Node.Color.Black\n        p.color = Node.Color.Black\n        z.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i - 1] = s\n        return\n      } else if (s !== undefined && s.right !== undefined && s.right.color === Node.Color.Red) {\n        s = p.left = Node.clone(s)\n        z = s.right = Node.clone(s.right!)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z.color = p.color\n        p.color = Node.Color.Black\n        s.color = Node.Color.Black\n        n.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        Node.recount(z)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i - 1] = z\n        return\n      }\n      if (s !== undefined && s.color === Node.Color.Black) {\n        if (p.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          p.left = Node.repaint(s, Node.Color.Red)\n          return\n        } else {\n          p.left = Node.repaint(s, Node.Color.Red)\n          continue\n        }\n      } else if (s !== undefined) {\n        s = Node.clone(s)\n        p.left = s.right\n        s.right = p\n        s.color = p.color\n        p.color = Node.Color.Red\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i - 1] = s\n        stack[i] = p\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i + 2\n      }\n    }\n  }\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Option from \"../../Option.js\"\nimport type * as RBT from \"../../RedBlackTree.js\"\nimport type { RedBlackTreeImpl } from \"../redBlackTree.js\"\nimport type * as Node from \"./node.js\"\n\n/** @internal */\nexport const Direction = {\n  Forward: 0 as RBT.RedBlackTree.Direction,\n  Backward: 1 << 0 as RBT.RedBlackTree.Direction\n} as const\n\n/** @internal */\nexport class RedBlackTreeIterator<in out K, out V> implements Iterator<[K, V]> {\n  private count = 0\n\n  constructor(\n    readonly self: RBT.RedBlackTree<K, V>,\n    readonly stack: Array<Node.Node<K, V>>,\n    readonly direction: RBT.RedBlackTree.Direction\n  ) {}\n\n  /**\n   * Clones the iterator\n   */\n  clone(): RedBlackTreeIterator<K, V> {\n    return new RedBlackTreeIterator(this.self, this.stack.slice(), this.direction)\n  }\n\n  /**\n   * Reverse the traversal direction\n   */\n  reversed(): RedBlackTreeIterator<K, V> {\n    return new RedBlackTreeIterator(\n      this.self,\n      this.stack.slice(),\n      this.direction === Direction.Forward ? Direction.Backward : Direction.Forward\n    )\n  }\n\n  /**\n   * Iterator next\n   */\n  next(): IteratorResult<[K, V], number> {\n    const entry = this.entry\n    this.count++\n    if (this.direction === Direction.Forward) {\n      this.moveNext()\n    } else {\n      this.movePrev()\n    }\n    switch (entry._tag) {\n      case \"None\": {\n        return { done: true, value: this.count }\n      }\n      case \"Some\": {\n        return { done: false, value: entry.value }\n      }\n    }\n  }\n\n  /**\n   * Returns the key\n   */\n  get key(): Option.Option<K> {\n    if (this.stack.length > 0) {\n      return Option.some(this.stack[this.stack.length - 1]!.key)\n    }\n    return Option.none()\n  }\n\n  /**\n   * Returns the value\n   */\n  get value(): Option.Option<V> {\n    if (this.stack.length > 0) {\n      return Option.some(this.stack[this.stack.length - 1]!.value)\n    }\n    return Option.none()\n  }\n\n  /**\n   * Returns the key\n   */\n  get entry(): Option.Option<[K, V]> {\n    return Option.map(Arr.last(this.stack), (node) => [node.key, node.value])\n  }\n\n  /**\n   * Returns the position of this iterator in the sorted list\n   */\n  get index(): number {\n    let idx = 0\n    const stack = this.stack\n    if (stack.length === 0) {\n      const r = (this.self as RedBlackTreeImpl<K, V>)._root\n      if (r != null) {\n        return r.count\n      }\n      return 0\n    } else if (stack[stack.length - 1]!.left != null) {\n      idx = stack[stack.length - 1]!.left!.count\n    }\n    for (let s = stack.length - 2; s >= 0; --s) {\n      if (stack[s + 1] === stack[s]!.right) {\n        ;++idx\n        if (stack[s]!.left != null) {\n          idx += stack[s]!.left!.count\n        }\n      }\n    }\n    return idx\n  }\n\n  /**\n   * Advances iterator to next element in list\n   */\n  moveNext() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return\n    }\n    let n: Node.Node<K, V> | undefined = stack[stack.length - 1]!\n    if (n.right != null) {\n      n = n.right\n      while (n != null) {\n        stack.push(n)\n        n = n.left\n      }\n    } else {\n      stack.pop()\n      while (stack.length > 0 && stack[stack.length - 1]!.right === n) {\n        n = stack[stack.length - 1]\n        stack.pop()\n      }\n    }\n  }\n\n  /**\n   * Checks if there is a next element\n   */\n  get hasNext() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return false\n    }\n    if (stack[stack.length - 1]!.right != null) {\n      return true\n    }\n    for (let s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1]!.left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Advances iterator to previous element in list\n   */\n  movePrev() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return\n    }\n    let n: Node.Node<K, V> | undefined = stack[stack.length - 1]\n    if (n != null && n.left != null) {\n      n = n.left\n      while (n != null) {\n        stack.push(n)\n        n = n.right\n      }\n    } else {\n      stack.pop()\n      while (stack.length > 0 && stack[stack.length - 1]!.left === n) {\n        n = stack[stack.length - 1]\n        stack.pop()\n      }\n    }\n  }\n\n  /**\n   * Checks if there is a previous element\n   */\n  get hasPrev() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return false\n    }\n    if (stack[stack.length - 1]!.left != null) {\n      return true\n    }\n    for (let s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1]!.right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n}\n", "/** @internal */\nexport const Color = {\n  Red: 0 as Node.Color,\n  Black: 1 << 0 as Node.Color\n} as const\n\nexport declare namespace Node {\n  export type Color = number & {\n    readonly Color: unique symbol\n  }\n}\n\nexport interface Node<out K, out V> {\n  color: Node.Color\n  key: K\n  value: V\n  left: Node<K, V> | undefined\n  right: Node<K, V> | undefined\n  count: number\n}\n\n/** @internal */\nexport const clone = <K, V>({\n  color,\n  count,\n  key,\n  left,\n  right,\n  value\n}: Node<K, V>) => ({\n  color,\n  key,\n  value,\n  left,\n  right,\n  count\n})\n\n/** @internal */\nexport function swap<K, V>(n: Node<K, V>, v: Node<K, V>) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n.color = v.color\n  n.count = v.count\n}\n\n/** @internal */\nexport const repaint = <K, V>({\n  count,\n  key,\n  left,\n  right,\n  value\n}: Node<K, V>, color: Node.Color) => ({\n  color,\n  key,\n  value,\n  left,\n  right,\n  count\n})\n\n/** @internal */\nexport const recount = <K, V>(node: Node<K, V>) => {\n  node.count = 1 + (node.left?.count ?? 0) + (node.right?.count ?? 0)\n}\n", "import * as Chunk from \"../../Chunk.js\"\nimport * as Differ from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport * as supervisor from \"../supervisor.js\"\n\n/** @internal */\nexport type SupervisorPatch = Empty | AddSupervisor | RemoveSupervisor | AndThen\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_ADD_SUPERVISOR = \"AddSupervisor\" as const\n\n/** @internal */\nexport type OP_ADD_SUPERVISOR = typeof OP_ADD_SUPERVISOR\n\n/** @internal */\nexport const OP_REMOVE_SUPERVISOR = \"RemoveSupervisor\" as const\n\n/** @internal */\nexport type OP_REMOVE_SUPERVISOR = typeof OP_REMOVE_SUPERVISOR\n\n/** @internal */\nexport const OP_AND_THEN = \"AndThen\" as const\n\n/** @internal */\nexport type OP_AND_THEN = typeof OP_AND_THEN\n\n/** @internal */\nexport interface Empty {\n  readonly _tag: OP_EMPTY\n}\n\n/** @internal */\nexport interface AddSupervisor {\n  readonly _tag: OP_ADD_SUPERVISOR\n  readonly supervisor: Supervisor.Supervisor<any>\n}\n\n/** @internal */\nexport interface RemoveSupervisor {\n  readonly _tag: OP_REMOVE_SUPERVISOR\n  readonly supervisor: Supervisor.Supervisor<any>\n}\n\n/** @internal */\nexport interface AndThen {\n  readonly _tag: OP_AND_THEN\n  readonly first: SupervisorPatch\n  readonly second: SupervisorPatch\n}\n\n/**\n * The empty `SupervisorPatch`.\n *\n * @internal\n */\nexport const empty: SupervisorPatch = { _tag: OP_EMPTY }\n\n/**\n * Combines two patches to produce a new patch that describes applying the\n * updates from this patch and then the updates from the specified patch.\n *\n * @internal\n */\nexport const combine = (self: SupervisorPatch, that: SupervisorPatch): SupervisorPatch => {\n  return {\n    _tag: OP_AND_THEN,\n    first: self,\n    second: that\n  }\n}\n\n/**\n * Applies a `SupervisorPatch` to a `Supervisor` to produce a new `Supervisor`.\n *\n * @internal\n */\nexport const patch = (\n  self: SupervisorPatch,\n  supervisor: Supervisor.Supervisor<any>\n): Supervisor.Supervisor<any> => {\n  return patchLoop(supervisor, Chunk.of(self))\n}\n\n/** @internal */\nconst patchLoop = (\n  _supervisor: Supervisor.Supervisor<any>,\n  _patches: Chunk.Chunk<SupervisorPatch>\n): Supervisor.Supervisor<any> => {\n  let supervisor = _supervisor\n  let patches = _patches\n  while (Chunk.isNonEmpty(patches)) {\n    const head = Chunk.headNonEmpty(patches)\n    switch (head._tag) {\n      case OP_EMPTY: {\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_ADD_SUPERVISOR: {\n        supervisor = supervisor.zip(head.supervisor)\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_REMOVE_SUPERVISOR: {\n        supervisor = removeSupervisor(supervisor, head.supervisor)\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_AND_THEN: {\n        patches = Chunk.prepend(head.first)(Chunk.prepend(head.second)(Chunk.tailNonEmpty(patches)))\n        break\n      }\n    }\n  }\n  return supervisor\n}\n\n/** @internal */\nconst removeSupervisor = (\n  self: Supervisor.Supervisor<any>,\n  that: Supervisor.Supervisor<any>\n): Supervisor.Supervisor<any> => {\n  if (Equal.equals(self, that)) {\n    return supervisor.none\n  } else {\n    if (supervisor.isZip(self)) {\n      return removeSupervisor(self.left, that).zip(removeSupervisor(self.right, that))\n    } else {\n      return self\n    }\n  }\n}\n\n/** @internal */\nconst toSet = (self: Supervisor.Supervisor<any>): HashSet.HashSet<Supervisor.Supervisor<any>> => {\n  if (Equal.equals(self, supervisor.none)) {\n    return HashSet.empty()\n  } else {\n    if (supervisor.isZip(self)) {\n      return pipe(toSet(self.left), HashSet.union(toSet(self.right)))\n    } else {\n      return HashSet.make(self)\n    }\n  }\n}\n\n/** @internal */\nexport const diff = (\n  oldValue: Supervisor.Supervisor<any>,\n  newValue: Supervisor.Supervisor<any>\n): SupervisorPatch => {\n  if (Equal.equals(oldValue, newValue)) {\n    return empty\n  }\n  const oldSupervisors = toSet(oldValue)\n  const newSupervisors = toSet(newValue)\n  const added = pipe(\n    newSupervisors,\n    HashSet.difference(oldSupervisors),\n    HashSet.reduce(\n      empty as SupervisorPatch,\n      (patch, supervisor) => combine(patch, { _tag: OP_ADD_SUPERVISOR, supervisor })\n    )\n  )\n  const removed = pipe(\n    oldSupervisors,\n    HashSet.difference(newSupervisors),\n    HashSet.reduce(\n      empty as SupervisorPatch,\n      (patch, supervisor) => combine(patch, { _tag: OP_REMOVE_SUPERVISOR, supervisor })\n    )\n  )\n  return combine(added, removed)\n}\n\n/** @internal */\nexport const differ = Differ.make<Supervisor.Supervisor<any>, SupervisorPatch>({\n  empty,\n  patch,\n  combine,\n  diff\n})\n", "/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Context } from \"./Context.js\"\nimport type { Either } from \"./Either.js\"\nimport type { Equal } from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport type { HashMap } from \"./HashMap.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport * as internal from \"./internal/differ.js\"\nimport * as ChunkPatch from \"./internal/differ/chunkPatch.js\"\nimport * as ContextPatch from \"./internal/differ/contextPatch.js\"\nimport * as HashMapPatch from \"./internal/differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./internal/differ/hashSetPatch.js\"\nimport * as OrPatch from \"./internal/differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./internal/differ/readonlyArrayPatch.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = internal.DifferTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * A `Differ<Value, Patch>` knows how to compare an old value and new value of\n * type `Value` to produce a patch of type `Patch` that describes the\n * differences between those values. A `Differ` also knows how to apply a patch\n * to an old value to produce a new value that represents the old value updated\n * with the changes described by the patch.\n *\n * A `Differ` can be used to construct a `FiberRef` supporting compositional\n * updates using the `FiberRef.makePatch` constructor.\n *\n * The `Differ` companion object contains constructors for `Differ` values for\n * common data types such as `Chunk`, `HashMap`, and `HashSet``. In addition,\n * `Differ`values can be transformed using the `transform` operator and combined\n * using the `orElseEither` and `zip` operators. This allows creating `Differ`\n * values for arbitrarily complex data types compositionally.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Differ<in out Value, in out Patch> {\n  readonly [TypeId]: {\n    readonly _V: Types.Invariant<Value>\n    readonly _P: Types.Invariant<Patch>\n  }\n  readonly empty: Patch\n  diff(oldValue: Value, newValue: Value): Patch\n  combine(first: Patch, second: Patch): Patch\n  patch(patch: Patch, oldValue: Value): Value\n}\n\nconst ChunkPatchTypeId: unique symbol = ChunkPatch.ChunkPatchTypeId as Differ.Chunk.TypeId\nconst ContextPatchTypeId: unique symbol = ContextPatch.ContextPatchTypeId as Differ.Context.TypeId\nconst HashMapPatchTypeId: unique symbol = HashMapPatch.HashMapPatchTypeId as Differ.HashMap.TypeId\nconst HashSetPatchTypeId: unique symbol = HashSetPatch.HashSetPatchTypeId as Differ.HashSet.TypeId\nconst OrPatchTypeId: unique symbol = OrPatch.OrPatchTypeId as Differ.Or.TypeId\nconst ReadonlyArrayPatchTypeId: unique symbol = ReadonlyArrayPatch\n  .ReadonlyArrayPatchTypeId as Differ.ReadonlyArray.TypeId\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Differ {\n  /**\n   * @since 2.0.0\n   */\n  export namespace Context {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ContextPatchTypeId\n    /**\n     * A `Patch<Input, Output>` describes an update that transforms a `Env<Input>`\n     * to a `Env<Output>` as a data structure. This allows combining updates to\n     * different services in the environment in a compositional way.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in Input, out Output> extends Equal {\n      readonly [ContextPatchTypeId]: {\n        readonly _Input: Types.Contravariant<Input>\n        readonly _Output: Types.Covariant<Output>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Chunk {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ChunkPatchTypeId\n    /**\n     * A patch which describes updates to a chunk of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ChunkPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashMap {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashMapPatchTypeId\n    /**\n     * A patch which describes updates to a map of keys and values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Key, in out Value, in out Patch> extends Equal {\n      readonly [HashMapPatchTypeId]: {\n        readonly _Key: Types.Invariant<Key>\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashSet {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashSetPatchTypeId\n    /**\n     * A patch which describes updates to a set of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value> extends Equal {\n      readonly [HashSetPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Or {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof OrPatchTypeId\n    /**\n     * A patch which describes updates to either one value or another.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Value2, in out Patch, in out Patch2> extends Equal {\n      readonly [OrPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Value2: Types.Invariant<Value2>\n        readonly _Patch: Types.Invariant<Patch>\n        readonly _Patch2: Types.Invariant<Patch2>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace ReadonlyArray {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ReadonlyArrayPatchTypeId\n    /**\n     * A patch which describes updates to a ReadonlyArray of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ReadonlyArrayPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n}\n\n/**\n * An empty patch that describes no changes.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const empty: <Value, Patch>(self: Differ<Value, Patch>) => Patch = (\n  self\n) => self.empty\n\n/**\n * @since 2.0.0\n * @category patch\n */\nexport const diff: {\n  <Value>(oldValue: Value, newValue: Value): <Patch>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    oldValue: Value,\n    newValue: Value\n  ): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    oldValue: Value,\n    newValue: Value\n  ): Patch => self.diff(oldValue, newValue)\n)\n\n/**\n * Combines two patches to produce a new patch that describes the updates of\n * the first patch and then the updates of the second patch. The combine\n * operation should be associative. In addition, if the combine operation is\n * commutative then joining multiple fibers concurrently will result in\n * deterministic `FiberRef` values.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const combine: {\n  <Patch>(first: Patch, second: Patch): <Value>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    first: Patch,\n    second: Patch\n  ): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    first: Patch,\n    second: Patch\n  ): Patch => self.combine(first, second)\n)\n\n/**\n * Applies a patch to an old value to produce a new value that is equal to the\n * old value with the updates described by the patch.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const patch: {\n  <Patch, Value>(patch: Patch, oldValue: Value): (\n    self: Differ<Value, Patch>\n  ) => Value\n  <Patch, Value>(\n    self: Differ<Value, Patch>,\n    patch: Patch,\n    oldValue: Value\n  ): Value\n} = Dual.dual(\n  3,\n  <Patch, Value>(\n    self: Differ<Value, Patch>,\n    patch: Patch,\n    oldValue: Value\n  ): Value => self.patch(patch, oldValue)\n)\n\n/**\n * Constructs a new `Differ`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Value, Patch>(params: {\n  readonly empty: Patch\n  readonly diff: (oldValue: Value, newValue: Value) => Patch\n  readonly combine: (first: Patch, second: Patch) => Patch\n  readonly patch: (patch: Patch, oldValue: Value) => Value\n}) => Differ<Value, Patch> = internal.make\n\n/**\n * Constructs a differ that knows how to diff `Env` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const environment: <A>() => Differ<\n  Context<A>,\n  Differ.Context.Patch<A, A>\n> = internal.environment\n\n/**\n * Constructs a differ that knows how to diff a `Chunk` of values given a\n * differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const chunk: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<Chunk<Value>, Differ.Chunk.Patch<Value, Patch>> = internal.chunk\n\n/**\n * Constructs a differ that knows how to diff a `HashMap` of keys and values given\n * a differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashMap: <Key, Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<HashMap<Key, Value>, Differ.HashMap.Patch<Key, Value, Patch>> = internal.hashMap\n\n/**\n * Constructs a differ that knows how to diff a `HashSet` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashSet: <Value>() => Differ<\n  HashSet<Value>,\n  Differ.HashSet.Patch<Value>\n> = internal.hashSet\n\n/**\n * Combines this differ and the specified differ to produce a differ that\n * knows how to diff the sum of their values.\n *\n * @since 2.0.0\n */\nexport const orElseEither: {\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n  <Value, Patch, Value2, Patch2>(\n    self: Differ<Value, Patch>,\n    that: Differ<Value2, Patch2>\n  ): Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n} = internal.orElseEither\n\n/**\n * Constructs a differ that knows how to diff a `ReadonlyArray` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const readonlyArray: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<ReadonlyArray<Value>, Differ.ReadonlyArray.Patch<Value, Patch>> = internal.readonlyArray\n\n/**\n * Transforms the type of values that this differ knows how to differ using\n * the specified functions that map the new and old value types to each other.\n *\n * @since 2.0.0\n */\nexport const transform: {\n  <Value, Value2>(options: {\n    readonly toNew: (value: Value) => Value2\n    readonly toOld: (value: Value2) => Value\n  }): <Patch>(self: Differ<Value, Patch>) => Differ<Value2, Patch>\n  <Value, Patch, Value2>(\n    self: Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ): Differ<Value2, Patch>\n} = internal.transform\n\n/**\n * Constructs a differ that just diffs two values by returning a function that\n * sets the value to the new value. This differ does not support combining\n * multiple updates to the value compositionally and should only be used when\n * there is no compositional way to update them.\n *\n * @since 2.0.0\n */\nexport const update: <A>() => Differ<A, (a: A) => A> = internal.update\n\n/**\n * A variant of `update` that allows specifying the function that will be used\n * to combine old values with new values.\n *\n * @since 2.0.0\n */\nexport const updateWith: <A>(f: (x: A, y: A) => A) => Differ<A, (a: A) => A> = internal.updateWith\n\n/**\n * Combines this differ and the specified differ to produce a new differ that\n * knows how to diff the product of their values.\n *\n * @since 2.0.0\n */\nexport const zip: {\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n  <Value, Patch, Value2, Patch2>(\n    self: Differ<Value, Patch>,\n    that: Differ<Value2, Patch2>\n  ): Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n} = internal.zip\n", "/**\n * The `Effect<A, E, R>` type is polymorphic in values of type `E` and we can\n * work with any error type that we want. However, there is a lot of information\n * that is not inside an arbitrary `E` value. So as a result, an `Effect` needs\n * somewhere to store things like unexpected errors or defects, stack and\n * execution traces, causes of fiber interruptions, and so forth.\n *\n * Effect-TS is very strict about preserving the full information related to a\n * failure. It captures all type of errors into the `Cause` data type. `Effect`\n * uses the `Cause<E>` data type to store the full story of failure. So its\n * error model is lossless. It doesn't throw information related to the failure\n * result. So we can figure out exactly what happened during the operation of\n * our effects.\n *\n * It is important to note that `Cause` is an underlying data type representing\n * errors occuring within an `Effect` workflow. Thus, we don't usually deal with\n * `Cause`s directly. Even though it is not a data type that we deal with very\n * often, the `Cause` of a failing `Effect` workflow can be accessed at any\n * time, which gives us total access to all parallel and sequential errors in\n * occurring within our codebase.\n *\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/cause.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\nimport type { Span } from \"./Tracer.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const CauseTypeId: unique symbol = internal.CauseTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type CauseTypeId = typeof CauseTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RuntimeExceptionTypeId: unique symbol = core.RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RuntimeExceptionTypeId = typeof RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const InterruptedExceptionTypeId: unique symbol = core.InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type InterruptedExceptionTypeId = typeof InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IllegalArgumentExceptionTypeId: unique symbol = core.IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IllegalArgumentExceptionTypeId = typeof IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NoSuchElementExceptionTypeId: unique symbol = core.NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NoSuchElementExceptionTypeId = typeof NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const InvalidPubSubCapacityExceptionTypeId: unique symbol = core.InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type InvalidPubSubCapacityExceptionTypeId = typeof InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category symbols\n */\nexport const ExceededCapacityExceptionTypeId: unique symbol = core.ExceededCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category symbols\n */\nexport type ExceededCapacityExceptionTypeId = typeof ExceededCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TimeoutExceptionTypeId: unique symbol = core.TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type TimeoutExceptionTypeId = typeof TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const UnknownExceptionTypeId: unique symbol = core.UnknownExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type UnknownExceptionTypeId = typeof UnknownExceptionTypeId\n\n/**\n * A `Cause` represents the full history of a failure resulting from running an\n * `Effect` workflow.\n *\n * Effect-TS uses a data structure from functional programming called a semiring\n * to represent the `Cause` data type. This allows us to take a base type `E`\n * (which represents the error type of an `Effect`) and capture the sequential\n * and parallel composition of errors in a fully lossless fashion.\n *\n * @since 2.0.0\n * @category models\n */\nexport type Cause<E> =\n  | Empty\n  | Fail<E>\n  | Die\n  | Interrupt\n  | Sequential<E>\n  | Parallel<E>\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Cause {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out E> {\n    readonly [CauseTypeId]: {\n      readonly _E: Covariant<E>\n    }\n  }\n}\n\n/**\n * Represents a set of methods that can be used to reduce a `Cause<E>` to a\n * specified value of type `Z` with access to a context of type `C`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface CauseReducer<in C, in E, in out Z> {\n  emptyCase(context: C): Z\n  failCase(context: C, error: E): Z\n  dieCase(context: C, defect: unknown): Z\n  interruptCase(context: C, fiberId: FiberId.FiberId): Z\n  sequentialCase(context: C, left: Z, right: Z): Z\n  parallelCase(context: C, left: Z, right: Z): Z\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [Effect.EffectTypeId]: Effect.Effect.VarianceStruct<never, this, never>\n  readonly [Stream.StreamTypeId]: Stream.Stream.VarianceStruct<never, this, never>\n  readonly [Sink.SinkTypeId]: Sink.Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [Channel.ChannelTypeId]: Channel.Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  [Symbol.iterator](): Effect.EffectGenerator<Effect.Effect<never, this, never>>\n}\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const YieldableError: new(message?: string | undefined) => YieldableError = core.YieldableError\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RuntimeException extends YieldableError {\n  readonly _tag: \"RuntimeException\"\n  readonly [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a `Fiber` is interrupted.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface InterruptedException extends YieldableError {\n  readonly _tag: \"InterruptedException\"\n  readonly [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an invalid argument is\n * provided to a method.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface IllegalArgumentException extends YieldableError {\n  readonly _tag: \"IllegalArgumentException\"\n  readonly [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface NoSuchElementException extends YieldableError {\n  readonly _tag: \"NoSuchElementException\"\n  readonly [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when attempting to construct a\n * `PubSub` with an invalid capacity.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface InvalidPubSubCapacityException extends YieldableError {\n  readonly _tag: \"InvalidPubSubCapacityException\"\n  readonly [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a resources capacity has\n * been exceeded.\n *\n * @since 3.5.0\n * @category models\n */\nexport interface ExceededCapacityException extends YieldableError {\n  readonly _tag: \"ExceededCapacityException\"\n  readonly [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a computation doesn't\n * finish on schedule.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface TimeoutException extends YieldableError {\n  readonly _tag: \"TimeoutException\"\n  readonly [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an unknown error is thrown, such as\n * from a rejected promise.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface UnknownException extends YieldableError {\n  readonly _tag: \"UnknownException\"\n  readonly [UnknownExceptionTypeId]: UnknownExceptionTypeId\n  readonly error: unknown\n}\n\n/**\n * The `Empty` cause represents a lack of errors.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Empty extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * The `Fail` cause represents a `Cause` which failed with an expected error of\n * type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Fail<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Fail\"\n  readonly error: E\n}\n\n/**\n * The `Die` cause represents a `Cause` which failed as a result of a defect, or\n * in other words, an unexpected error.\n *\n * type `E`.\n * @since 2.0.0\n * @category models\n */\nexport interface Die extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Die\"\n  readonly defect: unknown\n}\n\n/**\n * The `Interrupt` cause represents failure due to `Fiber` interruption, which\n * contains the `FiberId` of the interrupted `Fiber`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Interrupt extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Interrupt\"\n  readonly fiberId: FiberId.FiberId\n}\n\n/**\n * The `Parallel` cause represents the composition of two causes which occurred\n * in parallel.\n *\n * In Effect-TS programs, it is possible that two operations may be performed in\n * parallel. In these cases, the `Effect` workflow can fail for more than one\n * reason. If both computations fail, then there are actually two errors which\n * occurred in parallel. In these cases, the errors can be represented by the\n * `Parallel` cause.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Parallel\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * The `Sequential` cause represents the composition of two causes which occurred\n * sequentially.\n *\n * For example, if we perform Effect-TS's analog of `try-finally` (i.e.\n * `Effect.ensuring`), and both the `try` and `finally` blocks fail, we have two\n * errors which occurred sequentially. In these cases, the errors can be\n * represented by the `Sequential` cause.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Sequential\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * Constructs a new `Empty` cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Cause<never> = internal.empty\n\n/**\n * Constructs a new `Fail` cause from the specified `error`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Cause<E> = internal.fail\n\n/**\n * Constructs a new `Die` cause from the specified `defect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Cause<never> = internal.die\n\n/**\n * Constructs a new `Interrupt` cause from the specified `fiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Cause<never> = internal.interrupt\n\n/**\n * Constructs a new `Parallel` cause from the specified `left` and `right`\n * causes.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.parallel\n\n/**\n * Constructs a new `Sequential` cause from the specified pecified `left` and\n * `right` causes.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.sequential\n\n/**\n * Returns `true` if the specified value is a `Cause`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCause: (u: unknown) => u is Cause<never> = internal.isCause\n\n/**\n * Returns `true` if the specified `Cause` is an `Empty` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEmptyType: <E>(self: Cause<E>) => self is Empty = internal.isEmptyType\n\n/**\n * Returns `true` if the specified `Cause` is a `Fail` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailType: <E>(self: Cause<E>) => self is Fail<E> = internal.isFailType\n\n/**\n * Returns `true` if the specified `Cause` is a `Die` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDieType: <E>(self: Cause<E>) => self is Die = internal.isDieType\n\n/**\n * Returns `true` if the specified `Cause` is an `Interrupt` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInterruptType: <E>(self: Cause<E>) => self is Interrupt = internal.isInterruptType\n\n/**\n * Returns `true` if the specified `Cause` is a `Sequential` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequentialType: <E>(self: Cause<E>) => self is Sequential<E> = internal.isSequentialType\n\n/**\n * Returns `true` if the specified `Cause` is a `Parallel` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelType: <E>(self: Cause<E>) => self is Parallel<E> = internal.isParallelType\n\n/**\n * Returns the size of the cause, calculated as the number of individual `Cause`\n * nodes found in the `Cause` semiring structure.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <E>(self: Cause<E>) => number = internal.size\n\n/**\n * Returns `true` if the specified cause is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <E>(self: Cause<E>) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the specified cause contains a failure, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFailure: <E>(self: Cause<E>) => boolean = internal.isFailure\n\n/**\n * Returns `true` if the specified cause contains a defect, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isDie: <E>(self: Cause<E>) => boolean = internal.isDie\n\n/**\n * Returns `true` if the specified cause contains an interruption, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <E>(self: Cause<E>) => boolean = internal.isInterrupted\n\n/**\n * Returns `true` if the specified cause contains only interruptions (without\n * any `Die` or `Fail` causes), `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterruptedOnly: <E>(self: Cause<E>) => boolean = internal.isInterruptedOnly\n\n/**\n * Returns a `List` of all recoverable errors of type `E` in the specified\n * cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failures: <E>(self: Cause<E>) => Chunk.Chunk<E> = internal.failures\n\n/**\n * Returns a `List` of all unrecoverable defects in the specified cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const defects: <E>(self: Cause<E>) => Chunk.Chunk<unknown> = internal.defects\n\n/**\n * Returns a `HashSet` of `FiberId`s for all fibers that interrupted the fiber\n * described by the specified cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const interruptors: <E>(self: Cause<E>) => HashSet.HashSet<FiberId.FiberId> = internal.interruptors\n\n/**\n * Returns the `E` associated with the first `Fail` in this `Cause`, if one\n * exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failureOption: <E>(self: Cause<E>) => Option.Option<E> = internal.failureOption\n\n/**\n * Returns the first checked error on the `Left` if available, if there are\n * no checked errors return the rest of the `Cause` that is known to contain\n * only `Die` or `Interrupt` causes.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failureOrCause: <E>(self: Cause<E>) => Either.Either<Cause<never>, E> = internal.failureOrCause\n\n/**\n * Converts the specified `Cause<Option<E>>` to an `Option<Cause<E>>` by\n * recursively stripping out any failures with the error `None`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const flipCauseOption: <E>(self: Cause<Option.Option<E>>) => Option.Option<Cause<E>> = internal.flipCauseOption\n\n/**\n * Returns the defect associated with the first `Die` in this `Cause`, if one\n * exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const dieOption: <E>(self: Cause<E>) => Option.Option<unknown> = internal.dieOption\n\n/**\n * Returns the `FiberId` associated with the first `Interrupt` in the specified\n * cause, if one exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const interruptOption: <E>(self: Cause<E>) => Option.Option<FiberId.FiberId> = internal.interruptOption\n\n/**\n * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return\n * a cause containing only `Die` cause/finalizer defects.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keepDefects: <E>(self: Cause<E>) => Option.Option<Cause<never>> = internal.keepDefects\n\n/**\n * Linearizes the specified cause into a `HashSet` of parallel causes where each\n * parallel cause contains a linear sequence of failures.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const linearize: <E>(self: Cause<E>) => HashSet.HashSet<Cause<E>> = internal.linearize\n\n/**\n * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return\n * a cause containing only `Die` cause/finalizer defects.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const stripFailures: <E>(self: Cause<E>) => Cause<never> = internal.stripFailures\n\n/**\n * Remove all `Die` causes that the specified partial function is defined at,\n * returning `Some` with the remaining causes or `None` if there are no\n * remaining causes.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const stripSomeDefects: {\n  (pf: (defect: unknown) => Option.Option<unknown>): <E>(self: Cause<E>) => Option.Option<Cause<E>>\n  <E>(self: Cause<E>, pf: (defect: unknown) => Option.Option<unknown>): Option.Option<Cause<E>>\n} = internal.stripSomeDefects\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  <E2>(error: E2): <E>(self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, error: E2): Cause<E2>\n} = internal.as\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <E, E2>(f: (e: E) => E2): (self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, f: (e: E) => E2): Cause<E2>\n} = internal.map\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n} = internal.flatMap\n\n/**\n * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  <E2>(f: Cause<E2>): <E>(self: Cause<E>) => Cause<E2>\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n  <E, E2>(self: Cause<E>, f: Cause<E2>): Cause<E2>\n} = internal.andThen\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <E>(self: Cause<Cause<E>>) => Cause<E> = internal.flatten\n\n/**\n * Returns `true` if the `self` cause contains or is equal to `that` cause,\n * `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const contains: {\n  <E2>(that: Cause<E2>): <E>(self: Cause<E>) => boolean\n  <E, E2>(self: Cause<E>, that: Cause<E2>): boolean\n} = internal.contains\n\n/**\n * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n * defect.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const squash: <E>(self: Cause<E>) => unknown = core.causeSquash\n\n/**\n * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n * defect. If a recoverable error is found, the provided function will be used\n * to map the error a defect, and the resulting value will be returned.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const squashWith: {\n  <E>(f: (error: E) => unknown): (self: Cause<E>) => unknown\n  <E>(self: Cause<E>, f: (error: E) => unknown): unknown\n} = core.causeSquashWith\n\n/**\n * Uses the provided partial function to search the specified cause and attempt\n * to extract information from it.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const find: {\n  <E, Z>(pf: (cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Option.Option<Z>\n  <E, Z>(self: Cause<E>, pf: (cause: Cause<E>) => Option.Option<Z>): Option.Option<Z>\n} = internal.find\n\n/**\n * Filters causes which match the provided predicate out of the specified cause.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  <E, EB extends E>(refinement: Refinement<Cause<NoInfer<E>>, Cause<EB>>): (self: Cause<E>) => Cause<EB>\n  <E>(predicate: Predicate<Cause<NoInfer<E>>>): (self: Cause<E>) => Cause<E>\n  <E, EB extends E>(self: Cause<E>, refinement: Refinement<Cause<E>, Cause<EB>>): Cause<EB>\n  <E>(self: Cause<E>, predicate: Predicate<Cause<E>>): Cause<E>\n} = internal.filter\n\n/**\n * Folds the specified cause into a value of type `Z`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <Z, E>(\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ): (self: Cause<E>) => Z\n  <Z, E>(\n    self: Cause<E>,\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ): Z\n} = internal.match\n\n/**\n * Reduces the specified cause into a value of type `Z`, beginning with the\n * provided `zero` value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Z\n  <Z, E>(self: Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>): Z\n} = internal.reduce\n\n/**\n * Reduces the specified cause into a value of type `Z` using a `Cause.Reducer`.\n * Also allows for accessing the provided context during reduction.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceWithContext: {\n  <C, E, Z>(context: C, reducer: CauseReducer<C, E, Z>): (self: Cause<E>) => Z\n  <C, E, Z>(self: Cause<E>, context: C, reducer: CauseReducer<C, E, Z>): Z\n} = internal.reduceWithContext\n\n/**\n * Represents a checked exception which occurs when a `Fiber` is interrupted.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const InterruptedException: new(message?: string | undefined) => InterruptedException = core.InterruptedException\n\n/**\n * Returns `true` if the specified value is an `InterruptedException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInterruptedException: (u: unknown) => u is InterruptedException = core.isInterruptedException\n\n/**\n * Represents a checked exception which occurs when an invalid argument is\n * provided to a method.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const IllegalArgumentException: new(message?: string | undefined) => IllegalArgumentException =\n  core.IllegalArgumentException\n\n/**\n * Returns `true` if the specified value is an `IllegalArgumentException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isIllegalArgumentException: (u: unknown) => u is IllegalArgumentException = core.isIllegalArgumentException\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const NoSuchElementException: new(message?: string | undefined) => NoSuchElementException =\n  core.NoSuchElementException\n\n/**\n * Returns `true` if the specified value is an `NoSuchElementException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNoSuchElementException: (u: unknown) => u is NoSuchElementException = core.isNoSuchElementException\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const RuntimeException: new(message?: string | undefined) => RuntimeException = core.RuntimeException\n\n/**\n * Returns `true` if the specified value is an `RuntimeException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntimeException: (u: unknown) => u is RuntimeException = core.isRuntimeException\n\n/**\n * Represents a checked exception which occurs when a computation doesn't\n * finish on schedule.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const TimeoutException: new(message?: string | undefined) => TimeoutException = core.TimeoutException\n\n/**\n * Represents a checked exception which occurs when an unknown error is thrown, such as\n * from a rejected promise.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const UnknownException: new(error: unknown, message?: string | undefined) => UnknownException =\n  core.UnknownException\n\n/**\n * Returns `true` if the specified value is an `UnknownException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isUnknownException: (u: unknown) => u is UnknownException = core.isUnknownException\n\n/**\n * Represents a checked exception which occurs when a resources capacity has\n * been exceeded.\n *\n * @since 3.5.0\n * @category errors\n */\nexport const ExceededCapacityException: new(message?: string | undefined) => ExceededCapacityException =\n  core.ExceededCapacityException\n\n/**\n * Returns `true` if the specified value is an `ExceededCapacityException`, `false`\n * otherwise.\n *\n * @since 3.5.0\n * @category refinements\n */\nexport const isExceededCapacityException: (u: unknown) => u is ExceededCapacityException =\n  core.isExceededCapacityException\n\n/**\n * Returns the specified `Cause` as a pretty-printed string.\n *\n * @since 2.0.0\n * @category rendering\n */\nexport const pretty: <E>(cause: Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}) => string = internal.pretty\n\n/**\n * @since 3.2.0\n * @category models\n */\nexport interface PrettyError extends Error {\n  readonly span: Span | undefined\n}\n\n/**\n * Returns the specified `Cause` as a pretty-printed string.\n *\n * @since 3.2.0\n * @category rendering\n */\nexport const prettyErrors: <E>(cause: Cause<E>) => Array<PrettyError> = internal.prettyErrors\n\n/**\n * Returns the original, unproxied, instance of a thrown error\n *\n * @since 2.0.0\n * @category errors\n */\nexport const originalError: <E>(obj: E) => E = core.originalInstance\n", "/**\n * @since 2.0.0\n */\nimport type * as RA from \"./Array.js\"\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport type { Console } from \"./Console.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Either from \"./Either.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport type { ExecutionStrategy } from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberRefsPatch from \"./FiberRefsPatch.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as _console from \"./internal/console.js\"\nimport { TagProto } from \"./internal/context.js\"\nimport * as effect from \"./internal/core-effect.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as layer from \"./internal/layer.js\"\nimport * as query from \"./internal/query.js\"\nimport * as _runtime from \"./internal/runtime.js\"\nimport * as _schedule from \"./internal/schedule.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type { LogLevel } from \"./LogLevel.js\"\nimport type * as Metric from \"./Metric.js\"\nimport type * as MetricLabel from \"./MetricLabel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Random from \"./Random.js\"\nimport type * as Ref from \"./Ref.js\"\nimport * as Request from \"./Request.js\"\nimport type { RequestBlock } from \"./RequestBlock.js\"\nimport type { RequestResolver } from \"./RequestResolver.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"./RuntimeFlagsPatch.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Supervisor from \"./Supervisor.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type { Concurrency, Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport type { YieldWrap } from \"./Utils.js\"\n\n// -------------------------------------------------------------------------------------\n// models\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EffectTypeId: unique symbol = core.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EffectTypeId = typeof EffectTypeId\n\n/**\n * The `Effect` interface defines a value that lazily describes a workflow or job.\n * The workflow requires some context `R`, and may fail with an error of type `E`,\n * or succeed with a value of type `A`.\n *\n * `Effect` values model resourceful interaction with the outside world, including\n * synchronous, asynchronous, concurrent, and parallel interaction. They use a\n * fiber-based concurrency model, with built-in support for scheduling, fine-grained\n * interruption, structured concurrency, and high scalability.\n *\n * To run an `Effect` value, you need a `Runtime`, which is a type that is capable\n * of executing `Effect` values.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Effect<out A, out E = never, out R = never> extends Effect.Variance<A, E, R>, Pipeable {\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: EffectUnify<this>\n  readonly [Unify.ignoreSymbol]?: EffectUnifyIgnore\n  [Symbol.iterator](): EffectGenerator<Effect<A, E, R>>\n}\n\n/**\n * @since 3.0.0\n * @category models\n */\nexport interface EffectGenerator<T extends Effect<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Effect.Success<T>>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface EffectUnify<A extends { [Unify.typeSymbol]?: any }>\n  extends Either.EitherUnify<A>, Option.OptionUnify<A>, Context.TagUnify<A>\n{\n  Effect?: () => A[Unify.typeSymbol] extends Effect<infer A0, infer E0, infer R0> | infer _ ? Effect<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EffectUnifyIgnore {\n  Tag?: true\n  Option?: true\n  Either?: true\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EffectTypeLambda extends TypeLambda {\n  readonly type: Effect<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Blocked<out A, out E> extends Effect<A, E> {\n  readonly _op: \"Blocked\"\n  readonly effect_instruction_i0: RequestBlock\n  readonly effect_instruction_i1: Effect<A, E>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Context.js\" {\n  interface Tag<Id, Value> extends Effect<Value, never, Id> {\n    [Symbol.iterator](): EffectGenerator<Tag<Id, Value>>\n  }\n  interface TagUnifyIgnore {\n    Effect?: true\n    Either?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Either.js\" {\n  interface Left<L, R> extends Effect<R, L> {\n    readonly _tag: \"Left\"\n    [Symbol.iterator](): EffectGenerator<Left<L, R>>\n  }\n  interface Right<L, R> extends Effect<R, L> {\n    readonly _tag: \"Right\"\n    [Symbol.iterator](): EffectGenerator<Right<L, R>>\n  }\n  interface EitherUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Option.js\" {\n  interface None<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"None\"\n    [Symbol.iterator](): EffectGenerator<None<A>>\n  }\n  interface Some<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"Some\"\n    [Symbol.iterator](): EffectGenerator<Some<A>>\n  }\n  interface OptionUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Either?: true\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Effect {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E, out R> {\n    readonly [EffectTypeId]: VarianceStruct<A, E, R>\n  }\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface VarianceStruct<out A, out E, out R> {\n    readonly _V: string\n    readonly _A: Covariant<A>\n    readonly _E: Covariant<E>\n    readonly _R: Covariant<R>\n  }\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Context<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _R : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _A : never\n}\n\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n\n/**\n * This function returns `true` if the specified value is an `Effect` value,\n * `false` otherwise.\n *\n * This function can be useful for checking the type of a value before\n * attempting to operate on it as an `Effect` value. For example, you could\n * use `isEffect` to check the type of a value before using it as an\n * argument to a function that expects an `Effect` value.\n *\n * @param u - The value to check for being an `Effect` value.\n *\n * @returns `true` if the specified value is an `Effect` value, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEffect: (u: unknown) => u is Effect<unknown, unknown, unknown> = core.isEffect\n\n// -------------------------------------------------------------------------------------\n// caching\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that caches its result for a specified duration, known as\n * the `timeToLive`. When the cache expires after the duration, the effect will be\n * recomputed upon next evaluation.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* Effect.sleep(\"100 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedWithTTL: {\n  (timeToLive: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E>, never, R>\n  <A, E, R>(self: Effect<A, E, R>, timeToLive: Duration.DurationInput): Effect<Effect<A, E>, never, R>\n} = circular.cached\n\n/**\n * Similar to {@link cachedWithTTL}, this function caches an effect's result for a\n * specified duration. It also includes an additional effect for manually\n * invalidating the cached value before it naturally expires.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n *     expensiveTask,\n *     \"1 hour\"\n *   )\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* invalidate\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedInvalidateWithTTL: {\n  (timeToLive: Duration.DurationInput): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<[Effect<A, E>, Effect<void>], never, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect<[Effect<A, E>, Effect<void>], never, R>\n} = circular.cachedInvalidateWithTTL\n\n/**\n * Returns an effect that computes a result lazily and caches it. Subsequent\n * evaluations of this effect will return the cached result without re-executing\n * the logic.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   console.log(\"non-cached version:\")\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   console.log(\"cached version:\")\n *   const cached = yield* Effect.cached(expensiveTask)\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // non-cached version:\n * // expensive task...\n * // result 1\n * // expensive task...\n * // result 2\n * // cached version:\n * // expensive task...\n * // result 3\n * // result 3\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cached: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E, R>> = effect.memoize\n\n/**\n * Returns a memoized version of a function with effects. Memoization ensures\n * that results are stored and reused for the same inputs, reducing the need to\n * recompute them.\n *\n * @example\n * import { Effect, Random } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const randomNumber = (n: number) => Random.nextIntBetween(1, n)\n *   console.log(\"non-memoized version:\")\n *   console.log(yield* randomNumber(10))\n *   console.log(yield* randomNumber(10))\n *\n *   console.log(\"memoized version:\")\n *   const memoized = yield* Effect.cachedFunction(randomNumber)\n *   console.log(yield* memoized(10))\n *   console.log(yield* memoized(10))\n * })\n *\n * Effect.runFork(program)\n * // Example Output:\n * // non-memoized version:\n * // 2\n * // 8\n * // memoized version:\n * // 5\n * // 5\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedFunction: <A, B, E, R>(\n  f: (a: A) => Effect<B, E, R>,\n  eq?: Equivalence<A>\n) => Effect<(a: A) => Effect<B, E, R>> = circular.cachedFunction\n\n/**\n * Returns an effect that executes only once, regardless of how many times it's\n * called.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const task1 = Console.log(\"task1\")\n *   yield* Effect.repeatN(task1, 2)\n *   const task2 = yield* Effect.once(Console.log(\"task2\"))\n *   yield* Effect.repeatN(task2, 2)\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // task1\n * // task1\n * // task1\n * // task2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const once: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<void, E, R>> = effect.once\n\n// -------------------------------------------------------------------------------------\n// collecting & elements\n// -------------------------------------------------------------------------------------\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const all: <\n  const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(arg: Arg, options?: O) => All.Return<Arg, O> = fiberRuntime.all\n\n/**\n * Data-last variant of `Effect.all`.\n *\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const allWith: <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n  }\n>(\n  options?: O\n) => <const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>>(\n  arg: Arg\n) => All.Return<Arg, O> = fiberRuntime.allWith\n\n/**\n * @since 2.0.0\n */\nexport declare namespace All {\n  /**\n   * @since 2.0.0\n   */\n  export type EffectAny = Effect<any, any, any>\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnIterable<T extends Iterable<EffectAny>, Discard extends boolean, Mode> = [T] extends\n    [Iterable<Effect.Variance<infer R0, infer L0, infer R>>] ? Effect<\n      Discard extends true ? void : Mode extends \"either\" ? Array<Either.Either<R0, L0>> : Array<R0>,\n      Mode extends \"either\" ? never\n        : Mode extends \"validate\" ? Array<Option.Option<L0>>\n        : L0,\n      R\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean, Mode> = Effect<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : Mode extends \"either\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n            Either.Either<_A, _E>\n            : never\n        }\n      : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n    Mode extends \"either\" ? never\n      : T[number] extends never ? never\n      : Mode extends \"validate\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n            : never\n        }\n      : [T[number]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n      : never,\n    T[number] extends never ? never\n      : [T[number]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnObject<T, Discard extends boolean, Mode> = [T] extends [{ [K: string]: EffectAny }] ? Effect<\n      Discard extends true ? void\n        : Mode extends \"either\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n              Either.Either<_A, _E>\n              : never\n          }\n        : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n      Mode extends \"either\" ? never\n        : keyof T extends never ? never\n        : Mode extends \"validate\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n              : never\n          }\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n        : never,\n      keyof T extends never ? never\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n        : never\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 2.0.0\n   */\n  export type ExtractMode<A> = [A] extends [{ mode: infer M }] ? M : \"default\"\n\n  /**\n   * @since 2.0.0\n   */\n  export type Return<\n    Arg extends Iterable<EffectAny> | Record<string, EffectAny>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: boolean | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    }\n  > = [Arg] extends [ReadonlyArray<EffectAny>] ? ReturnTuple<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Iterable<EffectAny>] ? ReturnIterable<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Record<string, EffectAny>] ? ReturnObject<Arg, IsDiscard<O>, ExtractMode<O>>\n    : never\n}\n\n/**\n * Evaluate and run each effect in the structure and collect the results,\n * discarding results from failed effects.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const allSuccesses: <X extends Effect<any, any, any>>(\n  elements: Iterable<X>,\n  options?:\n    | {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n    | undefined\n) => Effect<Array<Effect.Success<X>>, never, Effect.Context<X>> = fiberRuntime.allSuccesses\n\n/**\n * Drops all elements until the effectful predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const dropUntil: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(elements: Iterable<A>, predicate: (a: A, i: number) => Effect<boolean, E, R>): Effect<Array<A>, E, R>\n} = effect.dropUntil\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const dropWhile: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(elements: Iterable<A>, predicate: (a: A, i: number) => Effect<boolean, E, R>): Effect<Array<A>, E, R>\n} = effect.dropWhile\n\n/**\n * Determines whether all elements of the `Collection<A>` satisfies the effectual\n * predicate `f`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const every: {\n  <A, E, R>(f: (a: A, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect<boolean, E, R>): Effect<boolean, E, R>\n} = effect.every\n\n/**\n * Determines whether any element of the `Iterable<A>` satisfies the effectual\n * predicate `f`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const exists: {\n  <A, E, R>(\n    f: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<boolean, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n      }\n      | undefined\n  ): Effect<boolean, E, R>\n} = fiberRuntime.exists\n\n/**\n * Filters the collection using the specified effectful predicate.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const filter: {\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n    } | undefined\n  ): Effect<Array<A>, E, R>\n} = fiberRuntime.filter\n\n/**\n * Performs a filter and map in a single step.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const filterMap: {\n  <Eff extends Effect<any, any, any>, B>(\n    pf: (a: Effect.Success<Eff>) => Option.Option<B>\n  ): (elements: Iterable<Eff>) => Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>, B>(\n    elements: Iterable<Eff>,\n    pf: (a: Effect.Success<Eff>) => Option.Option<B>\n  ): Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n} = effect.filterMap\n\n/**\n * Returns the first element that satisfies the effectful predicate.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const findFirst: {\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Option.Option<A>, E, R>\n} = effect.findFirst\n\n/**\n * This function takes an iterable of `Effect` values and returns a new\n * `Effect` value that represents the first `Effect` value in the iterable\n * that succeeds. If all of the `Effect` values in the iterable fail, then\n * the resulting `Effect` value will fail as well.\n *\n * This function is sequential, meaning that the `Effect` values in the\n * iterable will be executed in sequence, and the first one that succeeds\n * will determine the outcome of the resulting `Effect` value.\n *\n * @param effects - The iterable of `Effect` values to evaluate.\n *\n * @returns A new `Effect` value that represents the first successful\n * `Effect` value in the iterable, or a failed `Effect` value if all of the\n * `Effect` values in the iterable fail.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const firstSuccessOf: <Eff extends Effect<any, any, any>>(\n  effects: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = effect.firstSuccessOf\n/**\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): (self: Iterable<A>) => Effect<void, E, R>\n  <B, E, R, S extends Iterable<any>>(\n    self: S,\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.forEach as any\n\n/**\n * Returns a successful effect with the head of the collection if the collection\n * is non-empty, or fails with the error `None` if the collection is empty.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const head: <A, E, R>(self: Effect<Iterable<A>, E, R>) => Effect<A, Cause.NoSuchElementException | E, R> =\n  effect.head\n\n/**\n * Merges an `Iterable<Effect<A, E, R>>` to a single effect, working\n * sequentially.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const mergeAll: {\n  <Z, Eff extends Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n} = fiberRuntime.mergeAll\n\n/**\n * Feeds elements of type `A` to a function `f` that returns an effect.\n * Collects all successes and failures in a tupled fashion.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const partition: {\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n} = fiberRuntime.partition\n\n/**\n * Folds an `Iterable<A>` using an effectual function f, working sequentially\n * from left to right.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduce: {\n  <Z, A, E, R>(zero: Z, f: (z: Z, a: A, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  <A, Z, E, R>(elements: Iterable<A>, zero: Z, f: (z: Z, a: A, i: number) => Effect<Z, E, R>): Effect<Z, E, R>\n} = effect.reduce\n\n/**\n * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceEffect: {\n  <Z, E, R, Eff extends Effect<any, any, any>>(\n    zero: Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n} = fiberRuntime.reduceEffect\n\n/**\n * Folds an `Iterable<A>` using an effectual function f, working sequentially from left to right.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceRight: {\n  <A, Z, R, E>(zero: Z, f: (a: A, z: Z, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  <A, Z, R, E>(elements: Iterable<A>, zero: Z, f: (a: A, z: Z, i: number) => Effect<Z, E, R>): Effect<Z, E, R>\n} = effect.reduceRight\n\n/**\n * Folds over the elements in this chunk from the left, stopping the fold early\n * when the predicate is not satisfied.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceWhile: {\n  <Z, A, E, R>(\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): (elements: Iterable<A>) => Effect<Z, E, R>\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): Effect<Z, E, R>\n} = effect.reduceWhile\n\n/**\n * Replicates the given effect `n` times.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const replicate: {\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Array<Effect<A, E, R>>\n  <A, E, R>(self: Effect<A, E, R>, n: number): Array<Effect<A, E, R>>\n} = fiberRuntime.replicate\n\n/**\n * Performs this effect the specified number of times and collects the\n * results.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.replicateEffect\n\n/**\n * Takes elements until the effectual predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const takeUntil: {\n  <A, R, E>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeUntil\n\n/**\n * Takes all elements so long as the effectual predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const takeWhile: {\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeWhile\n\n/**\n * Feeds elements of type `A` to `f` and accumulates all errors in error\n * channel or successes in success channel.\n *\n * This combinator is lossy meaning that if there are errors all successes\n * will be lost. To retain all information please use `partition`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const validateAll: {\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<B>, Array<E>, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): (elements: Iterable<A>) => Effect<void, Array<E>, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n    } | undefined\n  ): Effect<Array<B>, Array<E>, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n    }\n  ): Effect<void, Array<E>, R>\n} = fiberRuntime.validateAll\n\n/**\n * Feeds elements of type `A` to `f` until it succeeds. Returns first success\n * or the accumulation of all errors.\n *\n * If `elements` is empty then `Effect.fail([])` is returned.\n *\n * @example\n * import { Effect, Exit } from \"effect\"\n *\n * const f = (n: number) => (n > 0 ? Effect.succeed(n) : Effect.fail(`${n} is negative`))\n *\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([], f)), Exit.fail([]))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, 2], f)), Exit.succeed(1))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, -1], f)), Exit.succeed(1))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, 2], f)), Exit.succeed(2))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, -2], f)), Exit.fail(['-1 is negative', '-2 is negative']))\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const validateFirst: {\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<B, Array<E>, R>\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | { readonly concurrency?: Concurrency | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<B, Array<E>, R>\n} = fiberRuntime.validateFirst\n\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Imports an asynchronous side-effect into a pure `Effect` value. The callback\n * function `Effect<A, E, R> => void` **MUST** be called at most once.\n *\n * The registration function can optionally return an Effect, which will be\n * executed if the `Fiber` executing this Effect is interrupted.\n *\n * The registration function can also receive an `AbortSignal` if required for\n * interruption.\n *\n * The `FiberId` of the fiber that may complete the async callback may also be\n * specified. This is called the \"blocking fiber\" because it suspends the fiber\n * executing the `async` Effect (i.e. semantically blocks the fiber from making\n * progress). Specifying this fiber id in cases where it is known will improve\n * diagnostics, but not affect the behavior of the returned effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const async: <A, E = never, R = never>(\n  register: (callback: (_: Effect<A, E, R>) => void, signal: AbortSignal) => void | Effect<void, never, R>,\n  blockingOn?: FiberId.FiberId\n) => Effect<A, E, R> = core.async\n\n/**\n * Converts an asynchronous, callback-style API into an `Effect`, which will\n * be executed asynchronously.\n *\n * With this variant, the registration function may return a an `Effect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const asyncEffect: <A, E, R, R3, E2, R2>(\n  register: (callback: (_: Effect<A, E, R>) => void) => Effect<Effect<void, never, R3> | void, E2, R2>\n) => Effect<A, E | E2, R | R2 | R3> = _runtime.asyncEffect\n\n/**\n * Low level constructor that enables for custom stack tracing cutpoints.\n *\n * It is meant to be called with a bag of instructions that become available in the \"this\" of the effect.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const throwingFunction = () => { throw new Error() }\n * const blowUp = Effect.custom(throwingFunction, function() {\n *   return Effect.succeed(this.effect_instruction_i0())\n * })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const custom: {\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect<A, E, R>): Effect<A, E, R>\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = core.custom\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const withFiberRuntime: <A, E = never, R = never>(\n  withRuntime: (\n    fiber: Fiber.RuntimeFiber<A, E>,\n    status: FiberStatus.Running\n  ) => Effect<A, E, R>\n) => Effect<A, E, R> = core.withFiberRuntime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Effect<never, E> = core.fail\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Effect<never, E> = core.failSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Effect<never, E> = core.failCause\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Effect<never, E> = core.failCauseSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Effect<never> = core.die\n\n/**\n * Returns an effect that dies with a `RuntimeException` having the specified\n * text message. This method can be used for terminating a fiber because a\n * defect has been detected in the code.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieMessage: (message: string) => Effect<never> = core.dieMessage\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Effect<never> = core.dieSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const gen: {\n  <Eff extends YieldWrap<Effect<any, any, any>>, AEff>(\n    f: (resume: Adapter) => Generator<Eff, AEff, never>\n  ): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n  <Self, Eff extends YieldWrap<Effect<any, any, any>>, AEff>(\n    self: Self,\n    f: (this: Self, resume: Adapter) => Generator<Eff, AEff, never>\n  ): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n} = effect.gen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Adapter {\n  <A, E, R>(self: Effect<A, E, R>): Effect<A, E, R>\n  <A, _A, _E, _R>(a: A, ab: (a: A) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, D, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n}\n\n/**\n * Returns an effect that will never produce anything. The moral equivalent of\n * `while(true) {}`, only without the wasted CPU cycles.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Effect<never> = core.never\n\n/**\n * Requires the option produced by this value to be `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const none: <A, E, R>(\n  self: Effect<Option.Option<A>, E, R>\n) => Effect<void, E | Cause.NoSuchElementException, R> = effect.none\n\n/**\n * Like `tryPromise` but produces a defect in case of errors.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped Promise api.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const promise: <A>(\n  evaluate: (signal: AbortSignal) => PromiseLike<A>\n) => Effect<A> = effect.promise\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Effect<A> = core.succeed\n\n/**\n * Returns an effect which succeeds with `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedNone: Effect<Option.Option<never>> = effect.succeedNone\n\n/**\n * Returns an effect which succeeds with the value wrapped in a `Some`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedSome: <A>(value: A) => Effect<Option.Option<A>> = effect.succeedSome\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A, E, R>(effect: LazyArg<Effect<A, E, R>>) => Effect<A, E, R> = core.suspend\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Effect<A> = core.sync\n\nconst _void: Effect<void> = core.void\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  _void as void\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const yieldNow: (options?: {\n  readonly priority?: number | undefined\n}) => Effect<void> = core.yieldNow\n\n// -------------------------------------------------------------------------------------\n// error handling\n// -------------------------------------------------------------------------------------\n\nconst _catch: {\n  <N extends keyof E, K extends E[N] & string, E, A1, E1, R1>(\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { [n in N]: K }>, R1 | R>\n  <A, E, R, N extends keyof E, K extends E[N] & string, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): Effect<A | A1, E1 | Exclude<E, { [n in N]: K }>, R | R1>\n} = effect._catch\n\nexport {\n  /**\n   * Recovers from specified error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  _catch as catch\n}\n\n/**\n * Recovers from all recoverable errors.\n *\n * **Note**: that `Effect.catchAll` will not recover from unrecoverable defects. To\n * recover from both recoverable and unrecoverable errors use\n * `Effect.catchAllCause`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  <E, A2, E2, R2>(f: (e: E) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<A2, E2, R2>): Effect<A2 | A, E2, R2 | R>\n} = core.catchAll\n\n/**\n * Recovers from both recoverable and unrecoverable errors.\n *\n * See `sandbox`, `mapErrorCause` for other functions that can\n * recover from defects.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R2>\n} = core.catchAllCause\n\n/**\n * Recovers from all defects with provided function.\n *\n * **WARNING**: There is no sensible way to recover from defects. This\n * method should be used only at the boundary between Effect and an external\n * system, to transmit information on a defect for diagnostic or explanatory\n * purposes.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllDefect: {\n  <A2, E2, R2>(\n    f: (defect: unknown) => Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (defect: unknown) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchAllDefect\n\n/**\n * Recovers from errors that match the given predicate.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2 | Exclude<E, EB>, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchIf\n\n/**\n * Recovers from some or all of the error cases.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSome: {\n  <E, A2, E2, R2>(\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchSome\n\n/**\n * Recovers from some or all of the error cases with provided cause.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeCause: {\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A2 | A, E | E2, R2 | R>\n} = effect.catchSomeCause\n\n/**\n * Recovers from some or all of the defects with provided partial function.\n *\n * **WARNING**: There is no sensible way to recover from defects. This\n * method should be used only at the boundary between Effect and an external\n * system, to transmit information on a defect for diagnostic or explanatory\n * purposes.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeDefect: {\n  <A2, E2, R2>(\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchSomeDefect\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTag: {\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = effect.catchTag\n\n/**\n * Recovers from the specified tagged errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTags: {\n  <\n    E,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(\n    cases: Cases\n  ): <A, R>(\n    self: Effect<A, E, R>\n  ) => Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n  <\n    R,\n    E,\n    A,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(\n    self: Effect<A, E, R>,\n    cases: Cases\n  ): Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n} = effect.catchTags\n\n/**\n * Returns an effect that succeeds with the cause of failure of this effect,\n * or `Cause.empty` if the effect did succeed.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const cause: <A, E, R>(self: Effect<A, E, R>) => Effect<Cause.Cause<E>, never, R> = effect.cause\n\n/**\n * Returns an effect that ignores errors and runs repeatedly until it\n * eventually succeeds.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const eventually: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = effect.eventually\n\n/**\n * Returns a new effect that ignores the success or failure of this effect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const ignore: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignore\n\n/**\n * Returns a new effect that ignores the success or failure of this effect,\n * but which also logs failures at the Debug level, just in case the failure\n * turns out to be important.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const ignoreLogged: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignoreLogged\n\n/**\n * Exposes all parallel errors in a single call.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const parallelErrors: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Array<E>, R> = effect.parallelErrors\n\n/**\n * Exposes the full `Cause` of failure for the specified effect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const sandbox: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Cause.Cause<E>, R> = effect.sandbox\n\n/**\n * @since 2.0.0\n * @category error handling\n */\nexport declare namespace Retry {\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  export type Return<R, E, A, O extends Options<E>> = Effect<\n    A,\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer _R> } ? E\n      : O extends { until: Refinement<E, infer E2> } ? E2\n      : E)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  export interface Options<E> {\n    while?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, E, any> | undefined\n  }\n}\n\n/**\n * Retries according to the options provided\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const retry: {\n  <E, O extends Retry.Options<E>>(\n    options: O\n  ): <A, R>(\n    self: Effect<A, E, R>\n  ) => Retry.Return<R, E, A, O>\n  <B, E, R1>(\n    policy: Schedule.Schedule<B, NoInfer<E>, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  <A, E, R, O extends Retry.Options<E>>(\n    self: Effect<A, E, R>,\n    options: O\n  ): Retry.Return<R, E, A, O>\n  <A, E, R, B, R1>(\n    self: Effect<A, E, R>,\n    policy: Schedule.Schedule<B, E, R1>\n  ): Effect<A, E, R1 | R>\n} = _schedule.retry_combined\n\n/**\n * Retries with the specified schedule, until it fails, and then both the\n * value produced by the schedule together with the last error are passed to\n * the recovery function.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const retryOrElse: {\n  <A1, E, R1, A2, E2, R2>(\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R1 | R2 | R>\n  <A, E, R, A1, R1, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R1 | R2>\n} = _schedule.retryOrElse_Effect\n\nconst try_: {\n  <A, E>(options: { readonly try: LazyArg<A>; readonly catch: (error: unknown) => E }): Effect<A, E>\n  <A>(evaluate: LazyArg<A>): Effect<A, Cause.UnknownException>\n} = effect.try_\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Effect` value, translating any\n   * thrown exceptions into typed failed effects creating with `Effect.fail`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  try_ as try\n}\n\n/**\n * Returns an effect whose success is mapped by the specified side effecting\n * `try` function, translating any promise rejections into typed failed effects\n * via the `catch` function.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryMap: {\n  <A, B, E1>(\n    options: { readonly try: (a: A) => B; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  <A, E, R, B, E1>(self: Effect<A, E, R>, options: {\n    readonly try: (a: A) => B\n    readonly catch: (error: unknown) => E1\n  }): Effect<B, E | E1, R>\n} = effect.tryMap\n\n/**\n * Returns an effect whose success is mapped by the specified side effecting\n * `try` function, translating any promise rejections into typed failed effects\n * via the `catch` function.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped Promise api.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryMapPromise: {\n  <A, B, E1>(\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  <A, E, R, B, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): Effect<B, E | E1, R>\n} = effect.tryMapPromise\n\n/**\n * Create an `Effect` that when executed will construct `promise` and wait for\n * its result, errors will produce failure as `unknown`.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped Promise api.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryPromise: {\n  <A, E>(\n    options: { readonly try: (signal: AbortSignal) => PromiseLike<A>; readonly catch: (error: unknown) => E }\n  ): Effect<A, E>\n  <A>(try_: (signal: AbortSignal) => PromiseLike<A>): Effect<A, Cause.UnknownException>\n} = effect.tryPromise\n\n/**\n * The inverse operation `sandbox(effect)`\n *\n * Terminates with exceptions on the `Left` side of the `Either` error, if it\n * exists. Otherwise extracts the contained `Effect<A, E, R>`\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const unsandbox: <A, E, R>(self: Effect<A, Cause.Cause<E>, R>) => Effect<A, E, R> = effect.unsandbox\n\n// -------------------------------------------------------------------------------------\n// interuption\n// -------------------------------------------------------------------------------------\n\n/**\n * This function checks if any fibers are attempting to interrupt the current\n * fiber, and if so, performs self-interruption.\n *\n * Note that this allows for interruption to occur in uninterruptible regions.\n *\n * @returns A new `Effect` value that represents the check for interruption\n * and the potential self-interruption of the current fiber.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const allowInterrupt: Effect<void> = effect.allowInterrupt\n\n/**\n * Checks the interrupt status, and produces the effect returned by the\n * specified callback.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const checkInterruptible: <A, E, R>(f: (isInterruptible: boolean) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.checkInterruptible\n\n/**\n * Returns an effect whose interruption will be disconnected from the\n * fiber's own interruption, being performed in the background without\n * slowing down the fiber's interruption.\n *\n * This method is useful to create \"fast interrupting\" effects. For\n * example, if you call this on a bracketed effect, then even if the\n * effect is \"stuck\" in acquire or release, its interruption will return\n * immediately, while the acquire / release are performed in the\n * background.\n *\n * See timeout and race for other applications.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const disconnect: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.disconnect\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interrupt: Effect<never> = core.interrupt\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptWith: (fiberId: FiberId.FiberId) => Effect<never> = core.interruptWith\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.interruptible\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.interruptibleMask\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const onInterrupt: {\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onInterrupt\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const uninterruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.uninterruptible\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const uninterruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.uninterruptibleMask\n\n// -------------------------------------------------------------------------------------\n// lifting\n// -------------------------------------------------------------------------------------\n\n/**\n * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n * or failing with specified error if the predicate fails\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * // succeeds with `1`\n * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n *\n * // fails with `\"0 is not positive\"`\n * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  <A, B extends A, E>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E\n  ): (a: A) => Effect<B, E>\n  <A, E>(predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E): (a: A) => Effect<A, E>\n  <A, E, B extends A>(self: A, refinement: Refinement<A, B>, orFailWith: (a: A) => E): Effect<B, E>\n  <A, E>(self: A, predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E): Effect<A, E>\n} = effect.liftPredicate\n\n// -------------------------------------------------------------------------------------\n// mapping\n// -------------------------------------------------------------------------------------\n\n/**\n * This function maps the success value of an `Effect` value to a specified\n * constant value.\n *\n * @param value - The constant value that the success value of the `Effect`\n * value will be mapped to.\n * @param self - The `Effect` value whose success value will be mapped to the\n * specified constant value.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to the specified constant value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  <B>(value: B): <A, E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A, E, R, B>(self: Effect<A, E, R>, value: B): Effect<B, E, R>\n} = core.as\n\n/**\n * This function maps the success value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value fails, the returned\n * `Effect` value will also fail.\n *\n * @param self - The `Effect` value whose success value will be mapped to a\n * `Some` value in an `Option` value.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to a `Some` value in an `Option`\n * value. The returned `Effect` value may fail if the original `Effect` value\n * fails.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asSome: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R> = effect.asSome\n\n/**\n * This function maps the error value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value succeeds, the returned\n * `Effect` value will also succeed.\n *\n * @param self - The `Effect` value whose error value will be mapped to a\n * `Some` value in an `Option` value.\n *\n * @returns A new `Effect` value that represents the mapping of the error\n * value of the original `Effect` value to a `Some` value in an `Option`\n * value. The returned `Effect` value may succeed if the original `Effect`\n * value succeeds.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asSomeError: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Option.Option<E>, R> = effect.asSomeError\n\n/**\n * This function maps the success value of an `Effect` value to `void`. If the\n * original `Effect` value succeeds, the returned `Effect` value will also\n * succeed. If the original `Effect` value fails, the returned `Effect` value\n * will fail with the same error.\n *\n * @param self - The `Effect` value whose success value will be mapped to `void`.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to `void`.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R> = core.asVoid\n\n/**\n * Returns an effect that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip: <A, E, R>(self: Effect<A, E, R>) => Effect<E, A, R> = core.flip\n\n/**\n * Swaps the error/value parameters, applies the function `f` and flips the\n * parameters back\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flipWith: {\n  <E, A, R, E2, A2, R2>(\n    f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>\n  ): (self: Effect<A, E, R>) => Effect<A2, E2, R2>\n  <A, E, R, E2, A2, R2>(\n    self: Effect<A, E, R>,\n    f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>\n  ): Effect<A2, E2, R2>\n} = effect.flipWith\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A, E, R, B>(self: Effect<A, E, R>, f: (a: A) => B): Effect<B, E, R>\n} = core.map\n\n/**\n * Statefully and effectfully maps over the elements of this chunk to produce\n * new elements.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapAccum: {\n  <S, A, B, E, R>(\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect<readonly [S, B], E, R>\n  ): (elements: Iterable<A>) => Effect<[S, Array<B>], E, R>\n  <A, S, B, E, R>(\n    elements: Iterable<A>,\n    zero: S,\n    f: (s: S, a: A, i: number) => Effect<readonly [S, B], E, R>\n  ): Effect<[S, Array<B>], E, R>\n} = effect.mapAccum\n\n/**\n * Returns an effect whose failure and success channels have been mapped by\n * the specified `onFailure` and `onSuccess` functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2, E2, R>\n  <A, E, R, E2, A2>(\n    self: Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect<A2, E2, R>\n} = core.mapBoth\n\n/**\n * Returns an effect with its error channel mapped using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (e: E) => E2): Effect<A, E2, R>\n} = core.mapError\n\n/**\n * Returns an effect with its full cause of failure mapped using the specified\n * function. This can be used to transform errors while preserving the\n * original structure of `Cause`.\n *\n * See `sandbox`, `catchAllCause` for other functions for dealing\n * with defects.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect<A, E2, R>\n} = effect.mapErrorCause\n\n/**\n * Returns a new effect where the error channel has been merged into the\n * success channel to their common combined type.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const merge: <A, E, R>(self: Effect<A, E, R>) => Effect<E | A, never, R> = effect.merge\n\n/**\n * Returns a new effect where boolean value of this effect is negated.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const negate: <E, R>(self: Effect<boolean, E, R>) => Effect<boolean, E, R> = effect.negate\n\n// -------------------------------------------------------------------------------------\n// scoping, resources & finalization\n// -------------------------------------------------------------------------------------\n\n/**\n * This function constructs a scoped resource from an `acquire` and `release`\n * `Effect` value.\n *\n * If the `acquire` `Effect` value successfully completes execution, then the\n * `release` `Effect` value will be added to the finalizers associated with the\n * scope of this `Effect` value, and it is guaranteed to be run when the scope\n * is closed.\n *\n * The `acquire` and `release` `Effect` values will be run uninterruptibly.\n * Additionally, the `release` `Effect` value may depend on the `Exit` value\n * specified when the scope is closed.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the scoped resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireRelease\n\n/**\n * This function constructs a scoped resource from an `acquire` and `release`\n * `Effect` value.\n *\n * If the `acquire` `Effect` value successfully completes execution, then the\n * `release` `Effect` value will be added to the finalizers associated with the\n * scope of this `Effect` value, and it is guaranteed to be run when the scope\n * is closed.\n *\n * The `acquire` `Effect` values will be run interruptibly.\n * The `release` `Effect` values will be run uninterruptibly.\n *\n * Additionally, the `release` `Effect` value may depend on the `Exit` value\n * specified when the scope is closed.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the scoped resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireReleaseInterruptible\n\n/**\n * This function is used to ensure that an `Effect` value that represents the\n * acquisition of a resource (for example, opening a file, launching a thread,\n * etc.) will not be interrupted, and that the resource will always be released\n * when the `Effect` value completes execution.\n *\n * `acquireUseRelease` does the following:\n *\n *   1. Ensures that the `Effect` value that acquires the resource will not be\n *      interrupted. Note that acquisition may still fail due to internal\n *      reasons (such as an uncaught exception).\n *   2. Ensures that the `release` `Effect` value will not be interrupted,\n *      and will be executed as long as the acquisition `Effect` value\n *      successfully acquires the resource.\n *\n * During the time period between the acquisition and release of the resource,\n * the `use` `Effect` value will be executed.\n *\n * If the `release` `Effect` value fails, then the entire `Effect` value will\n * fail, even if the `use` `Effect` value succeeds. If this fail-fast behavior\n * is not desired, errors produced by the `release` `Effect` value can be caught\n * and ignored.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param use - The `Effect` value that is executed between the acquisition\n * and release of the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the acquisition, use, and\n * release of the resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireUseRelease: {\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): Effect<A2, E | E2, R | R2 | R3>\n} = core.acquireUseRelease\n\n/**\n * This function adds a finalizer to the scope of the calling `Effect` value.\n * The finalizer is guaranteed to be run when the scope is closed, and it may\n * depend on the `Exit` value that the scope is closed with.\n *\n * @param finalizer - The finalizer to add to the scope of the calling\n * `Effect` value. This function must take an `Exit` value as its parameter,\n * and return a new `Effect` value.\n *\n * @returns A new `Effect` value that represents the addition of the finalizer\n * to the scope of the calling `Effect` value.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const addFinalizer: <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R>\n) => Effect<void, never, Scope.Scope | R> = fiberRuntime.addFinalizer\n\n/**\n * Returns an effect that, if this effect _starts_ execution, then the\n * specified `finalizer` is guaranteed to be executed, whether this effect\n * succeeds, fails, or is interrupted.\n *\n * For use cases that need access to the effect's result, see `onExit`.\n *\n * Finalizers offer very powerful guarantees, but they are low-level, and\n * should generally not be used for releasing resources. For higher-level\n * logic built on `ensuring`, see the `acquireRelease` family of methods.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const ensuring: {\n  <X, R1>(finalizer: Effect<X, never, R1>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect<A, E, R>, finalizer: Effect<X, never, R1>): Effect<A, E, R1 | R>\n} = fiberRuntime.ensuring\n\n/**\n * Runs the specified effect if this effect fails, providing the error to the\n * effect if it exists. The provided effect will not be interrupted.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const onError: {\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): Effect<A, E, R2 | R>\n} = core.onError\n\n/**\n * Ensures that a cleanup functions runs, whether this effect succeeds, fails,\n * or is interrupted.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const onExit: {\n  <A, E, X, R2>(\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onExit\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const parallelFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.parallelFinalizers\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const finalizersMask: (\n  strategy: ExecutionStrategy\n) => <A, E, R>(\n  self: (restore: <A1, E1, R1>(self: Effect<A1, E1, R1>) => Effect<A1, E1, R1>) => Effect<A, E, R>\n) => Effect<A, E, R> = fiberRuntime.finalizersMask\n\n/**\n * Returns a new scoped workflow that runs finalizers added to the scope of\n * this workflow sequentially in the reverse of the order in which they were\n * added. Note that finalizers are run sequentially by default so this only\n * has meaning if used within a scope where finalizers are being run in\n * parallel.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const sequentialFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> =\n  fiberRuntime.sequentialFinalizers\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scope: Effect<Scope.Scope, never, Scope.Scope> = fiberRuntime.scope\n\n/**\n * Accesses the current scope and uses it to perform the specified effect.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scopeWith: <A, E, R>(f: (scope: Scope.Scope) => Effect<A, E, R>) => Effect<A, E, R | Scope.Scope> =\n  fiberRuntime.scopeWith\n\n/**\n * Scopes all resources used in this workflow to the lifetime of the workflow,\n * ensuring that their finalizers are run as soon as this workflow completes\n * execution, whether by success, failure, or interruption.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scoped: <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, Exclude<R, Scope.Scope>> =\n  fiberRuntime.scopedEffect\n\n/**\n * Scopes all resources acquired by `resource` to the lifetime of `use`\n * without effecting the scope of any resources acquired by `use`.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const using: {\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect<A2, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | Exclude<R, Scope.Scope>>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>\n  ): Effect<A2, E | E2, R2 | Exclude<R, Scope.Scope>>\n} = fiberRuntime.using\n\n/**\n * Returns a new scoped workflow that returns the result of this workflow as\n * well as a finalizer that can be run to close the scope of this workflow.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const withEarlyRelease: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[Effect<void>, A], E, R | Scope.Scope> = fiberRuntime.withEarlyRelease\n\n// -------------------------------------------------------------------------------------\n// supervision & fibers\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a new effect that will not succeed with its value before first\n * waiting for the end of all child fibers forked by the effect.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const awaitAllChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = circular.awaitAllChildren\n\n/**\n * Returns a new workflow that will not supervise any fibers forked by this\n * workflow.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const daemonChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.daemonChildren\n\n/**\n * Constructs an effect with information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const descriptor: Effect<Fiber.Fiber.Descriptor> = effect.descriptor\n\n/**\n * Constructs an effect based on information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const descriptorWith: <A, E, R>(f: (descriptor: Fiber.Fiber.Descriptor) => Effect<A, E, R>) => Effect<A, E, R> =\n  effect.descriptorWith\n\n/**\n * Returns a new workflow that executes this one and captures the changes in\n * `FiberRef` values.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const diffFiberRefs: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[FiberRefsPatch.FiberRefsPatch, A], E, R> = effect.diffFiberRefs\n\n/**\n * Acts on the children of this fiber (collected into a single fiber),\n * guaranteeing the specified callback will be invoked, whether or not this\n * effect succeeds.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const ensuringChild: {\n  <X, R2>(\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChild\n\n/**\n * Acts on the children of this fiber, guaranteeing the specified callback\n * will be invoked, whether or not this effect succeeds.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const ensuringChildren: {\n  <X, R2>(\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChildren\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fiberId: Effect<FiberId.FiberId> = core.fiberId\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fiberIdWith: <A, E, R>(f: (descriptor: FiberId.Runtime) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.fiberIdWith\n\n/**\n * Returns an effect that forks this effect into its own separate fiber,\n * returning the fiber immediately, without waiting for it to begin executing\n * the effect.\n *\n * You can use the `fork` method whenever you want to execute an effect in a\n * new fiber, concurrently and without \"blocking\" the fiber executing other\n * effects. Using fibers can be tricky, so instead of using this method\n * directly, consider other higher-level methods, such as `raceWith`,\n * `zipPar`, and so forth.\n *\n * The fiber returned by this method has methods to interrupt the fiber and to\n * wait for it to finish executing the effect. See `Fiber` for more\n * information.\n *\n * Whenever you use this method to launch a new fiber, the new fiber is\n * attached to the parent fiber's scope. This means when the parent fiber\n * terminates, the child fiber will be terminated as well, ensuring that no\n * fibers leak. This behavior is called \"auto supervision\", and if this\n * behavior is not desired, you may use the `forkDaemon` or `forkIn` methods.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fork: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> = fiberRuntime.fork\n\n/**\n * Forks the effect into a new fiber attached to the global scope. Because the\n * new fiber is attached to the global scope, when the fiber executing the\n * returned effect terminates, the forked fiber will continue running.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkDaemon: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> =\n  fiberRuntime.forkDaemon\n\n/**\n * Returns an effect that forks all of the specified values, and returns a\n * composite fiber that produces a list of their results, in order.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkAll: {\n  (\n    options?: { readonly discard?: false | undefined } | undefined\n  ): <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  (\n    options: { readonly discard: true }\n  ): <Eff extends Effect<any, any, any>>(effects: Iterable<Eff>) => Effect<void, never, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options?: { readonly discard?: false | undefined } | undefined\n  ): Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options: { readonly discard: true }\n  ): Effect<void, never, Effect.Context<Eff>>\n} = circular.forkAll\n\n/**\n * Forks the effect in the specified scope. The fiber will be interrupted\n * when the scope is closed.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkIn: {\n  (scope: Scope.Scope): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  <A, E, R>(self: Effect<A, E, R>, scope: Scope.Scope): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = circular.forkIn\n\n/**\n * Forks the fiber in a `Scope`, interrupting it when the scope is closed.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkScoped: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, Scope.Scope | R> =\n  circular.forkScoped\n\n/**\n * Like fork but handles an error with the provided handler.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkWithErrorHandler: {\n  <E, X>(\n    handler: (e: E) => Effect<X>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    handler: (e: E) => Effect<X>\n  ): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = fiberRuntime.forkWithErrorHandler\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fromFiber: <A, E>(fiber: Fiber.Fiber<A, E>) => Effect<A, E> = circular.fromFiber\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fromFiberEffect: <A, E, R>(fiber: Effect<Fiber.Fiber<A, E>, E, R>) => Effect<A, E, R> =\n  circular.fromFiberEffect\n\n/**\n * Returns an effect with the behavior of this one, but where all child fibers\n * forked in the effect are reported to the specified supervisor.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const supervised: {\n  <X>(supervisor: Supervisor.Supervisor<X>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, X>(self: Effect<A, E, R>, supervisor: Supervisor.Supervisor<X>): Effect<A, E, R>\n} = circular.supervised\n\n/**\n * Transplants specified effects so that when those effects fork other\n * effects, the forked effects will be governed by the scope of the fiber that\n * executes this effect.\n *\n * This can be used to \"graft\" deep grandchildren onto a higher-level scope,\n * effectively extending their lifespans into the parent scope.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const transplant: <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect<A2, E2, R2>) => Effect<A2, E2, R2>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.transplant\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const withConcurrency: {\n  (concurrency: number | \"unbounded\"): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, concurrency: number | \"unbounded\"): Effect<A, E, R>\n} = core.withConcurrency\n\n// ---------------------------------------------------------------------------------------\n// scheduler\n// ---------------------------------------------------------------------------------------\n\n/**\n * Sets the provided scheduler for usage in the wrapped effect\n *\n * @since 2.0.0\n * @category scheduler\n */\nexport const withScheduler: {\n  (scheduler: Scheduler.Scheduler): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler.Scheduler): Effect<A, E, R>\n} = Scheduler.withScheduler\n\n/**\n * Sets the scheduling priority used when yielding\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withSchedulingPriority: {\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withSchedulingPriority\n\n/**\n * Sets the maximum number of operations before yield by the default schedulers\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withMaxOpsBeforeYield: {\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withMaxOpsBeforeYield\n\n// ---------------------------------------------------------------------------------------\n// clock\n// ---------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Clock` service from the context\n *\n * @since 2.0.0\n * @category clock\n */\nexport const clock: Effect<Clock.Clock> = effect.clock\n\n/**\n * Retreives the `Clock` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category clock\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock.Clock) => Effect<A, E, R>) => Effect<A, E, R> = effect.clockWith\n\n/**\n * Sets the implementation of the clock service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withClockScoped: <A extends Clock.Clock>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withClockScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * clock service.\n *\n * @since 2.0.0\n * @category clock\n */\nexport const withClock: {\n  <X extends Clock.Clock>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <X extends Clock.Clock, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withClock\n\n// -------------------------------------------------------------------------------------\n// console\n// -------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Console` service from the context\n *\n * @since 2.0.0\n * @category console\n */\nexport const console: Effect<Console> = _console.console\n\n/**\n * Retreives the `Console` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category console\n */\nexport const consoleWith: <A, E, R>(f: (console: Console) => Effect<A, E, R>) => Effect<A, E, R> = _console.consoleWith\n\n/**\n * Sets the implementation of the console service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withConsoleScoped: <A extends Console>(console: A) => Effect<void, never, Scope.Scope> =\n  _console.withConsoleScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * console service.\n *\n * @since 2.0.0\n * @category console\n */\nexport const withConsole: {\n  <C extends Console>(console: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, C extends Console>(effect: Effect<A, E, R>, console: C): Effect<A, E, R>\n} = _console.withConsole\n\n// ---------------------------------------------------------------------------------------\n// delays & timeouts\n// ---------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that is delayed from this effect by the specified\n * `Duration`.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const delay: {\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, E, R>\n} = effect.delay\n\n/**\n * Returns an effect that suspends for the specified duration. This method is\n * asynchronous, and does not actually block the fiber executing the effect.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect<void> = effect.sleep\n\n/**\n * Returns a new effect that executes this one and times the execution.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timed: <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E, R> = effect.timed\n\n/**\n * A more powerful variation of `timed` that allows specifying the clock.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timedWith: {\n  <E1, R1>(\n    nanoseconds: Effect<bigint, E1, R1>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E1 | E, R1 | R>\n  <A, E, R, E1, R1>(\n    self: Effect<A, E, R>,\n    nanoseconds: Effect<bigint, E1, R1>\n  ): Effect<[Duration.Duration, A], E | E1, R | R1>\n} = effect.timedWith\n\n/**\n * Returns an effect that will timeout this effect, failing with a `Cause.TimeoutException`\n * if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * WARNING: The effect returned by this method will not itself return until\n * the underlying effect is actually interrupted. This leads to more\n * predictable resource utilization. If early return is desired, then instead\n * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n * first disconnects the effect's interruption signal before performing the\n * timeout, resulting in earliest possible return, before an underlying effect\n * has been successfully interrupted.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeout: {\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | Cause.TimeoutException, R>\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, Cause.TimeoutException | E, R>\n} = circular.timeout\n\n/**\n * Returns an effect that will timeout this effect, returning `None` if the\n * timeout elapses before the effect has produced a value; and returning\n * `Some` of the produced value otherwise.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * WARNING: The effect returned by this method will not itself return until\n * the underlying effect is actually interrupted. This leads to more\n * predictable resource utilization. If early return is desired, then instead\n * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n * first disconnects the effect's interruption signal before performing the\n * timeout, resulting in earliest possible return, before an underlying effect\n * has been successfully interrupted.\n *\n * @since 3.1.0\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<Option.Option<A>, E, R>\n} = circular.timeoutOption\n\n/**\n * The same as `timeout`, but instead of producing a `None` in the event of\n * timeout, it will produce the specified error.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutFail: {\n  <E1>(\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFail\n\n/**\n * The same as `timeout`, but instead of producing a `None` in the event of\n * timeout, it will produce the specified failure.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutFailCause: {\n  <E1>(\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFailCause\n\n/**\n * Returns an effect that will timeout this effect, returning either the\n * default value if the timeout elapses before the effect has produced a\n * value or returning the result of applying the function `onSuccess` to the\n * success value of the effect.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutTo: {\n  <A, B, B1>(\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | B1, E, R>\n  <A, E, R, B1, B>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): Effect<B1 | B, E, R>\n} = circular.timeoutTo\n\n// -------------------------------------------------------------------------------------\n// config\n// -------------------------------------------------------------------------------------\n\n/**\n * Retrieves the default config provider, and passes it to the specified\n * function, which may return an effect that uses the provider to perform some\n * work or compute some value.\n *\n * @since 2.0.0\n * @category config\n */\nexport const configProviderWith: <A, E, R>(f: (configProvider: ConfigProvider) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.configProviderWith\n\n/**\n * Executes the specified workflow with the specified configuration provider.\n *\n * @since 2.0.0\n * @category config\n */\nexport const withConfigProvider: {\n  (value: ConfigProvider): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, value: ConfigProvider): Effect<A, E, R>\n} = defaultServices.withConfigProvider\n\n/**\n * Sets the configuration provider to the specified value and restores it to its original value\n * when the scope is closed.\n *\n * @since 2.0.0\n * @category config\n */\nexport const withConfigProviderScoped: (value: ConfigProvider) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withConfigProviderScoped\n\n// -------------------------------------------------------------------------------------\n// context\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const context: <R>() => Effect<Context.Context<R>, never, R> = core.context\n\n/**\n * Accesses the context of the effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWith: <R, A>(f: (context: Context.Context<R>) => A) => Effect<A, never, R> = effect.contextWith\n\n/**\n * Effectually accesses the context of the effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithEffect: <R0, A, E, R>(\n  f: (context: Context.Context<R0>) => Effect<A, E, R>\n) => Effect<A, E, R | R0> = core.contextWithEffect\n\n/**\n * Provides some of the context required to run this effect,\n * leaving the remainder `R0`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const mapInputContext: {\n  <R0, R>(f: (context: Context.Context<R0>) => Context.Context<R>): <A, E>(self: Effect<A, E, R>) => Effect<A, E, R0>\n  <A, E, R, R0>(self: Effect<A, E, R>, f: (context: Context.Context<R0>) => Context.Context<R>): Effect<A, E, R0>\n} = core.mapInputContext\n\n/**\n * Splits the context into two parts, providing one part using the\n * specified layer/context/runtime and leaving the remainder `R0`\n *\n * @since 2.0.0\n * @category context\n */\nexport const provide: {\n  <ROut, E2, RIn>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, RIn | Exclude<R, ROut>>\n  <R2>(context: Context.Context<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  <R2>(runtime: Runtime.Runtime<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  <A, E, R, ROut, E2, RIn>(\n    self: Effect<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Effect<A, E | E2, RIn | Exclude<R, ROut>>\n  <A, E, R, R2>(self: Effect<A, E, R>, context: Context.Context<R2>): Effect<A, E, Exclude<R, R2>>\n  <A, E, R, R2>(self: Effect<A, E, R>, runtime: Runtime.Runtime<R2>): Effect<A, E, Exclude<R, R2>>\n} = layer.effect_provide\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provide` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideService: {\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n} = effect.provideService\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provide` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideServiceEffect: {\n  <T extends Context.Tag<any, any>, E1, R1>(\n    tag: T,\n    effect: Effect<Context.Tag.Service<T>, E1, R1>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n  <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n    self: Effect<A, E, R>,\n    tag: T,\n    effect: Effect<Context.Tag.Service<T>, E1, R1>\n  ): Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n} = effect.provideServiceEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunction: <T extends Effect<any, any, any>, Args extends Array<any>, A>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => A\n) => (...args: Args) => Effect<A, Effect.Error<T>, Effect.Context<T>> = effect.serviceFunction\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunctionEffect: <T extends Effect<any, any, any>, Args extends Array<any>, A, E, R>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => Effect<A, E, R>\n) => (...args: Args) => Effect<A, E | Effect.Error<T>, R | Effect.Context<T>> = effect.serviceFunctionEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunctions: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n    (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n    : never\n} = effect.serviceFunctions as any\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceConstants: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n    : Effect<S[k], SE, SR>\n} = effect.serviceConstants\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceMembers: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  functions: {\n    [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n      (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n      : never\n  }\n  constants: {\n    [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n      : Effect<S[k], SE, SR>\n  }\n} = effect.serviceMembers as any\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceOption: <I, S>(tag: Context.Tag<I, S>) => Effect<Option.Option<S>> = effect.serviceOption\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceOptional: <I, S>(tag: Context.Tag<I, S>) => Effect<S, Cause.NoSuchElementException> =\n  effect.serviceOptional\n\n/**\n * Updates the service with the required service entry.\n *\n * @since 2.0.0\n * @category context\n */\nexport const updateService: {\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R | Context.Tag.Identifier<T>>\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Effect<A, E, R | Context.Tag.Identifier<T>>\n} = effect.updateService\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Effect<{}> = effect.Do\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  <N extends string, A extends object, B, E2, R2>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect<B, E2, R2>\n  ): <E1, R1>(self: Effect<A, E1, R1>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E1, R2 | R1>\n  <A extends object, N extends string, E1, R1, B, E2, R2>(\n    self: Effect<A, E1, R1>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => Effect<B, E2, R2>\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E1 | E2, R1 | R2>\n} = effect.bind\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Effect<A, E, R>) => Effect<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Effect<A, E, R>, name: N): Effect<{ [K in N]: A }, E, R>\n} = effect.bindTo\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): <E, R>(self: Effect<A, E, R>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, N extends string, E, R, B>(\n    self: Effect<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: A) => B\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = effect.let_\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect whose failure and success have been lifted into an\n * `Either`. The resulting effect cannot fail, because the failure case has\n * been exposed as part of the `Either` success case.\n *\n * This method is useful for recovering from effects that may fail.\n *\n * The error parameter of the returned `Effect` is `never`, since it is\n * guaranteed the effect does not model failure.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const either: <A, E, R>(self: Effect<A, E, R>) => Effect<Either.Either<A, E>, never, R> = core.either\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const exit: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E>, never, R> = core.exit\n\n/**\n * Returns an effect that will succeed or fail the specified `Deferred` based\n * upon the result of the effect. Also synchronizes interruption, so if the\n * provided effect is interrupted, the specified `Deferred` will be interrupted\n * as well.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const intoDeferred: {\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect<A, E, R>) => Effect<boolean, never, R>\n  <A, E, R>(self: Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect<boolean, never, R>\n} = core.intoDeferred\n\n/**\n * Executes this effect, skipping the error but returning optionally the\n * success.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const option: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, never, R> = effect.option\n\n// -------------------------------------------------------------------------------------\n// filtering & conditionals\n// -------------------------------------------------------------------------------------\n\nconst if_: {\n  <A1, E1, R1, A2, E2, R2>(\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): <E = never, R = never>(self: boolean | Effect<boolean, E, R>) => Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: boolean | Effect<boolean, E, R>,\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n} = core.if_\n\nexport {\n  /**\n   * Runs `onTrue` if the result of `self` is `true` and `onFalse` otherwise.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  if_ as if\n}\n\n/**\n * Filter the specified effect with the provided function, dying with specified\n * defect if the predicate fails.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrDie: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A>(\n    predicate: Predicate<NoInfer<A>>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orDieWith: (a: A) => unknown\n  ): Effect<B, E, R>\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>, orDieWith: (a: A) => unknown): Effect<A, E, R>\n} = effect.filterOrDie\n\n/**\n * Filter the specified effect with the provided function, dying with specified\n * message if the predicate fails.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrDieMessage: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    message: string\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>, message: string): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, B extends A>(self: Effect<A, E, R>, refinement: Refinement<A, B>, message: string): Effect<B, E, R>\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>, message: string): Effect<A, E, R>\n} = effect.filterOrDieMessage\n\n/**\n * Filters the specified effect with the provided function returning the value\n * of the effect if it is successful, otherwise returns the value of `orElse`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrElse: {\n  <A, B extends A, C, E2, R2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orElse: (a: NoInfer<A>) => Effect<C, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | C, E2 | E, R2 | R>\n  <A, B, E2, R2>(\n    predicate: Predicate<NoInfer<A>>,\n    orElse: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A | B, E2 | E, R2 | R>\n  <A, E, R, B extends A, C, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orElse: (a: A) => Effect<C, E2, R2>\n  ): Effect<B | C, E | E2, R | R2>\n  <A, E, R, B, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<A>,\n    orElse: (a: A) => Effect<B, E2, R2>\n  ): Effect<A | B, E | E2, R | R2>\n} = effect.filterOrElse\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n * Let's explore this concept through an example:\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * // Define a user interface\n * interface User {\n *   readonly name: string\n * }\n *\n * // Assume an asynchronous authentication function\n * declare const auth: () => Promise<User | null>\n *\n * const program = pipe(\n *   Effect.promise(() => auth()),\n *   Effect.filterOrFail(\n *     // Define a guard to narrow down the type\n *     (user): user is User => user !== null,\n *     () => new Error(\"Unauthorized\")\n *   ),\n *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  <A, B extends A, E2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R>\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R>\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, Cause.NoSuchElementException | E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Effect<A, E, R>) => Effect<A, Cause.NoSuchElementException | E, R>\n  <A, E, R, B extends A, E2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Effect<B, E | E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Effect<A, E | E2, R>\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>\n  ): Effect<B, E | Cause.NoSuchElementException, R>\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>): Effect<A, E | Cause.NoSuchElementException, R>\n} = effect.filterOrFail\n\n/**\n * The moral equivalent of `if (!p) exp`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const unless: {\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.unless\n\n/**\n * The moral equivalent of `if (!p) exp` when `p` has side-effects.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const unlessEffect: {\n  <E2, R2>(\n    condition: Effect<boolean, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(self: Effect<A, E, R>, condition: Effect<boolean, E2, R2>): Effect<Option.Option<A>, E | E2, R | R2>\n} = effect.unlessEffect\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const when: {\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.when\n\n/**\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenEffect: {\n  <E, R>(\n    condition: Effect<boolean, E, R>\n  ): <A, E2, R2>(effect: Effect<A, E2, R2>) => Effect<Option.Option<A>, E | E2, R | R2>\n  <A, E2, R2, E, R>(self: Effect<A, E2, R2>, condition: Effect<boolean, E, R>): Effect<Option.Option<A>, E2 | E, R2 | R>\n} = core.whenEffect\n\n/**\n * Executes this workflow when value of the specified `FiberRef` satisfies the\n * predicate.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenFiberRef: {\n  <S>(\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  <A, E, R, S>(\n    self: Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenFiberRef\n\n/**\n * Executes this workflow when the value of the `Ref` satisfies the predicate.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenRef: {\n  <S>(ref: Ref.Ref<S>, predicate: Predicate<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  <A, E, R, S>(self: Effect<A, E, R>, ref: Ref.Ref<S>, predicate: Predicate<S>): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenRef\n\n// -------------------------------------------------------------------------------------\n// sequencing\n// -------------------------------------------------------------------------------------\n\n/**\n * This function is a pipeable operator that maps over an `Effect` value,\n * flattening the result of the mapping function into a new `Effect` value.\n *\n * @param f - The mapping function to apply to the `Effect` value.\n * This function must return another `Effect` value.\n *\n * @returns A new `Effect` value that is the result of flattening the\n * mapped `Effect` value.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, B, E1, R1>(f: (a: A) => Effect<B, E1, R1>): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R1 | R>\n  <A, E, R, B, E1, R1>(self: Effect<A, E, R>, f: (a: A) => Effect<B, E1, R1>): Effect<B, E | E1, R | R1>\n} = core.flatMap\n\n/**\n * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n *\n * The `that` action can take various forms:\n *\n * - a value\n * - a function returning a value\n * - a promise\n * - a function returning a promise\n * - an effect\n * - a function returning an effect\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n *\n * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n *\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n} = core.andThen\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E1, R1, E, R>(self: Effect<Effect<A, E1, R1>, E, R>) => Effect<A, E | E1, R | R1> =\n  core.flatten\n\n/**\n * Returns an effect that races this effect with all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceAll: <Eff extends Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = fiberRuntime.raceAll\n\n/**\n * Returns an effect that races this effect with the specified effect,\n * returning the first successful `A` from the faster side. If one effect\n * succeeds, the other will be interrupted. If neither succeeds, then the\n * effect will fail with some error.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const race: {\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = fiberRuntime.race\n\n/**\n * Returns an effect that races this effect with the specified effect,\n * yielding the first result to complete, whether by success or failure. If\n * neither effect completes, then the composed effect will not complete.\n *\n * WARNING: The raced effect will safely interrupt the \"loser\", but will not\n * resume until the loser has been cleanly terminated. If early return is\n * desired, then instead of performing `l raceFirst r`, perform\n * `l.disconnect raceFirst r.disconnect`, which disconnects left and right\n * interrupt signal, allowing a fast return, with interruption performed\n * in the background.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceFirst: {\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = circular.raceFirst\n\n/**\n * Returns an effect that races this effect with the specified effect, calling\n * the specified finisher as soon as one result or the other has been computed.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceWith: {\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R1 | R2 | R3 | R>\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n} = fiberRuntime.raceWith\n\n/**\n * Summarizes a effect by computing some value before and after execution, and\n * then combining the values to produce a summary, together with the result of\n * execution.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const summarized: {\n  <B, E2, R2, C>(\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[C, A], E2 | E, R2 | R>\n  <A, E, R, B, E2, R2, C>(\n    self: Effect<A, E, R>,\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect<[C, A], E2 | E, R2 | R>\n} = effect.summarized\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <A, X, E1, R1>(\n    f: (a: NoInfer<A>) => Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <X, E1, R1>(\n    f: Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n} = core.tap\n\n/**\n * Inspects both success and failure outcomes of an effect, performing different actions based on the result.\n *\n * @example\n * import { Effect, Random, Console } from \"effect\"\n *\n * // Simulate an effect that might fail\n * const task = Effect.filterOrFail(\n *   Random.nextRange(-1, 1),\n *   (n) => n >= 0,\n *   () => \"random number is negative\"\n * )\n *\n * // Define an effect that logs both success and failure outcomes of the 'task'\n * const tapping = Effect.tapBoth(task, {\n *   onFailure: (error) => Console.log(`failure: ${error}`),\n *   onSuccess: (randomNumber) => Console.log(`random number: ${randomNumber}`)\n * })\n *\n * Effect.runFork(tapping)\n * // Example Output:\n * // failure: random number is negative\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapBoth: {\n  <E, X, E2, R2, A, X1, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect<X, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect<X1, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E | E2 | E3, R2 | R3 | R>\n  <A, E, R, X, E2, R2, X1, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<X, E2, R2>\n      readonly onSuccess: (a: A) => Effect<X1, E3, R3>\n    }\n  ): Effect<A, E | E2 | E3, R | R2 | R3>\n} = effect.tapBoth\n\n/**\n * Specifically inspects non-recoverable failures or defects in an effect (i.e., one or more `Die` causes).\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // this won't log anything because is not a defect\n * const tapping1 = Effect.tapDefect(task1, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // No Output\n *\n * // Simulate a severe failure in the system by causing a defect with a specific message.\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // This will only log defects, not errors\n * const tapping2 = Effect.tapDefect(task2, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // defect: RuntimeException: Something went wrong\n * //   ... stack trace ...\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapDefect: {\n  <X, E2, R2>(\n    f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>\n  ): Effect<A, E | E2, R | R2>\n} = effect.tapDefect\n\n/**\n * Executes an effectful operation to inspect the failure of an effect without altering it.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // Log the error message if the task fails. This function only executes if there is an error,\n * // providing a method to handle or inspect errors without altering the outcome of the original effect.\n * const tapping = Effect.tapError(task, (error) =>\n *   Console.log(`expected error: ${error}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: NetworkError\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  <E, X, E2, R2>(\n    f: (e: NoInfer<E>) => Effect<X, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<X, E2, R2>): Effect<A, E | E2, R | R2>\n} = effect.tapError\n\n/**\n * Specifically inspects a failure with a particular tag, allowing focused error handling.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * class NetworkError {\n *   readonly _tag = \"NetworkError\"\n *   constructor(readonly statusCode: number) {}\n * }\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n *   constructor(readonly field: string) {}\n * }\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task: Effect.Effect<number, NetworkError | ValidationError> =\n *   Effect.fail(new NetworkError(504))\n *\n * // Apply an error handling function only to errors tagged as \"NetworkError\",\n * // and log the corresponding status code of the error.\n * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n *   Console.log(`expected error: ${error.statusCode}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: 504\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorTag: {\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E1, R1 | R>\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A, E | E1, R | R1>\n} = effect.tapErrorTag\n\n/**\n * Inspects the underlying cause of an effect's failure.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // This will log the cause of any expected error or defect\n * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // Output:\n * // error cause: Error: NetworkError\n *\n * // Simulate a severe failure in the system by causing a defect with a specific message.\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // This will log the cause of any expected error or defect\n * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // error cause: RuntimeException: Something went wrong\n * //   ... stack trace ...\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorCause: {\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect<X, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect<X, E2, R2>\n  ): Effect<A, E | E2, R | R2>\n} = effect.tapErrorCause\n\n// -------------------------------------------------------------------------------------\n// repetition / recursion\n// -------------------------------------------------------------------------------------\n\n/**\n * Repeats this effect forever (until the first error).\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const forever: <A, E, R>(self: Effect<A, E, R>) => Effect<never, E, R> = effect.forever\n\n/**\n * The `Effect.iterate` function allows you to iterate with an effectful operation. It uses an effectful `body` operation to change the state during each iteration and continues the iteration as long as the `while` function evaluates to `true`:\n *\n * ```ts\n * Effect.iterate(initial, options: { while, body })\n * ```\n *\n * We can think of `Effect.iterate` as equivalent to a `while` loop in JavaScript:\n *\n * ```ts\n * let result = initial\n *\n * while (options.while(result)) {\n *   result = options.body(result)\n * }\n *\n * return result\n * ```\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const iterate: {\n  <A, B extends A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly body: (b: B) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n  <A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate<A>\n      readonly body: (a: A) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n} = effect.iterate\n\n/**\n * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n *\n * ```ts\n * Effect.loop(initial, options: { while, step, body })\n * ```\n *\n * It collects all intermediate states in an array and returns it as the final result.\n *\n * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n *\n * ```ts\n * let state = initial\n * const result = []\n *\n * while (options.while(state)) {\n *   result.push(options.body(state))\n *   state = options.step(state)\n * }\n *\n * return result\n * ```\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const loop: {\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = effect.loop\n\n/**\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport declare namespace Repeat {\n  /**\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  export type Return<R, E, A, O extends Options<A>> = Effect<\n    (O extends { schedule: Schedule.Schedule<infer Out, infer _I, infer _R> } ? Out\n      : O extends { until: Refinement<A, infer B> } ? B\n      : A),\n    | E\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  export interface Options<A> {\n    while?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, A, any> | undefined\n  }\n}\n\n/**\n * The `repeat` function returns a new effect that repeats the given effect\n * according to a specified schedule or until the first failure. The scheduled\n * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n * an additional time.\n *\n * @example\n * // Success Example\n * import { Effect, Schedule, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n *\n * @example\n * // Failure Example\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromiseExit(program).then(console.log)\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeat: {\n  <O extends Repeat.Options<A>, A>(\n    options: O\n  ): <E, R>(\n    self: Effect<A, E, R>\n  ) => Repeat.Return<R, E, A, O>\n  <B, A, R1>(\n    schedule: Schedule.Schedule<B, A, R1>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R1 | R>\n  <A, E, R, O extends Repeat.Options<A>>(\n    self: Effect<A, E, R>,\n    options: O\n  ): Repeat.Return<R, E, A, O>\n  <A, E, R, B, R1>(self: Effect<A, E, R>, schedule: Schedule.Schedule<B, A, R1>): Effect<B, E, R | R1>\n} = _schedule.repeat_combined\n\n/**\n * The `repeatN` function returns a new effect that repeats the specified effect a\n * given number of times or until the first failure. The repeats are in addition\n * to the initial execution, so `Effect.repeatN(action, 1)` executes `action` once\n * initially and then repeats it one additional time if it succeeds.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const program = Effect.repeatN(action, 2)\n *\n * Effect.runPromise(program)\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeatN: {\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, n: number): Effect<A, E, R>\n} = effect.repeatN\n\n/**\n * The `repeatOrElse` function returns a new effect that repeats the specified\n * effect according to the given schedule or until the first failure. When a\n * failure occurs, the failure value and schedule output are passed to a\n * specified handler. Scheduled recurrences are in addition to the initial\n * execution, so `Effect.repeat(action, Schedule.once)` executes `action` once\n * initially and then repeats it an additional time if it succeeds.\n *\n * @example\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(\n *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n * )\n *\n * const program = Effect.repeatOrElse(action, policy, () =>\n *   Effect.sync(() => {\n *     console.log(\"orElse\")\n *     return count - 1\n *   })\n * )\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeatOrElse: {\n  <R2, A, B, E, E2, R3>(\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): <R>(self: Effect<A, E, R>) => Effect<B, E2, R2 | R3 | R>\n  <A, E, R, R2, B, E2, R3>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): Effect<B, E2, R | R2 | R3>\n} = _schedule.repeatOrElse_Effect\n\n/**\n * Runs this effect according to the specified schedule.\n *\n * See `scheduleFrom` for a variant that allows the schedule's decision to\n * depend on the result of this effect.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const schedule: {\n  <R2, Out>(schedule: Schedule.Schedule<Out, unknown, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<Out, E, R2 | R>\n  <A, E, R, R2, Out>(self: Effect<A, E, R>, schedule: Schedule.Schedule<Out, unknown, R2>): Effect<Out, E, R | R2>\n} = _schedule.schedule_Effect\n\n/**\n * Runs this effect according to the specified schedule in a new fiber\n * attached to the current scope.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const scheduleForked: {\n  <Out, R2>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R2 | R>\n  <A, E, R, Out, R2>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ): Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R | R2>\n} = circular.scheduleForked\n\n/**\n * Runs this effect according to the specified schedule starting from the\n * specified input value.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const scheduleFrom: {\n  <R2, In, Out>(\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): <E, R>(self: Effect<In, E, R>) => Effect<Out, E, R2 | R>\n  <In, E, R, R2, Out>(\n    self: Effect<In, E, R>,\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): Effect<Out, E, R | R2>\n} = _schedule.scheduleFrom_Effect\n\n/**\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const whileLoop: <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n) => Effect<void, E, R> = core.whileLoop\n\n// -------------------------------------------------------------------------------------\n// fiber refs\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a collection of all `FiberRef` values for the fiber running this\n * effect.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const getFiberRefs: Effect<FiberRefs.FiberRefs> = effect.fiberRefs\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const inheritFiberRefs: (childFiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.inheritFiberRefs\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locally: {\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect<B, E, R>\n} = core.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyWith: {\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<B, E, R>\n} = core.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyScoped: {\n  <A>(value: A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  <A>(self: FiberRef.FiberRef<A>, value: A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyScopedWith: {\n  <A>(f: (a: A) => A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScopedWith\n\n/**\n * Applies the specified changes to the `FiberRef` values for the fiber\n * running this workflow.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const patchFiberRefs: (patch: FiberRefsPatch.FiberRefsPatch) => Effect<void> = effect.patchFiberRefs\n\n/**\n * Sets the `FiberRef` values for the fiber running this effect to the values\n * in the specified collection of `FiberRef` values.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const setFiberRefs: (fiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.setFiberRefs\n\n/**\n * Updates the `FiberRef` values for the fiber running this effect using the\n * specified function.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const updateFiberRefs: (\n  f: (fiberId: FiberId.Runtime, fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n) => Effect<void> = effect.updateFiberRefs\n\n// -------------------------------------------------------------------------------------\n// getters & folding\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns `true` if this effect is a failure, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const isFailure: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isFailure\n\n/**\n * Returns `true` if this effect is a success, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const isSuccess: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isSuccess\n\n/**\n * Folds over the failure value or the success value to yield an effect that\n * does not fail, but succeeds with the value returned by the left or right\n * function passed to `match`.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const match: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = effect.match\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = core.matchCause\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchCauseEffect\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchEffect\n\n// -------------------------------------------------------------------------------------\n// logging\n// -------------------------------------------------------------------------------------\n\n/**\n * Logs one or more messages or error causes at the current log level, which is INFO by default.\n * This function allows logging multiple items at once and can include detailed error information using `Cause` instances.\n *\n * To adjust the log level, use the `Logger.withMinimumLogLevel` function.\n *\n * @example\n * import { Cause, Effect } from \"effect\"\n *\n * const program = Effect.log(\n *   \"message1\",\n *   \"message2\",\n *   Cause.die(\"Oh no!\"),\n *   Cause.die(\"Oh uh!\")\n * )\n *\n * // Effect.runFork(program)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 cause=\"Error: Oh no!\n * // Error: Oh uh!\"\n *\n * @since 2.0.0\n * @category logging\n */\nexport const log: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.log\n\n/**\n * Logs the specified message or cause at the specified log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logWithLevel = (\n  level: LogLevel,\n  ...message: ReadonlyArray<any>\n): Effect<void> => effect.logWithLevel(level)(...message)\n\n/**\n * Logs the specified message or cause at the Trace log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logTrace: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logTrace\n\n/**\n * Logs the specified messages at the DEBUG log level.\n * DEBUG messages are not shown by default.\n *\n * To view DEBUG messages, adjust the logging settings using\n * `Logger.withMinimumLogLevel` and set the log level to `LogLevel.Debug`.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message1\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logDebug: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logDebug\n\n/**\n * Logs the specified message or cause at the Info log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logInfo: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logInfo\n\n/**\n * Logs the specified message or cause at the Warning log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logWarning: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logWarning\n\n/**\n * Logs the specified message or cause at the Error log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logError: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logError\n\n/**\n * Logs the specified message or cause at the Fatal log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logFatal: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logFatal\n\n/**\n * Adds a log span to your effects, which tracks and logs the duration of\n * operations or tasks. This is useful for performance monitoring and debugging\n * time-sensitive processes.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.sleep(\"1 second\")\n *   yield* Effect.log(\"The job is finished!\")\n * }).pipe(Effect.withLogSpan(\"myspan\"))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n *\n * @since 2.0.0\n * @category logging\n */\nexport const withLogSpan: {\n  (label: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, label: string): Effect<A, E, R>\n} = effect.withLogSpan\n\n/**\n * Augments log outputs by appending custom annotations to log entries generated\n * within an effect. This function provides a way to add more context and detail\n * to log messages, making them more informative and easier to trace.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"message1\")\n *   yield* Effect.log(\"message2\")\n * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n *\n * @since 2.0.0\n * @category logging\n */\nexport const annotateLogs: {\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateLogs\n\n/**\n * Applies log annotations with a limited scope, restricting their appearance to\n * specific sections of your effect computations. Use\n * `Effect.annotateLogsScoped` to add metadata to logs that only appear within a\n * defined `Scope`, making it easier to manage context-specific logging.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"no annotations\")\n *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n *\n * @since 3.1.0\n * @category logging\n */\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect<void, never, Scope.Scope>\n} = fiberRuntime.annotateLogsScoped\n\n/**\n * Retrieves the log annotations associated with the current scope.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.logAnnotations\n\n/**\n * Decides wether child fibers will report or not unhandled errors via the logger\n *\n * @since 2.0.0\n * @category logging\n */\nexport const withUnhandledErrorLogLevel: {\n  (level: Option.Option<LogLevel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, level: Option.Option<LogLevel>): Effect<A, E, R>\n} = core.withUnhandledErrorLogLevel\n\n// -------------------------------------------------------------------------------------\n// alternatives\n// -------------------------------------------------------------------------------------\n\n/**\n * Translates effect failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the effect.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orDie: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = core.orDie\n\n/**\n * Keeps none of the errors, and terminates the fiber with them, using the\n * specified function to convert the `E` into a `Throwable`.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orDieWith: {\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect<A, E, R>) => Effect<A, never, R>\n  <A, E, R>(self: Effect<A, E, R>, f: (error: E) => unknown): Effect<A, never, R>\n} = core.orDieWith\n\n/**\n * Executes this effect and returns its value, if it succeeds, but otherwise\n * executes the specified effect.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElse: {\n  <A2, E2, R2>(that: LazyArg<Effect<A2, E2, R2>>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: LazyArg<Effect<A2, E2, R2>>): Effect<A2 | A, E2, R2 | R>\n} = core.orElse\n\n/**\n * Executes this effect and returns its value, if it succeeds, but otherwise\n * fails with the specified error.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseFail: {\n  <E2>(evaluate: LazyArg<E2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect<A, E, R>, evaluate: LazyArg<E2>): Effect<A, E2, R>\n} = effect.orElseFail\n\n/**\n * Executes this effect and returns its value, if it succeeds, but\n * otherwise succeeds with the specified value.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseSucceed: {\n  <A2>(evaluate: LazyArg<A2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, never, R>\n  <A, E, R, A2>(self: Effect<A, E, R>, evaluate: LazyArg<A2>): Effect<A | A2, never, R>\n} = effect.orElseSucceed\n\n// -------------------------------------------------------------------------------------\n// random\n// -------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Random` service from the context.\n *\n * @since 2.0.0\n * @category random\n */\nexport const random: Effect<Random.Random> = effect.random\n\n/**\n * Retreives the `Random` service from the context and uses it to run the\n * specified workflow.\n *\n * @since 2.0.0\n * @category random\n */\nexport const randomWith: <A, E, R>(f: (random: Random.Random) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.randomWith\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * random service.\n *\n * @since 2.0.0\n * @category random\n */\nexport const withRandom: {\n  <X extends Random.Random>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <X extends Random.Random, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withRandom\n\n/**\n * Sets the implementation of the random service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withRandomScoped: <A extends Random.Random>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withRandomScoped\n\n// -------------------------------------------------------------------------------------\n// runtime\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that accesses the runtime, which can be used to\n * (unsafely) execute tasks. This is useful for integration with legacy code\n * that must call back into Effect code.\n *\n * @since 2.0.0\n * @category runtime\n */\nexport const runtime: <R = never>() => Effect<Runtime.Runtime<R>, never, R> = _runtime.runtime\n\n/**\n * Retrieves an effect that succeeds with the current runtime flags, which\n * govern behavior and features of the runtime system.\n *\n * @since 2.0.0\n * @category runtime\n */\nexport const getRuntimeFlags: Effect<RuntimeFlags.RuntimeFlags> = core.runtimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const patchRuntimeFlags: (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect<void> = core.updateRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const withRuntimeFlagsPatch: {\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect<A, E, R>\n} = core.withRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const withRuntimeFlagsPatchScoped: (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n) => Effect<void, never, Scope.Scope> = fiberRuntime.withRuntimeFlagsScoped\n\n// -------------------------------------------------------------------------------------\n// metrics\n// -------------------------------------------------------------------------------------\n\n/**\n * Tags each metric in this effect with the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const tagMetrics: {\n  (key: string, value: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  (values: Record<string, string>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: string): Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, string>): Effect<A, E, R>\n} = effect.tagMetrics\n\n/**\n * Tags each metric in this effect with the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const labelMetrics: {\n  (labels: Iterable<MetricLabel.MetricLabel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, labels: Iterable<MetricLabel.MetricLabel>): Effect<A, E, R>\n} = effect.labelMetrics\n\n/**\n * Tags each metric in a scope with a the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const tagMetricsScoped: (key: string, value: string) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.tagMetricsScoped\n\n/**\n * Tags each metric in a scope with a the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const labelMetricsScoped: (\n  labels: ReadonlyArray<MetricLabel.MetricLabel>\n) => Effect<void, never, Scope.Scope> = fiberRuntime.labelMetricsScoped\n\n/**\n * Retrieves the metric labels associated with the current scope.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const metricLabels: Effect<ReadonlyArray<MetricLabel.MetricLabel>> = core.metricLabels\n\n/**\n * @since 2.0.0\n * @category metrics\n */\nexport const withMetric: {\n  <Type, In, Out>(metric: Metric.Metric<Type, In, Out>): <A extends In, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A extends In, E, R, Type, In, Out>(self: Effect<A, E, R>, metric: Metric.Metric<Type, In, Out>): Effect<A, E, R>\n} = effect.withMetric\n\n// -------------------------------------------------------------------------------------\n// semaphore\n// -------------------------------------------------------------------------------------\n\n/**\n * @category semaphore\n * @since 2.0.0\n */\nexport interface Permit {\n  readonly index: number\n}\n\n/**\n * @category semaphore\n * @since 2.0.0\n */\nexport interface Semaphore {\n  /** when the given amount of permits are available, run the effect and release the permits when finished */\n  withPermits(permits: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /** take the given amount of permits, suspending if they are not yet available */\n  take(permits: number): Effect<number>\n  /** release the given amount of permits, and return the resulting available permits */\n  release(permits: number): Effect<number>\n  /** release all the taken permits, and return the resulting available permits */\n  releaseAll: Effect<number>\n}\n\n/**\n * Unsafely creates a new Semaphore\n *\n * @since 2.0.0\n * @category semaphore\n */\nexport const unsafeMakeSemaphore: (permits: number) => Semaphore = circular.unsafeMakeSemaphore\n\n/**\n * Creates a new Semaphore\n *\n * @since 2.0.0\n * @category semaphore\n */\nexport const makeSemaphore: (permits: number) => Effect<Semaphore> = circular.makeSemaphore\n\n// -------------------------------------------------------------------------------------\n// execution\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runFork: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunForkOptions\n) => Fiber.RuntimeFiber<A, E> = _runtime.unsafeForkEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runCallback: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunCallbackOptions<A, E> | undefined\n) => Runtime.Cancel<A, E> = _runtime.unsafeRunEffect\n\n/**\n * Runs an `Effect` workflow, returning a `Promise` which resolves with the\n * result of the workflow or rejects with an error.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromise: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<A> = _runtime.unsafeRunPromiseEffect\n\n/**\n * Runs an `Effect` workflow, returning a `Promise` which resolves with the\n * `Exit` value of the workflow.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromiseExit: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<Exit.Exit<A, E>> = _runtime.unsafeRunPromiseExitEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runSync: <A, E>(effect: Effect<A, E>) => A = _runtime.unsafeRunSyncEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runSyncExit: <A, E>(effect: Effect<A, E>) => Exit.Exit<A, E> = _runtime.unsafeRunSyncExitEffect\n\n// -------------------------------------------------------------------------------------\n// zipping\n// -------------------------------------------------------------------------------------\n\n/**\n * Sequentially zips the this result with the specified result. Combines both\n * `Cause`s when both effects fail.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const validate: {\n  <B, E1, R1>(\n    that: Effect<B, E1, R1>,\n    options?: {\n      /**\n       * @since 2.0.0\n       * @category supervision & fibers\n       */\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    } | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, B], E1 | E, R1 | R>\n  <A, E, R, B, E1, R1>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<[A, B], E | E1, R | R1>\n} = fiberRuntime.validate\n\n/**\n * Sequentially zips this effect with the specified effect using the specified\n * combiner function. Combines the causes in case both effect fail.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const validateWith: {\n  <B, E1, R1, A, C>(\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): <E, R>(self: Effect<A, E, R>) => Effect<C, E1 | E, R1 | R>\n  <A, E, R, B, E1, R1, C>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<C, E | E1, R | R1>\n} = fiberRuntime.validateWith\n\n/**\n * The `Effect.zip` function allows you to combine two effects into a single\n * effect. This combined effect yields a tuple containing the results of both\n * input effects once they succeed.\n *\n * Note that `Effect.zip` processes effects sequentially: it first completes the\n * effect on the left and then the effect on the right.\n *\n * If you want to run the effects concurrently, you can use the `concurrent` option.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zip(task1, task2)\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // [ 1, 'hello' ]\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zip(task1, task2, { concurrent: true })\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // [ 1, 'hello' ]\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, A2], E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<[A, A2], E | E2, R | R2>\n} = fiberRuntime.zipOptions\n\n/**\n * Sequentially run this effect with the specified effect, _discarding_ the result\n * of the second effect (`that`) in the chain.\n *\n * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n * of both effects instead of sequential.\n *\n * @example\n *\n * import { Effect } from 'effect';\n *\n * const effect = Effect.succeed(\"a message\").pipe(\n *   Effect.zipLeft(Effect.succeed(42)),\n * )\n *\n * assert.deepStrictEqual(Effect.runSync(effect), \"a message\");\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined; readonly batching?: boolean | \"inherit\" | undefined }\n      | undefined\n  ): Effect<A, E | E2, R | R2>\n} = fiberRuntime.zipLeftOptions\n\n/**\n * Sequentially run this effect with the specified effect, _returning_ the result\n * of the second effect (`that`) in the chain.\n *\n * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n * of both effects instead of sequential.\n *\n * @example\n *\n * import { Effect } from 'effect';\n *\n * const effect = Effect.succeed(\"a message\").pipe(\n *   Effect.zipRight(Effect.succeed(42)),\n * )\n *\n * assert.deepStrictEqual(Effect.runSync(effect), 42);\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect<A2, E2 | E, R2 | R>\n} = fiberRuntime.zipRightOptions\n\n/**\n * The `Effect.zipWith` function operates similarly to {@link zip} by combining\n * two effects. However, instead of returning a tuple, it allows you to apply a\n * function to the results of the combined effects, transforming them into a\n * single value\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zipWith(\n *   task1,\n *   task2,\n *   (number, string) => number + string.length\n * )\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n * // 6\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n    }\n  ): Effect<B, E2 | E, R2 | R>\n} = fiberRuntime.zipWithOptions\n\n// -------------------------------------------------------------------------------------\n// applicatives\n// -------------------------------------------------------------------------------------\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  <A, E2, R2>(that: Effect<A, E2, R2>): <B, R, E>(self: Effect<(a: A) => B, E, R>) => Effect<B, E | E2, R | R2>\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n// -------------------------------------------------------------------------------------\n// requests & batching\n// -------------------------------------------------------------------------------------\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const blocked: <A, E>(blockedRequests: RequestBlock, _continue: Effect<A, E>) => Blocked<A, E> = core.blocked\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const runRequestBlock: (blockedRequests: RequestBlock) => Effect<void> = core.runRequestBlock\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const step: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E> | Blocked<A, E>, never, R> = core.step\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const request: {\n  <A extends Request.Request<any, any>, Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>>(\n    dataSource: Ds\n  ): (\n    self: A\n  ) => Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n  <\n    Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>,\n    A extends Request.Request<any, any>\n  >(\n    self: A,\n    dataSource: Ds\n  ): Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n} = dual((args) => Request.isRequest(args[0]), query.fromRequest)\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const cacheRequestResult: <A extends Request.Request<any, any>>(\n  request: A,\n  result: Request.Request.Result<A>\n) => Effect<void> = query.cacheRequest\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestBatching: {\n  (requestBatching: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, requestBatching: boolean): Effect<A, E, R>\n} = core.withRequestBatching\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestCaching: {\n  (strategy: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, strategy: boolean): Effect<A, E, R>\n} = query.withRequestCaching\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestCache: {\n  (cache: Request.Cache): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, cache: Request.Cache): Effect<A, E, R>\n} = query.withRequestCache\n\n// -------------------------------------------------------------------------------------\n// tracing\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const tracer: Effect<Tracer.Tracer> = effect.tracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer.Tracer) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.tracerWith\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracer: {\n  (value: Tracer.Tracer): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, value: Tracer.Tracer): Effect<A, E, R>\n} = defaultServices.withTracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracerScoped: (value: Tracer.Tracer) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withTracerScoped\n\n/**\n * Disable the tracer for the given Effect.\n *\n * @since 2.0.0\n * @category tracing\n * @example\n * import { Effect } from \"effect\"\n *\n * Effect.succeed(42).pipe(\n *   Effect.withSpan(\"my-span\"),\n *   // the span will not be registered with the tracer\n *   Effect.withTracerEnabled(false)\n * )\n */\nexport const withTracerEnabled: {\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerEnabled\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracerTiming: {\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerTiming\n\n/**\n * Adds an annotation to each span in this effect.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const annotateSpans: {\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateSpans\n\n/**\n * Adds an annotation to the current span if available\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const annotateCurrentSpan: {\n  (key: string, value: unknown): Effect<void>\n  (values: Record<string, unknown>): Effect<void>\n} = effect.annotateCurrentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const currentSpan: Effect<Tracer.Span, Cause.NoSuchElementException> = effect.currentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const currentParentSpan: Effect<Tracer.AnySpan, Cause.NoSuchElementException> = effect.currentParentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const spanAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.spanAnnotations\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const spanLinks: Effect<Chunk.Chunk<Tracer.SpanLink>> = effect.spanLinks\n\n/**\n * For all spans in this effect, add a link with the provided span.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const linkSpans: {\n  (\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ): Effect<A, E, R>\n} = effect.linkSpans\n\n/**\n * Create a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const makeSpan: (\n  name: string,\n  options?: Tracer.SpanOptions\n) => Effect<Tracer.Span> = effect.makeSpan\n\n/**\n * Create a new span for tracing, and automatically close it when the Scope\n * finalizes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const makeSpanScoped: (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n) => Effect<Tracer.Span, never, Scope.Scope> = fiberRuntime.makeSpanScoped\n\n/**\n * Create a new span for tracing, and automatically close it when the effect\n * completes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const useSpan: {\n  <A, E, R>(name: string, evaluate: (span: Tracer.Span) => Effect<A, E, R>): Effect<A, E, R>\n  <A, E, R>(\n    name: string,\n    options: Tracer.SpanOptions,\n    evaluate: (span: Tracer.Span) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = effect.useSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withSpan\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category models\n */\nexport interface FunctionWithSpanOptions {\n  readonly name: string\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<Tracer.SpanLink> | undefined\n  readonly parent?: Tracer.AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: Tracer.SpanKind | undefined\n}\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category tracing\n * @example\n * import { Effect } from \"effect\"\n *\n * const getTodo = Effect.functionWithSpan({\n *   body: (id: number) => Effect.succeed(`Got todo ${id}!`),\n *   options: (id) => ({\n *     name: `getTodo-${id}`,\n *     attributes: { id }\n *   })\n * })\n */\nexport const functionWithSpan: <Args extends Array<any>, Ret extends Effect<any, any, any>>(\n  options: {\n    readonly body: (...args: Args) => Ret\n    readonly options: FunctionWithSpanOptions | ((...args: Args) => FunctionWithSpanOptions)\n    readonly captureStackTrace?: boolean | undefined\n  }\n) => (...args: Args) => Unify.Unify<Ret> = effect.functionWithSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * The span is ended when the Scope is finalized.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n} = fiberRuntime.withSpanScoped\n\n/**\n * Adds the provided span to the current span stack.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withParentSpan: {\n  (span: Tracer.AnySpan): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(self: Effect<A, E, R>, span: Tracer.AnySpan): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withParentSpan\n\n// -------------------------------------------------------------------------------------\n// optionality\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that errors with `NoSuchElementException` if the value is\n * null or undefined, otherwise succeeds with the value.\n *\n * @since 2.0.0\n * @category optionality\n */\nexport const fromNullable: <A>(value: A) => Effect<NonNullable<A>, Cause.NoSuchElementException> = effect.fromNullable\n\n/**\n * Wraps the success value of this effect with `Option.some`, and maps\n * `Cause.NoSuchElementException` to `Option.none`.\n *\n * @since 2.0.0\n * @category optionality\n */\nexport const optionFromOptional: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<Option.Option<A>, Exclude<E, Cause.NoSuchElementException>, R> = effect.optionFromOptional\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface ProhibitedType {\n    Service?: `property \"Service\" is forbidden`\n    Identifier?: `property \"Identifier\" is forbidden`\n    _op?: `property \"_op\" is forbidden`\n    _tag?: `property \"_tag\" is forbidden`\n    of?: `property \"of\" is forbidden`\n    context?: `property \"context\" is forbidden`\n    key?: `property \"key\" is forbidden`\n    stack?: `property \"stack\" is forbidden`\n    name?: `property \"name\" is forbidden`\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type AllowedType = (Record<PropertyKey, any> & ProhibitedType) | string | number | symbol\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag: <const Id extends string>(id: Id) => <\n  Self,\n  Type extends Tag.AllowedType\n>() =>\n  & Context.TagClass<Self, Id, Type>\n  & (Type extends Record<PropertyKey, any> ? {\n      [\n        k in keyof Type as Type[k] extends ((...args: [...infer Args]) => infer Ret) ?\n          ((...args: Readonly<Args>) => Ret) extends Type[k] ? k : never\n          : k\n      ]: Type[k] extends (...args: [...infer Args]) => Effect<infer A, infer E, infer R> ?\n        (...args: Readonly<Args>) => Effect<A, E, Self | R>\n        : Type[k] extends (...args: [...infer Args]) => infer A ? (...args: Readonly<Args>) => Effect<A, never, Self>\n        : Type[k] extends Effect<infer A, infer E, infer R> ? Effect<A, E, Self | R>\n        : Effect<Type[k], never, Self>\n    } :\n    {})\n  & {\n    use: <X>(\n      body: (_: Type) => X\n    ) => X extends Effect<infer A, infer E, infer R> ? Effect<A, E, R | Self> : Effect<X, never, Self>\n  } = (id) => () => {\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const creationError = new Error()\n    Error.stackTraceLimit = limit\n    function TagClass() {}\n    Object.setPrototypeOf(TagClass, TagProto)\n    TagClass.key = id\n    Object.defineProperty(TagClass, \"stack\", {\n      get() {\n        return creationError.stack\n      }\n    })\n    const cache = new Map()\n    const done = new Proxy(TagClass, {\n      get(_target: any, prop: any, _receiver) {\n        if (prop === \"use\") {\n          // @ts-expect-error\n          return (body) => core.andThen(TagClass, body)\n        }\n        if (prop in TagClass) {\n          // @ts-expect-error\n          return TagClass[prop]\n        }\n        if (cache.has(prop)) {\n          return cache.get(prop)\n        }\n        const fn = (...args: Array<any>) =>\n          // @ts-expect-error\n          core.andThen(TagClass, (s: any) => {\n            if (typeof s[prop] === \"function\") {\n              // @ts-expect-error\n              cache.set(prop, (...args: Array<any>) => core.andThen(TagClass, (s: any) => s[prop](...args)))\n              return s[prop](...args)\n            }\n            // @ts-expect-error\n            cache.set(prop, core.andThen(TagClass, (s) => s[prop]))\n            return s[prop]\n          })\n        // @ts-expect-error\n        const cn = core.andThen(TagClass, (s) => s[prop])\n        Object.assign(fn, cn)\n        Object.setPrototypeOf(fn, Object.getPrototypeOf(cn))\n        cache.set(prop, fn)\n        return fn\n      }\n    })\n    return done\n  }\n", "import type * as Console from \"../Console.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport type * as Layer from \"../Layer.js\"\nimport type * as Scope from \"../Scope.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport * as defaultConsole from \"./defaultServices/console.js\"\nimport * as fiberRuntime from \"./fiberRuntime.js\"\nimport * as layer from \"./layer.js\"\n\n/** @internal */\nexport const console: Effect.Effect<Console.Console> = core.map(\n  core.fiberRefGet(defaultServices.currentServices),\n  Context.get(defaultConsole.consoleTag)\n)\n\n/** @internal */\nexport const consoleWith = <A, E, R>(f: (console: Console.Console) => Effect.Effect<A, E, R>) =>\n  core.fiberRefGetWith(\n    defaultServices.currentServices,\n    (services) => f(Context.get(services, defaultConsole.consoleTag))\n  )\n\n/** @internal */\nexport const withConsole = dual<\n  <C extends Console.Console>(console: C) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, C extends Console.Console>(effect: Effect.Effect<A, E, R>, console: C) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    effect,\n    defaultServices.currentServices,\n    Context.add(defaultConsole.consoleTag, value)\n  ))\n\n/** @internal */\nexport const withConsoleScoped = <A extends Console.Console>(console: A): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRuntime.fiberRefLocallyScopedWith(\n    defaultServices.currentServices,\n    Context.add(defaultConsole.consoleTag, console)\n  )\n\n/** @internal */\nexport const setConsole = <A extends Console.Console>(console: A): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      defaultServices.currentServices,\n      Context.add(defaultConsole.consoleTag, console)\n    )\n  )\n\n/** @internal */\nexport const assert = (condition: boolean, ...args: ReadonlyArray<any>) =>\n  consoleWith((_) => _.assert(condition, ...args))\n\n/** @internal */\nexport const clear = consoleWith((_) => _.clear)\n\n/** @internal */\nexport const count = (label?: string) => consoleWith((_) => _.count(label))\n\n/** @internal */\nexport const countReset = (label?: string) => consoleWith((_) => _.countReset(label))\n\n/** @internal */\nexport const debug = (...args: ReadonlyArray<any>) => consoleWith((_) => _.debug(...args))\n\n/** @internal */\nexport const dir = (item: any, options?: any) => consoleWith((_) => _.dir(item, options))\n\n/** @internal */\nexport const dirxml = (...args: ReadonlyArray<any>) => consoleWith((_) => _.dirxml(...args))\n\n/** @internal */\nexport const error = (...args: ReadonlyArray<any>) => consoleWith((_) => _.error(...args))\n\n/** @internal */\nexport const group = (options?: {\n  label?: string | undefined\n  collapsed?: boolean | undefined\n}) =>\n  consoleWith((_) =>\n    fiberRuntime.acquireRelease(\n      _.group(options),\n      () => _.groupEnd\n    )\n  )\n\n/** @internal */\nexport const info = (...args: ReadonlyArray<any>) => consoleWith((_) => _.info(...args))\n\n/** @internal */\nexport const log = (...args: ReadonlyArray<any>) => consoleWith((_) => _.log(...args))\n\n/** @internal */\nexport const table = (tabularData: any, properties?: ReadonlyArray<string>) =>\n  consoleWith((_) => _.table(tabularData, properties))\n\n/** @internal */\nexport const time = (label?: string) =>\n  consoleWith((_) =>\n    fiberRuntime.acquireRelease(\n      _.time(label),\n      () => _.timeEnd(label)\n    )\n  )\n\n/** @internal */\nexport const timeLog = (label?: string, ...args: ReadonlyArray<any>) => consoleWith((_) => _.timeLog(label, ...args))\n\n/** @internal */\nexport const trace = (...args: ReadonlyArray<any>) => consoleWith((_) => _.trace(...args))\n\n/** @internal */\nexport const warn = (...args: ReadonlyArray<any>) => consoleWith((_) => _.warn(...args))\n\n/** @internal */\nexport const withGroup = dual<\n  (\n    options?: {\n      readonly label?: string | undefined\n      readonly collapsed?: boolean | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    options?: {\n      readonly label?: string | undefined\n      readonly collapsed?: boolean | undefined\n    }\n  ) => Effect.Effect<A, E, R>\n>((args) => core.isEffect(args[0]), (self, options) =>\n  consoleWith((_) =>\n    core.acquireUseRelease(\n      _.group(options),\n      () => self,\n      () => _.groupEnd\n    )\n  ))\n\n/** @internal */\nexport const withTime = dual<\n  (label?: string) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, label?: string) => Effect.Effect<A, E, R>\n>((args) => core.isEffect(args[0]), (self, label) =>\n  consoleWith((_) =>\n    core.acquireUseRelease(\n      _.time(label),\n      () => self,\n      () => _.timeEnd(label)\n    )\n  ))\n", "import * as Cause from \"../Cause.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type { FiberRef } from \"../FiberRef.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport type * as Layer from \"../Layer.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Runtime from \"../Runtime.js\"\nimport type * as Schedule from \"../Schedule.js\"\nimport * as ScheduleDecision from \"../ScheduleDecision.js\"\nimport * as Intervals from \"../ScheduleIntervals.js\"\nimport * as Scope from \"../Scope.js\"\nimport type * as Synchronized from \"../SynchronizedRef.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as circular from \"./effect/circular.js\"\nimport * as fiberRuntime from \"./fiberRuntime.js\"\nimport * as EffectOpCodes from \"./opCodes/effect.js\"\nimport * as OpCodes from \"./opCodes/layer.js\"\nimport * as ref from \"./ref.js\"\nimport * as runtime from \"./runtime.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as synchronized from \"./synchronizedRef.js\"\nimport * as tracer from \"./tracer.js\"\n\n/** @internal */\nconst LayerSymbolKey = \"effect/Layer\"\n\n/** @internal */\nexport const LayerTypeId: Layer.LayerTypeId = Symbol.for(\n  LayerSymbolKey\n) as Layer.LayerTypeId\n\nconst layerVariance = {\n  /* c8 ignore next */\n  _RIn: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _ROut: (_: unknown) => _\n}\n\n/** @internal */\nconst proto = {\n  [LayerTypeId]: layerVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst MemoMapTypeIdKey = \"effect/Layer/MemoMap\"\n\n/** @internal */\nexport const MemoMapTypeId: Layer.MemoMapTypeId = Symbol.for(\n  MemoMapTypeIdKey\n) as Layer.MemoMapTypeId\n\n/** @internal */\nexport type Primitive =\n  | ExtendScope\n  | Fold\n  | Fresh\n  | FromEffect\n  | Scoped\n  | Suspend\n  | Locally\n  | ProvideTo\n  | ZipWith\n  | ZipWithPar\n\n/** @internal */\nexport type Op<Tag extends string, Body = {}> = Layer.Layer<unknown, unknown, unknown> & Body & {\n  readonly _tag: Tag\n}\n\n/** @internal */\nexport interface ExtendScope extends\n  Op<OpCodes.OP_EXTEND_SCOPE, {\n    readonly layer: Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Fold extends\n  Op<OpCodes.OP_FOLD, {\n    readonly layer: Layer.Layer<unknown>\n    failureK(cause: Cause.Cause<unknown>): Layer.Layer<unknown>\n    successK(context: Context.Context<unknown>): Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Fresh extends\n  Op<OpCodes.OP_FRESH, {\n    readonly layer: Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface FromEffect extends\n  Op<OpCodes.OP_FROM_EFFECT, {\n    readonly effect: Effect.Effect<unknown, unknown, Context.Context<unknown>>\n  }>\n{}\n\n/** @internal */\nexport interface Scoped extends\n  Op<OpCodes.OP_SCOPED, {\n    readonly effect: Effect.Effect<unknown, unknown, Context.Context<unknown>>\n  }>\n{}\n\n/** @internal */\nexport interface Suspend extends\n  Op<OpCodes.OP_SUSPEND, {\n    evaluate(): Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface Locally extends\n  Op<\"Locally\", {\n    readonly self: Layer.Layer<unknown>\n    f(_: Effect.Effect<any, any, any>): Effect.Effect<any, any, any>\n  }>\n{}\n\n/** @internal */\nexport interface ProvideTo extends\n  Op<OpCodes.OP_PROVIDE, {\n    readonly first: Layer.Layer<unknown>\n    readonly second: Layer.Layer<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface ZipWith extends\n  Op<OpCodes.OP_PROVIDE_MERGE, {\n    readonly first: Layer.Layer<unknown>\n    readonly second: Layer.Layer<unknown>\n    zipK(left: Context.Context<unknown>, right: Context.Context<unknown>): Context.Context<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface ZipWithPar extends\n  Op<OpCodes.OP_ZIP_WITH, {\n    readonly first: Layer.Layer<unknown>\n    readonly second: Layer.Layer<unknown>\n    zipK(left: Context.Context<unknown>, right: Context.Context<unknown>): Context.Context<unknown>\n  }>\n{}\n\n/** @internal */\nexport const isLayer = (u: unknown): u is Layer.Layer<unknown, unknown, unknown> => hasProperty(u, LayerTypeId)\n\n/** @internal */\nexport const isFresh = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): boolean => {\n  return (self as Primitive)._tag === OpCodes.OP_FRESH\n}\n\n// -----------------------------------------------------------------------------\n// MemoMap\n// -----------------------------------------------------------------------------\n\n/** @internal */\nclass MemoMapImpl implements Layer.MemoMap {\n  readonly [MemoMapTypeId]: Layer.MemoMapTypeId\n  constructor(\n    readonly ref: Synchronized.SynchronizedRef<\n      Map<\n        Layer.Layer<any, any, any>,\n        readonly [Effect.Effect<any, any>, Scope.Scope.Finalizer]\n      >\n    >\n  ) {\n    this[MemoMapTypeId] = MemoMapTypeId\n  }\n\n  /**\n   * Checks the memo map to see if a layer exists. If it is, immediately\n   * returns it. Otherwise, obtains the layer, stores it in the memo map,\n   * and adds a finalizer to the `Scope`.\n   */\n  getOrElseMemoize<RIn, E, ROut>(\n    layer: Layer.Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ): Effect.Effect<Context.Context<ROut>, E, RIn> {\n    return pipe(\n      synchronized.modifyEffect(this.ref, (map) => {\n        const inMap = map.get(layer)\n        if (inMap !== undefined) {\n          const [acquire, release] = inMap\n          const cached: Effect.Effect<Context.Context<ROut>, E> = pipe(\n            acquire as Effect.Effect<readonly [FiberRefsPatch.FiberRefsPatch, Context.Context<ROut>], E>,\n            core.flatMap(([patch, b]) => pipe(effect.patchFiberRefs(patch), core.as(b))),\n            core.onExit(core.exitMatch({\n              onFailure: () => core.void,\n              onSuccess: () => core.scopeAddFinalizerExit(scope, release)\n            }))\n          )\n          return core.succeed([cached, map] as const)\n        }\n        return pipe(\n          ref.make(0),\n          core.flatMap((observers) =>\n            pipe(\n              core.deferredMake<readonly [FiberRefsPatch.FiberRefsPatch, Context.Context<ROut>], E>(),\n              core.flatMap((deferred) =>\n                pipe(\n                  ref.make<Scope.Scope.Finalizer>(() => core.void),\n                  core.map((finalizerRef) => {\n                    const resource = core.uninterruptibleMask((restore) =>\n                      pipe(\n                        fiberRuntime.scopeMake(),\n                        core.flatMap((innerScope) =>\n                          pipe(\n                            restore(core.flatMap(\n                              makeBuilder(layer, innerScope, true),\n                              (f) => effect.diffFiberRefs(f(this))\n                            )),\n                            core.exit,\n                            core.flatMap((exit) => {\n                              switch (exit._tag) {\n                                case EffectOpCodes.OP_FAILURE: {\n                                  return pipe(\n                                    core.deferredFailCause(deferred, exit.effect_instruction_i0),\n                                    core.zipRight(core.scopeClose(innerScope, exit)),\n                                    core.zipRight(core.failCause(exit.effect_instruction_i0))\n                                  )\n                                }\n                                case EffectOpCodes.OP_SUCCESS: {\n                                  return pipe(\n                                    ref.set(finalizerRef, (exit) =>\n                                      pipe(\n                                        core.scopeClose(innerScope, exit),\n                                        core.whenEffect(\n                                          ref.modify(observers, (n) => [n === 1, n - 1] as const)\n                                        ),\n                                        core.asVoid\n                                      )),\n                                    core.zipRight(ref.update(observers, (n) => n + 1)),\n                                    core.zipRight(\n                                      core.scopeAddFinalizerExit(scope, (exit) =>\n                                        pipe(\n                                          core.sync(() => map.delete(layer)),\n                                          core.zipRight(ref.get(finalizerRef)),\n                                          core.flatMap((finalizer) => finalizer(exit))\n                                        ))\n                                    ),\n                                    core.zipRight(core.deferredSucceed(deferred, exit.effect_instruction_i0)),\n                                    core.as(exit.effect_instruction_i0[1])\n                                  )\n                                }\n                              }\n                            })\n                          )\n                        )\n                      )\n                    )\n                    const memoized = [\n                      pipe(\n                        core.deferredAwait(deferred),\n                        core.onExit(core.exitMatchEffect({\n                          onFailure: () => core.void,\n                          onSuccess: () => ref.update(observers, (n) => n + 1)\n                        }))\n                      ),\n                      (exit: Exit.Exit<unknown, unknown>) =>\n                        pipe(\n                          ref.get(finalizerRef),\n                          core.flatMap((finalizer) => finalizer(exit))\n                        )\n                    ] as const\n                    return [\n                      resource,\n                      isFresh(layer) ? map : map.set(layer, memoized)\n                    ] as const\n                  })\n                )\n              )\n            )\n          )\n        )\n      }),\n      core.flatten\n    )\n  }\n}\n\n/** @internal */\nexport const makeMemoMap: Effect.Effect<Layer.MemoMap> = core.suspend(() =>\n  core.map(\n    circular.makeSynchronized<\n      Map<\n        Layer.Layer<any, any, any>,\n        readonly [\n          Effect.Effect<any, any>,\n          Scope.Scope.Finalizer\n        ]\n      >\n    >(new Map()),\n    (ref) => new MemoMapImpl(ref)\n  )\n)\n\n/** @internal */\nexport const unsafeMakeMemoMap = (): Layer.MemoMap => new MemoMapImpl(circular.unsafeMakeSynchronized(new Map()))\n\n/** @internal */\nexport const build = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Effect.Effect<Context.Context<ROut>, E, RIn | Scope.Scope> =>\n  fiberRuntime.scopeWith((scope) => buildWithScope(self, scope))\n\n/** @internal */\nexport const buildWithScope = dual<\n  (\n    scope: Scope.Scope\n  ) => <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>,\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n>(2, (self, scope) =>\n  core.flatMap(\n    makeMemoMap,\n    (memoMap) => core.flatMap(makeBuilder(self, scope), (run) => run(memoMap))\n  ))\n\n/** @internal */\nexport const buildWithMemoMap = dual<\n  (\n    memoMap: Layer.MemoMap,\n    scope: Scope.Scope\n  ) => <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>,\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>,\n    memoMap: Layer.MemoMap,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n>(3, (self, memoMap, scope) => core.flatMap(makeBuilder(self, scope), (run) => run(memoMap)))\n\nconst makeBuilder = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>,\n  scope: Scope.Scope,\n  inMemoMap = false\n): Effect.Effect<(memoMap: Layer.MemoMap) => Effect.Effect<Context.Context<ROut>, E, RIn>> => {\n  const op = self as Primitive\n  switch (op._tag) {\n    case \"Locally\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) => op.f(memoMap.getOrElseMemoize(op.self, scope)))\n    }\n    case \"ExtendScope\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        fiberRuntime.scopeWith(\n          (scope) => memoMap.getOrElseMemoize(op.layer, scope)\n        ) as unknown as Effect.Effect<Context.Context<ROut>, E, RIn>\n      )\n    }\n    case \"Fold\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.layer, scope),\n          core.matchCauseEffect({\n            onFailure: (cause) => memoMap.getOrElseMemoize(op.failureK(cause), scope),\n            onSuccess: (value) => memoMap.getOrElseMemoize(op.successK(value), scope)\n          })\n        )\n      )\n    }\n    case \"Fresh\": {\n      return core.sync(() => (_: Layer.MemoMap) => pipe(op.layer, buildWithScope(scope)))\n    }\n    case \"FromEffect\": {\n      return inMemoMap\n        ? core.sync(() => (_: Layer.MemoMap) => op.effect as Effect.Effect<Context.Context<ROut>, E, RIn>)\n        : core.sync(() => (memoMap: Layer.MemoMap) => memoMap.getOrElseMemoize(self, scope))\n    }\n    case \"Provide\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.first, scope),\n          core.flatMap((env) =>\n            pipe(\n              memoMap.getOrElseMemoize(op.second, scope),\n              core.provideContext(env)\n            )\n          )\n        )\n      )\n    }\n    case \"Scoped\": {\n      return inMemoMap\n        ? core.sync(() => (_: Layer.MemoMap) =>\n          fiberRuntime.scopeExtend(\n            op.effect as Effect.Effect<Context.Context<ROut>, E, RIn>,\n            scope\n          )\n        )\n        : core.sync(() => (memoMap: Layer.MemoMap) => memoMap.getOrElseMemoize(self, scope))\n    }\n    case \"Suspend\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        memoMap.getOrElseMemoize(\n          op.evaluate(),\n          scope\n        )\n      )\n    }\n    case \"ProvideMerge\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.first, scope),\n          core.zipWith(\n            memoMap.getOrElseMemoize(op.second, scope),\n            op.zipK\n          )\n        )\n      )\n    }\n    case \"ZipWith\": {\n      return core.sync(() => (memoMap: Layer.MemoMap) =>\n        pipe(\n          memoMap.getOrElseMemoize(op.first, scope),\n          fiberRuntime.zipWithOptions(\n            memoMap.getOrElseMemoize(op.second, scope),\n            op.zipK,\n            { concurrent: true }\n          )\n        )\n      )\n    }\n  }\n}\n\n// -----------------------------------------------------------------------------\n// Layer\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const catchAll = dual<\n  <E, RIn2, E2, ROut2>(\n    onError: (error: E) => Layer.Layer<ROut2, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut & ROut2, E2, RIn | RIn2>,\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer.Layer<ROut, E, RIn>,\n    onError: (error: E) => Layer.Layer<ROut2, E2, RIn2>\n  ) => Layer.Layer<ROut & ROut2, E2, RIn | RIn2>\n>(2, (self, onFailure) => match(self, { onFailure, onSuccess: succeedContext }))\n\n/** @internal */\nexport const catchAllCause = dual<\n  <E, RIn2, E2, ROut2>(\n    onError: (cause: Cause.Cause<E>) => Layer.Layer<ROut2, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut & ROut2, E2, RIn | RIn2>,\n  <RIn, E, ROut, RIn2, E2, ROut22>(\n    self: Layer.Layer<ROut, E, RIn>,\n    onError: (cause: Cause.Cause<E>) => Layer.Layer<ROut22, E2, RIn2>\n  ) => Layer.Layer<ROut & ROut22, E2, RIn | RIn2>\n>(2, (self, onFailure) => matchCause(self, { onFailure, onSuccess: succeedContext }))\n\n/** @internal */\nexport const die = (defect: unknown): Layer.Layer<unknown> => failCause(Cause.die(defect))\n\n/** @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Layer.Layer<unknown> => failCauseSync(() => Cause.die(evaluate()))\n\n/** @internal */\nexport const discard = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): Layer.Layer<never, E, RIn> =>\n  map(self, () => Context.empty())\n\n/** @internal */\nexport const context = <R>(): Layer.Layer<R, never, R> => fromEffectContext(core.context<R>())\n\n/** @internal */\nexport const extendScope = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Layer.Layer<ROut, E, RIn | Scope.Scope> => {\n  const extendScope = Object.create(proto)\n  extendScope._tag = OpCodes.OP_EXTEND_SCOPE\n  extendScope.layer = self\n  return extendScope\n}\n\n/** @internal */\nexport const fail = <E>(error: E): Layer.Layer<unknown, E> => failCause(Cause.fail(error))\n\n/** @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Layer.Layer<unknown, E> =>\n  failCauseSync(() => Cause.fail(evaluate()))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Layer.Layer<unknown, E> => fromEffectContext(core.failCause(cause))\n\n/** @internal */\nexport const failCauseSync = <E>(evaluate: LazyArg<Cause.Cause<E>>): Layer.Layer<unknown, E> =>\n  fromEffectContext(core.failCauseSync(evaluate))\n\n/** @internal */\nexport const flatMap = dual<\n  <A, A2, E2, R2>(\n    f: (context: Context.Context<A>) => Layer.Layer<A2, E2, R2>\n  ) => <E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Layer.Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Layer.Layer<A2, E2, R2>\n  ) => Layer.Layer<A2, E | E2, R | R2>\n>(2, (self, f) => match(self, { onFailure: fail, onSuccess: f }))\n\n/** @internal */\nexport const flatten = dual<\n  <I, A, E2, R2>(\n    tag: Context.Tag<I, Layer.Layer<A, E2, R2>>\n  ) => <E, R>(\n    self: Layer.Layer<I, E, R>\n  ) => Layer.Layer<A, E | E2, R | R2>,\n  <I, E, R, A, E2, R2>(\n    self: Layer.Layer<I, E, R>,\n    tag: Context.Tag<I, Layer.Layer<A, E2, R2>>\n  ) => Layer.Layer<A, E | E2, R | R2>\n>(2, (self, tag) => flatMap(self, Context.get(tag as any) as any))\n\n/** @internal */\nexport const fresh = <A, E, R>(self: Layer.Layer<A, E, R>): Layer.Layer<A, E, R> => {\n  const fresh = Object.create(proto)\n  fresh._tag = OpCodes.OP_FRESH\n  fresh.layer = self\n  return fresh\n}\n\n/** @internal */\nexport const fromEffect = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, R>,\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, R>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const effect = tagFirst ? b : a\n  return fromEffectContext(core.map(effect, (service) => Context.make(tag, service)))\n})\n\n/** @internal */\nexport const fromEffectDiscard = <X, E, R>(effect: Effect.Effect<X, E, R>) =>\n  fromEffectContext(core.map(effect, () => Context.empty()))\n\n/** @internal */\nexport function fromEffectContext<A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n): Layer.Layer<A, E, R> {\n  const fromEffect = Object.create(proto)\n  fromEffect._tag = OpCodes.OP_FROM_EFFECT\n  fromEffect.effect = effect\n  return fromEffect\n}\n\n/** @internal */\nexport const fiberRefLocally = dual<\n  <X>(ref: FiberRef<X>, value: X) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>,\n  <A, E, R, X>(self: Layer.Layer<A, E, R>, ref: FiberRef<X>, value: X) => Layer.Layer<A, E, R>\n>(3, (self, ref, value) => locallyEffect(self, core.fiberRefLocally(ref, value)))\n\n/** @internal */\nexport const locallyEffect = dual<\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ) => (self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut2, E2, RIn2>,\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ) => Layer.Layer<ROut2, E2, RIn2>\n>(2, (self, f) => {\n  const locally = Object.create(proto)\n  locally._tag = \"Locally\"\n  locally.self = self\n  locally.f = f\n  return locally\n})\n\n/** @internal */\nexport const fiberRefLocallyWith = dual<\n  <X>(ref: FiberRef<X>, value: (_: X) => X) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>,\n  <A, E, R, X>(self: Layer.Layer<A, E, R>, ref: FiberRef<X>, value: (_: X) => X) => Layer.Layer<A, E, R>\n>(3, (self, ref, value) => locallyEffect(self, core.fiberRefLocallyWith(ref, value)))\n\n/** @internal */\nexport const fiberRefLocallyScoped = <A>(self: FiberRef<A>, value: A): Layer.Layer<never> =>\n  scopedDiscard(fiberRuntime.fiberRefLocallyScoped(self, value))\n\n/** @internal */\nexport const fiberRefLocallyScopedWith = <A>(self: FiberRef<A>, value: (_: A) => A): Layer.Layer<never> =>\n  scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(self, value))\n\n/** @internal */\nexport const fromFunction = <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n  tagA: A,\n  tagB: B,\n  f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n): Layer.Layer<Context.Tag.Identifier<B>, never, Context.Tag.Identifier<A>> =>\n  fromEffectContext(core.map(tagA, (a) => Context.make(tagB, f(a))))\n\n/** @internal */\nexport const launch = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): Effect.Effect<never, E, RIn> =>\n  fiberRuntime.scopedEffect(\n    core.zipRight(\n      fiberRuntime.scopeWith((scope) => pipe(self, buildWithScope(scope))),\n      core.never\n    )\n  )\n\n/** @internal */\nexport const map = dual<\n  <A, B>(\n    f: (context: Context.Context<A>) => Context.Context<B>\n  ) => <E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<B, E, R>,\n  <A, E, R, B>(\n    self: Layer.Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Context.Context<B>\n  ) => Layer.Layer<B, E, R>\n>(2, (self, f) => flatMap(self, (context) => succeedContext(f(context))))\n\n/** @internal */\nexport const mapError = dual<\n  <E, E2>(f: (error: E) => E2) => <A, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E2, R>,\n  <A, E, R, E2>(self: Layer.Layer<A, E, R>, f: (error: E) => E2) => Layer.Layer<A, E2, R>\n>(2, (self, f) => catchAll(self, (error) => failSync(() => f(error))))\n\n/** @internal */\nexport const matchCause = dual<\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => <R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer.Layer<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>\n>(2, (self, { onFailure, onSuccess }) => {\n  const fold = Object.create(proto)\n  fold._tag = OpCodes.OP_FOLD\n  fold.layer = self\n  fold.failureK = onFailure\n  fold.successK = onSuccess\n  return fold\n})\n\n/** @internal */\nexport const match = dual<\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (error: E) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => <R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer.Layer<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => Layer.Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer.Layer<A3, E3, R3>\n    }\n  ) => Layer.Layer<A2 & A3, E2 | E3, R | R2 | R3>\n>(2, (self, { onFailure, onSuccess }) =>\n  matchCause(self, {\n    onFailure: (cause) => {\n      const failureOrCause = Cause.failureOrCause(cause)\n      switch (failureOrCause._tag) {\n        case \"Left\": {\n          return onFailure(failureOrCause.left)\n        }\n        case \"Right\": {\n          return failCause(failureOrCause.right)\n        }\n      }\n    },\n    onSuccess\n  }))\n\n/** @internal */\nexport const memoize = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Effect.Effect<Layer.Layer<ROut, E, RIn>, never, Scope.Scope> =>\n  fiberRuntime.scopeWith((scope) =>\n    core.map(\n      effect.memoize(buildWithScope(self, scope)),\n      fromEffectContext\n    )\n  )\n\n/** @internal */\nexport const merge = dual<\n  <RIn2, E2, ROut2>(\n    that: Layer.Layer<ROut2, E2, RIn2>\n  ) => <RIn, E1, ROut>(self: Layer.Layer<ROut, E1, RIn>) => Layer.Layer<\n    ROut | ROut2,\n    E1 | E2,\n    RIn | RIn2\n  >,\n  <RIn, E1, ROut, RIn2, E2, ROut2>(self: Layer.Layer<ROut, E1, RIn>, that: Layer.Layer<ROut2, E2, RIn2>) => Layer.Layer<\n    ROut | ROut2,\n    E1 | E2,\n    RIn | RIn2\n  >\n>(2, (self, that) => zipWith(self, that, (a, b) => Context.merge(a, b)))\n\n/** @internal */\nexport const mergeAll = <Layers extends [Layer.Layer<never, any, any>, ...Array<Layer.Layer<never, any, any>>]>(\n  ...layers: Layers\n): Layer.Layer<\n  { [k in keyof Layers]: Layer.Layer.Success<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Layer.Error<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Layer.Context<Layers[k]> }[number]\n> => {\n  let final = layers[0]\n  for (let i = 1; i < layers.length; i++) {\n    final = merge(final, layers[i])\n  }\n  return final as any\n}\n\n/** @internal */\nexport const orDie = <A, E, R>(self: Layer.Layer<A, E, R>): Layer.Layer<A, never, R> =>\n  catchAll(self, (defect) => die(defect))\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Layer.Layer<A2, E2, R2>>\n  ) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A & A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Layer.Layer<A, E, R>,\n    that: LazyArg<Layer.Layer<A2, E2, R2>>\n  ) => Layer.Layer<A & A2, E | E2, R | R2>\n>(2, (self, that) => catchAll(self, that))\n\n/** @internal */\nexport const passthrough = <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>): Layer.Layer<RIn | ROut, E, RIn> =>\n  merge(context<RIn>(), self)\n\n/** @internal */\nexport const project = dual<\n  <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ) => <RIn, E>(self: Layer.Layer<Context.Tag.Identifier<A>, E, RIn>) => Layer.Layer<Context.Tag.Identifier<B>, E, RIn>,\n  <RIn, E, A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    self: Layer.Layer<Context.Tag.Identifier<A>, E, RIn>,\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ) => Layer.Layer<Context.Tag.Identifier<B>, E, RIn>\n>(4, (self, tagA, tagB, f) => map(self, (context) => Context.make(tagB, f(Context.unsafeGet(context, tagA)))))\n\n/** @internal */\nexport const retry = dual<\n  <X, E, RIn2>(\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ) => <ROut, RIn>(\n    self: Layer.Layer<ROut, E, RIn>\n  ) => Layer.Layer<ROut, E, RIn | RIn2>,\n  <ROut, E, RIn, X, RIn2>(\n    self: Layer.Layer<ROut, E, RIn>,\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ) => Layer.Layer<ROut, E, RIn | RIn2>\n>(2, (self, schedule) =>\n  suspend(() => {\n    const stateTag = Context.GenericTag<{ state: unknown }>(\"effect/Layer/retry/{ state: unknown }\")\n    return pipe(\n      succeed(stateTag, { state: schedule.initial }),\n      flatMap((env: Context.Context<{ state: unknown }>) =>\n        retryLoop(self, schedule, stateTag, pipe(env, Context.get(stateTag)).state)\n      )\n    )\n  }))\n\nconst retryLoop = <ROut, E, RIn, X, RIn2>(\n  self: Layer.Layer<ROut, E, RIn>,\n  schedule: Schedule.Schedule<X, E, RIn2>,\n  stateTag: Context.Tag<{ state: unknown }, { state: unknown }>,\n  state: unknown\n): Layer.Layer<ROut, E, RIn | RIn2> => {\n  return pipe(\n    self,\n    catchAll((error) =>\n      pipe(\n        retryUpdate(schedule, stateTag, error, state),\n        flatMap((env) => fresh(retryLoop(self, schedule, stateTag, pipe(env, Context.get(stateTag)).state)))\n      )\n    )\n  )\n}\n\nconst retryUpdate = <X, E, RIn>(\n  schedule: Schedule.Schedule<X, E, RIn>,\n  stateTag: Context.Tag<{ state: unknown }, { state: unknown }>,\n  error: E,\n  state: unknown\n): Layer.Layer<{ state: unknown }, E, RIn> => {\n  return fromEffect(\n    stateTag,\n    pipe(\n      Clock.currentTimeMillis,\n      core.flatMap((now) =>\n        pipe(\n          schedule.step(now, error, state),\n          core.flatMap(([state, _, decision]) =>\n            ScheduleDecision.isDone(decision) ?\n              core.fail(error) :\n              pipe(\n                Clock.sleep(Duration.millis(Intervals.start(decision.intervals) - now)),\n                core.as({ state })\n              )\n          )\n        )\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const scoped = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>,\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer.Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const effect = tagFirst ? b : a\n  return scopedContext(core.map(effect, (service) => Context.make(tag, service)))\n})\n\n/** @internal */\nexport const scopedDiscard = <X, E, R>(\n  effect: Effect.Effect<X, E, R>\n): Layer.Layer<never, E, Exclude<R, Scope.Scope>> => scopedContext(pipe(effect, core.as(Context.empty())))\n\n/** @internal */\nexport const scopedContext = <A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n): Layer.Layer<A, E, Exclude<R, Scope.Scope>> => {\n  const scoped = Object.create(proto)\n  scoped._tag = OpCodes.OP_SCOPED\n  scoped.effect = effect\n  return scoped\n}\n\n/** @internal */\nexport const scope: Layer.Layer<Scope.Scope.Closeable> = scopedContext(\n  core.map(\n    fiberRuntime.acquireRelease(\n      fiberRuntime.scopeMake(),\n      (scope, exit) => scope.close(exit)\n    ),\n    (scope) => Context.make(Scope.Scope, scope)\n  )\n)\n\n/** @internal */\nexport const service = <T extends Context.Tag<any, any>>(\n  tag: T\n): Layer.Layer<Context.Tag.Identifier<T>, never, Context.Tag.Identifier<T>> => fromEffect(tag, tag)\n\n/** @internal */\nexport const succeed = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => (\n    resource: Context.Tag.Service<T>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>,\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const resource = tagFirst ? b : a\n  return fromEffectContext(core.succeed(Context.make(tag, resource)))\n})\n\n/** @internal */\nexport const succeedContext = <A>(\n  context: Context.Context<A>\n): Layer.Layer<A> => {\n  return fromEffectContext(core.succeed(context))\n}\n\n/** @internal */\nexport const empty = succeedContext(Context.empty())\n\n/** @internal */\nexport const suspend = <RIn, E, ROut>(\n  evaluate: LazyArg<Layer.Layer<ROut, E, RIn>>\n): Layer.Layer<ROut, E, RIn> => {\n  const suspend = Object.create(proto)\n  suspend._tag = OpCodes.OP_SUSPEND\n  suspend.evaluate = evaluate\n  return suspend\n}\n\n/** @internal */\nexport const sync = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ) => (\n    evaluate: LazyArg<Context.Tag.Service<T>>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>,\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    evaluate: LazyArg<Context.Tag.Service<T>>\n  ) => Layer.Layer<Context.Tag.Identifier<T>>\n>(2, (a, b) => {\n  const tagFirst = Context.isTag(a)\n  const tag = (tagFirst ? a : b) as Context.Tag<unknown, unknown>\n  const evaluate = tagFirst ? b : a\n  return fromEffectContext(core.sync(() => Context.make(tag, evaluate())))\n})\n\n/** @internal */\nexport const syncContext = <A>(evaluate: LazyArg<Context.Context<A>>): Layer.Layer<A> => {\n  return fromEffectContext(core.sync(evaluate))\n}\n\n/** @internal */\nexport const tap = dual<\n  <ROut, XR extends ROut, RIn2, E2, X>(\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ) => <RIn, E>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut, E | E2, RIn | RIn2>,\n  <RIn, E, ROut, XR extends ROut, RIn2, E2, X>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ) => Layer.Layer<ROut, E | E2, RIn | RIn2>\n>(2, (self, f) => flatMap(self, (context) => fromEffectContext(core.as(f(context), context))))\n\n/** @internal */\nexport const tapError = dual<\n  <E, XE extends E, RIn2, E2, X>(\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut, E | E2, RIn | RIn2>,\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ) => Layer.Layer<ROut, E | E2, RIn | RIn2>\n>(2, (self, f) =>\n  catchAll(\n    self,\n    (e) => fromEffectContext(core.flatMap(f(e as any), () => core.fail(e)))\n  ))\n\n/** @internal */\nexport const tapErrorCause = dual<\n  <E, XE extends E, RIn2, E2, X>(\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ) => <RIn, ROut>(self: Layer.Layer<ROut, E, RIn>) => Layer.Layer<ROut, E | E2, RIn | RIn2>,\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer.Layer<ROut, E, RIn>,\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ) => Layer.Layer<ROut, E | E2, RIn | RIn2>\n>(2, (self, f) =>\n  catchAllCause(\n    self,\n    (cause) => fromEffectContext(core.flatMap(f(cause as any), () => core.failCause(cause)))\n  ))\n\n/** @internal */\nexport const toRuntime = <RIn, E, ROut>(\n  self: Layer.Layer<ROut, E, RIn>\n): Effect.Effect<Runtime.Runtime<ROut>, E, RIn | Scope.Scope> =>\n  pipe(\n    fiberRuntime.scopeWith((scope) => buildWithScope(self, scope)),\n    core.flatMap((context) =>\n      pipe(\n        runtime.runtime<ROut>(),\n        core.provideContext(context)\n      )\n    )\n  )\n\n/** @internal */\nexport const toRuntimeWithMemoMap = dual<\n  (\n    memoMap: Layer.MemoMap\n  ) => <RIn, E, ROut>(self: Layer.Layer<ROut, E, RIn>) => Effect.Effect<Runtime.Runtime<ROut>, E, RIn | Scope.Scope>,\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>,\n    memoMap: Layer.MemoMap\n  ) => Effect.Effect<Runtime.Runtime<ROut>, E, RIn | Scope.Scope>\n>(2, (self, memoMap) =>\n  core.flatMap(\n    fiberRuntime.scopeWith((scope) => buildWithMemoMap(self, memoMap, scope)),\n    (context) =>\n      pipe(\n        runtime.runtime<any>(),\n        core.provideContext(context)\n      )\n  ))\n\n/** @internal */\nexport const provide = dual<\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>\n  ) => <RIn2, E2, ROut2>(\n    that: Layer.Layer<ROut2, E2, RIn2>\n  ) => Layer.Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>,\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer.Layer<ROut2, E2, RIn2>,\n    self: Layer.Layer<ROut, E, RIn>\n  ) => Layer.Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n>(2, <RIn2, E2, ROut2, RIn, E, ROut>(\n  that: Layer.Layer<ROut2, E2, RIn2>,\n  self: Layer.Layer<ROut, E, RIn>\n) =>\n  suspend(() => {\n    const provideTo = Object.create(proto)\n    provideTo._tag = OpCodes.OP_PROVIDE\n    provideTo.first = Object.create(proto, {\n      _tag: { value: OpCodes.OP_PROVIDE_MERGE, enumerable: true },\n      first: { value: context<Exclude<RIn2, ROut>>(), enumerable: true },\n      second: { value: self },\n      zipK: { value: (a: Context.Context<ROut>, b: Context.Context<ROut2>) => pipe(a, Context.merge(b)) }\n    })\n    provideTo.second = that\n    return provideTo\n  }))\n\n/** @internal */\nexport const provideMerge = dual<\n  <RIn, E, ROut>(\n    self: Layer.Layer<ROut, E, RIn>\n  ) => <RIn2, E2, ROut2>(\n    that: Layer.Layer<ROut2, E2, RIn2>\n  ) => Layer.Layer<ROut | ROut2, E2 | E, RIn | Exclude<RIn2, ROut>>,\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer.Layer<ROut2, E2, RIn2>,\n    self: Layer.Layer<ROut, E, RIn>\n  ) => Layer.Layer<ROut | ROut2, E2 | E, RIn | Exclude<RIn2, ROut>>\n>(2, <RIn2, E2, ROut2, RIn, E, ROut>(that: Layer.Layer<ROut2, E2, RIn2>, self: Layer.Layer<ROut, E, RIn>) => {\n  const zipWith = Object.create(proto)\n  zipWith._tag = OpCodes.OP_PROVIDE_MERGE\n  zipWith.first = self\n  zipWith.second = provide(that, self)\n  zipWith.zipK = (a: Context.Context<ROut>, b: Context.Context<ROut2>): Context.Context<ROut | ROut2> => {\n    return pipe(a, Context.merge(b))\n  }\n  return zipWith\n})\n\n/** @internal */\nexport const zipWith = dual<\n  <B, E2, R2, A, C>(\n    that: Layer.Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ) => <E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<C, E | E2, R | R2>,\n  <A, E, R, B, E2, R2, C>(\n    self: Layer.Layer<A, E, R>,\n    that: Layer.Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ) => Layer.Layer<C, E | E2, R | R2>\n>(3, (self, that, f) =>\n  suspend(() => {\n    const zipWith = Object.create(proto)\n    zipWith._tag = OpCodes.OP_ZIP_WITH\n    zipWith.first = self\n    zipWith.second = that\n    zipWith.zipK = f\n    return zipWith\n  }))\n\n/** @internal */\nexport const unwrapEffect = <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer.Layer<A, E1, R1>, E, R>\n): Layer.Layer<A, E | E1, R | R1> => {\n  const tag = Context.GenericTag<Layer.Layer<A, E1, R1>>(\"effect/Layer/unwrapEffect/Layer.Layer<R1, E1, A>\")\n  return flatMap(fromEffect(tag, self), (context) => Context.get(context, tag))\n}\n\n/** @internal */\nexport const unwrapScoped = <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer.Layer<A, E1, R1>, E, R>\n): Layer.Layer<A, E | E1, R1 | Exclude<R, Scope.Scope>> => {\n  const tag = Context.GenericTag<Layer.Layer<A, E1, R1>>(\"effect/Layer/unwrapScoped/Layer.Layer<R1, E1, A>\")\n  return flatMap(scoped(tag, self), (context) => Context.get(context, tag))\n}\n\n// -----------------------------------------------------------------------------\n// logging\n// -----------------------------------------------------------------------------\n\nexport const annotateLogs = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n  },\n  {\n    <A, E, R>(self: Layer.Layer<A, E, R>, key: string, value: unknown): Layer.Layer<A, E, R>\n    <A, E, R>(self: Layer.Layer<A, E, R>, values: Record<string, unknown>): Layer.Layer<A, E, R>\n  }\n>(\n  (args) => isLayer(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return fiberRefLocallyWith(\n      args[0] as Layer.Layer<A, E, R>,\n      core.currentLogAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n// -----------------------------------------------------------------------------\n// tracing\n// -----------------------------------------------------------------------------\n\nexport const annotateSpans = dual<\n  {\n    (key: string, value: unknown): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n    (\n      values: Record<string, unknown>\n    ): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>\n  },\n  {\n    <A, E, R>(self: Layer.Layer<A, E, R>, key: string, value: unknown): Layer.Layer<A, E, R>\n    <A, E, R>(self: Layer.Layer<A, E, R>, values: Record<string, unknown>): Layer.Layer<A, E, R>\n  }\n>(\n  (args) => isLayer(args[0]),\n  function<A, E, R>() {\n    const args = arguments\n    return fiberRefLocallyWith(\n      args[0] as Layer.Layer<A, E, R>,\n      core.currentTracerSpanAnnotations,\n      typeof args[1] === \"string\"\n        ? HashMap.set(args[1], args[2])\n        : (annotations) =>\n          Object.entries(args[1] as Record<string, unknown>).reduce(\n            (acc, [key, value]) => HashMap.set(acc, key, value),\n            annotations\n          )\n    )\n  }\n)\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Layer.Layer<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1]) as Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n  if (dataFirst) {\n    const self = arguments[0]\n    return unwrapScoped(\n      core.map(\n        options?.onEnd\n          ? core.tap(\n            fiberRuntime.makeSpanScoped(name, options),\n            (span) => fiberRuntime.addFinalizer((exit) => options.onEnd!(span, exit))\n          )\n          : fiberRuntime.makeSpanScoped(name, options),\n        (span) => withParentSpan(self, span)\n      )\n    )\n  }\n  return (self: Layer.Layer<any, any, any>) =>\n    unwrapScoped(\n      core.map(\n        options?.onEnd\n          ? core.tap(\n            fiberRuntime.makeSpanScoped(name, options),\n            (span) => fiberRuntime.addFinalizer((exit) => options.onEnd!(span, exit))\n          )\n          : fiberRuntime.makeSpanScoped(name, options),\n        (span) => withParentSpan(self, span)\n      )\n    )\n} as any\n\n/** @internal */\nexport const withParentSpan = dual<\n  (\n    span: Tracer.AnySpan\n  ) => <A, E, R>(self: Layer.Layer<A, E, R>) => Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>,\n  <A, E, R>(self: Layer.Layer<A, E, R>, span: Tracer.AnySpan) => Layer.Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n>(2, (self, span) => provide(self, succeedContext(Context.make(tracer.spanTag, span))))\n\n// circular with Effect\n\nconst provideSomeLayer = dual<\n  <A2, E2, R2>(\n    layer: Layer.Layer<A2, E2, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R2 | Exclude<R, A2>>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    layer: Layer.Layer<A2, E2, R2>\n  ) => Effect.Effect<A, E | E2, R2 | Exclude<R, A2>>\n>(2, (self, layer) =>\n  core.acquireUseRelease(\n    fiberRuntime.scopeMake(),\n    (scope) =>\n      core.flatMap(\n        buildWithScope(layer, scope),\n        (context) => core.provideSomeContext(self, context)\n      ),\n    (scope, exit) => core.scopeClose(scope, exit)\n  ))\n\nconst provideSomeRuntime = dual<\n  <R>(context: Runtime.Runtime<R>) => <A, E, R1>(self: Effect.Effect<A, E, R1>) => Effect.Effect<A, E, Exclude<R1, R>>,\n  <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Runtime.Runtime<R>) => Effect.Effect<A, E, Exclude<R1, R>>\n>(2, (self, rt) => {\n  const patchRefs = FiberRefsPatch.diff(runtime.defaultRuntime.fiberRefs, rt.fiberRefs)\n  const patchFlags = runtimeFlags.diff(runtime.defaultRuntime.runtimeFlags, rt.runtimeFlags)\n  return core.uninterruptibleMask((restore) =>\n    core.withFiberRuntime((fiber) => {\n      const oldContext = fiber.getFiberRef(core.currentContext)\n      const oldRefs = fiber.getFiberRefs()\n      const newRefs = FiberRefsPatch.patch(fiber.id(), oldRefs)(patchRefs)\n      const oldFlags = fiber._runtimeFlags\n      const newFlags = runtimeFlags.patch(patchFlags)(oldFlags)\n      const rollbackRefs = FiberRefsPatch.diff(newRefs, oldRefs)\n      const rollbackFlags = runtimeFlags.diff(newFlags, oldFlags)\n      fiber.setFiberRefs(newRefs)\n      fiber._runtimeFlags = newFlags\n      return fiberRuntime.ensuring(\n        core.provideSomeContext(restore(self), Context.merge(oldContext, rt.context)),\n        core.withFiberRuntime((fiber) => {\n          fiber.setFiberRefs(FiberRefsPatch.patch(fiber.id(), fiber.getFiberRefs())(rollbackRefs))\n          fiber._runtimeFlags = runtimeFlags.patch(rollbackFlags)(fiber._runtimeFlags)\n          return core.void\n        })\n      )\n    })\n  )\n})\n\n/** @internal */\nexport const effect_provide = dual<\n  {\n    <ROut, E2, RIn>(\n      layer: Layer.Layer<ROut, E2, RIn>\n    ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, RIn | Exclude<R, ROut>>\n    <R2>(\n      context: Context.Context<R2>\n    ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, R2>>\n    <R2>(\n      runtime: Runtime.Runtime<R2>\n    ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, R2>>\n  },\n  {\n    <A, E, R, ROut, E2, RIn>(\n      self: Effect.Effect<A, E, R>,\n      layer: Layer.Layer<ROut, E2, RIn>\n    ): Effect.Effect<A, E | E2, RIn | Exclude<R, ROut>>\n    <A, E, R, R2>(\n      self: Effect.Effect<A, E, R>,\n      context: Context.Context<R2>\n    ): Effect.Effect<A, E, Exclude<R, R2>>\n    <A, E, R, R2>(\n      self: Effect.Effect<A, E, R>,\n      runtime: Runtime.Runtime<R2>\n    ): Effect.Effect<A, E, Exclude<R, R2>>\n  }\n>(\n  2,\n  <A, E, R, ROut>(\n    self: Effect.Effect<A, E, R>,\n    source: Layer.Layer<ROut, any, any> | Context.Context<ROut> | Runtime.Runtime<ROut>\n  ): Effect.Effect<any, any, Exclude<R, ROut>> =>\n    isLayer(source)\n      ? provideSomeLayer(self, source as Layer.Layer<ROut, any, any>)\n      : Context.isContext(source)\n      ? core.provideSomeContext(self, source)\n      : provideSomeRuntime(self, source as Runtime.Runtime<ROut>)\n)\n", "/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/schedule/decision.js\"\nimport type * as Interval from \"./ScheduleInterval.js\"\nimport type * as Intervals from \"./ScheduleIntervals.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ScheduleDecision = Continue | Done\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Continue {\n  readonly _tag: \"Continue\"\n  readonly intervals: Intervals.Intervals\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done {\n  readonly _tag: \"Done\"\n}\n\nconst _continue = internal._continue\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  _continue as continue\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const continueWith: (interval: Interval.Interval) => ScheduleDecision = internal.continueWith\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: ScheduleDecision = internal.done\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isContinue: (self: ScheduleDecision) => self is Continue = internal.isContinue\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: ScheduleDecision) => self is Done = internal.isDone\n", "import * as Chunk from \"../../Chunk.js\"\nimport type * as ScheduleDecision from \"../../ScheduleDecision.js\"\nimport type * as Interval from \"../../ScheduleInterval.js\"\nimport * as Intervals from \"../../ScheduleIntervals.js\"\n\n/** @internal */\nexport const OP_CONTINUE = \"Continue\" as const\n\n/** @internal */\nexport type OP_CONTINUE = typeof OP_CONTINUE\n\n/** @internal */\nexport const OP_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_DONE = typeof OP_DONE\n\n/** @internal */\nexport const _continue = (intervals: Intervals.Intervals): ScheduleDecision.ScheduleDecision => {\n  return {\n    _tag: OP_CONTINUE,\n    intervals\n  }\n}\n\n/** @internal */\nexport const continueWith = (interval: Interval.Interval): ScheduleDecision.ScheduleDecision => {\n  return {\n    _tag: OP_CONTINUE,\n    intervals: Intervals.make(Chunk.of(interval))\n  }\n}\n\n/** @internal */\nexport const done: ScheduleDecision.ScheduleDecision = {\n  _tag: OP_DONE\n}\n\n/** @internal */\nexport const isContinue = (self: ScheduleDecision.ScheduleDecision): self is ScheduleDecision.Continue => {\n  return self._tag === OP_CONTINUE\n}\n\n/** @internal */\nexport const isDone = (self: ScheduleDecision.ScheduleDecision): self is ScheduleDecision.Done => {\n  return self._tag === OP_DONE\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Check from \"./Chunk.js\"\nimport * as internal from \"./internal/schedule/intervals.js\"\nimport type * as Interval from \"./ScheduleInterval.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IntervalsTypeId: unique symbol = internal.IntervalsTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IntervalsTypeId = typeof IntervalsTypeId\n\n/**\n * An `Intervals` represents a list of several `Interval`s.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Intervals {\n  readonly [IntervalsTypeId]: IntervalsTypeId\n  readonly intervals: Check.Chunk<Interval.Interval>\n}\n\n/**\n * Creates a new `Intervals` from a `List` of `Interval`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (intervals: Check.Chunk<Interval.Interval>) => Intervals = internal.make\n\n/**\n * Constructs an empty list of `Interval`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Intervals = internal.empty\n\n/**\n * Creates `Intervals` from the specified `Iterable<Interval>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: (intervals: Iterable<Interval.Interval>) => Intervals = internal.fromIterable\n\n/**\n * Computes the union of this `Intervals` and  that `Intervals`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  (that: Intervals): (self: Intervals) => Intervals\n  (self: Intervals, that: Intervals): Intervals\n} = internal.union\n\n/**\n * Produces the intersection of this `Intervals` and that `Intervals`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersect: {\n  (that: Intervals): (self: Intervals) => Intervals\n  (self: Intervals, that: Intervals): Intervals\n} = internal.intersect\n\n/**\n * The start of the earliest interval in the specified `Intervals`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const start: (self: Intervals) => number = internal.start\n\n/**\n * The end of the latest interval in the specified `Intervals`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const end: (self: Intervals) => number = internal.end\n\n/**\n * Returns `true` if the start of this `Intervals` is before the start of that\n * `Intervals`, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  (that: Intervals): (self: Intervals) => boolean\n  (self: Intervals, that: Intervals): boolean\n} = internal.lessThan\n\n/**\n * Returns `true` if this `Intervals` is non-empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isNonEmpty: (self: Intervals) => boolean = internal.isNonEmpty\n\n/**\n * Returns the maximum of the two `Intervals` (i.e. which has the latest start).\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const max: {\n  (that: Intervals): (self: Intervals) => Intervals\n  (self: Intervals, that: Intervals): Intervals\n} = internal.max\n", "import * as Chunk from \"../../Chunk.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Option from \"../../Option.js\"\nimport * as Interval from \"../../ScheduleInterval.js\"\nimport type * as Intervals from \"../../ScheduleIntervals.js\"\nimport { getBugErrorMessage } from \"../errors.js\"\n\n/** @internal */\nconst IntervalsSymbolKey = \"effect/ScheduleIntervals\"\n\n/** @internal */\nexport const IntervalsTypeId: Intervals.IntervalsTypeId = Symbol.for(\n  IntervalsSymbolKey\n) as Intervals.IntervalsTypeId\n\n/** @internal */\nexport const make = (intervals: Chunk.Chunk<Interval.Interval>): Intervals.Intervals => {\n  return {\n    [IntervalsTypeId]: IntervalsTypeId,\n    intervals\n  }\n}\n/** @internal */\nexport const empty: Intervals.Intervals = make(Chunk.empty())\n\n/** @internal */\nexport const fromIterable = (intervals: Iterable<Interval.Interval>): Intervals.Intervals =>\n  Array.from(intervals).reduce(\n    (intervals, interval) => pipe(intervals, union(make(Chunk.of(interval)))),\n    empty\n  )\n\n/** @internal */\nexport const union = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => Intervals.Intervals,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => Intervals.Intervals\n>(2, (self, that) => {\n  if (!Chunk.isNonEmpty(that.intervals)) {\n    return self\n  }\n  if (!Chunk.isNonEmpty(self.intervals)) {\n    return that\n  }\n  if (Chunk.headNonEmpty(self.intervals).startMillis < Chunk.headNonEmpty(that.intervals).startMillis) {\n    return unionLoop(\n      Chunk.tailNonEmpty(self.intervals),\n      that.intervals,\n      Chunk.headNonEmpty(self.intervals),\n      Chunk.empty()\n    )\n  }\n  return unionLoop(\n    self.intervals,\n    Chunk.tailNonEmpty(that.intervals),\n    Chunk.headNonEmpty(that.intervals),\n    Chunk.empty()\n  )\n})\n\n/** @internal */\nconst unionLoop = (\n  _self: Chunk.Chunk<Interval.Interval>,\n  _that: Chunk.Chunk<Interval.Interval>,\n  _interval: Interval.Interval,\n  _acc: Chunk.Chunk<Interval.Interval>\n): Intervals.Intervals => {\n  let self = _self\n  let that = _that\n  let interval = _interval\n  let acc = _acc\n  while (Chunk.isNonEmpty(self) || Chunk.isNonEmpty(that)) {\n    if (!Chunk.isNonEmpty(self) && Chunk.isNonEmpty(that)) {\n      if (interval.endMillis < Chunk.headNonEmpty(that).startMillis) {\n        acc = pipe(acc, Chunk.prepend(interval))\n        interval = Chunk.headNonEmpty(that)\n        that = Chunk.tailNonEmpty(that)\n        self = Chunk.empty()\n      } else {\n        interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(that).endMillis)\n        that = Chunk.tailNonEmpty(that)\n        self = Chunk.empty()\n      }\n    } else if (Chunk.isNonEmpty(self) && Chunk.isEmpty(that)) {\n      if (interval.endMillis < Chunk.headNonEmpty(self).startMillis) {\n        acc = pipe(acc, Chunk.prepend(interval))\n        interval = Chunk.headNonEmpty(self)\n        that = Chunk.empty()\n        self = Chunk.tailNonEmpty(self)\n      } else {\n        interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(self).endMillis)\n        that = Chunk.empty()\n        self = Chunk.tailNonEmpty(self)\n      }\n    } else if (Chunk.isNonEmpty(self) && Chunk.isNonEmpty(that)) {\n      if (Chunk.headNonEmpty(self).startMillis < Chunk.headNonEmpty(that).startMillis) {\n        if (interval.endMillis < Chunk.headNonEmpty(self).startMillis) {\n          acc = pipe(acc, Chunk.prepend(interval))\n          interval = Chunk.headNonEmpty(self)\n          self = Chunk.tailNonEmpty(self)\n        } else {\n          interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(self).endMillis)\n          self = Chunk.tailNonEmpty(self)\n        }\n      } else if (interval.endMillis < Chunk.headNonEmpty(that).startMillis) {\n        acc = pipe(acc, Chunk.prepend(interval))\n        interval = Chunk.headNonEmpty(that)\n        that = Chunk.tailNonEmpty(that)\n      } else {\n        interval = Interval.make(interval.startMillis, Chunk.headNonEmpty(that).endMillis)\n        that = Chunk.tailNonEmpty(that)\n      }\n    } else {\n      throw new Error(getBugErrorMessage(\"Intervals.unionLoop\"))\n    }\n  }\n  return make(pipe(acc, Chunk.prepend(interval), Chunk.reverse))\n}\n\n/** @internal */\nexport const intersect = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => Intervals.Intervals,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => Intervals.Intervals\n>(2, (self, that) => intersectLoop(self.intervals, that.intervals, Chunk.empty()))\n\n/** @internal */\nconst intersectLoop = (\n  _left: Chunk.Chunk<Interval.Interval>,\n  _right: Chunk.Chunk<Interval.Interval>,\n  _acc: Chunk.Chunk<Interval.Interval>\n): Intervals.Intervals => {\n  let left = _left\n  let right = _right\n  let acc = _acc\n  while (Chunk.isNonEmpty(left) && Chunk.isNonEmpty(right)) {\n    const interval = pipe(Chunk.headNonEmpty(left), Interval.intersect(Chunk.headNonEmpty(right)))\n    const intervals = Interval.isEmpty(interval) ? acc : pipe(acc, Chunk.prepend(interval))\n    if (pipe(Chunk.headNonEmpty(left), Interval.lessThan(Chunk.headNonEmpty(right)))) {\n      left = Chunk.tailNonEmpty(left)\n    } else {\n      right = Chunk.tailNonEmpty(right)\n    }\n    acc = intervals\n  }\n  return make(Chunk.reverse(acc))\n}\n\n/** @internal */\nexport const start = (self: Intervals.Intervals): number => {\n  return pipe(\n    self.intervals,\n    Chunk.head,\n    Option.getOrElse(() => Interval.empty)\n  ).startMillis\n}\n\n/** @internal */\nexport const end = (self: Intervals.Intervals): number => {\n  return pipe(\n    self.intervals,\n    Chunk.head,\n    Option.getOrElse(() => Interval.empty)\n  ).endMillis\n}\n\n/** @internal */\nexport const lessThan = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => boolean,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => boolean\n>(2, (self, that) => start(self) < start(that))\n\n/** @internal */\nexport const isNonEmpty = (self: Intervals.Intervals): boolean => {\n  return Chunk.isNonEmpty(self.intervals)\n}\n\n/** @internal */\nexport const max = dual<\n  (that: Intervals.Intervals) => (self: Intervals.Intervals) => Intervals.Intervals,\n  (self: Intervals.Intervals, that: Intervals.Intervals) => Intervals.Intervals\n>(2, (self, that) => lessThan(self, that) ? that : self)\n", "/**\n * @since 2.0.0\n */\nimport type * as Duration from \"./Duration.js\"\nimport * as internal from \"./internal/schedule/interval.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IntervalTypeId: unique symbol = internal.IntervalTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IntervalTypeId = typeof IntervalTypeId\n\n/**\n * An `Interval` represents an interval of time. Intervals can encompass all\n * time, or no time at all.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Interval {\n  readonly [IntervalTypeId]: IntervalTypeId\n  readonly startMillis: number\n  readonly endMillis: number\n}\n\n/**\n * Constructs a new interval from the two specified endpoints. If the start\n * endpoint greater than the end endpoint, then a zero size interval will be\n * returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (startMillis: number, endMillis: number) => Interval = internal.make\n\n/**\n * An `Interval` of zero-width.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Interval = internal.empty\n\n/**\n * Returns `true` if this `Interval` is less than `that` interval, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  (that: Interval): (self: Interval) => boolean\n  (self: Interval, that: Interval): boolean\n} = internal.lessThan\n\n/**\n * Returns the minimum of two `Interval`s.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const min: {\n  (that: Interval): (self: Interval) => Interval\n  (self: Interval, that: Interval): Interval\n} = internal.min\n\n/**\n * Returns the maximum of two `Interval`s.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const max: {\n  (that: Interval): (self: Interval) => Interval\n  (self: Interval, that: Interval): Interval\n} = internal.max\n\n/**\n * Returns `true` if the specified `Interval` is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const isEmpty: (self: Interval) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the specified `Interval` is non-empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const isNonEmpty: (self: Interval) => boolean = internal.isNonEmpty\n\n/**\n * Computes a new `Interval` which is the intersection of this `Interval` and\n * that `Interval`.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const intersect: {\n  (that: Interval): (self: Interval) => Interval\n  (self: Interval, that: Interval): Interval\n} = internal.intersect\n\n/**\n * Calculates the size of the `Interval` as the `Duration` from the start of the\n * interval to the end of the interval.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: (self: Interval) => Duration.Duration = internal.size\n\n/**\n * Computes a new `Interval` which is the union of this `Interval` and that\n * `Interval` as a `Some`, otherwise returns `None` if the two intervals cannot\n * form a union.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  (that: Interval): (self: Interval) => Option.Option<Interval>\n  (self: Interval, that: Interval): Option.Option<Interval>\n} = internal.union\n\n/**\n * Construct an `Interval` that includes all time equal to and after the\n * specified start time.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const after: (startMilliseconds: number) => Interval = internal.after\n\n/**\n * Construct an `Interval` that includes all time equal to and before the\n * specified end time.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const before: (endMilliseconds: number) => Interval = internal.before\n", "import * as Duration from \"../../Duration.js\"\nimport { dual } from \"../../Function.js\"\nimport * as Option from \"../../Option.js\"\nimport type * as Interval from \"../../ScheduleInterval.js\"\n\n/** @internal */\nconst IntervalSymbolKey = \"effect/ScheduleInterval\"\n\n/** @internal */\nexport const IntervalTypeId: Interval.IntervalTypeId = Symbol.for(\n  IntervalSymbolKey\n) as Interval.IntervalTypeId\n\n/** @internal */\nexport const empty: Interval.Interval = {\n  [IntervalTypeId]: IntervalTypeId,\n  startMillis: 0,\n  endMillis: 0\n}\n\n/** @internal */\nexport const make = (startMillis: number, endMillis: number): Interval.Interval => {\n  if (startMillis > endMillis) {\n    return empty\n  }\n  return {\n    [IntervalTypeId]: IntervalTypeId,\n    startMillis,\n    endMillis\n  }\n}\n\n/** @internal */\nexport const lessThan = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => boolean,\n  (self: Interval.Interval, that: Interval.Interval) => boolean\n>(2, (self, that) => min(self, that) === self)\n\n/** @internal */\nexport const min = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Interval.Interval,\n  (self: Interval.Interval, that: Interval.Interval) => Interval.Interval\n>(2, (self, that) => {\n  if (self.endMillis <= that.startMillis) return self\n  if (that.endMillis <= self.startMillis) return that\n  if (self.startMillis < that.startMillis) return self\n  if (that.startMillis < self.startMillis) return that\n  if (self.endMillis <= that.endMillis) return self\n  return that\n})\n\n/** @internal */\nexport const max = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Interval.Interval,\n  (self: Interval.Interval, that: Interval.Interval) => Interval.Interval\n>(2, (self, that) => min(self, that) === self ? that : self)\n\n/** @internal */\nexport const isEmpty = (self: Interval.Interval): boolean => {\n  return self.startMillis >= self.endMillis\n}\n\n/** @internal */\nexport const isNonEmpty = (self: Interval.Interval): boolean => {\n  return !isEmpty(self)\n}\n\n/** @internal */\nexport const intersect = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Interval.Interval,\n  (self: Interval.Interval, that: Interval.Interval) => Interval.Interval\n>(2, (self, that) => {\n  const start = Math.max(self.startMillis, that.startMillis)\n  const end = Math.min(self.endMillis, that.endMillis)\n  return make(start, end)\n})\n\n/** @internal */\nexport const size = (self: Interval.Interval): Duration.Duration => {\n  return Duration.millis(self.endMillis - self.startMillis)\n}\n\n/** @internal */\nexport const union = dual<\n  (that: Interval.Interval) => (self: Interval.Interval) => Option.Option<Interval.Interval>,\n  (self: Interval.Interval, that: Interval.Interval) => Option.Option<Interval.Interval>\n>(2, (self, that) => {\n  const start = Math.max(self.startMillis, that.startMillis)\n  const end = Math.min(self.endMillis, that.endMillis)\n  return start < end ? Option.none() : Option.some(make(start, end))\n})\n\n/** @internal */\nexport const after = (startMilliseconds: number): Interval.Interval => {\n  return make(startMilliseconds, Number.POSITIVE_INFINITY)\n}\n\n/** @internal */\nexport const before = (endMilliseconds: number): Interval.Interval => {\n  return make(Number.NEGATIVE_INFINITY, endMilliseconds)\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as ExecutionStrategy from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ScopeTypeId: unique symbol = core.ScopeTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ScopeTypeId = typeof ScopeTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const CloseableScopeTypeId: unique symbol = core.CloseableScopeTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type CloseableScopeTypeId = typeof CloseableScopeTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Scope extends Pipeable {\n  readonly [ScopeTypeId]: ScopeTypeId\n  readonly strategy: ExecutionStrategy.ExecutionStrategy\n  /**\n   * @internal\n   */\n  fork(strategy: ExecutionStrategy.ExecutionStrategy): Effect.Effect<Scope.Closeable>\n  /**\n   * @internal\n   */\n  addFinalizer(finalizer: Scope.Finalizer): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface CloseableScope extends Scope, Pipeable {\n  readonly [CloseableScopeTypeId]: CloseableScopeTypeId\n\n  /**\n   * @internal\n   */\n  close(exit: Exit.Exit<unknown, unknown>): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Scope: Context.Tag<Scope, Scope> = fiberRuntime.scopeTag\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Scope {\n  /**\n   * @since 2.0.0\n   * @category model\n   */\n  export type Finalizer = (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category model\n   */\n  export type Closeable = CloseableScope\n}\n\n/**\n * Adds a finalizer to this scope. The finalizer is guaranteed to be run when\n * the scope is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizer: (\n  self: Scope,\n  finalizer: Effect.Effect<unknown>\n) => Effect.Effect<void> = core.scopeAddFinalizer\n\n/**\n * A simplified version of `addFinalizerWith` when the `finalizer` does not\n * depend on the `Exit` value that the scope is closed with.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizerExit: (self: Scope, finalizer: Scope.Finalizer) => Effect.Effect<void> =\n  core.scopeAddFinalizerExit\n\n/**\n * Closes a scope with the specified exit value, running all finalizers that\n * have been added to the scope.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const close: (self: CloseableScope, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void> = core.scopeClose\n\n/**\n * Extends the scope of an `Effect` workflow that needs a scope into this\n * scope by providing it to the workflow but not closing the scope when the\n * workflow completes execution. This allows extending a scoped value into a\n * larger scope.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extend: {\n  (scope: Scope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeExtend\n\n/**\n * Forks a new scope that is a child of this scope. The child scope will\n * automatically be closed when this scope is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fork: (\n  self: Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = core.scopeFork\n\n/**\n * Uses the scope by providing it to an `Effect` workflow that needs a scope,\n * guaranteeing that the scope is closed with the result of that workflow as\n * soon as the workflow completes execution, whether by success, failure, or\n * interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const use: {\n  (scope: CloseableScope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: CloseableScope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeUse\n\n/**\n * Creates a Scope where Finalizers will run according to the `ExecutionStrategy`.\n *\n * If an ExecutionStrategy is not provided `sequential` will be used.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  executionStrategy?: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = fiberRuntime.scopeMake\n", "import type * as Cause from \"../../Cause.js\"\nimport type * as Deferred from \"../../Deferred.js\"\nimport * as Duration from \"../../Duration.js\"\nimport type * as Effect from \"../../Effect.js\"\nimport * as Equal from \"../../Equal.js\"\nimport type { Equivalence } from \"../../Equivalence.js\"\nimport * as Exit from \"../../Exit.js\"\nimport type * as Fiber from \"../../Fiber.js\"\nimport * as FiberId from \"../../FiberId.js\"\nimport type * as FiberRefsPatch from \"../../FiberRefsPatch.js\"\nimport type { LazyArg } from \"../../Function.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport * as MutableHashMap from \"../../MutableHashMap.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport * as Predicate from \"../../Predicate.js\"\nimport * as Readable from \"../../Readable.js\"\nimport type * as Ref from \"../../Ref.js\"\nimport type * as Schedule from \"../../Schedule.js\"\nimport { currentScheduler } from \"../../Scheduler.js\"\nimport type * as Scope from \"../../Scope.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport type * as Synchronized from \"../../SynchronizedRef.js\"\nimport * as internalCause from \"../cause.js\"\nimport * as effect from \"../core-effect.js\"\nimport * as core from \"../core.js\"\nimport * as executionStrategy from \"../executionStrategy.js\"\nimport * as internalFiber from \"../fiber.js\"\nimport * as fiberRuntime from \"../fiberRuntime.js\"\nimport { globalScope } from \"../fiberScope.js\"\nimport * as internalRef from \"../ref.js\"\nimport * as _schedule from \"../schedule.js\"\nimport * as supervisor from \"../supervisor.js\"\n\n/** @internal */\nclass Semaphore {\n  public waiters = new Set<() => void>()\n  public taken = 0\n\n  constructor(readonly permits: number) {}\n\n  get free() {\n    return this.permits - this.taken\n  }\n\n  readonly take = (n: number): Effect.Effect<number> =>\n    core.async<number>((resume) => {\n      if (this.free < n) {\n        const observer = () => {\n          if (this.free < n) {\n            return\n          }\n          this.waiters.delete(observer)\n          this.taken += n\n          resume(core.succeed(n))\n        }\n        this.waiters.add(observer)\n        return core.sync(() => {\n          this.waiters.delete(observer)\n        })\n      }\n      this.taken += n\n      return resume(core.succeed(n))\n    })\n\n  readonly updateTaken = (f: (n: number) => number): Effect.Effect<number> =>\n    core.withFiberRuntime((fiber) => {\n      this.taken = f(this.taken)\n      if (this.waiters.size > 0) {\n        fiber.getFiberRef(currentScheduler).scheduleTask(() => {\n          const iter = this.waiters.values()\n          let item = iter.next()\n          while (item.done === false && this.free > 0) {\n            item.value()\n            item = iter.next()\n          }\n        }, fiber.getFiberRef(core.currentSchedulingPriority))\n      }\n      return core.succeed(this.free)\n    })\n\n  readonly release = (n: number): Effect.Effect<number> => this.updateTaken((taken) => taken - n)\n\n  readonly releaseAll: Effect.Effect<number> = this.updateTaken((_) => 0)\n\n  readonly withPermits = (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) =>\n    core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        restore(this.take(n)),\n        (permits) => fiberRuntime.ensuring(restore(self), this.release(permits))\n      )\n    )\n}\n\n/** @internal */\nexport const unsafeMakeSemaphore = (permits: number): Semaphore => new Semaphore(permits)\n\n/** @internal */\nexport const makeSemaphore = (permits: number) => core.sync(() => unsafeMakeSemaphore(permits))\n\n/** @internal */\nexport const awaitAllChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  ensuringChildren(self, fiberRuntime.fiberAwaitAll)\n\n/** @internal */\nexport const cached: {\n  (\n    timeToLive: Duration.DurationInput\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Effect.Effect<A, E>, never, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<Effect.Effect<A, E>, never, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<Effect.Effect<A, E>, never, R> =>\n    core.map(cachedInvalidateWithTTL(self, timeToLive), (tuple) => tuple[0])\n)\n\n/** @internal */\nexport const cachedInvalidateWithTTL: {\n  (timeToLive: Duration.DurationInput): <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[Effect.Effect<A, E>, Effect.Effect<void>], never, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<[Effect.Effect<A, E>, Effect.Effect<void>], never, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    timeToLive: Duration.DurationInput\n  ): Effect.Effect<[Effect.Effect<A, E>, Effect.Effect<void>], never, R> => {\n    const duration = Duration.decode(timeToLive)\n    return core.flatMap(\n      core.context<R>(),\n      (env) =>\n        core.map(\n          makeSynchronized<Option.Option<readonly [number, Deferred.Deferred<A, E>]>>(Option.none()),\n          (cache) =>\n            [\n              core.provideContext(getCachedValue(self, duration, cache), env),\n              invalidateCache(cache)\n            ] as [Effect.Effect<A, E>, Effect.Effect<void>]\n        )\n    )\n  }\n)\n\n/** @internal */\nconst computeCachedValue = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  timeToLive: Duration.DurationInput,\n  start: number\n): Effect.Effect<Option.Option<[number, Deferred.Deferred<A, E>]>, never, R> => {\n  const timeToLiveMillis = Duration.toMillis(Duration.decode(timeToLive))\n  return pipe(\n    core.deferredMake<A, E>(),\n    core.tap((deferred) => core.intoDeferred(self, deferred)),\n    core.map((deferred) => Option.some([start + timeToLiveMillis, deferred]))\n  )\n}\n\n/** @internal */\nconst getCachedValue = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  timeToLive: Duration.DurationInput,\n  cache: Synchronized.SynchronizedRef<Option.Option<readonly [number, Deferred.Deferred<A, E>]>>\n): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    pipe(\n      effect.clockWith((clock) => clock.currentTimeMillis),\n      core.flatMap((time) =>\n        updateSomeAndGetEffectSynchronized(cache, (option) => {\n          switch (option._tag) {\n            case \"None\": {\n              return Option.some(computeCachedValue(self, timeToLive, time))\n            }\n            case \"Some\": {\n              const [end] = option.value\n              return end - time <= 0\n                ? Option.some(computeCachedValue(self, timeToLive, time))\n                : Option.none()\n            }\n          }\n        })\n      ),\n      core.flatMap((option) =>\n        Option.isNone(option) ?\n          core.dieMessage(\n            \"BUG: Effect.cachedInvalidate - please report an issue at https://github.com/Effect-TS/effect/issues\"\n          ) :\n          restore(core.deferredAwait(option.value[1]))\n      )\n    )\n  )\n\n/** @internal */\nconst invalidateCache = <A, E>(\n  cache: Synchronized.SynchronizedRef<Option.Option<readonly [number, Deferred.Deferred<A, E>]>>\n): Effect.Effect<void> => internalRef.set(cache, Option.none())\n\n/** @internal */\nexport const ensuringChild = dual<\n  <X, R2>(\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E, R | R2>,\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect.Effect<X, never, R2>\n  ) => Effect.Effect<A, E, R | R2>\n>(2, (self, f) => ensuringChildren(self, (children) => f(fiberRuntime.fiberAll(children))))\n\n/** @internal */\nexport const ensuringChildren = dual<\n  <X, R2>(\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R | R2>,\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect.Effect<X, never, R2>\n  ) => Effect.Effect<A, E, R | R2>\n>(2, (self, children) =>\n  core.flatMap(supervisor.track, (supervisor) =>\n    pipe(\n      supervised(self, supervisor),\n      fiberRuntime.ensuring(core.flatMap(supervisor.value, children))\n    )))\n\n/** @internal */\nexport const forkAll: {\n  (\n    options?: {\n      readonly discard?: false | undefined\n    }\n  ): <Eff extends Effect.Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect.Effect<\n    Fiber.Fiber<Array<Effect.Effect.Success<Eff>>, Effect.Effect.Error<Eff>>,\n    never,\n    Effect.Effect.Context<Eff>\n  >\n  (options: {\n    readonly discard: true\n  }): <Eff extends Effect.Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect.Effect<void, never, Effect.Effect.Context<Eff>>\n  <Eff extends Effect.Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options?: {\n      readonly discard?: false | undefined\n    }\n  ): Effect.Effect<\n    Fiber.Fiber<Array<Effect.Effect.Success<Eff>>, Effect.Effect.Error<Eff>>,\n    never,\n    Effect.Effect.Context<Eff>\n  >\n  <Eff extends Effect.Effect<any, any, any>>(effects: Iterable<Eff>, options: {\n    readonly discard: true\n  }): Effect.Effect<void, never, Effect.Effect.Context<Eff>>\n} = dual((args) => Predicate.isIterable(args[0]), <A, E, R>(effects: Iterable<Effect.Effect<A, E, R>>, options: {\n  readonly discard: true\n}): Effect.Effect<void, never, R> =>\n  options?.discard ?\n    core.forEachSequentialDiscard(effects, fiberRuntime.fork) :\n    core.map(core.forEachSequential(effects, fiberRuntime.fork), fiberRuntime.fiberAll))\n\n/** @internal */\nexport const forkIn = dual<\n  (scope: Scope.Scope) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(\n  2,\n  (self, scope) =>\n    core.uninterruptibleMask((restore) =>\n      core.flatMap(scope.fork(executionStrategy.sequential), (child) =>\n        pipe(\n          restore(self),\n          core.onExit((exit) => child.close(exit)),\n          fiberRuntime.forkDaemon,\n          core.tap((fiber) =>\n            child.addFinalizer(() =>\n              core.fiberIdWith((fiberId) =>\n                Equal.equals(fiberId, fiber.id()) ?\n                  core.void :\n                  core.asVoid(core.interruptFiber(fiber))\n              )\n            )\n          )\n        ))\n    )\n)\n\n/** @internal */\nexport const forkScoped = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R | Scope.Scope> =>\n  fiberRuntime.scopeWith((scope) => forkIn(self, scope))\n\n/** @internal */\nexport const fromFiber = <A, E>(fiber: Fiber.Fiber<A, E>): Effect.Effect<A, E> => internalFiber.join(fiber)\n\n/** @internal */\nexport const fromFiberEffect = <A, E, R>(fiber: Effect.Effect<Fiber.Fiber<A, E>, E, R>): Effect.Effect<A, E, R> =>\n  core.suspend(() => core.flatMap(fiber, internalFiber.join))\n\nconst memoKeySymbol = Symbol.for(\"effect/Effect/memoizeFunction.key\")\n\nclass Key<in out A> implements Equal.Equal {\n  [memoKeySymbol] = memoKeySymbol\n  constructor(readonly a: A, readonly eq?: Equivalence<A>) {}\n  [Equal.symbol](that: Equal.Equal) {\n    if (Predicate.hasProperty(that, memoKeySymbol)) {\n      if (this.eq) {\n        return this.eq(this.a, (that as unknown as Key<A>).a)\n      } else {\n        return Equal.equals(this.a, (that as unknown as Key<A>).a)\n      }\n    }\n    return false\n  }\n  [Hash.symbol]() {\n    return this.eq ? 0 : Hash.cached(this, Hash.hash(this.a))\n  }\n}\n\n/** @internal */\nexport const cachedFunction = <A, B, E, R>(\n  f: (a: A) => Effect.Effect<B, E, R>,\n  eq?: Equivalence<A>\n): Effect.Effect<(a: A) => Effect.Effect<B, E, R>> => {\n  return pipe(\n    core.sync(() => MutableHashMap.empty<Key<A>, Deferred.Deferred<readonly [FiberRefsPatch.FiberRefsPatch, B], E>>()),\n    core.flatMap(makeSynchronized),\n    core.map((ref) => (a: A) =>\n      pipe(\n        ref.modifyEffect((map) => {\n          const result = pipe(map, MutableHashMap.get(new Key(a, eq)))\n          if (Option.isNone(result)) {\n            return pipe(\n              core.deferredMake<readonly [FiberRefsPatch.FiberRefsPatch, B], E>(),\n              core.tap((deferred) =>\n                pipe(\n                  effect.diffFiberRefs(f(a)),\n                  core.intoDeferred(deferred),\n                  fiberRuntime.fork\n                )\n              ),\n              core.map((deferred) => [deferred, pipe(map, MutableHashMap.set(new Key(a, eq), deferred))] as const)\n            )\n          }\n          return core.succeed([result.value, map] as const)\n        }),\n        core.flatMap(core.deferredAwait),\n        core.flatMap(([patch, b]) => pipe(effect.patchFiberRefs(patch), core.as(b)))\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const raceFirst = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A2 | A, E2 | E, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2 | A, E2 | E, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n) =>\n  pipe(\n    core.exit(self),\n    fiberRuntime.race(core.exit(that)),\n    (effect: Effect.Effect<Exit.Exit<A | A2, E | E2>, never, R | R2>) => core.flatten(effect)\n  ))\n\n/** @internal */\nexport const scheduleForked = dual<\n  <Out, R2>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<Fiber.RuntimeFiber<Out, E>, never, R | R2 | Scope.Scope>,\n  <A, E, R, Out, R2>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => Effect.Effect<Fiber.RuntimeFiber<Out, E>, never, R | R2 | Scope.Scope>\n>(2, (self, schedule) => pipe(self, _schedule.schedule_Effect(schedule), forkScoped))\n\n/** @internal */\nexport const supervised = dual<\n  <X>(supervisor: Supervisor.Supervisor<X>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, X>(self: Effect.Effect<A, E, R>, supervisor: Supervisor.Supervisor<X>) => Effect.Effect<A, E, R>\n>(2, (self, supervisor) => {\n  const supervise = core.fiberRefLocallyWith(fiberRuntime.currentSupervisor, (s) => s.zip(supervisor))\n  return supervise(self)\n})\n\n/** @internal */\nexport const timeout = dual<\n  (\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | Cause.TimeoutException, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    duration: Duration.DurationInput\n  ) => Effect.Effect<A, E | Cause.TimeoutException, R>\n>(2, (self, duration) =>\n  timeoutFail(self, {\n    onTimeout: () => core.timeoutExceptionFromDuration(duration),\n    duration\n  }))\n\n/** @internal */\nexport const timeoutFail = dual<\n  <E1>(\n    options: {\n      readonly onTimeout: LazyArg<E1>\n      readonly duration: Duration.DurationInput\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R>,\n  <A, E, R, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<E1>\n      readonly duration: Duration.DurationInput\n    }\n  ) => Effect.Effect<A, E | E1, R>\n>(2, (self, { duration, onTimeout }) =>\n  core.flatten(timeoutTo(self, {\n    onTimeout: () => core.failSync(onTimeout),\n    onSuccess: core.succeed,\n    duration\n  })))\n\n/** @internal */\nexport const timeoutFailCause = dual<\n  <E1>(\n    options: {\n      readonly onTimeout: LazyArg<Cause.Cause<E1>>\n      readonly duration: Duration.DurationInput\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E1, R>,\n  <A, E, R, E1>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<Cause.Cause<E1>>\n      readonly duration: Duration.DurationInput\n    }\n  ) => Effect.Effect<A, E | E1, R>\n>(2, (self, { duration, onTimeout }) =>\n  core.flatten(timeoutTo(self, {\n    onTimeout: () => core.failCauseSync(onTimeout),\n    onSuccess: core.succeed,\n    duration\n  })))\n\n/** @internal */\nexport const timeoutOption = dual<\n  (\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    duration: Duration.DurationInput\n  ) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (self, duration) =>\n  timeoutTo(self, {\n    duration,\n    onSuccess: Option.some,\n    onTimeout: Option.none\n  }))\n\n/** @internal */\nexport const timeoutTo = dual<\n  <A, B, B1>(\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B | B1, E, R>,\n  <A, E, R, B1, B>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ) => Effect.Effect<B | B1, E, R>\n>(2, (self, { duration, onSuccess, onTimeout }) =>\n  core.fiberIdWith((parentFiberId) =>\n    fiberRuntime.raceFibersWith(\n      self,\n      core.interruptible(effect.sleep(duration)),\n      {\n        onSelfWin: (winner, loser) =>\n          core.flatMap(\n            winner.await,\n            (exit) => {\n              if (exit._tag === \"Success\") {\n                return core.flatMap(\n                  winner.inheritAll,\n                  () =>\n                    core.as(\n                      core.interruptAsFiber(loser, parentFiberId),\n                      onSuccess(exit.value)\n                    )\n                )\n              } else {\n                return core.flatMap(\n                  core.interruptAsFiber(loser, parentFiberId),\n                  () => core.exitFailCause(exit.cause)\n                )\n              }\n            }\n          ),\n        onOtherWin: (winner, loser) =>\n          core.flatMap(\n            winner.await,\n            (exit) => {\n              if (exit._tag === \"Success\") {\n                return core.flatMap(\n                  winner.inheritAll,\n                  () =>\n                    core.as(\n                      core.interruptAsFiber(loser, parentFiberId),\n                      onTimeout()\n                    )\n                )\n              } else {\n                return core.flatMap(\n                  core.interruptAsFiber(loser, parentFiberId),\n                  () => core.exitFailCause(exit.cause)\n                )\n              }\n            }\n          ),\n        otherScope: globalScope\n      }\n    )\n  ))\n\n// circular with Synchronized\n\n/** @internal */\nconst SynchronizedSymbolKey = \"effect/Ref/SynchronizedRef\"\n\n/** @internal */\nexport const SynchronizedTypeId: Synchronized.SynchronizedRefTypeId = Symbol.for(\n  SynchronizedSymbolKey\n) as Synchronized.SynchronizedRefTypeId\n\n/** @internal */\nexport const synchronizedVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/** @internal */\nclass SynchronizedImpl<in out A> implements Synchronized.SynchronizedRef<A> {\n  readonly [SynchronizedTypeId] = synchronizedVariance\n  readonly [internalRef.RefTypeId] = internalRef.refVariance\n  readonly [Readable.TypeId]: Readable.TypeId\n  constructor(\n    readonly ref: Ref.Ref<A>,\n    readonly withLock: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  ) {\n    this[Readable.TypeId] = Readable.TypeId\n    this.get = internalRef.get(this.ref)\n  }\n  readonly get: Effect.Effect<A>\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B> {\n    return this.modifyEffect((a) => core.succeed(f(a)))\n  }\n  modifyEffect<B, E, R>(f: (a: A) => Effect.Effect<readonly [B, A], E, R>): Effect.Effect<B, E, R> {\n    return this.withLock(\n      pipe(\n        core.flatMap(internalRef.get(this.ref), f),\n        core.flatMap(([b, a]) => core.as(internalRef.set(this.ref, a), b))\n      )\n    )\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const makeSynchronized = <A>(value: A): Effect.Effect<Synchronized.SynchronizedRef<A>> =>\n  core.sync(() => unsafeMakeSynchronized(value))\n\n/** @internal */\nexport const unsafeMakeSynchronized = <A>(value: A): Synchronized.SynchronizedRef<A> => {\n  const ref = internalRef.unsafeMake(value)\n  const sem = unsafeMakeSemaphore(1)\n  return new SynchronizedImpl(ref, sem.withPermits(1))\n}\n\n/** @internal */\nexport const updateSomeAndGetEffectSynchronized = dual<\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, pf) =>\n  self.modifyEffect((value) => {\n    const result = pf(value)\n    switch (result._tag) {\n      case \"None\": {\n        return core.succeed([value, value] as const)\n      }\n      case \"Some\": {\n        return core.map(result.value, (a) => [a, a] as const)\n      }\n    }\n  }))\n\n// circular with Fiber\n\n/** @internal */\nexport const zipFiber = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<[A, A2], E | E2>\n>(2, (self, that) => zipWithFiber(self, that, (a, b) => [a, b]))\n\n/** @internal */\nexport const zipLeftFiber = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A, E | E2>\n>(2, (self, that) => zipWithFiber(self, that, (a, _) => a))\n\n/** @internal */\nexport const zipRightFiber = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A2, E | E2>\n>(2, (self, that) => zipWithFiber(self, that, (_, b) => b))\n\n/** @internal */\nexport const zipWithFiber = dual<\n  <B, E2, A, C>(\n    that: Fiber.Fiber<B, E2>,\n    f: (a: A, b: B) => C\n  ) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<C, E | E2>,\n  <A, E, B, E2, C>(\n    self: Fiber.Fiber<A, E>,\n    that: Fiber.Fiber<B, E2>,\n    f: (a: A, b: B) => C\n  ) => Fiber.Fiber<C, E | E2>\n>(3, (self, that, f) => ({\n  [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n  id: () => pipe(self.id(), FiberId.getOrElse(that.id())),\n  await: pipe(\n    self.await,\n    core.flatten,\n    fiberRuntime.zipWithOptions(core.flatten(that.await), f, { concurrent: true }),\n    core.exit\n  ),\n  children: self.children,\n  inheritAll: core.zipRight(\n    that.inheritAll,\n    self.inheritAll\n  ),\n  poll: core.zipWith(\n    self.poll,\n    that.poll,\n    (optionA, optionB) =>\n      pipe(\n        optionA,\n        Option.flatMap((exitA) =>\n          pipe(\n            optionB,\n            Option.map((exitB) =>\n              Exit.zipWith(exitA, exitB, {\n                onSuccess: f,\n                onFailure: internalCause.parallel\n              })\n            )\n          )\n        )\n      )\n  ),\n  interruptAsFork: (id) =>\n    core.zipRight(\n      self.interruptAsFork(id),\n      that.interruptAsFork(id)\n    ),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}))\n", "import type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Cron from \"../Cron.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, pipe } from \"../Function.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, type Predicate } from \"../Predicate.js\"\nimport * as Random from \"../Random.js\"\nimport type * as Ref from \"../Ref.js\"\nimport type * as Schedule from \"../Schedule.js\"\nimport * as ScheduleDecision from \"../ScheduleDecision.js\"\nimport * as Interval from \"../ScheduleInterval.js\"\nimport * as Intervals from \"../ScheduleIntervals.js\"\nimport type * as Types from \"../Types.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as effect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as ref from \"./ref.js\"\n\n/** @internal */\nconst ScheduleSymbolKey = \"effect/Schedule\"\n\n/** @internal */\nexport const ScheduleTypeId: Schedule.ScheduleTypeId = Symbol.for(\n  ScheduleSymbolKey\n) as Schedule.ScheduleTypeId\n\n/** @internal */\nexport const isSchedule = (u: unknown): u is Schedule.Schedule<any, any, any> => hasProperty(u, ScheduleTypeId)\n\n/** @internal */\nconst ScheduleDriverSymbolKey = \"effect/ScheduleDriver\"\n\n/** @internal */\nexport const ScheduleDriverTypeId: Schedule.ScheduleDriverTypeId = Symbol.for(\n  ScheduleDriverSymbolKey\n) as Schedule.ScheduleDriverTypeId\n\nconst scheduleVariance = {\n  /* c8 ignore next */\n  _Out: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst scheduleDriverVariance = {\n  /* c8 ignore next */\n  _Out: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nclass ScheduleImpl<S, Out, In, R> implements Schedule.Schedule<Out, In, R> {\n  [ScheduleTypeId] = scheduleVariance\n  constructor(\n    readonly initial: S,\n    readonly step: (\n      now: number,\n      input: In,\n      state: S\n    ) => Effect.Effect<readonly [S, Out, ScheduleDecision.ScheduleDecision], never, R>\n  ) {\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass ScheduleDriverImpl<Out, In, R> implements Schedule.ScheduleDriver<Out, In, R> {\n  [ScheduleDriverTypeId] = scheduleDriverVariance\n\n  constructor(\n    readonly schedule: Schedule.Schedule<Out, In, R>,\n    readonly ref: Ref.Ref<readonly [Option.Option<Out>, any]>\n  ) {}\n\n  get state(): Effect.Effect<unknown> {\n    return core.map(ref.get(this.ref), (tuple) => tuple[1])\n  }\n\n  get last(): Effect.Effect<Out, Cause.NoSuchElementException> {\n    return core.flatMap(ref.get(this.ref), ([element, _]) => {\n      switch (element._tag) {\n        case \"None\": {\n          return core.failSync(() => new core.NoSuchElementException())\n        }\n        case \"Some\": {\n          return core.succeed(element.value)\n        }\n      }\n    })\n  }\n\n  get reset(): Effect.Effect<void> {\n    return ref.set(this.ref, [Option.none(), this.schedule.initial])\n  }\n\n  next(input: In): Effect.Effect<Out, Option.Option<never>, R> {\n    return pipe(\n      core.map(ref.get(this.ref), (tuple) => tuple[1]),\n      core.flatMap((state) =>\n        pipe(\n          Clock.currentTimeMillis,\n          core.flatMap((now) =>\n            pipe(\n              core.suspend(() => this.schedule.step(now, input, state)),\n              core.flatMap(([state, out, decision]) => {\n                const setState = ref.set(this.ref, [Option.some(out), state] as const)\n                if (ScheduleDecision.isDone(decision)) {\n                  return core.zipRight(setState, core.fail(Option.none()))\n                }\n                const millis = Intervals.start(decision.intervals) - now\n                if (millis <= 0) {\n                  return core.as(setState, out)\n                }\n                return pipe(\n                  setState,\n                  core.zipRight(effect.sleep(Duration.millis(millis))),\n                  core.as(out)\n                )\n              })\n            )\n          )\n        )\n      )\n    )\n  }\n}\n\n/** @internal */\nexport const makeWithState = <S, In, Out, R = never>(\n  initial: S,\n  step: (\n    now: number,\n    input: In,\n    state: S\n  ) => Effect.Effect<readonly [S, Out, ScheduleDecision.ScheduleDecision], never, R>\n): Schedule.Schedule<Out, In, R> => new ScheduleImpl(initial, step)\n\n/** @internal */\nexport const addDelay = dual<\n  <Out>(\n    f: (out: Out) => Duration.DurationInput\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => addDelayEffect(self, (out) => core.sync(() => f(out))))\n\n/** @internal */\nexport const addDelayEffect = dual<\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  modifyDelayEffect(self, (out, duration) =>\n    core.map(\n      f(out),\n      (delay) => Duration.sum(duration, Duration.decode(delay))\n    )))\n\n/** @internal */\nexport const andThen = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<\n    Out | Out2,\n    In & In2,\n    R | R2\n  >,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<\n    Out | Out2,\n    In & In2,\n    R | R2\n  >\n>(2, (self, that) => map(andThenEither(self, that), Either.merge))\n\n/** @internal */\nexport const andThenEither = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Either.Either<Out2, Out>, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<Either.Either<Out2, Out>, In & In2, R | R2>\n>(2, <Out, In, R, Out2, In2, R2>(\n  self: Schedule.Schedule<Out, In, R>,\n  that: Schedule.Schedule<Out2, In2, R2>\n): Schedule.Schedule<Either.Either<Out2, Out>, In & In2, R | R2> =>\n  makeWithState(\n    [self.initial, that.initial, true as boolean] as const,\n    (now, input, state) =>\n      state[2] ?\n        core.flatMap(self.step(now, input, state[0]), ([lState, out, decision]) => {\n          if (ScheduleDecision.isDone(decision)) {\n            return core.map(that.step(now, input, state[1]), ([rState, out, decision]) =>\n              [\n                [lState, rState, false as boolean] as const,\n                Either.right(out) as Either.Either<Out2, Out>,\n                decision as ScheduleDecision.ScheduleDecision\n              ] as const)\n          }\n          return core.succeed(\n            [\n              [lState, state[1], true as boolean] as const,\n              Either.left(out),\n              decision\n            ] as const\n          )\n        }) :\n        core.map(that.step(now, input, state[1]), ([rState, out, decision]) =>\n          [\n            [state[0], rState, false as boolean] as const,\n            Either.right(out) as Either.Either<Out2, Out>,\n            decision\n          ] as const)\n  ))\n\n/** @internal */\nexport const as = dual<\n  <Out2>(out: Out2) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R>,\n  <Out, In, R, Out2>(self: Schedule.Schedule<Out, In, R>, out: Out2) => Schedule.Schedule<Out2, In, R>\n>(2, (self, out) => map(self, () => out))\n\n/** @internal */\nexport const asVoid = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<void, In, R> => map(self, constVoid)\n\n/** @internal */\nexport const bothInOut = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<[Out, Out2], readonly [In, In2], R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], readonly [In, In2], R | R2>\n>(2, (self, that) =>\n  makeWithState([self.initial, that.initial], (now, [in1, in2], state) =>\n    core.zipWith(\n      self.step(now, in1, state[0]),\n      that.step(now, in2, state[1]),\n      ([lState, out, lDecision], [rState, out2, rDecision]) => {\n        if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n          const interval = pipe(lDecision.intervals, Intervals.union(rDecision.intervals))\n          return [\n            [lState, rState],\n            [out, out2],\n            ScheduleDecision.continue(interval)\n          ]\n        }\n        return [[lState, rState], [out, out2], ScheduleDecision.done]\n      }\n    )))\n\n/** @internal */\nexport const check = dual<\n  <In, Out>(\n    test: (input: In, output: Out) => boolean\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    test: (input: In, output: Out) => boolean\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, test) => checkEffect(self, (input, out) => core.sync(() => test(input, out))))\n\n/** @internal */\nexport const checkEffect = dual<\n  <In, Out, R2>(\n    test: (input: In, output: Out) => Effect.Effect<boolean, never, R2>\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    test: (input: In, output: Out) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, test) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) => {\n        if (ScheduleDecision.isDone(decision)) {\n          return core.succeed([state, out, ScheduleDecision.done] as const)\n        }\n        return core.map(test(input, out), (cont) =>\n          cont ?\n            [state, out, decision] as const :\n            [state, out, ScheduleDecision.done] as const)\n      })\n  ))\n/** @internal */\nexport const collectAllInputs = <A>(): Schedule.Schedule<Chunk.Chunk<A>, A> => collectAllOutputs(identity<A>())\n\n/** @internal */\nexport const collectAllOutputs = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<Chunk.Chunk<Out>, In, R> =>\n  reduce(self, Chunk.empty<Out>(), (outs, out) => pipe(outs, Chunk.append(out)))\n\n/** @internal */\nexport const collectUntil = <A>(f: Predicate<A>): Schedule.Schedule<Chunk.Chunk<A>, A> =>\n  collectAllOutputs(recurUntil(f))\n\n/** @internal */\nexport const collectUntilEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<Chunk.Chunk<A>, A, R> => collectAllOutputs(recurUntilEffect(f))\n\n/** @internal */\nexport const collectWhile = <A>(f: Predicate<A>): Schedule.Schedule<Chunk.Chunk<A>, A> =>\n  collectAllOutputs(recurWhile(f))\n\n/** @internal */\nexport const collectWhileEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<Chunk.Chunk<A>, A, R> => collectAllOutputs(recurWhileEffect(f))\n\n/** @internal */\nexport const compose = dual<\n  <Out2, Out, R2>(\n    that: Schedule.Schedule<Out2, Out, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R | R2>,\n  <Out, In, R, Out2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, Out, R2>\n  ) => Schedule.Schedule<Out2, In, R | R2>\n>(2, (self, that) =>\n  makeWithState(\n    [self.initial, that.initial] as const,\n    (now, input, state) =>\n      core.flatMap(\n        self.step(now, input, state[0]),\n        ([lState, out, lDecision]) =>\n          core.map(that.step(now, out, state[1]), ([rState, out2, rDecision]) =>\n            ScheduleDecision.isDone(lDecision)\n              ? [[lState, rState] as const, out2, ScheduleDecision.done] as const\n              : ScheduleDecision.isDone(rDecision)\n              ? [[lState, rState] as const, out2, ScheduleDecision.done] as const\n              : [\n                [lState, rState] as const,\n                out2,\n                ScheduleDecision.continue(pipe(lDecision.intervals, Intervals.max(rDecision.intervals)))\n              ] as const)\n      )\n  ))\n\n/** @internal */\nexport const mapInput = dual<\n  <In, In2>(\n    f: (in2: In2) => In\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In2, R>,\n  <Out, In, R, In2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (in2: In2) => In\n  ) => Schedule.Schedule<Out, In2, R>\n>(2, (self, f) => mapInputEffect(self, (input2) => core.sync(() => f(input2))))\n\n/** @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (env0: Context.Context<R0>) => Context.Context<R>\n  ) => <Out, In>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R0>,\n  <Out, In, R, R0>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (env0: Context.Context<R0>) => Context.Context<R>\n  ) => Schedule.Schedule<Out, In, R0>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) => core.mapInputContext(self.step(now, input, state), f)\n  ))\n\n/** @internal */\nexport const mapInputEffect = dual<\n  <In2, In, R2>(\n    f: (in2: In2) => Effect.Effect<In, never, R2>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In2, R | R2>,\n  <Out, In, R, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (in2: In2) => Effect.Effect<In, never, R2>\n  ) => Schedule.Schedule<Out, In2, R | R2>\n>(2, (self, f) =>\n  makeWithState(self.initial, (now, input2, state) =>\n    core.flatMap(\n      f(input2),\n      (input) => self.step(now, input, state)\n    )))\n\n/** @internal */\nexport const cron = (expression: string | Cron.Cron): Schedule.Schedule<[number, number]> => {\n  const parsed = Cron.isCron(expression) ? Either.right(expression) : Cron.parse(expression)\n  return makeWithState<[boolean, [number, number, number]], unknown, [number, number]>(\n    [true, [Number.MIN_SAFE_INTEGER, 0, 0]],\n    (now, _, [initial, previous]) => {\n      if (now < previous[0]) {\n        return core.succeed([\n          [false, previous],\n          [previous[1], previous[2]],\n          ScheduleDecision.continueWith(Interval.make(previous[1], previous[2]))\n        ])\n      }\n\n      if (Either.isLeft(parsed)) {\n        return core.die(parsed.left)\n      }\n\n      const cron = parsed.right\n      const date = new Date(now)\n\n      let next: number\n      if (initial && Cron.match(cron, date)) {\n        next = now\n      } else {\n        const result = Cron.next(cron, date)\n        next = result.getTime()\n      }\n\n      const start = beginningOfMinute(next)\n      const end = endOfMinute(next)\n      const interval = Interval.make(start, end)\n      return core.succeed([\n        [false, [next, start, end]],\n        [start, end],\n        ScheduleDecision.continueWith(interval)\n      ])\n    }\n  )\n}\n\n/** @internal */\nexport const dayOfMonth = (day: number): Schedule.Schedule<number> => {\n  return makeWithState<[number, number], unknown, number>(\n    [Number.NEGATIVE_INFINITY, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(day) || day < 1 || 31 < day) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: dayOfMonth(${day}). Must be in range 1...31`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const day0 = nextDayOfMonth(now, day, initial)\n      const start = beginningOfDay(day0)\n      const end = endOfDay(day0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n}\n\n/** @internal */\nexport const dayOfWeek = (day: number): Schedule.Schedule<number> => {\n  return makeWithState<[number, number], unknown, number>(\n    [Number.MIN_SAFE_INTEGER, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(day) || day < 1 || 7 < day) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: dayOfWeek(${day}). Must be in range 1 (Monday)...7 (Sunday)`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const day0 = nextDay(now, day, initial)\n      const start = beginningOfDay(day0)\n      const end = endOfDay(day0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n}\n\n/** @internal */\nexport const delayed = dual<\n  (\n    f: (duration: Duration.Duration) => Duration.DurationInput\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (duration: Duration.Duration) => Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => delayedEffect(self, (duration) => core.sync(() => f(duration))))\n\n/** @internal */\nexport const delayedEffect = dual<\n  <R2>(\n    f: (duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => modifyDelayEffect(self, (_, delay) => f(delay)))\n\n/** @internal */\nexport const delayedSchedule = <In, R>(\n  schedule: Schedule.Schedule<Duration.Duration, In, R>\n): Schedule.Schedule<Duration.Duration, In, R> => addDelay(schedule, (x) => x)\n\n/** @internal */\nexport const delays = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<Duration.Duration, In, R> =>\n  makeWithState(self.initial, (now, input, state) =>\n    pipe(\n      self.step(now, input, state),\n      core.flatMap((\n        [state, _, decision]\n      ): Effect.Effect<[any, Duration.Duration, ScheduleDecision.ScheduleDecision]> => {\n        if (ScheduleDecision.isDone(decision)) {\n          return core.succeed([state, Duration.zero, decision])\n        }\n        return core.succeed(\n          [\n            state,\n            Duration.millis(Intervals.start(decision.intervals) - now),\n            decision\n          ]\n        )\n      })\n    ))\n\n/** @internal */\nexport const mapBoth = dual<\n  <In2, In, Out, Out2>(\n    options: {\n      readonly onInput: (in2: In2) => In\n      readonly onOutput: (out: Out) => Out2\n    }\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In2, R>,\n  <Out, In, R, In2, Out2>(\n    self: Schedule.Schedule<Out, In, R>,\n    options: {\n      readonly onInput: (in2: In2) => In\n      readonly onOutput: (out: Out) => Out2\n    }\n  ) => Schedule.Schedule<Out2, In2, R>\n>(2, (self, { onInput, onOutput }) => map(mapInput(self, onInput), onOutput))\n\n/** @internal */\nexport const mapBothEffect = dual<\n  <In2, In, R2, Out, R3, Out2>(\n    options: {\n      readonly onInput: (input: In2) => Effect.Effect<In, never, R2>\n      readonly onOutput: (out: Out) => Effect.Effect<Out2, never, R3>\n    }\n  ) => <R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In2, R | R2 | R3>,\n  <Out, In, R, In2, R2, Out2, R3>(\n    self: Schedule.Schedule<Out, In, R>,\n    options: {\n      readonly onInput: (input: In2) => Effect.Effect<In, never, R2>\n      readonly onOutput: (out: Out) => Effect.Effect<Out2, never, R3>\n    }\n  ) => Schedule.Schedule<Out2, In2, R | R2 | R3>\n>(2, (self, { onInput, onOutput }) => mapEffect(mapInputEffect(self, onInput), onOutput))\n\n/** @internal */\nexport const driver = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Effect.Effect<Schedule.ScheduleDriver<Out, In, R>> =>\n  pipe(\n    ref.make<readonly [Option.Option<Out>, any]>([Option.none(), self.initial]),\n    core.map((ref) => new ScheduleDriverImpl(self, ref))\n  )\n\n/** @internal */\nexport const duration = (\n  durationInput: Duration.DurationInput\n): Schedule.Schedule<Duration.Duration> => {\n  const duration = Duration.decode(durationInput)\n  const durationMillis = Duration.toMillis(duration)\n  return makeWithState(true as boolean, (now, _, state) =>\n    core.succeed(\n      state\n        ? [\n          false,\n          duration,\n          ScheduleDecision.continueWith(Interval.after(now + durationMillis))\n        ] as const\n        : [false, Duration.zero, ScheduleDecision.done] as const\n    ))\n}\n\n/** @internal */\nexport const either = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(2, (self, that) => union(self, that))\n\n/** @internal */\nexport const eitherWith = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(3, (self, that, f) => unionWith(self, that, f))\n\n/** @internal */\nexport const ensuring = dual<\n  <X>(\n    finalizer: Effect.Effect<X>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R, X>(\n    self: Schedule.Schedule<Out, In, R>,\n    finalizer: Effect.Effect<X>\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, finalizer) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) =>\n        ScheduleDecision.isDone(decision)\n          ? core.as(finalizer, [state, out, decision as ScheduleDecision.ScheduleDecision] as const)\n          : core.succeed([state, out, decision] as const))\n  ))\n\n/** @internal */\nexport const exponential = (\n  baseInput: Duration.DurationInput,\n  factor = 2.0\n): Schedule.Schedule<Duration.Duration> => {\n  const base = Duration.decode(baseInput)\n  return delayedSchedule(\n    map(forever, (i) => Duration.times(base, Math.pow(factor, i)))\n  )\n}\n\n/** @internal */\nexport const fibonacci = (oneInput: Duration.DurationInput): Schedule.Schedule<Duration.Duration> => {\n  const one = Duration.decode(oneInput)\n  return delayedSchedule(\n    pipe(\n      unfold(\n        [one, one] as const,\n        ([a, b]) => [b, Duration.sum(a, b)] as const\n      ),\n      map((out) => out[0])\n    )\n  )\n}\n\n/** @internal */\nexport const fixed = (intervalInput: Duration.DurationInput): Schedule.Schedule<number> => {\n  const interval = Duration.decode(intervalInput)\n  const intervalMillis = Duration.toMillis(interval)\n  return makeWithState<[Option.Option<[number, number]>, number], unknown, number>(\n    [Option.none(), 0],\n    (now, _, [option, n]) =>\n      core.sync(() => {\n        switch (option._tag) {\n          case \"None\": {\n            return [\n              [Option.some([now, now + intervalMillis]), n + 1],\n              n,\n              ScheduleDecision.continueWith(Interval.after(now + intervalMillis))\n            ]\n          }\n          case \"Some\": {\n            const [startMillis, lastRun] = option.value\n            const runningBehind = now > (lastRun + intervalMillis)\n            const boundary = Equal.equals(interval, Duration.zero)\n              ? interval\n              : Duration.millis(intervalMillis - ((now - startMillis) % intervalMillis))\n            const sleepTime = Equal.equals(boundary, Duration.zero) ? interval : boundary\n            const nextRun = runningBehind ? now : now + Duration.toMillis(sleepTime)\n            return [\n              [Option.some([startMillis, nextRun]), n + 1],\n              n,\n              ScheduleDecision.continueWith(Interval.after(nextRun))\n            ]\n          }\n        }\n      })\n  )\n}\n\n/** @internal */\nexport const fromDelay = (delay: Duration.DurationInput): Schedule.Schedule<Duration.Duration> => duration(delay)\n\n/** @internal */\nexport const fromDelays = (\n  delay: Duration.DurationInput,\n  ...delays: Array<Duration.DurationInput>\n): Schedule.Schedule<Duration.Duration> =>\n  makeWithState(\n    [[delay, ...delays].map((_) => Duration.decode(_)) as Array<Duration.Duration>, true as boolean] as const,\n    (now, _, [durations, cont]) =>\n      core.sync(() => {\n        if (cont) {\n          const x = durations[0]!\n          const interval = Interval.after(now + Duration.toMillis(x))\n          if (durations.length >= 2) {\n            return [\n              [durations.slice(1), true] as const,\n              x,\n              ScheduleDecision.continueWith(interval)\n            ] as const\n          }\n          const y = durations.slice(1)\n          return [\n            [[x, ...y] as Array<Duration.Duration>, false] as const,\n            x,\n            ScheduleDecision.continueWith(interval)\n          ] as const\n        }\n        return [[durations, false] as const, Duration.zero, ScheduleDecision.done] as const\n      })\n  )\n\n/** @internal */\nexport const fromFunction = <A, B>(f: (a: A) => B): Schedule.Schedule<B, A> => map(identity<A>(), f)\n\n/** @internal */\nexport const hourOfDay = (hour: number): Schedule.Schedule<number> =>\n  makeWithState<[number, number], unknown, number>(\n    [Number.NEGATIVE_INFINITY, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(hour) || hour < 0 || 23 < hour) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: hourOfDay(${hour}). Must be in range 0...23`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const hour0 = nextHour(now, hour, initial)\n      const start = beginningOfHour(hour0)\n      const end = endOfHour(hour0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n\n/** @internal */\nexport const identity = <A>(): Schedule.Schedule<A, A> =>\n  makeWithState(void 0, (now, input, state) =>\n    core.succeed(\n      [\n        state,\n        input,\n        ScheduleDecision.continueWith(Interval.after(now))\n      ] as const\n    ))\n\n/** @internal */\nexport const intersect = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(2, (self, that) => intersectWith(self, that, Intervals.intersect))\n\n/** @internal */\nexport const intersectWith = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(3, <Env, In, Out, Env2, In2, Out2>(\n  self: Schedule.Schedule<Out, In, Env>,\n  that: Schedule.Schedule<Out2, In2, Env2>,\n  f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n): Schedule.Schedule<[Out, Out2], In & In2, Env | Env2> =>\n  makeWithState<[any, any], In & In2, [Out, Out2], Env | Env2>(\n    [self.initial, that.initial],\n    (now, input: In & In2, state) =>\n      pipe(\n        core.zipWith(\n          self.step(now, input, state[0]),\n          that.step(now, input, state[1]),\n          (a, b) => [a, b] as const\n        ),\n        core.flatMap(([\n          [lState, out, lDecision],\n          [rState, out2, rDecision]\n        ]) => {\n          if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n            return intersectWithLoop(\n              self,\n              that,\n              input,\n              lState,\n              out,\n              lDecision.intervals,\n              rState,\n              out2,\n              rDecision.intervals,\n              f\n            )\n          }\n          return core.succeed(\n            [\n              [lState, rState],\n              [out, out2],\n              ScheduleDecision.done\n            ]\n          )\n        })\n      )\n  ))\n\n/** @internal */\nconst intersectWithLoop = <State, State1, Env, In, Out, Env1, In1, Out2>(\n  self: Schedule.Schedule<Out, In, Env>,\n  that: Schedule.Schedule<Out2, In1, Env1>,\n  input: In & In1,\n  lState: State,\n  out: Out,\n  lInterval: Intervals.Intervals,\n  rState: State1,\n  out2: Out2,\n  rInterval: Intervals.Intervals,\n  f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n): Effect.Effect<\n  [[State, State1], [Out, Out2], ScheduleDecision.ScheduleDecision],\n  never,\n  Env | Env1\n> => {\n  const combined = f(lInterval, rInterval)\n  if (Intervals.isNonEmpty(combined)) {\n    return core.succeed([\n      [lState, rState],\n      [out, out2],\n      ScheduleDecision.continue(combined)\n    ])\n  }\n\n  if (pipe(lInterval, Intervals.lessThan(rInterval))) {\n    return core.flatMap(self.step(Intervals.end(lInterval), input, lState), ([lState, out, decision]) => {\n      if (ScheduleDecision.isDone(decision)) {\n        return core.succeed([\n          [lState, rState],\n          [out, out2],\n          ScheduleDecision.done\n        ])\n      }\n      return intersectWithLoop(\n        self,\n        that,\n        input,\n        lState,\n        out,\n        decision.intervals,\n        rState,\n        out2,\n        rInterval,\n        f\n      )\n    })\n  }\n  return core.flatMap(that.step(Intervals.end(rInterval), input, rState), ([rState, out2, decision]) => {\n    if (ScheduleDecision.isDone(decision)) {\n      return core.succeed([\n        [lState, rState],\n        [out, out2],\n        ScheduleDecision.done\n      ])\n    }\n    return intersectWithLoop(\n      self,\n      that,\n      input,\n      lState,\n      out,\n      lInterval,\n      rState,\n      out2,\n      decision.intervals,\n      f\n    )\n  })\n}\n\n/** @internal */\nexport const jittered = <Out, In, R>(self: Schedule.Schedule<Out, In, R>): Schedule.Schedule<Out, In, R> =>\n  jitteredWith(self, { min: 0.8, max: 1.2 })\n\n/** @internal */\nexport const jitteredWith = dual<\n  (options: { min?: number | undefined; max?: number | undefined }) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    options: { min?: number | undefined; max?: number | undefined }\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, options) => {\n  const { max, min } = Object.assign({ min: 0.8, max: 1.2 }, options)\n  return delayedEffect(self, (duration) =>\n    core.map(Random.next, (random) => {\n      const d = Duration.toMillis(duration)\n      const jittered = d * min * (1 - random) + d * max * random\n      return Duration.millis(jittered)\n    }))\n})\n\n/** @internal */\nexport const linear = (baseInput: Duration.DurationInput): Schedule.Schedule<Duration.Duration> => {\n  const base = Duration.decode(baseInput)\n  return delayedSchedule(map(forever, (i) => Duration.times(base, i + 1)))\n}\n\n/** @internal */\nexport const map = dual<\n  <Out, Out2>(\n    f: (out: Out) => Out2\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R>,\n  <Out, In, R, Out2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Out2\n  ) => Schedule.Schedule<Out2, In, R>\n>(2, (self, f) => mapEffect(self, (out) => core.sync(() => f(out))))\n\n/** @internal */\nexport const mapEffect = dual<\n  <Out, Out2, R2>(\n    f: (out: Out) => Effect.Effect<Out2, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In, R | R2>,\n  <Out, In, R, Out2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<Out2, never, R2>\n  ) => Schedule.Schedule<Out2, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) =>\n        core.map(\n          f(out),\n          (out2) => [state, out2, decision] as const\n        ))\n  ))\n\n/** @internal */\nexport const minuteOfHour = (minute: number): Schedule.Schedule<number> =>\n  makeWithState<[number, number], unknown, number>(\n    [Number.MIN_SAFE_INTEGER, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(minute) || minute < 0 || 59 < minute) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: minuteOfHour(${minute}). Must be in range 0...59`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const minute0 = nextMinute(now, minute, initial)\n      const start = beginningOfMinute(minute0)\n      const end = endOfMinute(minute0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n\n/** @internal */\nexport const modifyDelay = dual<\n  <Out>(\n    f: (out: Out, duration: Duration.Duration) => Duration.DurationInput\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out, duration: Duration.Duration) => Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => modifyDelayEffect(self, (out, duration) => core.sync(() => f(out, duration))))\n\n/** @internal */\nexport const modifyDelayEffect = dual<\n  <Out, R2>(\n    f: (out: Out, duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out, duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) => {\n        if (ScheduleDecision.isDone(decision)) {\n          return core.succeed([state, out, decision] as const)\n        }\n        const intervals = decision.intervals\n        const delay = Interval.size(Interval.make(now, Intervals.start(intervals)))\n        return core.map(f(out, delay), (durationInput) => {\n          const duration = Duration.decode(durationInput)\n          const oldStart = Intervals.start(intervals)\n          const newStart = now + Duration.toMillis(duration)\n          const delta = newStart - oldStart\n          const newEnd = Math.max(0, Intervals.end(intervals) + delta)\n          const newInterval = Interval.make(newStart, newEnd)\n          return [state, out, ScheduleDecision.continueWith(newInterval)] as const\n        })\n      })\n  ))\n\n/** @internal */\nexport const onDecision = dual<\n  <Out, X, R2>(\n    f: (out: Out, decision: ScheduleDecision.ScheduleDecision) => Effect.Effect<X, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, X, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out, decision: ScheduleDecision.ScheduleDecision) => Effect.Effect<X, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(\n        self.step(now, input, state),\n        ([state, out, decision]) => core.as(f(out, decision), [state, out, decision] as const)\n      )\n  ))\n\n/** @internal */\nexport const passthrough = <Out, In, R>(\n  self: Schedule.Schedule<Out, In, R>\n): Schedule.Schedule<In, In, R> =>\n  makeWithState(self.initial, (now, input, state) =>\n    pipe(\n      self.step(now, input, state),\n      core.map(([state, _, decision]) => [state, input, decision] as const)\n    ))\n\n/** @internal */\nexport const provideContext = dual<\n  <R>(\n    context: Context.Context<R>\n  ) => <Out, In>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    context: Context.Context<R>\n  ) => Schedule.Schedule<Out, In>\n>(2, (self, context) =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.provideContext(\n      self.step(now, input, state),\n      context\n    )))\n\n/** @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>>,\n  <Out, In, R, T extends Context.Tag<any, any>>(\n    self: Schedule.Schedule<Out, In, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ) => Schedule.Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>>\n>(3, <Out, In, R, T extends Context.Tag<any, any>>(\n  self: Schedule.Schedule<Out, In, R>,\n  tag: T,\n  service: Context.Tag.Service<T>\n): Schedule.Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>> =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.contextWithEffect((env) =>\n      core.provideContext(\n        // @ts-expect-error\n        self.step(now, input, state),\n        Context.add(env, tag, service)\n      )\n    )))\n\n/** @internal */\nexport const recurUntil = <A>(f: Predicate<A>): Schedule.Schedule<A, A> => untilInput(identity<A>(), f)\n\n/** @internal */\nexport const recurUntilEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<A, A, R> => untilInputEffect(identity<A>(), f)\n\n/** @internal */\nexport const recurUntilOption = <A, B>(pf: (a: A) => Option.Option<B>): Schedule.Schedule<Option.Option<B>, A> =>\n  untilOutput(map(identity<A>(), pf), Option.isSome)\n\n/** @internal */\nexport const recurUpTo = (\n  durationInput: Duration.DurationInput\n): Schedule.Schedule<Duration.Duration> => {\n  const duration = Duration.decode(durationInput)\n  return whileOutput(elapsed, (elapsed) => Duration.lessThan(elapsed, duration))\n}\n\n/** @internal */\nexport const recurWhile = <A>(f: Predicate<A>): Schedule.Schedule<A, A> => whileInput(identity<A>(), f)\n\n/** @internal */\nexport const recurWhileEffect = <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n): Schedule.Schedule<A, A, R> => whileInputEffect(identity<A>(), f)\n\n/** @internal */\nexport const recurs = (n: number): Schedule.Schedule<number> => whileOutput(forever, (out) => out < n)\n\n/** @internal */\nexport const reduce = dual<\n  <Out, Z>(\n    zero: Z,\n    f: (z: Z, out: Out) => Z\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Z, In, R>,\n  <Out, In, R, Z>(\n    self: Schedule.Schedule<Out, In, R>,\n    zero: Z,\n    f: (z: Z, out: Out) => Z\n  ) => Schedule.Schedule<Z, In, R>\n>(3, (self, zero, f) => reduceEffect(self, zero, (z, out) => core.sync(() => f(z, out))))\n\n/** @internal */\nexport const reduceEffect = dual<\n  <Z, Out, R2>(\n    zero: Z,\n    f: (z: Z, out: Out) => Effect.Effect<Z, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Z, In, R | R2>,\n  <Out, In, R, Z, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    zero: Z,\n    f: (z: Z, out: Out) => Effect.Effect<Z, never, R2>\n  ) => Schedule.Schedule<Z, In, R | R2>\n>(3, (self, zero, f) =>\n  makeWithState(\n    [self.initial, zero] as const,\n    (now, input, [s, z]) =>\n      core.flatMap(self.step(now, input, s), ([s, out, decision]) =>\n        ScheduleDecision.isDone(decision)\n          ? core.succeed([[s, z], z, decision as ScheduleDecision.ScheduleDecision] as const)\n          : core.map(f(z, out), (z2) => [[s, z2], z, decision] as const))\n  ))\n\n/** @internal */\nexport const repeatForever = <Env, In, Out>(self: Schedule.Schedule<Out, In, Env>): Schedule.Schedule<Out, In, Env> =>\n  makeWithState(self.initial, (now, input, state) => {\n    const step = (\n      now: number,\n      input: In,\n      state: any\n    ): Effect.Effect<[any, Out, ScheduleDecision.ScheduleDecision], never, Env> =>\n      core.flatMap(\n        self.step(now, input, state),\n        ([state, out, decision]) =>\n          ScheduleDecision.isDone(decision)\n            ? step(now, input, self.initial)\n            : core.succeed([state, out, decision])\n      )\n    return step(now, input, state)\n  })\n\n/** @internal */\nexport const repetitions = <Out, In, R>(self: Schedule.Schedule<Out, In, R>): Schedule.Schedule<number, In, R> =>\n  reduce(self, 0, (n, _) => n + 1)\n\n/** @internal */\nexport const resetAfter = dual<\n  (\n    duration: Duration.DurationInput\n  ) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    duration: Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, durationInput) => {\n  const duration = Duration.decode(durationInput)\n  return pipe(\n    self,\n    intersect(elapsed),\n    resetWhen(([, time]) => Duration.greaterThanOrEqualTo(time, duration)),\n    map((out) => out[0])\n  )\n})\n\n/** @internal */\nexport const resetWhen = dual<\n  <Out>(f: Predicate<Out>) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<Out>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) =>\n  makeWithState(\n    self.initial,\n    (now, input, state) =>\n      core.flatMap(self.step(now, input, state), ([state, out, decision]) =>\n        f(out)\n          ? self.step(now, input, self.initial)\n          : core.succeed([state, out, decision] as const))\n  ))\n\n/** @internal */\nexport const run = dual<\n  <In>(\n    now: number,\n    input: Iterable<In>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Effect.Effect<Chunk.Chunk<Out>, never, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    now: number,\n    input: Iterable<In>\n  ) => Effect.Effect<Chunk.Chunk<Out>, never, R>\n>(3, (self, now, input) =>\n  pipe(\n    runLoop(self, now, Chunk.fromIterable(input), self.initial, Chunk.empty()),\n    core.map((list) => Chunk.reverse(list))\n  ))\n\n/** @internal */\nconst runLoop = <Env, In, Out>(\n  self: Schedule.Schedule<Out, In, Env>,\n  now: number,\n  inputs: Chunk.Chunk<In>,\n  state: any,\n  acc: Chunk.Chunk<Out>\n): Effect.Effect<Chunk.Chunk<Out>, never, Env> => {\n  if (!Chunk.isNonEmpty(inputs)) {\n    return core.succeed(acc)\n  }\n  const input = Chunk.headNonEmpty(inputs)\n  const nextInputs = Chunk.tailNonEmpty(inputs)\n  return core.flatMap(self.step(now, input, state), ([state, out, decision]) => {\n    if (ScheduleDecision.isDone(decision)) {\n      return core.sync(() => pipe(acc, Chunk.prepend(out)))\n    }\n    return runLoop(\n      self,\n      Intervals.start(decision.intervals),\n      nextInputs,\n      state,\n      Chunk.prepend(acc, out)\n    )\n  })\n}\n\n/** @internal */\nexport const secondOfMinute = (second: number): Schedule.Schedule<number> =>\n  makeWithState<[number, number], unknown, number>(\n    [Number.NEGATIVE_INFINITY, 0],\n    (now, _, state) => {\n      if (!Number.isInteger(second) || second < 0 || 59 < second) {\n        return core.dieSync(() =>\n          new core.IllegalArgumentException(\n            `Invalid argument in: secondOfMinute(${second}). Must be in range 0...59`\n          )\n        )\n      }\n      const n = state[1]\n      const initial = n === 0\n      const second0 = nextSecond(now, second, initial)\n      const start = beginningOfSecond(second0)\n      const end = endOfSecond(second0)\n      const interval = Interval.make(start, end)\n      return core.succeed(\n        [\n          [end, n + 1],\n          n,\n          ScheduleDecision.continueWith(interval)\n        ]\n      )\n    }\n  )\n\n/** @internal */\nexport const spaced = (duration: Duration.DurationInput): Schedule.Schedule<number> => addDelay(forever, () => duration)\n\n/** @internal */\nexport const succeed = <A>(value: A): Schedule.Schedule<A> => map(forever, () => value)\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Schedule.Schedule<A> => map(forever, evaluate)\n\n/** @internal */\nexport const tapInput = dual<\n  <In2, X, R2>(\n    f: (input: In2) => Effect.Effect<X, never, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In & In2, R | R2>,\n  <Out, In, R, In2, X, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (input: In2) => Effect.Effect<X, never, R2>\n  ) => Schedule.Schedule<Out, In & In2, R | R2>\n>(2, (self, f) =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.zipRight(\n      f(input),\n      self.step(now, input, state)\n    )))\n\n/** @internal */\nexport const tapOutput = dual<\n  <XO extends Out, X, R2, Out>(\n    f: (out: XO) => Effect.Effect<X, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, XO extends Out, X, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: XO) => Effect.Effect<X, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) =>\n  makeWithState(self.initial, (now, input, state) =>\n    core.tap(\n      self.step(now, input, state),\n      ([, out]) => f(out as any)\n    )))\n\n/** @internal */\nexport const unfold = <A>(initial: A, f: (a: A) => A): Schedule.Schedule<A> =>\n  makeWithState(initial, (now, _, state) =>\n    core.sync(() =>\n      [\n        f(state),\n        state,\n        ScheduleDecision.continueWith(Interval.after(now))\n      ] as const\n    ))\n\n/** @internal */\nexport const union = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(2, (self, that) => unionWith(self, that, Intervals.union))\n\n/** @internal */\nexport const unionWith = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ) => Schedule.Schedule<[Out, Out2], In & In2, R | R2>\n>(3, (self, that, f) =>\n  makeWithState([self.initial, that.initial], (now, input, state) =>\n    core.zipWith(\n      self.step(now, input, state[0]),\n      that.step(now, input, state[1]),\n      ([lState, l, lDecision], [rState, r, rDecision]) => {\n        if (ScheduleDecision.isDone(lDecision) && ScheduleDecision.isDone(rDecision)) {\n          return [[lState, rState], [l, r], ScheduleDecision.done]\n        }\n        if (ScheduleDecision.isDone(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n          return [\n            [lState, rState],\n            [l, r],\n            ScheduleDecision.continue(rDecision.intervals)\n          ]\n        }\n        if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isDone(rDecision)) {\n          return [\n            [lState, rState],\n            [l, r],\n            ScheduleDecision.continue(lDecision.intervals)\n          ]\n        }\n        if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {\n          const combined = f(lDecision.intervals, rDecision.intervals)\n          return [\n            [lState, rState],\n            [l, r],\n            ScheduleDecision.continue(combined)\n          ]\n        }\n        throw new Error(\n          \"BUG: Schedule.unionWith - please report an issue at https://github.com/Effect-TS/effect/issues\"\n        )\n      }\n    )))\n\n/** @internal */\nexport const untilInput = dual<\n  <In>(f: Predicate<In>) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<In>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (input, _) => !f(input)))\n\n/** @internal */\nexport const untilInputEffect = dual<\n  <In, R2>(\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (input, _) => effect.negate(f(input))))\n\n/** @internal */\nexport const untilOutput = dual<\n  <Out>(f: Predicate<Out>) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<Out>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (_, out) => !f(out)))\n\n/** @internal */\nexport const untilOutputEffect = dual<\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (_, out) => effect.negate(f(out))))\n\n/** @internal */\nexport const upTo = dual<\n  (duration: Duration.DurationInput) => <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>\n  ) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(\n    self: Schedule.Schedule<Out, In, R>,\n    duration: Duration.DurationInput\n  ) => Schedule.Schedule<Out, In, R>\n>(2, (self, duration) => zipLeft(self, recurUpTo(duration)))\n\n/** @internal */\nexport const whileInput = dual<\n  <In>(f: Predicate<In>) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<In>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (input, _) => f(input)))\n\n/** @internal */\nexport const whileInputEffect = dual<\n  <In, R2>(\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => <Out, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (input, _) => f(input)))\n\n/** @internal */\nexport const whileOutput = dual<\n  <Out>(f: Predicate<Out>) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R>,\n  <Out, In, R>(self: Schedule.Schedule<Out, In, R>, f: Predicate<Out>) => Schedule.Schedule<Out, In, R>\n>(2, (self, f) => check(self, (_, out) => f(out)))\n\n/** @internal */\nexport const whileOutputEffect = dual<\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In, R | R2>,\n  <Out, In, R, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ) => Schedule.Schedule<Out, In, R | R2>\n>(2, (self, f) => checkEffect(self, (_, out) => f(out)))\n\n/** @internal */\nexport const windowed = (intervalInput: Duration.DurationInput): Schedule.Schedule<number> => {\n  const interval = Duration.decode(intervalInput)\n  const millis = Duration.toMillis(interval)\n  return makeWithState<[Option.Option<number>, number], unknown, number>(\n    [Option.none(), 0],\n    (now, _, [option, n]) => {\n      switch (option._tag) {\n        case \"None\": {\n          return core.succeed(\n            [\n              [Option.some(now), n + 1],\n              n,\n              ScheduleDecision.continueWith(Interval.after(now + millis))\n            ]\n          )\n        }\n        case \"Some\": {\n          return core.succeed(\n            [\n              [Option.some(option.value), n + 1],\n              n,\n              ScheduleDecision.continueWith(\n                Interval.after(now + (millis - ((now - option.value) % millis)))\n              )\n            ]\n          )\n        }\n      }\n    }\n  )\n}\n\n/** @internal */\nexport const zipLeft = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<Out, In & In2, R | R2>\n>(2, (self, that) => map(intersect(self, that), (out) => out[0]))\n\n/** @internal */\nexport const zipRight = dual<\n  <Out2, In2, R2>(\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => <Out, In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out2, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>\n  ) => Schedule.Schedule<Out2, In & In2, R | R2>\n>(2, (self, that) => map(intersect(self, that), (out) => out[1]))\n\n/** @internal */\nexport const zipWith = dual<\n  <Out2, In2, R2, Out, Out3>(\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (out: Out, out2: Out2) => Out3\n  ) => <In, R>(self: Schedule.Schedule<Out, In, R>) => Schedule.Schedule<Out3, In & In2, R | R2>,\n  <Out, In, R, Out2, In2, R2, Out3>(\n    self: Schedule.Schedule<Out, In, R>,\n    that: Schedule.Schedule<Out2, In2, R2>,\n    f: (out: Out, out2: Out2) => Out3\n  ) => Schedule.Schedule<Out3, In & In2, R | R2>\n>(3, (self, that, f) => map(intersect(self, that), ([out, out2]) => f(out, out2)))\n\n// -----------------------------------------------------------------------------\n// Seconds\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfSecond = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfSecond = (now: number): number => {\n  const date = new Date(beginningOfSecond(now))\n  return date.setSeconds(date.getSeconds() + 1)\n}\n\n/** @internal */\nexport const nextSecond = (now: number, second: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getSeconds() === second && initial) {\n    return now\n  }\n  if (date.getSeconds() < second) {\n    return date.setSeconds(second)\n  }\n  // Set seconds to the provided value and add one minute\n  const newDate = new Date(date.setSeconds(second))\n  return newDate.setTime(newDate.getTime() + 1000 * 60)\n}\n\n// -----------------------------------------------------------------------------\n// Minutes\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfMinute = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n    0,\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfMinute = (now: number): number => {\n  const date = new Date(beginningOfMinute(now))\n  return date.setMinutes(date.getMinutes() + 1)\n}\n\n/** @internal */\nexport const nextMinute = (now: number, minute: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getMinutes() === minute && initial) {\n    return now\n  }\n  if (date.getMinutes() < minute) {\n    return date.setMinutes(minute)\n  }\n  // Set minutes to the provided value and add one hour\n  const newDate = new Date(date.setMinutes(minute))\n  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60)\n}\n\n// -----------------------------------------------------------------------------\n// Hours\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfHour = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    0,\n    0,\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfHour = (now: number): number => {\n  const date = new Date(beginningOfHour(now))\n  return date.setHours(date.getHours() + 1)\n}\n\n/** @internal */\nexport const nextHour = (now: number, hour: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getHours() === hour && initial) {\n    return now\n  }\n  if (date.getHours() < hour) {\n    return date.setHours(hour)\n  }\n  // Set hours to the provided value and add one day\n  const newDate = new Date(date.setHours(hour))\n  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60 * 24)\n}\n\n// -----------------------------------------------------------------------------\n// Days\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const beginningOfDay = (now: number): number => {\n  const date = new Date(now)\n  return new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    0,\n    0,\n    0,\n    0\n  ).getTime()\n}\n\n/** @internal */\nexport const endOfDay = (now: number): number => {\n  const date = new Date(beginningOfDay(now))\n  return date.setDate(date.getDate() + 1)\n}\n\n/** @internal */\nexport const nextDay = (now: number, dayOfWeek: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getDay() === dayOfWeek && initial) {\n    return now\n  }\n  const nextDayOfWeek = (7 + dayOfWeek - date.getDay()) % 7\n  return date.setDate(date.getDate() + (nextDayOfWeek === 0 ? 7 : nextDayOfWeek))\n}\n\n/** @internal */\nexport const nextDayOfMonth = (now: number, day: number, initial: boolean): number => {\n  const date = new Date(now)\n  if (date.getDate() === day && initial) {\n    return now\n  }\n  if (date.getDate() < day) {\n    return date.setDate(day)\n  }\n  return findNextMonth(now, day, 1)\n}\n\n/** @internal */\nexport const findNextMonth = (now: number, day: number, months: number): number => {\n  const d = new Date(now)\n  const tmp1 = new Date(d.setDate(day))\n  const tmp2 = new Date(tmp1.setMonth(tmp1.getMonth() + months))\n  if (tmp2.getDate() === day) {\n    const d2 = new Date(now)\n    const tmp3 = new Date(d2.setDate(day))\n    return tmp3.setMonth(tmp3.getMonth() + months)\n  }\n  return findNextMonth(now, day, months + 1)\n}\n\n// circular with Effect\n\nconst ScheduleDefectTypeId = Symbol.for(\"effect/Schedule/ScheduleDefect\")\nclass ScheduleDefect<E> {\n  readonly [ScheduleDefectTypeId]: typeof ScheduleDefectTypeId\n  constructor(readonly error: E) {\n    this[ScheduleDefectTypeId] = ScheduleDefectTypeId\n  }\n}\nconst isScheduleDefect = <E = unknown>(u: unknown): u is ScheduleDefect<E> => hasProperty(u, ScheduleDefectTypeId)\nconst scheduleDefectWrap = <A, E, R>(self: Effect.Effect<A, E, R>) =>\n  core.catchAll(self, (e) => core.die(new ScheduleDefect(e)))\nconst scheduleDefectRefail = <A, E, R>(self: Effect.Effect<A, E, R>) =>\n  core.catchAllCause(self, (cause) =>\n    Option.match(\n      internalCause.find(\n        cause,\n        (_) => internalCause.isDieType(_) && isScheduleDefect<E>(_.defect) ? Option.some(_.defect) : Option.none()\n      ),\n      {\n        onNone: () => core.failCause(cause),\n        onSome: (error) => core.fail(error.error)\n      }\n    ))\n\n/** @internal */\nexport const repeat_Effect = dual<\n  <R1, A, B>(\n    schedule: Schedule.Schedule<B, A, R1>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R | R1>,\n  <A, E, R, R1, B>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R1>\n  ) => Effect.Effect<B, E, R | R1>\n>(2, (self, schedule) => repeatOrElse_Effect(self, schedule, (e, _) => core.fail(e)))\n\n/** @internal */\nexport const repeat_combined = dual<{\n  <O extends Effect.Repeat.Options<A>, A>(\n    options: O\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Repeat.Return<R, E, A, O>\n  <B, A, R1>(\n    schedule: Schedule.Schedule<B, A, R1>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R | R1>\n}, {\n  <A, E, R, O extends Effect.Repeat.Options<A>>(\n    self: Effect.Effect<A, E, R>,\n    options: O\n  ): Effect.Repeat.Return<R, E, A, O>\n  <A, E, R, B, R1>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R1>\n  ): Effect.Effect<B, E, R | R1>\n}>(\n  2,\n  (self: Effect.Effect<any, any, any>, options: Effect.Repeat.Options<any> | Schedule.Schedule<any, any, any>) => {\n    if (isSchedule(options)) {\n      return repeat_Effect(self, options)\n    }\n\n    const base = options.schedule ?? passthrough(forever)\n    const withWhile = options.while ?\n      whileInputEffect(base, (a) => {\n        const applied = options.while!(a)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      base\n    const withUntil = options.until ?\n      untilInputEffect(withWhile, (a) => {\n        const applied = options.until!(a)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      withWhile\n    const withTimes = options.times ?\n      intersect(withUntil, recurs(options.times)).pipe(map((intersectionPair) => intersectionPair[0])) :\n      withUntil\n\n    return scheduleDefectRefail(repeat_Effect(self, withTimes))\n  }\n)\n\n/** @internal */\nexport const repeatOrElse_Effect = dual<\n  <R2, A, B, E, E2, R3>(\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect.Effect<B, E2, R3>\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2, R | R2 | R3>,\n  <A, E, R, R2, B, E2, R3>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect.Effect<B, E2, R3>\n  ) => Effect.Effect<B, E2, R | R2 | R3>\n>(3, (self, schedule, orElse) =>\n  core.flatMap(driver(schedule), (driver) =>\n    core.matchEffect(self, {\n      onFailure: (error) => orElse(error, Option.none()),\n      onSuccess: (value) => repeatOrElseEffectLoop(self, driver, orElse, value)\n    })))\n\n/** @internal */\nconst repeatOrElseEffectLoop = <A, E, R, R1, B, C, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  driver: Schedule.ScheduleDriver<B, A, R1>,\n  orElse: (error: E, option: Option.Option<B>) => Effect.Effect<C, E2, R2>,\n  value: A\n): Effect.Effect<B | C, E2, R | R1 | R2> => {\n  return core.matchEffect(driver.next(value), {\n    onFailure: () => core.orDie(driver.last),\n    onSuccess: (b) =>\n      core.matchEffect(self, {\n        onFailure: (error) => orElse(error, Option.some(b)),\n        onSuccess: (value) => repeatOrElseEffectLoop(self, driver, orElse, value)\n      })\n  })\n}\n\n/** @internal */\nexport const retry_Effect = dual<\n  <B, E, R1>(\n    policy: Schedule.Schedule<B, E, R1>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R | R1>,\n  <A, E, R, B, R1>(\n    self: Effect.Effect<A, E, R>,\n    policy: Schedule.Schedule<B, E, R1>\n  ) => Effect.Effect<A, E, R | R1>\n>(2, (self, policy) => retryOrElse_Effect(self, policy, (e, _) => core.fail(e)))\n\n/** @internal */\nexport const retry_combined: {\n  <E, O extends Effect.Retry.Options<E>>(\n    options: O\n  ): <A, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Retry.Return<R, E, A, O>\n  <B, E, R1>(\n    policy: Schedule.Schedule<B, Types.NoInfer<E>, R1>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, O extends Effect.Retry.Options<E>>(\n    self: Effect.Effect<A, E, R>,\n    options: O\n  ): Effect.Retry.Return<R, E, A, O>\n  <A, E, R, B, R1>(\n    self: Effect.Effect<A, E, R>,\n    policy: Schedule.Schedule<B, E, R1>\n  ): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  (self: Effect.Effect<any, any, any>, options: Effect.Retry.Options<any> | Schedule.Schedule<any, any, any>) => {\n    if (isSchedule(options)) {\n      return retry_Effect(self, options)\n    }\n\n    const base = options.schedule ?? forever\n    const withWhile = options.while ?\n      whileInputEffect(base, (e) => {\n        const applied = options.while!(e)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      base\n    const withUntil = options.until ?\n      untilInputEffect(withWhile, (e) => {\n        const applied = options.until!(e)\n        if (typeof applied === \"boolean\") {\n          return core.succeed(applied)\n        }\n        return scheduleDefectWrap(applied)\n      }) :\n      withWhile\n    const withTimes = options.times ?\n      intersect(withUntil, recurs(options.times)) :\n      withUntil\n    return scheduleDefectRefail(retry_Effect(self, withTimes))\n  }\n)\n\n/** @internal */\nexport const retryOrElse_Effect = dual<\n  <A1, E, R1, A2, E2, R2>(\n    policy: Schedule.Schedule<A1, Types.NoInfer<E>, R1>,\n    orElse: (e: Types.NoInfer<E>, out: A1) => Effect.Effect<A2, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E2, R | R1 | R2>,\n  <A, E, R, A1, R1, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    policy: Schedule.Schedule<A1, Types.NoInfer<E>, R1>,\n    orElse: (e: Types.NoInfer<E>, out: A1) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E2, R | R1 | R2>\n>(3, (self, policy, orElse) =>\n  core.flatMap(\n    driver(policy),\n    (driver) => retryOrElse_EffectLoop(self, driver, orElse)\n  ))\n\n/** @internal */\nconst retryOrElse_EffectLoop = <A, E, R, R1, A1, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  driver: Schedule.ScheduleDriver<A1, E, R1>,\n  orElse: (e: E, out: A1) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E2, R | R1 | R2> => {\n  return core.catchAll(\n    self,\n    (e) =>\n      core.matchEffect(driver.next(e), {\n        onFailure: () =>\n          pipe(\n            driver.last,\n            core.orDie,\n            core.flatMap((out) => orElse(e, out))\n          ),\n        onSuccess: () => retryOrElse_EffectLoop(self, driver, orElse)\n      })\n  )\n}\n\n/** @internal */\nexport const schedule_Effect = dual<\n  <R2, Out>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Out, E, R | R2>,\n  <A, E, R, R2, Out>(\n    self: Effect.Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ) => Effect.Effect<Out, E, R | R2>\n>(2, <A, E, R, R2, Out>(\n  self: Effect.Effect<A, E, R>,\n  schedule: Schedule.Schedule<Out, unknown, R2>\n) => scheduleFrom_Effect(self, void 0, schedule))\n\n/** @internal */\nexport const scheduleFrom_Effect = dual<\n  <R2, In, Out>(\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ) => <E, R>(self: Effect.Effect<In, E, R>) => Effect.Effect<Out, E, R | R2>,\n  <In, E, R, R2, Out>(\n    self: Effect.Effect<In, E, R>,\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ) => Effect.Effect<Out, E, R | R2>\n>(3, (self, initial, schedule) =>\n  core.flatMap(\n    driver(schedule),\n    (driver) => scheduleFrom_EffectLoop(self, initial, driver)\n  ))\n\n/** @internal */\nconst scheduleFrom_EffectLoop = <In, E, R, R2, Out>(\n  self: Effect.Effect<In, E, R>,\n  initial: In,\n  driver: Schedule.ScheduleDriver<Out, In, R2>\n): Effect.Effect<Out, E, R | R2> =>\n  core.matchEffect(driver.next(initial), {\n    onFailure: () => core.orDie(driver.last),\n    onSuccess: () => core.flatMap(self, (a) => scheduleFrom_EffectLoop(self, a, driver))\n  })\n\n/** @internal */\nexport const count: Schedule.Schedule<number> = unfold(0, (n) => n + 1)\n\n/** @internal */\nexport const elapsed: Schedule.Schedule<Duration.Duration> = makeWithState(\n  Option.none() as Option.Option<number>,\n  (now, _, state) => {\n    switch (state._tag) {\n      case \"None\": {\n        return core.succeed(\n          [\n            Option.some(now),\n            Duration.zero,\n            ScheduleDecision.continueWith(Interval.after(now))\n          ] as const\n        )\n      }\n      case \"Some\": {\n        return core.succeed(\n          [\n            Option.some(state.value),\n            Duration.millis(now - state.value),\n            ScheduleDecision.continueWith(Interval.after(now))\n          ] as const\n        )\n      }\n    }\n  }\n)\n\n/** @internal */\nexport const forever: Schedule.Schedule<number> = unfold(0, (n) => n + 1)\n\n/** @internal */\nexport const once: Schedule.Schedule<void> = asVoid(recurs(1))\n\n/** @internal */\nexport const stop: Schedule.Schedule<void> = asVoid(recurs(0))\n", "/** @internal */\nexport const OP_EXTEND_SCOPE = \"ExtendScope\" as const\n\n/** @internal */\nexport type OP_EXTEND_SCOPE = typeof OP_EXTEND_SCOPE\n\n/** @internal */\nexport const OP_FOLD = \"Fold\" as const\n\n/** @internal */\nexport type OP_FOLD = typeof OP_FOLD\n\n/** @internal */\nexport const OP_FRESH = \"Fresh\" as const\n\n/** @internal */\nexport type OP_FRESH = typeof OP_FRESH\n\n/** @internal */\nexport const OP_FROM_EFFECT = \"FromEffect\" as const\n\n/** @internal */\nexport type OP_FROM_EFFECT = typeof OP_FROM_EFFECT\n\n/** @internal */\nexport const OP_SCOPED = \"Scoped\" as const\n\n/** @internal */\nexport type OP_SCOPED = typeof OP_SCOPED\n\n/** @internal */\nexport const OP_SUSPEND = \"Suspend\" as const\n\n/** @internal */\nexport type OP_SUSPEND = typeof OP_SUSPEND\n\n/** @internal */\nexport const OP_PROVIDE = \"Provide\" as const\n\n/** @internal */\nexport type OP_PROVIDE = typeof OP_PROVIDE\n\n/** @internal */\nexport const OP_PROVIDE_MERGE = \"ProvideMerge\" as const\n\n/** @internal */\nexport type OP_PROVIDE_MERGE = typeof OP_PROVIDE_MERGE\n\n/** @internal */\nexport const OP_ZIP_WITH = \"ZipWith\" as const\n\n/** @internal */\nexport type OP_ZIP_WITH = typeof OP_ZIP_WITH\n", "import { equals } from \"effect/Equal\"\nimport type * as ReadonlyArray from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Exit from \"../Exit.js\"\nimport * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Runtime from \"../Runtime.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as _scheduler from \"../Scheduler.js\"\nimport * as _scope from \"../Scope.js\"\nimport * as InternalCause from \"./cause.js\"\nimport * as core from \"./core.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as FiberRuntime from \"./fiberRuntime.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as _supervisor from \"./supervisor.js\"\n\n/** @internal */\nexport const unsafeFork = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  self: Effect.Effect<A, E, R>,\n  options?: Runtime.RunForkOptions\n): Fiber.RuntimeFiber<A, E> => {\n  const fiberId = FiberId.unsafeMake()\n  const fiberRefUpdates: ReadonlyArray.NonEmptyArray<\n    readonly [FiberRef.FiberRef<any>, ReadonlyArray.NonEmptyReadonlyArray<readonly [FiberId.Runtime, any]>]\n  > = [[core.currentContext, [[fiberId, runtime.context]]]]\n\n  if (options?.scheduler) {\n    fiberRefUpdates.push([_scheduler.currentScheduler, [[fiberId, options.scheduler]]])\n  }\n\n  let fiberRefs = FiberRefs.updateManyAs(runtime.fiberRefs, {\n    entries: fiberRefUpdates,\n    forkAs: fiberId\n  })\n\n  if (options?.updateRefs) {\n    fiberRefs = options.updateRefs(fiberRefs, fiberId)\n  }\n\n  const fiberRuntime: FiberRuntime.FiberRuntime<A, E> = new FiberRuntime.FiberRuntime<A, E>(\n    fiberId,\n    fiberRefs,\n    runtime.runtimeFlags\n  )\n\n  let effect: Effect.Effect<A, E, R> = self\n\n  if (options?.scope) {\n    effect = core.flatMap(\n      _scope.fork(options.scope, executionStrategy.sequential),\n      (closeableScope) =>\n        core.zipRight(\n          core.scopeAddFinalizer(\n            closeableScope,\n            core.fiberIdWith((id) =>\n              equals(id, fiberRuntime.id()) ? core.void : core.interruptAsFiber(fiberRuntime, id)\n            )\n          ),\n          core.onExit(self, (exit) => _scope.close(closeableScope, exit))\n        )\n    )\n  }\n\n  const supervisor = fiberRuntime._supervisor\n\n  // we can compare by reference here as _supervisor.none is wrapped with globalValue\n  if (supervisor !== _supervisor.none) {\n    supervisor.onStart(runtime.context, effect, Option.none(), fiberRuntime)\n\n    fiberRuntime.addObserver((exit) => supervisor.onEnd(exit, fiberRuntime))\n  }\n\n  fiberScope.globalScope.add(runtime.runtimeFlags, fiberRuntime)\n\n  // Only an explicit false will prevent immediate execution\n  if (options?.immediate === false) {\n    fiberRuntime.resume(effect)\n  } else {\n    fiberRuntime.start(effect)\n  }\n\n  return fiberRuntime\n}\n\n/** @internal */\nexport const unsafeRunCallback = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options: Runtime.RunCallbackOptions<A, E> = {}\n): (fiberId?: FiberId.FiberId, options?: Runtime.RunCallbackOptions<A, E> | undefined) => void => {\n  const fiberRuntime = unsafeFork(runtime)(effect, options)\n\n  if (options.onExit) {\n    fiberRuntime.addObserver((exit) => {\n      options.onExit!(exit)\n    })\n  }\n\n  return (id, cancelOptions) =>\n    unsafeRunCallback(runtime)(\n      pipe(fiberRuntime, Fiber.interruptAs(id ?? FiberId.none)),\n      {\n        ...cancelOptions,\n        onExit: cancelOptions?.onExit\n          ? (exit) => cancelOptions.onExit!(Exit.flatten(exit))\n          : undefined\n      }\n    )\n}\n\n/** @internal */\nexport const unsafeRunSync = <R>(runtime: Runtime.Runtime<R>) => <A, E>(effect: Effect.Effect<A, E, R>): A => {\n  const result = unsafeRunSyncExit(runtime)(effect)\n  if (result._tag === \"Failure\") {\n    throw fiberFailure(result.effect_instruction_i0)\n  } else {\n    return result.effect_instruction_i0\n  }\n}\n\nclass AsyncFiberExceptionImpl<A, E = never> extends Error implements Runtime.AsyncFiberException<A, E> {\n  readonly _tag = \"AsyncFiberException\"\n  constructor(readonly fiber: Fiber.RuntimeFiber<A, E>) {\n    super(\n      `Fiber #${fiber.id().id} cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work`\n    )\n    this.name = this._tag\n    this.stack = this.message\n  }\n}\n\nconst asyncFiberException = <A, E>(fiber: Fiber.RuntimeFiber<A, E>): Runtime.AsyncFiberException<A, E> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  const error = new AsyncFiberExceptionImpl(fiber)\n  Error.stackTraceLimit = limit\n  return error\n}\n\n/** @internal */\nexport const isAsyncFiberException = (u: unknown): u is Runtime.AsyncFiberException<unknown, unknown> =>\n  Predicate.isTagged(u, \"AsyncFiberException\") && \"fiber\" in u\n\n/** @internal */\nexport const FiberFailureId: Runtime.FiberFailureId = Symbol.for(\"effect/Runtime/FiberFailure\") as any\n/** @internal */\nexport const FiberFailureCauseId: Runtime.FiberFailureCauseId = Symbol.for(\n  \"effect/Runtime/FiberFailure/Cause\"\n) as any\n\nclass FiberFailureImpl extends Error implements Runtime.FiberFailure {\n  readonly [FiberFailureId]: Runtime.FiberFailureId\n  readonly [FiberFailureCauseId]: Cause.Cause<unknown>\n  constructor(cause: Cause.Cause<unknown>) {\n    super()\n\n    this[FiberFailureId] = FiberFailureId\n    this[FiberFailureCauseId] = cause\n\n    const prettyErrors = InternalCause.prettyErrors(cause)\n    if (prettyErrors.length > 0) {\n      const head = prettyErrors[0]\n      this.name = head.name\n      this.message = head.message\n      this.stack = head.stack!\n    }\n\n    this.name = `(FiberFailure) ${this.name}`\n\n    if (this.message === undefined || this.message.length === 0) {\n      this.message = \"An error has occurred\"\n    }\n  }\n\n  toJSON(): unknown {\n    return {\n      _id: \"FiberFailure\",\n      cause: this[FiberFailureCauseId].toJSON()\n    }\n  }\n\n  toString(): string {\n    return \"(FiberFailure) \" + (this.stack ?? this.message)\n  }\n  [Inspectable.NodeInspectSymbol](): unknown {\n    return this.toString()\n  }\n}\n\n/** @internal */\nexport const fiberFailure = <E>(cause: Cause.Cause<E>): Runtime.FiberFailure => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  const error = new FiberFailureImpl(cause)\n  Error.stackTraceLimit = limit\n  return error\n}\n\n/** @internal */\nexport const isFiberFailure = (u: unknown): u is Runtime.FiberFailure => Predicate.hasProperty(u, FiberFailureId)\n\nconst fastPath = <A, E, R>(effect: Effect.Effect<A, E, R>): Exit.Exit<A, E> | undefined => {\n  const op = effect as core.Primitive\n  switch (op._op) {\n    case \"Failure\":\n    case \"Success\": {\n      // @ts-expect-error\n      return op\n    }\n    case \"Left\": {\n      return core.exitFail(op.left)\n    }\n    case \"Right\": {\n      return core.exitSucceed(op.right)\n    }\n    case \"Some\": {\n      return core.exitSucceed(op.value)\n    }\n    case \"None\": {\n      // @ts-expect-error\n      return core.exitFail(core.NoSuchElementException())\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeRunSyncExit =\n  <R>(runtime: Runtime.Runtime<R>) => <A, E>(effect: Effect.Effect<A, E, R>): Exit.Exit<A, E> => {\n    const op = fastPath(effect)\n    if (op) {\n      return op\n    }\n    const scheduler = new _scheduler.SyncScheduler()\n    const fiberRuntime = unsafeFork(runtime)(effect, { scheduler })\n    scheduler.flush()\n    const result = fiberRuntime.unsafePoll()\n    if (result) {\n      return result\n    }\n    throw asyncFiberException(fiberRuntime)\n  }\n\n/** @internal */\nexport const unsafeRunPromise = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n  } | undefined\n): Promise<A> =>\n  unsafeRunPromiseExit(runtime)(effect, options).then((result) => {\n    switch (result._tag) {\n      case OpCodes.OP_SUCCESS: {\n        return result.effect_instruction_i0\n      }\n      case OpCodes.OP_FAILURE: {\n        throw fiberFailure(result.effect_instruction_i0)\n      }\n    }\n  })\n\n/** @internal */\nexport const unsafeRunPromiseExit = <R>(runtime: Runtime.Runtime<R>) =>\n<A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n  } | undefined\n): Promise<Exit.Exit<A, E>> =>\n  new Promise((resolve) => {\n    const op = fastPath(effect)\n    if (op) {\n      resolve(op)\n    }\n    const fiber = unsafeFork(runtime)(effect)\n    fiber.addObserver((exit) => {\n      resolve(exit)\n    })\n    if (options?.signal !== undefined) {\n      if (options.signal.aborted) {\n        fiber.unsafeInterruptAsFork(fiber.id())\n      } else {\n        options.signal.addEventListener(\"abort\", () => {\n          fiber.unsafeInterruptAsFork(fiber.id())\n        }, { once: true })\n      }\n    }\n  })\n\n/** @internal */\nexport class RuntimeImpl<in R> implements Runtime.Runtime<R> {\n  constructor(\n    readonly context: Context.Context<R>,\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags,\n    readonly fiberRefs: FiberRefs.FiberRefs\n  ) {}\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = <R>(\n  options: {\n    readonly context: Context.Context<R>\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n    readonly fiberRefs: FiberRefs.FiberRefs\n  }\n): Runtime.Runtime<R> => new RuntimeImpl(options.context, options.runtimeFlags, options.fiberRefs)\n\n/** @internal */\nexport const runtime = <R>(): Effect.Effect<Runtime.Runtime<R>, never, R> =>\n  core.withFiberRuntime((state, status) =>\n    core.succeed(\n      new RuntimeImpl<R>(\n        state.getFiberRef(core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>),\n        status.runtimeFlags,\n        state.getFiberRefs()\n      )\n    )\n  )\n\n/** @internal */\nexport const defaultRuntimeFlags: RuntimeFlags.RuntimeFlags = runtimeFlags.make(\n  runtimeFlags.Interruption,\n  runtimeFlags.CooperativeYielding,\n  runtimeFlags.RuntimeMetrics\n)\n\n/** @internal */\nexport const defaultRuntime = make({\n  context: Context.empty(),\n  runtimeFlags: defaultRuntimeFlags,\n  fiberRefs: FiberRefs.empty()\n})\n\n/** @internal */\nexport const updateRuntimeFlags: {\n  (\n    f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n  ): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags) =>\n    make({\n      context: self.context,\n      runtimeFlags: f(self.runtimeFlags),\n      fiberRefs: self.fiberRefs\n    })\n)\n\n/** @internal */\nexport const disableRuntimeFlag: {\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag) => updateRuntimeFlags(self, runtimeFlags.disable(flag))\n)\n\n/** @internal */\nexport const enableRuntimeFlag: {\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag) => updateRuntimeFlags(self, runtimeFlags.enable(flag))\n)\n\n/** @internal */\nexport const updateContext: {\n  <R, R2>(f: (context: Context.Context<R>) => Context.Context<R2>): (self: Runtime.Runtime<R>) => Runtime.Runtime<R2>\n  <R, R2>(self: Runtime.Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>): Runtime.Runtime<R2>\n} = dual(\n  2,\n  <R, R2>(self: Runtime.Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>) =>\n    make({\n      context: f(self.context),\n      runtimeFlags: self.runtimeFlags,\n      fiberRefs: self.fiberRefs\n    })\n)\n\n/** @internal */\nexport const provideService: {\n  <I, S>(tag: Context.Tag<I, S>, service: S): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R | I>\n  <R, I, S>(self: Runtime.Runtime<R>, tag: Context.Tag<I, S>, service: S): Runtime.Runtime<R | I>\n} = dual(\n  3,\n  <R, I, S>(self: Runtime.Runtime<R>, tag: Context.Tag<I, S>, service: S) =>\n    updateContext(self, Context.add(tag, service))\n)\n\n/** @internal */\nexport const updateFiberRefs: {\n  (f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): Runtime.Runtime<R> =>\n    make({\n      context: self.context,\n      runtimeFlags: self.runtimeFlags,\n      fiberRefs: f(self.fiberRefs)\n    })\n)\n\n/** @internal */\nexport const setFiberRef: {\n  <A>(fiberRef: FiberRef.FiberRef<A>, value: A): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime.Runtime<R>\n} = dual(\n  3,\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime.Runtime<R> =>\n    updateFiberRefs(\n      self,\n      FiberRefs.updateAs({\n        fiberId: FiberId.none,\n        fiberRef,\n        value\n      })\n    )\n)\n\n/** @internal */\nexport const deleteFiberRef: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime.Runtime<R> =>\n    updateFiberRefs(self, FiberRefs.delete(fiberRef))\n)\n\n/** @internal */\nexport const unsafeRunEffect = unsafeRunCallback(defaultRuntime)\n\n/** @internal */\nexport const unsafeForkEffect = unsafeFork(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunPromiseEffect = unsafeRunPromise(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunPromiseExitEffect = unsafeRunPromiseExit(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunSyncEffect = unsafeRunSync(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunSyncExitEffect = unsafeRunSyncExit(defaultRuntime)\n\n// circular with Effect\n\n/** @internal */\nexport const asyncEffect = <A, E, R, R3, E2, R2>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => Effect.Effect<Effect.Effect<void, never, R3> | void, E2, R2>\n): Effect.Effect<A, E | E2, R | R2 | R3> =>\n  core.suspend(() => {\n    let cleanup: Effect.Effect<void, never, R3> | void = undefined\n    return core.flatMap(\n      core.deferredMake<A, E | E2>(),\n      (deferred) =>\n        core.flatMap(runtime<R | R2 | R3>(), (runtime) =>\n          core.uninterruptibleMask((restore) =>\n            core.zipRight(\n              FiberRuntime.fork(restore(\n                core.matchCauseEffect(\n                  register((cb) => unsafeRunCallback(runtime)(core.intoDeferred(cb, deferred))),\n                  {\n                    onFailure: (cause) => core.deferredFailCause(deferred, cause),\n                    onSuccess: (cleanup_) => {\n                      cleanup = cleanup_\n                      return core.void\n                    }\n                  }\n                )\n              )),\n              restore(core.onInterrupt(core.deferredAwait(deferred), () => cleanup ?? core.void))\n            )\n          ))\n    )\n  })\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as core from \"./internal/core.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as internal from \"./internal/fiber.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberTypeId: unique symbol = internal.FiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberTypeId = typeof FiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RuntimeFiberTypeId: unique symbol = internal.RuntimeFiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RuntimeFiberTypeId = typeof RuntimeFiberTypeId\n\n/**\n * A fiber is a lightweight thread of execution that never consumes more than a\n * whole thread (but may consume much less, depending on contention and\n * asynchronicity). Fibers are spawned by forking effects, which run\n * concurrently with the parent effect.\n *\n * Fibers can be joined, yielding their result to other fibers, or interrupted,\n * which terminates the fiber, safely releasing all resources.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Fiber<out A, out E = never> extends Fiber.Variance<A, E>, Pipeable {\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.FiberId\n\n  /**\n   * Awaits the fiber, which suspends the awaiting fiber until the result of the\n   * fiber has been determined.\n   */\n  readonly await: Effect.Effect<Exit.Exit<A, E>>\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  readonly children: Effect.Effect<Array<Fiber.Runtime<any, any>>>\n\n  /**\n   * Inherits values from all `FiberRef` instances into current fiber. This\n   * will resume immediately.\n   */\n  readonly inheritAll: Effect.Effect<void>\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  readonly poll: Effect.Effect<Option.Option<Exit.Exit<A, E>>>\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the\n   * specified fiber. If the fiber has already exited, the returned effect will\n   * resume immediately. Otherwise, the effect will resume when the fiber exits.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void>\n}\n\n/**\n * A runtime fiber that is executing an effect. Runtime fibers have an\n * identity and a trace.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RuntimeFiber<out A, out E = never> extends Fiber<A, E>, Fiber.RuntimeVariance<A, E> {\n  /**\n   * Reads the current number of ops that have occurred since the last yield\n   */\n  get currentOpCount(): number\n\n  /**\n   * Reads the current value of a fiber ref\n   */\n  getFiberRef<X>(fiberRef: FiberRef<X>): X\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime\n\n  /**\n   * The status of the fiber.\n   */\n  readonly status: Effect.Effect<FiberStatus.FiberStatus>\n\n  /**\n   * Returns the current `RuntimeFlags` the fiber is running with.\n   */\n  readonly runtimeFlags: Effect.Effect<RuntimeFlags.RuntimeFlags>\n\n  /**\n   * Adds an observer to the list of observers.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void\n\n  /**\n   * Retrieves all fiber refs of the fiber.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the\n   * specified fiber. If the fiber has already exited, the returned effect will\n   * resume immediately. Otherwise, the effect will resume when the fiber exits.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId): void\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Fiber {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Runtime<A, E = never> = RuntimeFiber<A, E>\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E> {\n    readonly [FiberTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export interface RuntimeVariance<out A, out E> {\n    readonly [RuntimeFiberTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Dump {\n    /**\n     * The fiber's unique identifier.\n     */\n    readonly id: FiberId.Runtime\n    /**\n     * The status of the fiber.\n     */\n    readonly status: FiberStatus.FiberStatus\n  }\n\n  /**\n   * A record containing information about a `Fiber`.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Descriptor {\n    /**\n     * The fiber's unique identifier.\n     */\n    readonly id: FiberId.FiberId\n    /**\n     * The status of the fiber.\n     */\n    readonly status: FiberStatus.FiberStatus\n    /**\n     * The set of fibers attempting to interrupt the fiber or its ancestors.\n     */\n    readonly interruptors: HashSet.HashSet<FiberId.FiberId>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<RuntimeFiber<unknown, unknown>> = internal.Order\n\n/**\n * Returns `true` if the specified value is a `Fiber`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiber: (u: unknown) => u is Fiber<unknown, unknown> = internal.isFiber\n\n/**\n * Returns `true` if the specified `Fiber` is a `RuntimeFiber`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntimeFiber: <A, E>(self: Fiber<A, E>) => self is RuntimeFiber<A, E> = internal.isRuntimeFiber\n\n/**\n * The identity of the fiber.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const id: <A, E>(self: Fiber<A, E>) => FiberId.FiberId = internal.id\n\nconst _await: <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>> = internal._await\n\nexport {\n  /**\n   * Awaits the fiber, which suspends the awaiting fiber until the result of the\n   * fiber has been determined.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  _await as await\n}\n\n/**\n * Awaits on all fibers to be completed, successfully or not.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const awaitAll: (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void> = fiberRuntime.fiberAwaitAll\n\n/**\n * Retrieves the immediate children of the fiber.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const children: <A, E>(self: Fiber<A, E>) => Effect.Effect<Array<RuntimeFiber<any, any>>> = internal.children\n\n/**\n * Collects all fibers into a single fiber producing an in-order list of the\n * results.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(fibers: Iterable<Fiber<A, E>>) => Fiber<ReadonlyArray<A>, E> = fiberRuntime.fiberAll\n\n/**\n * A fiber that is done with the specified `Exit` value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const done: <A, E>(exit: Exit.Exit<A, E>) => Fiber<A, E> = internal.done\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const dump: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<Fiber.Dump> = internal.dump\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const dumpAll: (\n  fibers: Iterable<RuntimeFiber<unknown, unknown>>\n) => Effect.Effect<Array<Fiber.Dump>> = internal.dumpAll\n\n/**\n * A fiber that has already failed with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Fiber<never, E> = internal.fail\n\n/**\n * Creates a `Fiber` that has already failed with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Fiber<never, E> = internal.failCause\n\n/**\n * Lifts an `Effect` into a `Fiber`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEffect: <A, E>(effect: Effect.Effect<A, E>) => Effect.Effect<Fiber<A, E>> = internal.fromEffect\n\n/**\n * Gets the current fiber if one is running.\n *\n * @since 2.0.0\n * @category utilities\n */\nexport const getCurrentFiber: () => Option.Option<RuntimeFiber<any, any>> = internal.getCurrentFiber\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber. This\n * will resume immediately.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const inheritAll: <A, E>(self: Fiber<A, E>) => Effect.Effect<void> = internal.inheritAll\n\n/**\n * Interrupts the fiber from whichever fiber is calling this method. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interrupt: <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>> = core.interruptFiber\n\n/**\n * Constructrs a `Fiber` that is already interrupted.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupted: (fiberId: FiberId.FiberId) => Fiber<never> = internal.interrupted\n\n/**\n * Interrupts the fiber as if interrupted from the specified fiber. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAs: {\n  (fiberId: FiberId.FiberId): <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>>\n  <A, E>(self: Fiber<A, E>, fiberId: FiberId.FiberId): Effect.Effect<Exit.Exit<A, E>>\n} = core.interruptAsFiber\n\n/**\n * Interrupts the fiber as if interrupted from the specified fiber. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAsFork: {\n  (fiberId: FiberId.FiberId): <A, E>(self: Fiber<A, E>) => Effect.Effect<void>\n  <A, E>(self: Fiber<A, E>, fiberId: FiberId.FiberId): Effect.Effect<void>\n} = internal.interruptAsFork\n\n/**\n * Interrupts all fibers, awaiting their interruption.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAll: (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void> = internal.interruptAll\n\n/**\n * Interrupts all fibers as by the specified fiber, awaiting their\n * interruption.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAllAs: {\n  (fiberId: FiberId.FiberId): (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void>\n  (fibers: Iterable<Fiber<any, any>>, fiberId: FiberId.FiberId): Effect.Effect<void>\n} = internal.interruptAllAs\n\n/**\n * Interrupts the fiber from whichever fiber is calling this method. The\n * interruption will happen in a separate daemon fiber, and the returned\n * effect will always resume immediately without waiting.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptFork: <A, E>(self: Fiber<A, E>) => Effect.Effect<void> = fiberRuntime.fiberInterruptFork\n\n/**\n * Joins the fiber, which suspends the joining fiber until the result of the\n * fiber has been determined. Attempting to join a fiber that has erred will\n * result in a catchable error. Joining an interrupted fiber will result in an\n * \"inner interruption\" of this fiber, unlike interruption triggered by\n * another fiber, \"inner interruption\" can be caught and recovered.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const join: <A, E>(self: Fiber<A, E>) => Effect.Effect<A, E> = internal.join\n\n/**\n * Joins all fibers, awaiting their _successful_ completion. Attempting to\n * join a fiber that has erred will result in a catchable error, _if_ that\n * error does not result from interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const joinAll: <A, E>(fibers: Iterable<Fiber<A, E>>) => Effect.Effect<Array<A>, E> = fiberRuntime.fiberJoinAll\n\n/**\n * Maps over the value the Fiber computes.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E>(self: Fiber<A, E>) => Fiber<B, E>\n  <A, E, B>(self: Fiber<A, E>, f: (a: A) => B): Fiber<B, E>\n} = internal.map\n\n/**\n * Effectually maps over the value the fiber computes.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  <A, A2, E2>(f: (a: A) => Effect.Effect<A2, E2>): <E>(self: Fiber<A, E>) => Fiber<A2, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, f: (a: A) => Effect.Effect<A2, E2>): Fiber<A2, E | E2>\n} = internal.mapEffect\n\n/**\n * Passes the success of this fiber to the specified callback, and continues\n * with the fiber that it returns.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapFiber: {\n  <E, E2, A, B>(f: (a: A) => Fiber<B, E2>): (self: Fiber<A, E>) => Effect.Effect<Fiber<B, E | E2>>\n  <A, E, E2, B>(self: Fiber<A, E>, f: (a: A) => Fiber<B, E2>): Effect.Effect<Fiber<B, E | E2>>\n} = internal.mapFiber\n\n/**\n * Folds over the `Fiber` or `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <A, E, Z>(\n    options: {\n      readonly onFiber: (fiber: Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: RuntimeFiber<A, E>) => Z\n    }\n  ): (self: Fiber<A, E>) => Z\n  <A, E, Z>(\n    self: Fiber<A, E>,\n    options: {\n      readonly onFiber: (fiber: Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: RuntimeFiber<A, E>) => Z\n    }\n  ): Z\n} = internal.match\n\n/**\n * A fiber that never fails or succeeds.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Fiber<never> = internal.never\n\n/**\n * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n * when `this` one fails. Interrupting the returned fiber will interrupt both\n * fibers, sequentially, from left to right.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElse: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A2 | A, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A | A2, E | E2>\n} = internal.orElse\n\n/**\n * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n * when `this` one fails. Interrupting the returned fiber will interrupt both\n * fibers, sequentially, from left to right.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseEither: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<Either.Either<A2, A>, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<Either.Either<A2, A>, E | E2>\n} = internal.orElseEither\n\n/**\n * Tentatively observes the fiber, but returns immediately if it is not\n * already done.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A, E>(self: Fiber<A, E>) => Effect.Effect<Option.Option<Exit.Exit<A, E>>> = internal.poll\n\n/**\n * Pretty-prints a `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const pretty: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<string> = internal.pretty\n\n/**\n * Returns a chunk containing all root fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const roots: Effect.Effect<Array<RuntimeFiber<any, any>>> = internal.roots\n\n/**\n * Returns a chunk containing all root fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeRoots: (_: void) => Array<RuntimeFiber<any, any>> = internal.unsafeRoots\n\n/**\n * Converts this fiber into a scoped effect. The fiber is interrupted when the\n * scope is closed.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const scoped: <A, E>(self: Fiber<A, E>) => Effect.Effect<Fiber<A, E>, never, Scope.Scope> =\n  fiberRuntime.fiberScoped\n\n/**\n * Returns the `FiberStatus` of a `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const status: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<FiberStatus.FiberStatus> = internal.status\n\n/**\n * Returns a fiber that has already succeeded with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Fiber<A> = internal.succeed\n\nconst void_: Fiber<void> = internal.void\nexport {\n  /**\n   * A fiber that has already succeeded with unit.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Zips this fiber and the specified fiber together, producing a tuple of\n * their output.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<[A, A2], E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<[A, A2], E | E2>\n} = circular.zipFiber\n\n/**\n * Same as `zip` but discards the output of that `Fiber`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A, E | E2>\n} = circular.zipLeftFiber\n\n/**\n * Same as `zip` but discards the output of this `Fiber`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A2, E2 | E>\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A2, E | E2>\n} = circular.zipRightFiber\n\n/**\n * Zips this fiber with the specified fiber, combining their results using the\n * specified combiner function. Both joins and interruptions are performed in\n * sequential order from left to right.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, E2, A, C>(that: Fiber<B, E2>, f: (a: A, b: B) => C): <E>(self: Fiber<A, E>) => Fiber<C, E2 | E>\n  <A, E, B, E2, C>(self: Fiber<A, E>, that: Fiber<B, E2>, f: (a: A, b: B) => C): Fiber<C, E | E2>\n} = circular.zipWithFiber\n", "import type * as Effect from \"../Effect.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Synchronized from \"../SynchronizedRef.js\"\nimport * as core from \"./core.js\"\nimport * as _ref from \"./ref.js\"\n\n/** @internal */\nexport const getAndUpdateEffect = dual<\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, f) =>\n  self.modifyEffect(\n    (value) => core.map(f(value), (result) => [value, result] as const)\n  ))\n\n/** @internal */\nexport const getAndUpdateSomeEffect = dual<\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, pf) =>\n  self.modifyEffect((value) => {\n    const result = pf(value)\n    switch (result._tag) {\n      case \"None\": {\n        return core.succeed([value, value] as const)\n      }\n      case \"Some\": {\n        return core.map(result.value, (newValue) => [value, newValue] as const)\n      }\n    }\n  }))\n\n/** @internal */\nexport const modify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<B>,\n  <A, B>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, (self, f) => self.modify(f))\n\n/** @internal */\nexport const modifyEffect = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<readonly [B, A], E, R>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, E, R>(\n    self: Synchronized.SynchronizedRef<A>,\n    f: (a: A) => Effect.Effect<readonly [B, A], E, R>\n  ) => Effect.Effect<B, E, R>\n>(2, (self, f) => self.modifyEffect(f))\n\n/** @internal */\nexport const modifySomeEffect = dual<\n  <A, B, R, E>(\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ) => Effect.Effect<B, E, R>\n>(3, (self, fallback, pf) =>\n  self.modifyEffect(\n    (value) => pipe(pf(value), Option.getOrElse(() => core.succeed([fallback, value] as const)))\n  ))\n\n/** @internal */\nexport const updateEffect = dual<\n  <A, R, E>(\n    f: (a: A) => Effect.Effect<A, E, R>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<void, E, R>,\n  <A, R, E>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n>(2, (self, f) =>\n  self.modifyEffect((value) =>\n    core.map(\n      f(value),\n      (result) => [undefined as void, result] as const\n    )\n  ))\n\n/** @internal */\nexport const updateAndGetEffect = dual<\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<A, E, R>,\n  <A, R, E>(self: Synchronized.SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, f) =>\n  self.modifyEffect(\n    (value) => core.map(f(value), (result) => [result, result] as const)\n  ))\n\n/** @internal */\nexport const updateSomeEffect = dual<\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => (self: Synchronized.SynchronizedRef<A>) => Effect.Effect<void, E, R>,\n  <A, R, E>(\n    self: Synchronized.SynchronizedRef<A>,\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, pf) =>\n  self.modifyEffect((value) => {\n    const result = pf(value)\n    switch (result._tag) {\n      case \"None\": {\n        return core.succeed([void 0, value] as const)\n      }\n      case \"Some\": {\n        return core.map(result.value, (a) => [void 0, a] as const)\n      }\n    }\n  }))\n", "import type * as Cache from \"../Cache.js\"\nimport type { Deferred } from \"../Deferred.js\"\nimport { seconds } from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\nimport * as BlockedRequests from \"./blockedRequests.js\"\nimport { unsafeMakeWith } from \"./cache.js\"\nimport * as core from \"./core.js\"\nimport { ensuring } from \"./fiberRuntime.js\"\nimport { Listeners } from \"./request.js\"\n\ntype RequestCache = Cache.Cache<Request.Request<any, any>, {\n  listeners: Request.Listeners\n  handle: Deferred<any, any>\n}>\n\n/** @internal */\nexport const currentCache = globalValue(\n  Symbol.for(\"effect/FiberRef/currentCache\"),\n  () =>\n    core.fiberRefUnsafeMake<RequestCache>(unsafeMakeWith<Request.Request<any, any>, {\n      listeners: Request.Listeners\n      handle: Deferred<any, any>\n    }>(\n      65536,\n      () => core.map(core.deferredMake<any, any>(), (handle) => ({ listeners: new Listeners(), handle })),\n      () => seconds(60)\n    ))\n)\n\n/** @internal */\nexport const currentCacheEnabled = globalValue(\n  Symbol.for(\"effect/FiberRef/currentCacheEnabled\"),\n  () => core.fiberRefUnsafeMake(false)\n)\n\n/** @internal */\nexport const fromRequest = <\n  A extends Request.Request<any, any>,\n  Ds extends\n    | RequestResolver.RequestResolver<A>\n    | Effect.Effect<RequestResolver.RequestResolver<A>, any, any>\n>(\n  request: A,\n  dataSource: Ds\n): Effect.Effect<\n  Request.Request.Success<A>,\n  Request.Request.Error<A>,\n  [Ds] extends [Effect.Effect<any, any, any>] ? Effect.Effect.Context<Ds> : never\n> =>\n  core.flatMap(\n    (core.isEffect(dataSource) ? dataSource : core.succeed(dataSource)) as Effect.Effect<\n      RequestResolver.RequestResolver<A>\n    >,\n    (ds) =>\n      core.fiberIdWith((id) => {\n        const proxy = new Proxy(request, {})\n        return core.fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {\n          if (cacheEnabled) {\n            const cached: Effect.Effect<any, any> = core.fiberRefGetWith(currentCache, (cache) =>\n              core.flatMap(cache.getEither(proxy), (orNew) => {\n                switch (orNew._tag) {\n                  case \"Left\": {\n                    if (orNew.left.listeners.interrupted) {\n                      return core.flatMap(\n                        cache.invalidateWhen(proxy, (entry) => entry.handle === orNew.left.handle),\n                        () => cached\n                      )\n                    }\n                    orNew.left.listeners.increment()\n                    return core.uninterruptibleMask((restore) =>\n                      core.flatMap(\n                        core.exit(core.blocked(\n                          BlockedRequests.empty,\n                          restore(core.deferredAwait(orNew.left.handle))\n                        )),\n                        (exit) => {\n                          orNew.left.listeners.decrement()\n                          return exit\n                        }\n                      )\n                    )\n                  }\n                  case \"Right\": {\n                    orNew.right.listeners.increment()\n                    return core.uninterruptibleMask((restore) =>\n                      core.flatMap(\n                        core.exit(\n                          core.blocked(\n                            BlockedRequests.single(\n                              ds as RequestResolver.RequestResolver<A>,\n                              BlockedRequests.makeEntry({\n                                request: proxy,\n                                result: orNew.right.handle,\n                                listeners: orNew.right.listeners,\n                                ownerId: id,\n                                state: { completed: false }\n                              })\n                            ),\n                            restore(core.deferredAwait(orNew.right.handle))\n                          )\n                        ),\n                        () => {\n                          orNew.right.listeners.decrement()\n                          return core.deferredAwait(orNew.right.handle)\n                        }\n                      )\n                    )\n                  }\n                }\n              }))\n            return cached\n          }\n          const listeners = new Listeners()\n          listeners.increment()\n          return core.flatMap(\n            core.deferredMake<Request.Request.Success<A>, Request.Request.Error<A>>(),\n            (ref) =>\n              ensuring(\n                core.blocked(\n                  BlockedRequests.single(\n                    ds as RequestResolver.RequestResolver<A>,\n                    BlockedRequests.makeEntry({\n                      request: proxy,\n                      result: ref,\n                      listeners,\n                      ownerId: id,\n                      state: { completed: false }\n                    })\n                  ),\n                  core.deferredAwait(ref)\n                ),\n                core.sync(() =>\n                  listeners.decrement()\n                )\n              )\n          )\n        })\n      })\n  )\n\n/** @internal */\nexport const cacheRequest = <A extends Request.Request<any, any>>(\n  request: A,\n  result: Request.Request.Result<A>\n): Effect.Effect<void> => {\n  return core.fiberRefGetWith(currentCacheEnabled, (cacheEnabled) => {\n    if (cacheEnabled) {\n      return core.fiberRefGetWith(currentCache, (cache) =>\n        core.flatMap(cache.getEither(request), (orNew) => {\n          switch (orNew._tag) {\n            case \"Left\": {\n              return core.void\n            }\n            case \"Right\": {\n              return core.deferredComplete(orNew.right.handle, result)\n            }\n          }\n        }))\n    }\n    return core.void\n  })\n}\n\n/** @internal */\nexport const withRequestCaching: {\n  (strategy: boolean): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    strategy: boolean\n  ): Effect.Effect<A, E, R>\n} = dual<\n  (\n    strategy: boolean\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    strategy: boolean\n  ) => Effect.Effect<A, E, R>\n>(2, (self, strategy) => core.fiberRefLocally(self, currentCacheEnabled, strategy))\n\n/** @internal */\nexport const withRequestCache: {\n  (cache: Request.Cache): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    cache: Request.Cache\n  ): Effect.Effect<A, E, R>\n} = dual<\n  (\n    cache: Request.Cache\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    cache: Request.Cache\n  ) => Effect.Effect<A, E, R>\n>(\n  2,\n  // @ts-expect-error\n  (self, cache) => core.fiberRefLocally(self, currentCache, cache)\n)\n", "/**\n * @since 2.0.0\n */\nimport type * as _Cache from \"./Cache.js\"\nimport type { Cause } from \"./Cause.js\"\nimport type { Deferred } from \"./Deferred.js\"\nimport type { DurationInput } from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { FiberId } from \"./FiberId.js\"\nimport * as _RequestBlock from \"./internal/blockedRequests.js\"\nimport * as cache from \"./internal/cache.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as internal from \"./internal/request.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RequestTypeId: unique symbol = internal.RequestTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RequestTypeId = typeof RequestTypeId\n\n/**\n * A `Request<A, E>` is a request from a data source for a value of type `A`\n * that may fail with an `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Request<out A, out E = never> extends Request.Variance<A, E> {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Request {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E> {\n    readonly [RequestTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<R extends Request<any, any>, T extends keyof R = never> {\n    (args: Omit<R, T | keyof (Request.Variance<Request.Success<R>, Request.Error<R>>)>): R\n  }\n\n  /**\n   * A utility type to extract the error type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Request<any, any>> = [T] extends [Request<infer _A, infer _E>] ? _E : never\n\n  /**\n   * A utility type to extract the value type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Request<any, any>> = [T] extends [Request<infer _A, infer _E>] ? _A : never\n\n  /**\n   * A utility type to extract the result type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Result<T extends Request<any, any>> = T extends Request<infer A, infer E> ? Exit.Exit<A, E> : never\n\n  /**\n   * A utility type to extract the optional result type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type OptionalResult<T extends Request<any, any>> = T extends Request<infer A, infer E>\n    ? Exit.Exit<Option.Option<A>, E>\n    : never\n}\n\n/**\n * Returns `true` if the specified value is a `Request`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRequest: (u: unknown) => u is Request<unknown, unknown> = internal.isRequest\n\n/**\n * Constructs a new `Request`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of: <R extends Request<any, any>>() => Request.Constructor<R> = internal.of\n\n/**\n * Constructs a new `Request`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tagged: <R extends Request<any, any> & { _tag: string }>(\n  tag: R[\"_tag\"]\n) => Request.Constructor<R, \"_tag\"> = internal.tagged\n\n/**\n * Provides a constructor for a Request Class.\n *\n * @example\n * import { Request } from \"effect\"\n *\n * type Success = string\n * type Error = never\n *\n * class MyRequest extends Request.Class<Success, Error, {\n *   readonly id: string\n * }> {}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Class: new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Request<unknown, unknown> ? never : P]: A[P] }\n) => Request<Success, Error> & Readonly<A> = internal.Class as any\n\n/**\n * Provides a Tagged constructor for a Request Class.\n *\n * @example\n * import { Request } from \"effect\"\n *\n * type Success = string\n * type Error = never\n *\n * class MyRequest extends Request.TaggedClass(\"MyRequest\")<Success, Error, {\n *   readonly name: string\n * }> {}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedClass: <Tag extends string>(\n  tag: Tag\n) => new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" | keyof Request<unknown, unknown> ? never : P]: A[P] }\n) => Request<Success, Error> & Readonly<A> & { readonly _tag: Tag } = internal.TaggedClass as any\n\n/**\n * Complete a `Request` with the specified result.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const complete: {\n  <A extends Request<any, any>>(result: Request.Result<A>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, result: Request.Result<A>): Effect.Effect<void>\n} = internal.complete\n\n/**\n * Interrupts the child effect when requests are no longer needed\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const interruptWhenPossible: {\n  (all: Iterable<Request<any, any>>): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, all: Iterable<Request<any, any>>): Effect.Effect<void, E, R>\n} = fiberRuntime.interruptWhenPossible\n\n/**\n * Complete a `Request` with the specified effectful computation, failing the\n * request with the error from the effect workflow if it fails, and completing\n * the request with the value of the effect workflow if it succeeds.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const completeEffect: {\n  <A extends Request<any, any>, R>(\n    effect: Effect.Effect<Request.Success<A>, Request.Error<A>, R>\n  ): (self: A) => Effect.Effect<void, never, R>\n  <A extends Request<any, any>, R>(\n    self: A,\n    effect: Effect.Effect<Request.Success<A>, Request.Error<A>, R>\n  ): Effect.Effect<void, never, R>\n} = internal.completeEffect\n\n/**\n * Complete a `Request` with the specified error.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const fail: {\n  <A extends Request<any, any>>(error: Request.Error<A>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, error: Request.Error<A>): Effect.Effect<void>\n} = internal.fail\n\n/**\n * Complete a `Request` with the specified cause.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const failCause: {\n  <A extends Request<any, any>>(cause: Cause<Request.Error<A>>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, cause: Cause<Request.Error<A>>): Effect.Effect<void>\n} = internal.failCause\n\n/**\n * Complete a `Request` with the specified value.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const succeed: {\n  <A extends Request<any, any>>(value: Request.Success<A>): (self: A) => Effect.Effect<void>\n  <A extends Request<any, any>>(self: A, value: Request.Success<A>): Effect.Effect<void>\n} = internal.succeed\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Listeners {\n  readonly count: number\n  readonly observers: Set<(count: number) => void>\n  interrupted: boolean\n  addObserver(f: (count: number) => void): void\n  removeObserver(f: (count: number) => void): void\n  increment(): void\n  decrement(): void\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Cache extends\n  _Cache.ConsumerCache<Request<any, any>, {\n    listeners: Listeners\n    handle: Deferred<unknown, unknown>\n  }>\n{}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport const makeCache = (\n  options: {\n    readonly capacity: number\n    readonly timeToLive: DurationInput\n  }\n): Effect.Effect<Cache> =>\n  cache.make({\n    ...options,\n    lookup: () =>\n      core.map(core.deferredMake<unknown, unknown>(), (handle) => ({ listeners: new internal.Listeners(), handle }))\n  })\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EntryTypeId: unique symbol = Symbol.for(\"effect/RequestBlock.Entry\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EntryTypeId = typeof EntryTypeId\n\n/**\n * A `Entry<A>` keeps track of a request of type `A` along with a\n * `Ref` containing the result of the request, existentially hiding the result\n * type. This is used internally by the library to support data sources that\n * return different result types for different requests while guaranteeing that\n * results will be of the type requested.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Entry<out R> extends Entry.Variance<R> {\n  readonly request: R\n  readonly result: Deferred<\n    [R] extends [Request<infer _A, infer _E>] ? _A : never,\n    [R] extends [Request<infer _A, infer _E>] ? _E : never\n  >\n  readonly listeners: Listeners\n  readonly ownerId: FiberId\n  readonly state: {\n    completed: boolean\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Entry {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out R> {\n    readonly [EntryTypeId]: {\n      readonly _R: Types.Covariant<R>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEntry = _RequestBlock.isEntry\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeEntry = _RequestBlock.makeEntry\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport * as core from \"./internal/core.js\"\nimport * as internal from \"./internal/data.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\nimport type { Unify } from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Case {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<A, Tag extends keyof A = never> {\n    (\n      args: Types.Equals<Omit<A, Tag>, {}> extends true ? void\n        : { readonly [P in keyof A as P extends Tag ? never : P]: A[P] }\n    ): A\n  }\n}\n\n/**\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.struct({ name: \"Alice\", age: 30 })\n *\n * const bob = Data.struct({ name: \"Bob\", age: 40 })\n *\n * assert.deepStrictEqual(Equal.equals(alice, alice), true)\n * assert.deepStrictEqual(Equal.equals(alice, Data.struct({ name: \"Alice\", age: 30 })), true)\n *\n * assert.deepStrictEqual(Equal.equals(alice, { name: \"Alice\", age: 30 }), false)\n * assert.deepStrictEqual(Equal.equals(alice, bob), false)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const struct: <A extends Record<string, any>>(a: A) => { readonly [P in keyof A]: A[P] } = internal.struct\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unsafeStruct = <A extends Record<string, any>>(as: A): { readonly [P in keyof A]: A[P] } =>\n  Object.setPrototypeOf(as, StructuralPrototype)\n\n/**\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.tuple(\"Alice\", 30)\n *\n * const bob = Data.tuple(\"Bob\", 40)\n *\n * assert.deepStrictEqual(Equal.equals(alice, alice), true)\n * assert.deepStrictEqual(Equal.equals(alice, Data.tuple(\"Alice\", 30)), true)\n *\n * assert.deepStrictEqual(Equal.equals(alice, [\"Alice\", 30]), false)\n * assert.deepStrictEqual(Equal.equals(alice, bob), false)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const tuple = <As extends ReadonlyArray<any>>(...as: As): Readonly<As> => unsafeArray(as)\n\n/**\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.struct({ name: \"Alice\", age: 30 })\n * const bob = Data.struct({ name: \"Bob\", age: 40 })\n *\n * const persons = Data.array([alice, bob])\n *\n * assert.deepStrictEqual(\n *   Equal.equals(\n *     persons,\n *     Data.array([\n *       Data.struct({ name: \"Alice\", age: 30 }),\n *       Data.struct({ name: \"Bob\", age: 40 })\n *     ])\n *   ),\n *   true\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const array = <As extends ReadonlyArray<any>>(as: As): Readonly<As> => unsafeArray(as.slice(0) as unknown as As)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unsafeArray = <As extends ReadonlyArray<any>>(as: As): Readonly<As> =>\n  Object.setPrototypeOf(as, internal.ArrayProto)\n\nconst _case = <A>(): Case.Constructor<A> => (args) =>\n  (args === undefined ? Object.create(StructuralPrototype) : struct(args)) as any\n\nexport {\n  /**\n   * Provides a constructor for the specified `Case`.\n   *\n   * @example\n   * import { Data, Equal } from \"effect\"\n   *\n   * interface Person {\n   *   readonly name: string\n   * }\n   *\n   * // Creating a constructor for the specified Case\n   * const Person = Data.case<Person>()\n   *\n   * // Creating instances of Person\n   * const mike1 = Person({ name: \"Mike\" })\n   * const mike2 = Person({ name: \"Mike\" })\n   * const john = Person({ name: \"John\" })\n   *\n   * // Checking equality\n   * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n   * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  _case as case\n}\n\n/**\n * Provides a tagged constructor for the specified `Case`.\n *\n * @example\n * import { Data } from \"effect\"\n *\n * interface Person {\n *   readonly _tag: \"Person\" // the tag\n *   readonly name: string\n * }\n *\n * const Person = Data.tagged<Person>(\"Person\")\n *\n * const mike = Person({ name: \"Mike\" })\n *\n * assert.deepEqual(mike, { _tag: \"Person\", name: \"Mike\" })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tagged = <A extends { readonly _tag: string }>(\n  tag: A[\"_tag\"]\n): Case.Constructor<A, \"_tag\"> =>\n(args) => {\n  const value = args === undefined ? Object.create(StructuralPrototype) : struct(args)\n  value._tag = tag\n  return value\n}\n\n/**\n * Provides a constructor for a Case Class.\n *\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * class Person extends Data.Class<{ readonly name: string }> {}\n *\n * // Creating instances of Person\n * const mike1 = new Person({ name: \"Mike\" })\n * const mike2 = new Person({ name: \"Mike\" })\n * const john = new Person({ name: \"John\" })\n *\n * // Checking equality\n * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Class: new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => Readonly<A> = internal.Structural as any\n\n/**\n * Provides a Tagged constructor for a Case Class.\n *\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * class Person extends Data.TaggedClass(\"Person\")<{ readonly name: string }> {}\n *\n * // Creating instances of Person\n * const mike1 = new Person({ name: \"Mike\" })\n * const mike2 = new Person({ name: \"Mike\" })\n * const john = new Person({ name: \"John\" })\n *\n * // Checking equality\n * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n *\n * assert.deepStrictEqual(mike1._tag, \"Person\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedClass = <Tag extends string>(\n  tag: Tag\n): new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => Readonly<A> & { readonly _tag: Tag } => {\n  class Base extends Class<any> {\n    readonly _tag = tag\n  }\n  return Base as any\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Structural: new<A>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => {} = internal.Structural as any\n\n/**\n * Create a tagged enum data type, which is a union of `Data` structs.\n *\n * ```ts\n * import { Data } from \"effect\"\n *\n * type HttpError = Data.TaggedEnum<{\n *   BadRequest: { readonly status: 400, readonly message: string }\n *   NotFound: { readonly status: 404, readonly message: string }\n * }>\n *\n * // Equivalent to:\n * type HttpErrorPlain =\n *   | {\n *     readonly _tag: \"BadRequest\"\n *     readonly status: 400\n *     readonly message: string\n *   }\n *   | {\n *     readonly _tag: \"NotFound\"\n *     readonly status: 404\n *     readonly message: string\n *   }\n * ```\n *\n * @since 2.0.0\n * @category models\n */\nexport type TaggedEnum<\n  A extends Record<string, Record<string, any>> & UntaggedChildren<A>\n> = keyof A extends infer Tag ?\n  Tag extends keyof A ? Types.Simplify<{ readonly _tag: Tag } & { readonly [K in keyof A[Tag]]: A[Tag][K] }>\n  : never\n  : never\n\ntype ChildrenAreTagged<A> = keyof A extends infer K ? K extends keyof A ? \"_tag\" extends keyof A[K] ? true\n    : false\n  : never\n  : never\n\ntype UntaggedChildren<A> = true extends ChildrenAreTagged<A>\n  ? \"It looks like you're trying to create a tagged enum, but one or more of its members already has a `_tag` property.\"\n  : unknown\n\n/**\n * @since 2.0.0\n */\nexport declare namespace TaggedEnum {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface WithGenerics<Count extends number> {\n    readonly taggedEnum: { readonly _tag: string }\n    readonly numberOfGenerics: Count\n\n    readonly A: unknown\n    readonly B: unknown\n    readonly C: unknown\n    readonly D: unknown\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Kind<\n    Z extends WithGenerics<number>,\n    A = unknown,\n    B = unknown,\n    C = unknown,\n    D = unknown\n  > = (Z & {\n    readonly A: A\n    readonly B: B\n    readonly C: C\n    readonly D: D\n  })[\"taggedEnum\"]\n\n  /**\n   * @since 2.0.0\n   */\n  export type Args<\n    A extends { readonly _tag: string },\n    K extends A[\"_tag\"],\n    E = Extract<A, { readonly _tag: K }>\n  > = { readonly [K in keyof E as K extends \"_tag\" ? never : K]: E[K] } extends infer T ? {} extends T ? void : T\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type Value<\n    A extends { readonly _tag: string },\n    K extends A[\"_tag\"]\n  > = Extract<A, { readonly _tag: K }>\n\n  /**\n   * @since 3.1.0\n   */\n  export type Constructor<A extends { readonly _tag: string }> = Types.Simplify<\n    & {\n      readonly [Tag in A[\"_tag\"]]: Case.Constructor<Extract<A, { readonly _tag: Tag }>, \"_tag\">\n    }\n    & {\n      readonly $is: <Tag extends A[\"_tag\"]>(tag: Tag) => (u: unknown) => u is Extract<A, { readonly _tag: Tag }>\n      readonly $match: {\n        <\n          Cases extends {\n            readonly [Tag in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: Tag }>) => any\n          }\n        >(cases: Cases): (value: A) => Unify<ReturnType<Cases[A[\"_tag\"]]>>\n        <\n          Cases extends {\n            readonly [Tag in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: Tag }>) => any\n          }\n        >(value: A, cases: Cases): Unify<ReturnType<Cases[A[\"_tag\"]]>>\n      }\n    }\n  >\n\n  /**\n   * @since 3.2.0\n   */\n  export interface GenericMatchers<Z extends WithGenerics<number>> {\n    readonly $is: <Tag extends Z[\"taggedEnum\"][\"_tag\"]>(\n      tag: Tag\n    ) => {\n      <T extends TaggedEnum.Kind<Z, any, any, any, any>>(\n        u: T\n      ): u is T & { readonly _tag: Tag }\n      (u: unknown): u is Extract<TaggedEnum.Kind<Z>, { readonly _tag: Tag }>\n    }\n    readonly $match: {\n      <\n        A,\n        B,\n        C,\n        D,\n        Cases extends {\n          readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: (\n            args: Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n          ) => any\n        }\n      >(\n        cases: Cases\n      ): (self: TaggedEnum.Kind<Z, A, B, C, D>) => Unify<ReturnType<Cases[Z[\"taggedEnum\"][\"_tag\"]]>>\n      <\n        A,\n        B,\n        C,\n        D,\n        Cases extends {\n          readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: (\n            args: Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n          ) => any\n        }\n      >(\n        self: TaggedEnum.Kind<Z, A, B, C, D>,\n        cases: Cases\n      ): Unify<ReturnType<Cases[Z[\"taggedEnum\"][\"_tag\"]]>>\n    }\n  }\n}\n\n/**\n * Create a constructor for a tagged union of `Data` structs.\n *\n * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n * the constructor.\n *\n * @example\n * import { Data } from \"effect\"\n *\n * const { BadRequest, NotFound } = Data.taggedEnum<\n *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n * >()\n *\n * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n *\n * @example\n * import { Data } from \"effect\"\n *\n * type MyResult<E, A> = Data.TaggedEnum<{\n *   Failure: { readonly error: E }\n *   Success: { readonly value: A }\n * }>\n * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n * }\n * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n *\n * const success = Success({ value: 1 })\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const taggedEnum: {\n  <Z extends TaggedEnum.WithGenerics<1>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  <Z extends TaggedEnum.WithGenerics<2>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  <Z extends TaggedEnum.WithGenerics<3>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B, C>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B, C>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B, C>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B, C>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  <Z extends TaggedEnum.WithGenerics<4>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B, C, D>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B, C, D>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B, C, D>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  <A extends { readonly _tag: string }>(): TaggedEnum.Constructor<A>\n} = () =>\n  new Proxy({}, {\n    get(_target, tag, _receiver) {\n      if (tag === \"$is\") {\n        return Predicate.isTagged\n      } else if (tag === \"$match\") {\n        return taggedMatch\n      }\n      return tagged(tag as string)\n    }\n  }) as any\n\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(self: A, cases: Cases): ReturnType<Cases[A[\"_tag\"]]>\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(cases: Cases): (value: A) => ReturnType<Cases[A[\"_tag\"]]>\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(): any {\n  if (arguments.length === 1) {\n    const cases = arguments[0] as Cases\n    return function(value: A): ReturnType<Cases[A[\"_tag\"]]> {\n      return cases[value._tag as A[\"_tag\"]](value as any)\n    }\n  }\n  const value = arguments[0] as A\n  const cases = arguments[1] as Cases\n  return cases[value._tag as A[\"_tag\"]](value as any)\n}\n\n/**\n * Provides a constructor for a Case Class.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => Cause.YieldableError & Readonly<A> = (function() {\n  const plainArgsSymbol = Symbol.for(\"effect/Data/Error/plainArgs\")\n  return class Base extends core.YieldableError {\n    constructor(args: any) {\n      super(args?.message, args?.cause ? { cause: args.cause } : undefined)\n      if (args) {\n        Object.assign(this, args)\n        Object.defineProperty(this, plainArgsSymbol, { value: args, enumerable: false })\n      }\n    }\n    toJSON() {\n      return { ...(this as any)[plainArgsSymbol], ...this }\n    }\n  } as any\n})()\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => Cause.YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  class Base extends Error<{}> {\n    readonly _tag = tag\n  }\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n", "import { Effect } from 'effect';\nimport { type Cause, isInterruptedOnly } from 'effect/Cause';\nimport { type SpanStatus } from 'effect/Tracer';\n\nimport { type FsError } from './logic/effects/fs/fs-error.js';\nimport { captureErrorsFrom } from './logic/errors/capture-errors-from-cause.js';\nimport { type ErrorRelatedSources } from './source-maps/get-sources-from-map-file.js';\nimport { transformRawError } from './source-maps/transform-raw-error.js';\n\nexport interface ErrorSpan {\n  name: string;\n  attributes: ReadonlyMap<string, unknown>;\n  status: SpanStatus;\n}\n\nexport interface ErrorData {\n  errorType: unknown;\n  message: unknown;\n  stack: string[] | undefined;\n  sources: ErrorRelatedSources[] | undefined;\n  spans: ErrorSpan[] | undefined;\n  isPlainString: boolean;\n}\n\nexport interface CapturedErrors {\n  interrupted: boolean;\n  errors: ErrorData[];\n}\n\nexport interface CaptureErrorsOptions {\n  reverseSpans?: boolean;\n  stripCwd?: boolean;\n}\n\nexport const captureErrors = <E>(\n  cause: Cause<E>,\n  options: CaptureErrorsOptions = {\n    reverseSpans: true,\n    stripCwd: true,\n  },\n): Effect.Effect<CapturedErrors, FsError> =>\n  Effect.gen(function* () {\n    if (isInterruptedOnly(cause)) {\n      return {\n        interrupted: true,\n        errors: [],\n      };\n    }\n\n    const rawErrors = captureErrorsFrom<E>(cause);\n    const errors = yield* Effect.forEach(rawErrors, transformRawError(options));\n\n    return {\n      interrupted: false,\n      errors,\n    };\n  });\n", "import { type Cause, reduceWithContext } from 'effect/Cause';\n\nimport { type PrettyError } from '../../types/pretty-error.type.js';\n\nimport { parseError } from './parse-error.js';\n\nexport const captureErrorsFrom = <E>(cause: Cause<E>): readonly PrettyError[] =>\n  reduceWithContext(cause, undefined, {\n    emptyCase: (): readonly PrettyError[] => [],\n    dieCase: (_, unknownError) => [parseError(unknownError)],\n    failCase: (_, error) => [parseError(error)],\n    interruptCase: () => [],\n    parallelCase: (_, l, r) => [...l, ...r],\n    sequentialCase: (_, l, r) => [...l, ...r],\n  });\n", "import { hasProperty } from 'effect/Predicate';\nimport { type Span } from 'effect/Tracer';\n\nimport { PrettyError } from '../../types/pretty-error.type.js';\n\nimport { extractErrorDetails } from './extract-error-details.js';\n\nconst spanSymbol = Symbol.for('effect/SpanAnnotation');\n\nexport const parseError = (error: unknown): PrettyError => {\n  const span = hasProperty(error, spanSymbol)\n    ? (error[spanSymbol] as Span)\n    : undefined;\n  const { message, type, isPlainString } = extractErrorDetails(error);\n\n  if (error instanceof Error) {\n    return new PrettyError(\n      message,\n      error.stack\n        ?.split('\\n')\n        .filter((el) => /at (.*)/.exec(el))\n        .join('\\r\\n'),\n      span,\n      false,\n      type,\n    );\n  }\n\n  return new PrettyError(message, undefined, span, isPlainString, type);\n};\n", "import { type Span } from 'effect/Tracer';\n\nexport class PrettyError {\n  constructor(\n    readonly message: unknown,\n    readonly stack: string | undefined,\n    readonly span: Span | undefined,\n    readonly isPlainString: boolean,\n    readonly errorType?: unknown,\n  ) {}\n}\n", "import { isFunction } from 'effect/Function';\nimport { hasProperty } from 'effect/Predicate';\n\ninterface ErrorDetails {\n  isPlainString: boolean;\n  type?: unknown;\n  message: unknown;\n}\n\nexport const extractErrorDetails = (error: unknown): ErrorDetails => {\n  if (typeof error === 'string') {\n    return {\n      isPlainString: true,\n      message: error,\n    };\n  }\n\n  // TaggedError with cause\n  if (\n    error instanceof Error &&\n    hasProperty(error, 'cause') &&\n    hasProperty(error, '_tag')\n  ) {\n    return {\n      isPlainString: false,\n      type: error._tag,\n      message: error.cause,\n    };\n  }\n\n  // TaggedError with error ctor\n  if (error instanceof Error && hasProperty(error, 'error')) {\n    return {\n      isPlainString: false,\n      type: error.name,\n      message: error.error,\n    };\n  }\n\n  // Plain objects with tag attribute\n  if (hasProperty(error, '_tag') && hasProperty(error, 'message')) {\n    return {\n      isPlainString: false,\n      type: error._tag,\n      message: error.message,\n    };\n  }\n\n  // Plain objects with toString impl\n  if (\n    hasProperty(error, 'toString') &&\n    isFunction(error.toString) &&\n    error.toString !== Object.prototype.toString &&\n    error.toString !== Array.prototype.toString\n  ) {\n    const message = error.toString();\n    const maybeWithUnderlyingType = message.split(': ');\n\n    if (maybeWithUnderlyingType.length > 1) {\n      const [type, ...message] = maybeWithUnderlyingType;\n\n      return {\n        isPlainString: false,\n        type,\n        message,\n      };\n    }\n\n    return { message, isPlainString: false };\n  }\n\n  return { message: `Error: ${JSON.stringify(error)}`, isPlainString: false };\n};\n", "import { Effect, Option } from 'effect';\nimport { type AnySpan, type Span } from 'effect/Tracer';\n\nimport { type CaptureErrorsOptions } from '../capture-errors.js';\nimport { splitSpansAttributesByTypes } from '../logic/spans/split-spans-attributes-by-type.js';\nimport { stackAtRegex } from '../logic/stack/stack-regex.js';\nimport { stripCwdPath } from '../logic/strip-cwd-path.js';\nimport { type PrettyError } from '../types/pretty-error.type.js';\n\nimport { type ErrorRelatedSources } from './get-sources-from-map-file.js';\nimport { maybeMapSourcemaps } from './maybe-map-sourcemaps.js';\n\nexport const transformRawError =\n  ({ reverseSpans, stripCwd }: CaptureErrorsOptions) =>\n  ({\n    message,\n    stack: maybeStack,\n    span,\n    errorType,\n    isPlainString,\n  }: PrettyError) =>\n    Effect.gen(function* () {\n      const sources: ErrorRelatedSources[] = [];\n      const spans = [];\n\n      if (span !== undefined) {\n        let current: Span | AnySpan | undefined = span;\n\n        while (current !== undefined && current._tag === 'Span') {\n          const { name, attributes: allAttributes, status } = current;\n\n          const { attributes, stacktrace } =\n            splitSpansAttributesByTypes(allAttributes);\n\n          const errorSources = yield* maybeMapSourcemaps(stacktrace);\n\n          sources.push(...errorSources);\n          spans.push({\n            name,\n            attributes,\n            status,\n          });\n          current = Option.getOrUndefined(current.parent);\n        }\n      }\n\n      let stack;\n      if (maybeStack !== undefined) {\n        stack = stripCwd === true ? stripCwdPath(maybeStack) : maybeStack;\n      }\n\n      return {\n        errorType,\n        message,\n        stack: stack?.replaceAll(stackAtRegex, 'at ').split('\\r\\n'),\n        sources: sources.length > 0 ? sources : undefined,\n        spans: reverseSpans === true ? spans.toReversed() : spans,\n        isPlainString,\n      };\n    });\n", "interface FilteredEffectAttributes {\n  stacktrace: string[];\n  attributes: ReadonlyMap<string, unknown>;\n}\n\nexport const splitSpansAttributesByTypes = (\n  attributes: ReadonlyMap<string, unknown>,\n) =>\n  Array.from(attributes.entries()).reduce<FilteredEffectAttributes>(\n    (prev, [key, value]) => {\n      if (key === 'code.stacktrace') {\n        return {\n          attributes: prev.attributes,\n          stacktrace: [...prev.stacktrace, value] as string[],\n        };\n      }\n\n      return {\n        attributes: new Map([...prev.attributes, [key, value]]),\n        stacktrace: prev.stacktrace,\n      };\n    },\n    {\n      stacktrace: [],\n      attributes: new Map(),\n    },\n  );\n", "export const stackAtRegex = / {4}at /g;\nexport const sourceFileWithMapPointerRegex =\n  /^(file:\\/\\/)?(.*.([jt])s)(\\?.*)?:(\\d*):(\\d*)$/;\n", "const cwdRegex =\n  global.process !== undefined ? new RegExp(global.process.cwd(), 'g') : null;\n\nexport const stripCwdPath = (path: string): string =>\n  cwdRegex === null ? path : path.replace(cwdRegex, '.');\n", "import { Effect } from 'effect';\n\nimport { type FsError } from '../logic/effects/fs/fs-error.js';\nimport { stackAtRegex } from '../logic/stack/stack-regex.js';\n\nimport { getErrorRelatedSources } from './get-error-related-sources.js';\nimport { type ErrorRelatedSources } from './get-sources-from-map-file.js';\n\nexport const maybeMapSourcemaps = (\n  stacktrace: string[],\n): Effect.Effect<ErrorRelatedSources[], FsError> =>\n  Effect.forEach(stacktrace, (stackLine) =>\n    Effect.gen(function* () {\n      const chunks = stackLine.split(' ');\n      const path =\n        chunks.length === 2\n          ? chunks[1]\n          : chunks[chunks.length - 1].slice(1, -1);\n\n      const details = yield* getErrorRelatedSources(path);\n      if (details === undefined) {\n        return {\n          runPath: stackLine.replaceAll(stackAtRegex, 'at '),\n          source: undefined,\n          sourcesPath: undefined,\n        };\n      }\n\n      return {\n        runPath: details.runPath,\n        sourcesPath: details.sourcesPath,\n        source: details.source,\n      };\n    }),\n  );\n", "import { Effect } from 'effect';\n\nimport { type FsError } from '../logic/effects/fs/fs-error.js';\n\nimport { getErrorLocationFrom } from './get-error-location-from-file-path.js';\nimport { getSourceCode } from './get-source-code.js';\nimport {\n  type ErrorRelatedSources,\n  getSourcesFromMapFile,\n} from './get-sources-from-map-file.js';\n\nexport const getErrorRelatedSources = (\n  sourceFile: string,\n): Effect.Effect<ErrorRelatedSources | undefined, FsError> =>\n  Effect.gen(function* () {\n    const location = getErrorLocationFrom(sourceFile);\n    if (location === undefined) {\n      return;\n    }\n\n    const { filePath, line, column } = location;\n\n    const isTypescriptFile = filePath.endsWith('.ts');\n    if (isTypescriptFile) {\n      const source = yield* getSourceCode(location);\n\n      return {\n        runPath: `${filePath}:${line}:${column}`,\n        sourcesPath: undefined,\n        source,\n      };\n    }\n\n    return yield* getSourcesFromMapFile(location);\n  });\n", "import { sourceFileWithMapPointerRegex } from '../logic/stack/stack-regex.js';\n\nexport interface ErrorLocation {\n  filePath: string;\n  line: number;\n  column: number;\n}\n\nexport const getErrorLocationFrom = (\n  sourceFile: string,\n): ErrorLocation | undefined => {\n  const regex = sourceFileWithMapPointerRegex.exec(sourceFile);\n  if (regex === null || regex.length !== 7) {\n    return;\n  }\n\n  const filePath = regex[2];\n  const line = +regex[5];\n  const column = +regex[6];\n\n  return { filePath, line, column };\n};\n", "import { Effect } from 'effect';\n\nimport { type FsError } from '../logic/effects/fs/fs-error.js';\nimport { readFileEffect } from '../logic/effects/fs/fs-extra.effects.js';\n\nimport { type ErrorLocation } from './get-error-location-from-file-path.js';\n\nexport interface SourceCode {\n  line: number;\n  code: string;\n  column: number | undefined;\n}\n\nconst numberOflinesToExtract = 7;\n\nexport const getSourceCode = (\n  { filePath, line, column }: ErrorLocation,\n  isFromJs = false,\n): Effect.Effect<SourceCode[], FsError> =>\n  Effect.gen(function* () {\n    const start = line >= 4 ? line - 4 : 0;\n\n    const sourceCode = yield* readFileEffect(filePath);\n\n    return sourceCode\n      .split('\\n')\n      .splice(start, numberOflinesToExtract)\n      .map((currentLine, index) => {\n        const currentLineNumber = index + start + 1;\n\n        const actualColumn = isFromJs ? column + 1 : column;\n\n        return {\n          line: currentLineNumber,\n          code: currentLine,\n          column: currentLineNumber === line ? actualColumn : undefined,\n        };\n      });\n  });\n", "import { Effect, pipe } from 'effect';\nimport fs from 'fs-extra';\n\nimport { FsError } from './fs-error.js';\n\nexport const readFileEffect = (path: string) =>\n  pipe(\n    Effect.tryPromise({\n      try: async () => await fs.readFile(path, { encoding: 'utf8' }),\n      catch: (e) => new FsError({ cause: e }),\n    }),\n    Effect.withSpan('readFile', { attributes: { path } }),\n  );\n\nexport const existsEffect = (path: string) =>\n  pipe(\n    Effect.tryPromise({\n      try: async () => await fs.exists(path),\n      catch: (e) => new FsError({ cause: e }),\n    }),\n    Effect.withSpan('exists', { attributes: { path } }),\n  );\n\nexport const readJsonEffect = <TResult>(path: string) =>\n  pipe(\n    Effect.tryPromise({\n      try: async () => await (fs.readJson(path) as Promise<TResult>),\n      catch: (e) => new FsError({ cause: e }),\n    }),\n    Effect.withSpan('readJson', { attributes: { path } }),\n  );\n", "import { TaggedError } from 'effect/Data';\n\nexport class FsError extends TaggedError('fs-error')<{\n  cause?: unknown;\n  message?: string;\n}> {}\n", "import path from 'path';\n\nimport { Effect } from 'effect';\nimport color from 'picocolors';\nimport { type RawSourceMap, SourceMapConsumer } from 'source-map-js';\n\nimport { type FsError } from '../logic/effects/fs/fs-error.js';\nimport {\n  existsEffect,\n  readJsonEffect,\n} from '../logic/effects/fs/fs-extra.effects.js';\n\nimport { type ErrorLocation } from './get-error-location-from-file-path.js';\nimport { getSourceCode, type SourceCode } from './get-source-code.js';\n\nexport interface ErrorRelatedSources {\n  source: SourceCode[] | undefined;\n  runPath: string;\n  sourcesPath: string | undefined;\n}\n\nexport const getSourcesFromMapFile = (\n  location: ErrorLocation,\n): Effect.Effect<ErrorRelatedSources | undefined, FsError> =>\n  Effect.gen(function* () {\n    const fileExists = yield* existsEffect(`${location.filePath}.map`);\n    if (!fileExists) {\n      const message = color.yellow(\n        `${location.filePath}.map does not exist: unable to retrieve spans sourcemaps.`,\n      );\n      console.warn(\n        `${color.blue(color.underline('effect-errors'))}: ${message}`,\n      );\n      return;\n    }\n\n    const data = yield* readJsonEffect<RawSourceMap>(\n      `${location.filePath}.map`,\n    );\n    if (data.version === undefined || data.sources === undefined) {\n      return;\n    }\n\n    const consumer = new SourceMapConsumer(data);\n    const sources = consumer.originalPositionFor({\n      column: location.column,\n      line: location.line,\n    });\n    if (\n      sources.source === null ||\n      sources.line === null ||\n      sources.column === null\n    ) {\n      return;\n    }\n\n    const absolutePath = path.resolve(\n      location.filePath.substring(0, location.filePath.lastIndexOf('/')),\n      sources.source,\n    );\n    const source = yield* getSourceCode(\n      {\n        filePath: absolutePath,\n        line: sources.line,\n        column: sources.column,\n      },\n      true,\n    );\n\n    return {\n      runPath: `${location.filePath}:${location.line}:${location.column}`,\n      sourcesPath: `${absolutePath}:${sources.line}:${sources.column + 1}`,\n      source,\n    };\n  });\n", "export const bigIntReplacer = (_key: string, value: unknown) => {\n  if (typeof value === 'bigint') {\n    return {\n      type: 'bigint',\n      value: value.toString(),\n    };\n  }\n  return value;\n};\n", "import { fileURLToPath } from 'node:url';\n\nimport { Effect } from 'effect';\nimport fs from 'fs-extra';\n\nimport { FetchError } from './errors/fetch-error.js';\nimport { FileError } from './errors/file-error.js';\nimport { filename } from './util/filename.effect.js';\n\nconst fileName = fileURLToPath(import.meta.url);\n\ninterface User {\n  id: string;\n  name: string;\n}\n\nconst readUser = Effect.withSpan('readUser')(\n  Effect.tryPromise<User, FileError>({\n    try: async () => await fs.readJson('./src/examples/data/user.json'),\n    catch: (e) => new FileError({ cause: e }),\n  }),\n);\n\nconst fetchTask = (userId: string) =>\n  Effect.withSpan('fetchUser', { attributes: { userId } })(\n    Effect.tryPromise({\n      try: async () =>\n        await fetch(`https://yolo-bro-oh-no.org/users/${userId}`),\n      catch: (e) =>\n        new FetchError({\n          cause: e,\n        }),\n    }),\n  );\n\nconst unwrapResponseTask = (response: Response) =>\n  Effect.withSpan('unwrapFetchUserResponse')(\n    Effect.tryPromise({\n      try: async () => await response.json(),\n      catch: (e) => new FetchError({ cause: e }),\n    }),\n  );\n\nexport const fromPromiseTask = Effect.withSpan('fromPromiseTask')(\n  Effect.gen(function* () {\n    yield* filename(fileName);\n\n    const { id } = yield* readUser;\n    const response = yield* fetchTask(id);\n\n    return yield* unwrapResponseTask(response);\n  }),\n);\n\nexport default fromPromiseTask;\n", "import { TaggedError } from 'effect/Data';\n\nexport class FetchError extends TaggedError('FetchError')<{\n  cause?: unknown;\n  message?: string;\n}> {}\n", "import { TaggedError } from 'effect/Data';\n\nexport class FileError extends TaggedError('FileError')<{\n  cause?: unknown;\n  message?: string;\n}> {}\n", "import { Effect } from 'effect';\n\nconst cwdRegex = new RegExp(process.cwd(), 'g');\n\nexport const filename = (path: string) =>\n  Effect.sync(() => {\n    console.info(`\\r\\n\uD83D\uDCC1 ${path.replace(cwdRegex, '.')}`);\n  });\n"],
  "mappings": "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",
  "names": ["createRequire", "path", "url", "init_cjs_shims", "__esmMin", "require_universalify", "__commonJSMin", "exports", "init_cjs_shims", "fn", "args", "resolve", "reject", "err", "res", "cb", "r", "require_polyfills", "__commonJSMin", "exports", "module", "init_cjs_shims", "constants", "origCwd", "cwd", "platform", "chdir", "d", "patch", "fs", "patchLchmod", "patchLutimes", "chownFix", "chmodFix", "chownFixSync", "chmodFixSync", "statFix", "statFixSync", "path", "mode", "cb", "uid", "gid", "fs$rename", "rename", "from", "to", "start", "backoff", "CB", "er", "stater", "st", "fs$read", "read", "fd", "buffer", "offset", "length", "position", "callback_", "callback", "eagCounter", "_", "__", "fs$readSync", "err", "err2", "threw", "ret", "at", "mt", "er2", "_a", "_b", "_c", "orig", "target", "chownErOk", "options", "stats", "nonroot", "require_legacy_streams", "__commonJSMin", "exports", "module", "init_cjs_shims", "Stream", "legacy", "fs", "ReadStream", "WriteStream", "path", "options", "self", "keys", "index", "length", "key", "err", "fd", "require_clone", "__commonJSMin", "exports", "module", "init_cjs_shims", "clone", "getPrototypeOf", "obj", "copy", "key", "require_graceful_fs", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "polyfills", "legacy", "clone", "util", "gracefulQueue", "previousSymbol", "noop", "publishQueue", "context", "queue", "debug", "m", "fs$close", "close", "fd", "cb", "err", "resetQueue", "fs$closeSync", "closeSync", "patch", "createReadStream", "createWriteStream", "fs$readFile", "readFile", "path", "options", "go$readFile", "startTime", "enqueue", "fs$writeFile", "writeFile", "data", "go$writeFile", "fs$appendFile", "appendFile", "go$appendFile", "fs$copyFile", "copyFile", "src", "dest", "flags", "go$copyFile", "fs$readdir", "readdir", "noReaddirOptionVersions", "go$readdir", "fs$readdirCallback", "files", "legStreams", "ReadStream", "WriteStream", "fs$ReadStream", "ReadStream$open", "fs$WriteStream", "WriteStream$open", "val", "FileReadStream", "FileWriteStream", "that", "open", "fs$open", "mode", "go$open", "elem", "retry", "retryTimer", "now", "i", "fn", "args", "lastTime", "sinceAttempt", "sinceStart", "desiredDelay", "require_fs", "__commonJSMin", "exports", "init_cjs_shims", "u", "fs", "api", "key", "method", "filename", "callback", "resolve", "fd", "buffer", "offset", "length", "position", "reject", "err", "bytesRead", "args", "bytesWritten", "buffers", "require_utils", "__commonJSMin", "exports", "module", "init_cjs_shims", "path", "pth", "error", "require_make_dir", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "checkPath", "getMode", "options", "defaults", "dir", "require_mkdirs", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "_makeDir", "makeDirSync", "makeDir", "require_path_exists", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "fs", "pathExists", "path", "require_utimes", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "u", "utimesMillis", "path", "atime", "mtime", "fd", "closeErr", "e", "utimesMillisSync", "require_stat", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "path", "u", "getStats", "src", "dest", "opts", "statFunc", "file", "err", "srcStat", "destStat", "getStatsSync", "checkPaths", "funcName", "areIdentical", "srcBaseName", "destBaseName", "isSrcSubdir", "errMsg", "checkPathsSync", "checkParentPaths", "srcParent", "destParent", "checkParentPathsSync", "srcArr", "i", "destArr", "cur", "require_copy", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "path", "mkdirs", "pathExists", "utimesMillis", "stat", "copy", "src", "dest", "opts", "srcStat", "destStat", "runFilter", "destParent", "getStatsAndPerformCopy", "onDir", "onFile", "onLink", "copyFile", "fileIsNotWritable", "makeFileWritable", "updatedSrcStat", "srcMode", "items", "item", "srcItem", "destItem", "resolvedSrc", "resolvedDest", "e", "require_copy_sync", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "path", "mkdirsSync", "utimesMillisSync", "stat", "copySync", "src", "dest", "opts", "srcStat", "destStat", "destParent", "getStats", "onDir", "onFile", "onLink", "mayCopyFile", "copyFile", "handleTimestamps", "setDestMode", "srcMode", "fileIsNotWritable", "makeFileWritable", "setDestTimestamps", "updatedSrcStat", "copyDir", "mkDirAndCopy", "item", "copyDirItem", "srcItem", "destItem", "resolvedSrc", "resolvedDest", "err", "copyLink", "require_copy", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "require_remove", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "u", "remove", "path", "callback", "removeSync", "require_empty", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "fs", "path", "mkdir", "remove", "emptyDir", "dir", "items", "item", "emptyDirSync", "require_file", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "path", "fs", "mkdir", "createFile", "file", "stats", "dir", "dirStats", "err", "createFileSync", "require_link", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "path", "fs", "mkdir", "pathExists", "areIdentical", "createLink", "srcpath", "dstpath", "dstStat", "srcStat", "err", "dir", "createLinkSync", "require_symlink_paths", "__commonJSMin", "exports", "module", "init_cjs_shims", "path", "fs", "pathExists", "u", "symlinkPaths", "srcpath", "dstpath", "err", "dstdir", "relativeToDst", "symlinkPathsSync", "require_symlink_type", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "u", "symlinkType", "srcpath", "type", "stats", "symlinkTypeSync", "require_symlink", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "path", "fs", "mkdirs", "mkdirsSync", "symlinkPaths", "symlinkPathsSync", "symlinkType", "symlinkTypeSync", "pathExists", "areIdentical", "createSymlink", "srcpath", "dstpath", "type", "stats", "srcStat", "dstStat", "relative", "toType", "dir", "createSymlinkSync", "require_ensure", "__commonJSMin", "exports", "module", "init_cjs_shims", "createFile", "createFileSync", "createLink", "createLinkSync", "createSymlink", "createSymlinkSync", "require_utils", "__commonJSMin", "exports", "module", "init_cjs_shims", "stringify", "obj", "EOL", "finalEOL", "replacer", "spaces", "EOF", "stripBom", "content", "require_jsonfile", "__commonJSMin", "exports", "module", "init_cjs_shims", "_fs", "universalify", "stringify", "stripBom", "_readFile", "file", "options", "fs", "shouldThrow", "data", "obj", "err", "readFile", "readFileSync", "content", "_writeFile", "str", "writeFile", "writeFileSync", "jsonfile", "require_jsonfile", "__commonJSMin", "exports", "module", "init_cjs_shims", "jsonFile", "require_output_file", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "fs", "path", "mkdir", "pathExists", "outputFile", "file", "data", "encoding", "dir", "outputFileSync", "args", "require_output_json", "__commonJSMin", "exports", "module", "init_cjs_shims", "stringify", "outputFile", "outputJson", "file", "data", "options", "str", "require_output_json_sync", "__commonJSMin", "exports", "module", "init_cjs_shims", "stringify", "outputFileSync", "outputJsonSync", "file", "data", "options", "str", "require_json", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "jsonFile", "require_move", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "path", "copy", "remove", "mkdirp", "pathExists", "stat", "move", "src", "dest", "opts", "overwrite", "srcStat", "isChangingCase", "destParent", "doRename", "err", "moveAcrossDevice", "require_move_sync", "__commonJSMin", "exports", "module", "init_cjs_shims", "fs", "path", "copySync", "removeSync", "mkdirpSync", "stat", "moveSync", "src", "dest", "opts", "overwrite", "srcStat", "isChangingCase", "isParentRoot", "doRename", "parent", "rename", "err", "moveAcrossDevice", "require_move", "__commonJSMin", "exports", "module", "init_cjs_shims", "u", "require_lib", "__commonJSMin", "exports", "module", "init_cjs_shims", "require_picocolors", "__commonJSMin", "exports", "module", "init_cjs_shims", "argv", "env", "isColorSupported", "__require", "formatter", "open", "close", "replace", "input", "string", "index", "replaceClose", "result", "cursor", "createColors", "enabled", "init", "require_base64", "__commonJSMin", "exports", "init_cjs_shims", "intToCharMap", "number", "charCode", "bigA", "bigZ", "littleA", "littleZ", "zero", "nine", "plus", "slash", "littleOffset", "numberOffset", "require_base64_vlq", "__commonJSMin", "exports", "init_cjs_shims", "base64", "VLQ_BASE_SHIFT", "VLQ_BASE", "VLQ_BASE_MASK", "VLQ_CONTINUATION_BIT", "toVLQSigned", "aValue", "fromVLQSigned", "isNegative", "shifted", "encoded", "digit", "vlq", "aStr", "aIndex", "aOutParam", "strLen", "result", "shift", "continuation", "require_util", "__commonJSMin", "exports", "init_cjs_shims", "getArg", "aArgs", "aName", "aDefaultValue", "urlRegexp", "dataUrlRegexp", "urlParse", "aUrl", "match", "urlGenerate", "aParsedUrl", "url", "MAX_CACHED_INPUTS", "lruMemoize", "f", "cache", "input", "i", "temp", "result", "normalize", "aPath", "path", "isAbsolute", "parts", "start", "part", "up", "join", "aRoot", "aPathUrl", "aRootUrl", "joined", "relative", "level", "index", "supportsNullProto", "obj", "identity", "s", "toSetString", "aStr", "isProtoString", "fromSetString", "length", "compareByOriginalPositions", "mappingA", "mappingB", "onlyCompareOriginal", "cmp", "strcmp", "compareByOriginalPositionsNoSource", "compareByGeneratedPositionsDeflated", "onlyCompareGenerated", "compareByGeneratedPositionsDeflatedNoLine", "aStr1", "aStr2", "compareByGeneratedPositionsInflated", "parseSourceMapInput", "str", "computeSourceURL", "sourceRoot", "sourceURL", "sourceMapURL", "parsed", "require_array_set", "__commonJSMin", "exports", "init_cjs_shims", "util", "has", "hasNativeMap", "ArraySet", "aArray", "aAllowDuplicates", "set", "i", "len", "aStr", "sStr", "isDuplicate", "idx", "aIdx", "require_mapping_list", "__commonJSMin", "exports", "init_cjs_shims", "util", "generatedPositionAfter", "mappingA", "mappingB", "lineA", "lineB", "columnA", "columnB", "MappingList", "aCallback", "aThisArg", "aMapping", "require_source_map_generator", "__commonJSMin", "exports", "init_cjs_shims", "base64VLQ", "util", "ArraySet", "MappingList", "SourceMapGenerator", "aArgs", "aSourceMapConsumer", "generatorOps", "sourceRoot", "generator", "mapping", "newMapping", "sourceFile", "sourceRelative", "content", "generated", "original", "source", "name", "aSourceFile", "aSourceContent", "aSourceMapPath", "newSources", "newNames", "aGenerated", "aOriginal", "aSource", "aName", "message", "previousGeneratedColumn", "previousGeneratedLine", "previousOriginalColumn", "previousOriginalLine", "previousName", "previousSource", "result", "next", "nameIdx", "sourceIdx", "mappings", "i", "len", "aSources", "aSourceRoot", "key", "map", "require_binary_search", "__commonJSMin", "exports", "init_cjs_shims", "recursiveSearch", "aLow", "aHigh", "aNeedle", "aHaystack", "aCompare", "aBias", "mid", "cmp", "index", "require_quick_sort", "__commonJSMin", "exports", "init_cjs_shims", "SortTemplate", "comparator", "swap", "ary", "x", "y", "temp", "randomIntInRange", "low", "high", "doQuickSort", "p", "r", "pivotIndex", "i", "pivot", "j", "q", "cloneSort", "template", "sortCache", "start", "require_source_map_consumer", "__commonJSMin", "exports", "init_cjs_shims", "util", "binarySearch", "ArraySet", "base64VLQ", "quickSort", "SourceMapConsumer", "aSourceMap", "aSourceMapURL", "sourceMap", "IndexedSourceMapConsumer", "BasicSourceMapConsumer", "aStr", "index", "c", "aSourceRoot", "aCallback", "aContext", "aOrder", "context", "order", "mappings", "sourceRoot", "boundCallback", "names", "sources", "sourceMapURL", "i", "n", "mapping", "source", "aArgs", "line", "needle", "originalLine", "originalColumn", "version", "sourcesContent", "file", "s", "aSource", "relativeSource", "smc", "generatedMappings", "destGeneratedMappings", "destOriginalMappings", "length", "srcMapping", "destMapping", "Mapping", "compareGenerated", "sortGenerated", "array", "start", "l", "a", "b", "j", "generatedLine", "previousGeneratedColumn", "previousOriginalLine", "previousOriginalColumn", "previousSource", "previousName", "cachedSegments", "temp", "originalMappings", "str", "segment", "end", "value", "subarrayStart", "currentSource", "aNeedle", "aMappings", "aLineName", "aColumnName", "aComparator", "aBias", "nextMapping", "name", "sc", "nullOnMissing", "url", "fileUriAbsPath", "sections", "lastOffset", "offset", "offsetLine", "offsetColumn", "sectionIndex", "section", "cmp", "content", "generatedPosition", "ret", "sectionMappings", "adjustedMapping", "require_source_node", "__commonJSMin", "exports", "init_cjs_shims", "SourceMapGenerator", "util", "REGEX_NEWLINE", "NEWLINE_CODE", "isSourceNode", "SourceNode", "aLine", "aColumn", "aSource", "aChunks", "aName", "aGeneratedCode", "aSourceMapConsumer", "aRelativePath", "node", "remainingLines", "remainingLinesIndex", "shiftNextLine", "lineContents", "getNextLine", "newLine", "lastGeneratedLine", "lastGeneratedColumn", "lastMapping", "mapping", "addMappingWithCode", "nextLine", "code", "sourceFile", "content", "source", "aChunk", "chunk", "i", "aFn", "len", "aSep", "newChildren", "aPattern", "aReplacement", "lastChild", "aSourceFile", "aSourceContent", "sources", "str", "aArgs", "generated", "map", "sourceMappingActive", "lastOriginalSource", "lastOriginalLine", "lastOriginalColumn", "lastOriginalName", "original", "idx", "length", "sourceContent", "require_source_map", "__commonJSMin", "exports", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "isFunction", "input", "dual", "arity", "body", "arguments", "apply", "self", "RangeError", "a", "b", "length", "c", "d", "e", "args", "identity", "a", "constant", "value", "constTrue", "constFalse", "constNull", "constUndefined", "undefined", "constVoid", "pipe", "a", "ab", "bc", "cd", "de", "ef", "fg", "gh", "hi", "arguments", "length", "ret", "i", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "make", "isEquivalent", "self", "that", "mapInput", "dual", "self", "f", "make", "x", "y", "array", "item", "make", "self", "that", "length", "i", "init_cjs_shims", "let_", "map", "dual", "self", "name", "f", "a", "Object", "assign", "bindTo", "bind", "flatMap", "b", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "moduleVersion", "getCurrentVersion", "globalStoreId", "Symbol", "for", "getCurrentVersion", "globalThis", "Map", "globalStore", "globalValue", "id", "compute", "has", "set", "get", "init_cjs_shims", "isString", "input", "isNumber", "isBigInt", "input", "isFunction", "isFunction_", "isRecordOrArray", "input", "isObject", "isFunction", "hasProperty", "dual", "self", "property", "isTagged", "tag", "isNullable", "isIterable", "input", "hasProperty", "Symbol", "iterator", "isPromiseLike", "input", "hasProperty", "isFunction", "then", "init_cjs_shims", "init_cjs_shims", "getBugErrorMessage", "message", "GenKindTypeId", "Symbol", "for", "isGenKind", "u", "isObject", "GenKindImpl", "value", "constructor", "_F", "identity", "_R", "_", "_O", "_E", "iterator", "SingleShotGen", "self", "called", "next", "a", "done", "return", "throw", "e", "adapter", "x", "arguments", "i", "length", "GenKindImpl", "defaultIncHi", "defaultIncLo", "MUL_HI", "MUL_LO", "BIT_53", "BIT_27", "PCGRandom", "_state", "constructor", "seedHi", "seedLo", "incHi", "incLo", "isNullable", "Math", "random", "Int32Array", "_next", "add64", "getState", "setState", "state", "integer", "max", "num", "skew", "number", "hi", "lo", "oldHi", "oldLo", "mul64", "xsHi", "xsLo", "xorshifted", "rot", "rot2", "out", "aHi", "aLo", "bHi", "bLo", "c1", "c0", "imul", "YieldWrapTypeId", "Symbol", "for", "YieldWrap", "#value", "value", "yieldWrapGet", "self", "Error", "getBugErrorMessage", "structuralRegionState", "globalValue", "enabled", "tester", "undefined", "tracingFunction", "name", "wrap", "body", "fn", "internalCall", "randomHashCache", "globalValue", "Symbol", "for", "WeakMap", "symbol", "hash", "self", "structuralRegionState", "enabled", "number", "string", "toString", "String", "Date", "toISOString", "isHash", "random", "Error", "has", "set", "Math", "floor", "Number", "MAX_SAFE_INTEGER", "get", "combine", "b", "optimize", "n", "u", "hasProperty", "Infinity", "h", "str", "i", "length", "charCodeAt", "structureKeys", "o", "keys", "pipe", "structure", "Object", "array", "arr", "cached", "arguments", "defineProperty", "value", "enumerable", "symbol", "Symbol", "for", "equals", "arguments", "length", "self", "compareBoth", "that", "selfType", "isEqual", "hash", "structuralRegionState", "enabled", "tester", "Date", "toISOString", "Array", "isArray", "every", "v", "i", "Object", "getPrototypeOf", "prototype", "keysSelf", "keys", "keysThat", "key", "u", "hasProperty", "equivalence", "init_cjs_shims", "NodeInspectSymbol", "Symbol", "for", "toJSON", "x", "hasProperty", "isFunction", "length", "Array", "isArray", "map", "format", "JSON", "stringify", "BaseProto", "toString", "Class", "toStringUnknown", "u", "whitespace", "stringifyCircular", "String", "obj", "cache", "retVal", "_key", "value", "includes", "undefined", "push", "init_cjs_shims", "init_cjs_shims", "pipeArguments", "self", "args", "length", "ret", "i", "len", "init_cjs_shims", "OP_ASYNC", "OP_COMMIT", "OP_FAILURE", "OP_ON_FAILURE", "OP_ON_SUCCESS", "OP_ON_SUCCESS_AND_FAILURE", "OP_SUCCESS", "OP_SYNC", "OP_TAG", "OP_UPDATE_RUNTIME_FLAGS", "OP_WHILE", "OP_WITH_RUNTIME", "OP_YIELD", "OP_REVERT_FLAGS", "EffectTypeId", "Symbol", "for", "StreamTypeId", "SinkTypeId", "ChannelTypeId", "effectVariance", "_R", "_", "_E", "_A", "_V", "getCurrentVersion", "sinkVariance", "_In", "_L", "channelVariance", "_Env", "_InErr", "_InElem", "_InDone", "_OutErr", "_OutElem", "_OutDone", "EffectPrototype", "symbol", "that", "cached", "random", "iterator", "SingleShotGen", "YieldWrap", "pipe", "pipeArguments", "arguments", "StructuralPrototype", "structure", "selfKeys", "Object", "keys", "thatKeys", "length", "key", "equals", "CommitPrototype", "_op", "OP_COMMIT", "StructuralCommitPrototype", "init_cjs_shims", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_A", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "SomeProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isOption", "isSome", "equals", "value", "cached", "combine", "hash", "_id", "NoneHash", "NoneProto", "isNone", "input", "hasProperty", "fa", "none", "some", "a", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_R", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "RightProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isEither", "isRight", "equals", "right", "combine", "hash", "_id", "LeftProto", "isLeft", "left", "input", "hasProperty", "ma", "a", "getLeft", "self", "none", "some", "getRight", "right", "left", "isLeft", "isRight", "match", "dual", "self", "onLeft", "onRight", "isLeft", "left", "right", "merge", "match", "onLeft", "identity", "onRight", "all", "input", "Symbol", "iterator", "out", "e", "isLeft", "push", "right", "key", "Object", "keys", "init_cjs_shims", "isNonEmptyArray", "self", "length", "Option_exports", "__export", "Do", "TypeId", "all", "andThen", "ap", "as", "asVoid", "bind", "bindTo", "composeK", "contains", "containsWith", "exists", "filter", "filterMap", "firstSomeOf", "flatMap", "flatMapNullable", "flatten", "fromIterable", "fromNullable", "gen", "getEquivalence", "getLeft", "getOrElse", "getOrNull", "getOrThrow", "getOrThrowWith", "getOrUndefined", "getOrder", "getRight", "isNone", "isOption", "isSome", "let_", "lift2", "liftNullable", "liftPredicate", "liftThrowable", "map", "match", "none", "orElse", "orElseEither", "orElseSome", "partitionMap", "product", "productMany", "reduceCompact", "some", "tap", "toArray", "toRefinement", "void_", "zipLeft", "zipRight", "zipWith", "init_cjs_shims", "init_cjs_shims", "make", "compare", "self", "that", "number", "make", "self", "that", "mapInput", "dual", "self", "f", "make", "b1", "b2", "greaterThan", "O", "dual", "self", "that", "TypeId", "Symbol", "for", "none", "some", "isOption", "isNone", "isSome", "match", "dual", "self", "onNone", "onSome", "value", "toRefinement", "f", "a", "fromIterable", "collection", "getRight", "getLeft", "getOrElse", "orElse", "that", "orElseSome", "orElseEither", "map", "right", "left", "firstSomeOf", "out", "fromNullable", "nullableValue", "liftNullable", "getOrNull", "constNull", "getOrUndefined", "constUndefined", "liftThrowable", "getOrThrowWith", "getOrThrow", "Error", "as", "b", "asVoid", "undefined", "void_", "flatMap", "dual", "self", "f", "isNone", "none", "value", "andThen", "a", "b", "isFunction", "isOption", "some", "flatMapNullable", "fromNullable", "flatten", "identity", "zipRight", "that", "composeK", "afb", "bfc", "zipLeft", "tap", "map", "product", "isSome", "productMany", "collection", "out", "o", "push", "all", "input", "Symbol", "iterator", "key", "Object", "keys", "zipWith", "ap", "reduceCompact", "oa", "toArray", "partitionMap", "e", "isLeft", "left", "right", "filterMap", "filter", "predicate", "getEquivalence", "isEquivalent", "make", "x", "y", "getOrder", "O", "lift2", "liftPredicate", "containsWith", "_equivalence", "equivalence", "contains", "exists", "refinement", "bindTo", "let_", "bind", "map", "flatMap", "Do", "some", "adapter", "gen", "args", "f", "length", "iterator", "state", "next", "done", "value", "current", "isGenKind", "yieldWrapGet", "isNone", "init_cjs_shims", "make", "elements", "allocate", "n", "Array", "makeBy", "f", "max", "Math", "floor", "out", "i", "fromIterable", "collection", "Array", "isArray", "from", "ensure", "self", "prepend", "dual", "self", "head", "append", "dual", "self", "last", "appendAll", "that", "fromIterable", "concat", "isArray", "Array", "isEmptyArray", "self", "length", "isEmptyReadonlyArray", "isNonEmptyArray", "isNonEmptyReadonlyArray", "isOutOfBound", "i", "as", "length", "clamp", "Math", "floor", "min", "max", "get", "dual", "self", "index", "none", "some", "unsafeGet", "Error", "head", "get", "headNonEmpty", "unsafeGet", "last", "self", "isNonEmptyReadonlyArray", "some", "lastNonEmpty", "none", "length", "tailNonEmpty", "self", "slice", "spanIndex", "self", "predicate", "i", "a", "span", "dual", "splitAt", "drop", "n", "input", "fromIterable", "slice", "clamp", "length", "reverse", "self", "Array", "from", "sort", "dual", "O", "out", "zip", "dual", "self", "that", "zipWith", "make", "f", "as", "fromIterable", "bs", "isNonEmptyReadonlyArray", "out", "headNonEmpty", "len", "Math", "min", "length", "i", "_equivalence", "equivalence", "splitAt", "dual", "self", "n", "input", "Array", "from", "_n", "Math", "floor", "isNonEmptyReadonlyArray", "splitNonEmptyAt", "max", "length", "copy", "prepend", "slice", "headNonEmpty", "copy", "self", "slice", "unionWith", "dual", "self", "that", "isEquivalent", "a", "fromIterable", "b", "isNonEmptyReadonlyArray", "dedupeWith", "appendAll", "union", "_equivalence", "empty", "of", "a", "map", "dual", "self", "f", "flatMap", "isEmptyReadonlyArray", "out", "i", "length", "inner", "j", "push", "flatten", "identity", "filterMap", "as", "fromIterable", "o", "isSome", "value", "getSomes", "filterMap", "identity", "reduce", "dual", "self", "b", "f", "fromIterable", "a", "i", "reduceRight", "unfold", "b", "f", "out", "next", "o", "isSome", "a", "value", "push", "getEquivalence", "array", "dedupeWith", "dual", "self", "isEquivalent", "input", "fromIterable", "isNonEmptyReadonlyArray", "out", "headNonEmpty", "rest", "tailNonEmpty", "r", "every", "a", "push", "dedupe", "equivalence", "join", "dual", "self", "sep", "fromIterable", "init_cjs_shims", "not", "self", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "TagTypeId", "Symbol", "for", "STMSymbolKey", "STMTypeId", "TagProto", "EffectPrototype", "_tag", "_op", "effectVariance", "_Service", "_", "_Identifier", "toString", "format", "toJSON", "_id", "key", "stack", "NodeInspectSymbol", "of", "self", "context", "make", "makeGenericTag", "limit", "Error", "stackTraceLimit", "creationError", "tag", "Object", "create", "defineProperty", "get", "TypeId", "Symbol", "for", "ContextProto", "_Services", "_", "symbol", "that", "isContext", "unsafeMap", "size", "k", "keys", "has", "equals", "get", "cached", "number", "pipe", "pipeArguments", "arguments", "toString", "format", "toJSON", "_id", "services", "Array", "from", "map", "NodeInspectSymbol", "makeContext", "context", "Object", "create", "serviceNotFoundError", "tag", "error", "Error", "key", "String", "stack", "lines", "split", "length", "afterAt", "match", "message", "splice", "join", "u", "hasProperty", "_empty", "makeContext", "Map", "empty", "make", "tag", "service", "key", "add", "dual", "self", "map", "unsafeMap", "set", "unsafeGet", "has", "serviceNotFoundError", "get", "getOption", "some", "none", "merge", "that", "s", "GenericTag", "makeGenericTag", "isContext", "empty", "make", "add", "get", "unsafeGet", "getOption", "merge", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "TypeId", "Symbol", "for", "copy", "src", "srcPos", "dest", "destPos", "len", "i", "Math", "min", "length", "emptyArray", "getEquivalence", "isEquivalent", "make", "self", "that", "toReadonlyArray", "every", "value", "unsafeGet", "_equivalence", "equals", "ChunkProto", "_A", "_", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "symbol", "isChunk", "cached", "array", "iterator", "backing", "_tag", "pipe", "pipeArguments", "arguments", "makeChunk", "chunk", "Object", "create", "depth", "left", "right", "max", "_empty", "u", "hasProperty", "empty", "as", "of", "unsafeFromNonEmptyArray", "a", "fromIterable", "copyToArray", "initial", "j", "toReadonlyArray_", "self", "backing", "_tag", "emptyArray", "array", "arr", "Array", "length", "copyToArray", "left", "_empty", "right", "depth", "toReadonlyArray", "reverseChunk", "makeChunk", "reverse", "unsafeFromArray", "get", "dual", "index", "none", "some", "unsafeGet", "unsafeFromNonEmptyArray", "Error", "a", "chunk", "offset", "append", "appendAll", "of", "prepend", "elem", "drop", "dual", "self", "n", "length", "_empty", "backing", "_tag", "makeChunk", "chunk", "offset", "left", "right", "appendAll", "dual", "self", "that", "backing", "_tag", "diff", "depth", "Math", "abs", "makeChunk", "left", "right", "nr", "nrr", "nl", "nll", "isEmpty", "self", "length", "isNonEmpty", "head", "get", "unsafeHead", "unsafeGet", "headNonEmpty", "tailNonEmpty", "self", "drop", "init_cjs_shims", "TypeId", "Symbol", "for", "bigint0", "BigInt", "bigint24", "bigint60", "bigint1e3", "bigint1e6", "bigint1e9", "DURATION_REGEX", "decode", "input", "isDuration", "isNumber", "millis", "isBigInt", "nanos", "Array", "isArray", "length", "isString", "lastIndex", "match", "exec", "_", "valueStr", "unit", "value", "Number", "micros", "seconds", "minutes", "hours", "days", "weeks", "Error", "zeroValue", "_tag", "millis", "infinityValue", "DurationProto", "TypeId", "symbol", "cached", "structure", "value", "that", "isDuration", "equals", "toString", "format", "toJSON", "_id", "hrtime", "toHrTime", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "input", "duration", "Object", "create", "isNumber", "isNaN", "Number", "isFinite", "isInteger", "nanos", "BigInt", "Math", "round", "bigint0", "u", "hasProperty", "zero", "make", "nanos", "make", "micros", "bigint1e3", "millis", "seconds", "minutes", "hours", "days", "weeks", "toMillis", "self", "_self", "decode", "value", "_tag", "Infinity", "Number", "unsafeToNanos", "self", "_self", "decode", "value", "_tag", "Error", "nanos", "BigInt", "Math", "round", "millis", "toHrTime", "Infinity", "Number", "bigint1e9", "floor", "matchWith", "dual", "self", "that", "options", "_self", "decode", "_that", "value", "_tag", "onMillis", "toMillis", "selfNanos", "nanos", "BigInt", "Math", "round", "millis", "thatNanos", "onNanos", "Equivalence", "self", "that", "matchWith", "onMillis", "onNanos", "greaterThanOrEqualTo", "dual", "self", "that", "matchWith", "onMillis", "onNanos", "equals", "Equivalence", "decode", "format", "duration", "parts", "value", "_tag", "nanos", "unsafeToNanos", "bigint1e6", "push", "ms", "bigint1e3", "bigint0", "sec", "bigint60", "min", "hr", "bigint24", "days", "reverse", "join", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "BUCKET_SIZE", "Math", "pow", "SIZE", "MASK", "MAX_INDEX_NODE", "MIN_ARRAY_NODE", "popcount", "x", "hashFragment", "shift", "h", "MASK", "toBitmap", "fromBitmap", "bitmap", "bit", "init_cjs_shims", "init_cjs_shims", "make", "value", "previous", "init_cjs_shims", "arrayUpdate", "mutate", "at", "v", "arr", "out", "len", "length", "Array", "i", "arraySpliceOut", "newLen", "g", "arraySpliceIn", "EmptyNode", "_tag", "modify", "edit", "_shift", "f", "hash", "key", "size", "v", "none", "isNone", "value", "LeafNode", "isEmptyNode", "a", "isTagged", "isLeafNode", "node", "canEditNode", "constructor", "shift", "equals", "mergeLeaves", "CollisionNode", "children", "canEdit", "list", "updateCollisionList", "length", "mutate", "len", "i", "child", "newValue", "arraySpliceOut", "arrayUpdate", "IndexedNode", "mask", "frag", "hashFragment", "bit", "toBitmap", "indx", "fromBitmap", "exists", "_newChild", "SIZE", "MAX_INDEX_NODE", "expand", "arraySpliceIn", "current", "bitmap", "newChildren", "ArrayNode", "count", "newChild", "MIN_ARRAY_NODE", "pack", "removed", "elements", "Array", "g", "elem", "subNodes", "arr", "mergeLeavesInner", "h1", "n1", "h2", "n2", "subH1", "subH2", "stack", "currentShift", "res", "make", "final", "previous", "HashMapSymbolKey", "HashMapTypeId", "Symbol", "for", "HashMapProto", "iterator", "HashMapIterator", "k", "v", "symbol", "hash", "item", "pipe", "combine", "cached", "that", "isHashMap", "_size", "elem", "getHash", "isNone", "equals", "value", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "makeImpl", "editable", "edit", "root", "size", "Object", "create", "_editable", "_edit", "_root", "f", "constructor", "visitLazy", "undefined", "next", "done", "v0", "applyCont", "cont", "visitLazyChildren", "none", "node", "_tag", "isSome", "some", "key", "children", "length", "len", "i", "child", "isEmptyNode", "_empty", "EmptyNode", "empty", "fromIterable", "entries", "map", "beginMutation", "empty", "entry", "set", "endMutation", "isHashMap", "u", "hasProperty", "HashMapTypeId", "isEmpty", "self", "isEmptyNode", "_root", "get", "dual", "key", "getHash", "hash", "node", "shift", "_tag", "equals", "value", "none", "children", "i", "len", "length", "child", "frag", "hashFragment", "bit", "toBitmap", "mask", "fromBitmap", "SIZE", "has", "dual", "self", "key", "isSome", "getHash", "hash", "set", "dual", "self", "key", "value", "modifyAt", "some", "setTree", "newRoot", "newSize", "_editable", "_root", "_size", "makeImpl", "_edit", "keys", "HashMapIterator", "size", "self", "_size", "beginMutation", "makeImpl", "_edit", "_root", "endMutation", "_editable", "mutate", "dual", "f", "transient", "modifyAt", "key", "modifyHash", "hash", "value", "newRoot", "modify", "NaN", "pipe", "setTree", "remove", "dual", "self", "key", "modifyAt", "none", "map", "dual", "self", "f", "reduce", "empty", "value", "key", "set", "forEach", "dual", "self", "f", "reduce", "_", "value", "key", "zero", "root", "_root", "_tag", "isSome", "toVisit", "children", "pop", "i", "len", "length", "child", "isEmptyNode", "push", "HashSetSymbolKey", "HashSetTypeId", "Symbol", "for", "HashSetProto", "iterator", "keys", "_keyMap", "symbol", "cached", "combine", "hash", "that", "isHashSet", "size", "equals", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "makeImpl", "keyMap", "set", "Object", "create", "u", "hasProperty", "_empty", "empty", "fromIterable", "elements", "beginMutation", "value", "add", "endMutation", "make", "has", "dual", "self", "size", "self", "_keyMap", "beginMutation", "makeImpl", "endMutation", "_editable", "mutate", "dual", "f", "transient", "add", "value", "set", "remove", "difference", "that", "union", "dual", "self", "that", "mutate", "empty", "set", "forEach", "value", "add", "forEach", "dual", "self", "f", "_keyMap", "_", "k", "reduce", "zero", "z", "a", "empty", "fromIterable", "make", "has", "size", "add", "remove", "difference", "union", "reduce", "init_cjs_shims", "TypeId", "Symbol", "for", "MutableRefProto", "toString", "format", "toJSON", "_id", "current", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "value", "ref", "Object", "create", "compareAndSet", "dual", "self", "oldValue", "newValue", "equals", "get", "self", "current", "set", "dual", "self", "value", "current", "FiberIdSymbolKey", "FiberIdTypeId", "Symbol", "for", "OP_NONE", "OP_RUNTIME", "OP_COMPOSITE", "emptyHash", "string", "None", "_tag", "id", "startTimeMillis", "symbol", "that", "isFiberId", "toString", "format", "toJSON", "_id", "NodeInspectSymbol", "Runtime", "constructor", "cached", "Composite", "left", "right", "_hash", "pipe", "combine", "hash", "equals", "none", "isFiberId", "self", "hasProperty", "FiberIdTypeId", "combine", "dual", "self", "that", "_tag", "OP_NONE", "Composite", "ids", "self", "_tag", "OP_NONE", "empty", "OP_RUNTIME", "make", "id", "OP_COMPOSITE", "pipe", "left", "union", "right", "_fiberCounter", "globalValue", "Symbol", "for", "threadName", "self", "Array", "from", "ids", "map", "n", "join", "unsafeMake", "id", "get", "_fiberCounter", "pipe", "set", "Runtime", "Date", "now", "none", "combine", "threadName", "unsafeMake", "init_cjs_shims", "empty", "fromIterable", "isEmpty", "get", "set", "keys", "size", "mutate", "modifyAt", "map", "forEach", "reduce", "init_cjs_shims", "TypeId", "Symbol", "for", "toArray", "self", "fromIterable", "getEquivalence", "isEquivalent", "mapInput", "_equivalence", "equals", "ConsProto", "_tag", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "symbol", "that", "isList", "cached", "array", "iterator", "done", "next", "return", "value", "head", "tail", "pipe", "pipeArguments", "arguments", "makeCons", "cons", "Object", "create", "NilHash", "string", "NilProto", "undefined", "_Nil", "u", "hasProperty", "isNil", "isCons", "nil", "_Nil", "cons", "head", "tail", "makeCons", "empty", "of", "value", "appendAll", "dual", "self", "that", "prependAll", "prepend", "element", "cons", "prefix", "isNil", "result", "makeCons", "head", "curr", "tail", "temp", "reduce", "dual", "self", "zero", "f", "acc", "these", "isNil", "head", "tail", "reverse", "self", "result", "empty", "these", "isNil", "prepend", "head", "tail", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "ArrayProto", "Object", "assign", "create", "Array", "prototype", "symbol", "cached", "array", "that", "isArray", "length", "every", "v", "i", "equals", "Structural", "args", "StructuralPrototype", "struct", "as", "init_cjs_shims", "ContextPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AddServiceProto", "makeAddService", "key", "service", "RemoveServiceProto", "makeRemoveService", "UpdateServiceProto", "makeUpdateService", "update", "diff", "oldValue", "newValue", "missingServices", "Map", "unsafeMap", "patch", "tag", "newService", "entries", "has", "old", "get", "delete", "equals", "combine", "dual", "self", "that", "context", "wasServiceUpdated", "patches", "of", "updatedContext", "isNonEmpty", "head", "headNonEmpty", "tail", "tailNonEmpty", "set", "prepend", "makeContext", "map", "s", "init_cjs_shims", "HashSetPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Key", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AddProto", "makeAdd", "value", "RemoveProto", "makeRemove", "diff", "oldValue", "newValue", "removed", "patch", "reduce", "set", "has", "remove", "combine", "dual", "self", "that", "patches", "of", "isNonEmpty", "head", "headNonEmpty", "tail", "tailNonEmpty", "prepend", "add", "init_cjs_shims", "ReadonlyArrayPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AppendProto", "makeAppend", "values", "SliceProto", "makeSlice", "from", "until", "UpdateProto", "makeUpdate", "index", "patch", "diff", "options", "i", "oldValue", "length", "newValue", "oldElement", "newElement", "valuePatch", "differ", "equals", "combine", "drop", "dual", "self", "that", "readonlyArray", "slice", "patches", "of", "isNonEmptyArray", "head", "headNonEmpty", "tail", "tailNonEmpty", "unshift", "value", "push", "DifferTypeId", "Symbol", "for", "DifferProto", "_P", "identity", "_V", "make", "params", "differ", "Object", "create", "empty", "diff", "combine", "patch", "environment", "first", "second", "oldValue", "newValue", "hashSet", "make", "empty", "combine", "first", "second", "diff", "oldValue", "newValue", "patch", "readonlyArray", "differ", "make", "empty", "combine", "first", "second", "diff", "oldValue", "newValue", "patch", "update", "updateWith", "_", "a", "f", "make", "empty", "identity", "combine", "first", "second", "diff", "oldValue", "newValue", "equals", "constant", "patch", "init_cjs_shims", "BIT_MASK", "BIT_SHIFT", "active", "patch", "enabled", "make", "empty", "enable", "flag", "disable", "exclude", "dual", "self", "flag", "make", "active", "enabled", "andThen", "dual", "self", "that", "invert", "n", "BIT_MASK", "None", "Interruption", "OpSupervision", "RuntimeMetrics", "WindDown", "CooperativeYielding", "cooperativeYielding", "self", "isEnabled", "CooperativeYielding", "enable", "dual", "self", "flag", "interruptible", "self", "interruption", "windDown", "isEnabled", "Interruption", "isEnabled", "dual", "self", "flag", "make", "flags", "reduce", "a", "b", "none", "None", "runtimeMetrics", "self", "isEnabled", "RuntimeMetrics", "windDown", "self", "isEnabled", "WindDown", "diff", "dual", "self", "that", "make", "patch", "invert", "active", "enabled", "differ", "make", "empty", "diff", "oldValue", "newValue", "combine", "first", "second", "andThen", "patch", "_patch", "empty", "enable", "disable", "exclude", "init_cjs_shims", "empty", "_tag", "par", "self", "that", "left", "right", "seq", "single", "dataSource", "blockedRequest", "flatten", "self", "current", "of", "updated", "empty", "parallel", "sequential", "reduce", "parallelCollectionEmpty", "blockedRequest", "par", "seq", "step", "parallelCollectionCombine", "appendAll", "merge", "isNil", "reverse", "Error", "requests", "stack", "_tag", "head", "tail", "cons", "right", "left", "l", "r", "parallelCollectionAdd", "parallelCollectionToSequentialCollection", "parallelCollectionIsEmpty", "seqHeadKeys", "sequentialCollectionKeys", "parKeys", "parallelCollectionKeys", "length", "equals", "sequentialCollectionCombine", "EntryTypeId", "Symbol", "for", "EntryImpl", "request", "result", "listeners", "ownerId", "state", "blockedRequestVariance", "constructor", "_R", "_", "makeEntry", "options", "EntryImpl", "request", "result", "listeners", "ownerId", "state", "RequestBlockParallelTypeId", "Symbol", "for", "parallelVariance", "_R", "_", "ParallelImpl", "map", "constructor", "parallelCollectionEmpty", "empty", "parallelCollectionAdd", "self", "blockedRequest", "ParallelImpl", "modifyAt", "map", "dataSource", "_", "orElseSome", "append", "of", "parallelCollectionCombine", "that", "reduce", "value", "key", "set", "match", "get", "onNone", "onSome", "other", "appendAll", "parallelCollectionIsEmpty", "isEmpty", "parallelCollectionKeys", "Array", "from", "keys", "parallelCollectionToSequentialCollection", "sequentialCollectionMake", "x", "SequentialCollectionTypeId", "Symbol", "for", "sequentialVariance", "_R", "SequentialImpl", "constructor", "sequentialCollectionCombine", "empty", "a", "sequentialCollectionKeys", "self", "Array", "from", "keys", "map", "sequentialCollectionToChunk", "init_cjs_shims", "init_cjs_shims", "OP_DIE", "OP_EMPTY", "OP_FAIL", "OP_INTERRUPT", "OP_PARALLEL", "OP_SEQUENTIAL", "CauseSymbolKey", "CauseTypeId", "Symbol", "for", "variance", "_E", "_", "proto", "symbol", "pipe", "hash", "combine", "flattenCause", "cached", "that", "isCause", "causeEquals", "pipeArguments", "arguments", "toJSON", "_tag", "_id", "defect", "fiberId", "failure", "error", "left", "right", "toString", "pretty", "NodeInspectSymbol", "empty", "o", "Object", "create", "OP_EMPTY", "fail", "OP_FAIL", "die", "OP_DIE", "interrupt", "OP_INTERRUPT", "parallel", "OP_PARALLEL", "sequential", "OP_SEQUENTIAL", "u", "hasProperty", "isDieType", "self", "_tag", "OP_DIE", "isEmpty", "self", "_tag", "OP_EMPTY", "reduce", "acc", "cause", "some", "OP_DIE", "OP_FAIL", "OP_INTERRUPT", "none", "isInterrupted", "self", "isSome", "interruptOption", "isInterruptedOnly", "reduceWithContext", "undefined", "IsInterruptedOnlyCauseReducer", "failures", "reverse", "reduce", "empty", "list", "cause", "_tag", "OP_FAIL", "some", "pipe", "prepend", "error", "none", "defects", "OP_DIE", "defect", "interruptors", "set", "OP_INTERRUPT", "add", "fiberId", "failureOption", "find", "failureOrCause", "option", "right", "left", "value", "interruptOption", "self", "find", "cause", "_tag", "OP_INTERRUPT", "some", "fiberId", "none", "keepDefects", "match", "onEmpty", "onFail", "onDie", "defect", "die", "onInterrupt", "onSequential", "left", "right", "isSome", "sequential", "value", "isNone", "onParallel", "parallel", "keepDefectsAndElectFailures", "failure", "stripFailures", "self", "match", "onEmpty", "empty", "onFail", "onDie", "defect", "die", "onInterrupt", "fiberId", "interrupt", "onSequential", "sequential", "onParallel", "parallel", "electFailures", "failure", "left", "right", "flatMap", "dual", "self", "f", "match", "onEmpty", "empty", "onFail", "error", "onDie", "defect", "die", "onInterrupt", "fiberId", "interrupt", "onSequential", "left", "right", "sequential", "onParallel", "parallel", "flatten", "identity", "causeEquals", "left", "right", "leftStack", "of", "rightStack", "isNonEmpty", "leftParallel", "leftSequential", "pipe", "headNonEmpty", "reduce", "empty", "parallel", "sequential", "cause", "par", "seq", "evaluateCause", "some", "union", "appendAll", "rightParallel", "rightSequential", "equals", "flattenCause", "flattenCauseLoop", "causes", "flattened", "updated", "size", "prepend", "isEmpty", "reverse", "Error", "getBugErrorMessage", "find", "dual", "self", "pf", "stack", "length", "item", "pop", "option", "_tag", "OP_SEQUENTIAL", "OP_PARALLEL", "push", "none", "evaluateCause", "self", "cause", "stack", "_parallel", "empty", "_sequential", "undefined", "_tag", "OP_EMPTY", "length", "pop", "OP_FAIL", "add", "make", "error", "OP_DIE", "defect", "OP_INTERRUPT", "fiberId", "OP_SEQUENTIAL", "left", "right", "sequential", "OP_PARALLEL", "parallel", "prepend", "push", "Error", "getBugErrorMessage", "IsInterruptedOnlyCauseReducer", "emptyCase", "constTrue", "failCase", "constFalse", "dieCase", "interruptCase", "sequentialCase", "_", "left", "right", "parallelCase", "OP_SEQUENTIAL_CASE", "OP_PARALLEL_CASE", "match", "dual", "self", "onDie", "onEmpty", "onFail", "onInterrupt", "onParallel", "onSequential", "reduceWithContext", "emptyCase", "failCase", "_", "error", "dieCase", "defect", "interruptCase", "fiberId", "sequentialCase", "left", "right", "parallelCase", "reduce", "zero", "pf", "accumulator", "cause", "causes", "undefined", "option", "isSome", "value", "_tag", "OP_SEQUENTIAL", "push", "OP_PARALLEL", "length", "pop", "context", "reducer", "input", "output", "OP_EMPTY", "OP_FAIL", "OP_DIE", "OP_INTERRUPT", "either", "Error", "pretty", "options", "isInterruptedOnly", "prettyErrors", "map", "e", "renderErrorCause", "stack", "join", "prefix", "lines", "split", "i", "len", "PrettyError", "globalThis", "span", "constructor", "originalError", "originalErrorIsObject", "prevLimit", "stackTraceLimit", "prettyErrorMessage", "message", "name", "spanSymbol", "Object", "keys", "forEach", "key", "prettyErrorStack", "u", "hasProperty", "isFunction", "prototype", "toString", "Array", "JSON", "stringify", "locationRegex", "spanToTrace", "globalValue", "WeakMap", "out", "startsWith", "slice", "includes", "replace", "current", "stackFn", "get", "locationMatch", "location", "getOrUndefined", "parent", "Symbol", "for", "unknownError", "l", "r", "init_cjs_shims", "init_cjs_shims", "OP_STATE_PENDING", "OP_STATE_DONE", "DeferredSymbolKey", "DeferredTypeId", "Symbol", "for", "deferredVariance", "_E", "_", "_A", "pending", "joiners", "_tag", "OP_STATE_PENDING", "done", "effect", "OP_STATE_DONE", "init_cjs_shims", "SingleShotGen", "self", "called", "constructor", "next", "a", "value", "done", "return", "throw", "e", "Symbol", "iterator", "init_cjs_shims", "TracerTypeId", "Symbol", "for", "make", "options", "tracerTag", "GenericTag", "spanTag", "randomHexString", "characters", "charactersLength", "length", "result", "i", "charAt", "Math", "floor", "random", "NativeSpan", "name", "parent", "context", "links", "startTime", "kind", "_tag", "spanId", "traceId", "sampled", "status", "attributes", "events", "constructor", "Map", "value", "end", "endTime", "exit", "attribute", "key", "set", "event", "push", "nativeTracer", "span", "f", "addSpanStackTrace", "options", "captureStackTrace", "undefined", "limit", "Error", "stackTraceLimit", "traceError", "cache", "stack", "split", "trim", "EffectErrorSymbolKey", "EffectErrorTypeId", "Symbol", "for", "isEffectError", "u", "hasProperty", "makeEffectError", "cause", "_tag", "blocked", "blockedRequests", "_continue", "effect", "EffectPrimitive", "effect_instruction_i0", "effect_instruction_i1", "runRequestBlock", "EffectTypeId", "RevertFlags", "patch", "op", "_op", "OP_REVERT_FLAGS", "constructor", "undefined", "effect_instruction_i2", "trace", "effectVariance", "symbol", "that", "cached", "random", "pipe", "pipeArguments", "arguments", "toJSON", "_id", "toString", "format", "NodeInspectSymbol", "iterator", "SingleShotGen", "YieldWrap", "EffectPrimitiveFailure", "exitIsExit", "equals", "string", "combine", "hash", "EffectPrimitiveSuccess", "value", "isEffect", "withFiberRuntime", "withRuntime", "OP_WITH_RUNTIME", "acquireUseRelease", "dual", "acquire", "use", "release", "uninterruptibleMask", "restore", "flatMap", "a", "exit", "suspend", "matchCauseEffect", "onFailure", "OP_FAILURE", "failCause", "parallel", "OP_SUCCESS", "onSuccess", "as", "self", "succeed", "asVoid", "custom", "wrapper", "OP_COMMIT", "length", "commit", "Error", "getBugErrorMessage", "unsafeAsync", "register", "blockingOn", "none", "OP_ASYNC", "cancelerRef", "resume", "onInterrupt", "_", "async", "backingResume", "pendingEffect", "proxyResume", "controllerRef", "AbortController", "internalCall", "signal", "abort", "void_", "catchAllCause", "f", "OP_ON_FAILURE", "catchAll", "matchEffect", "catchIf", "predicate", "either", "failureOrCause", "left", "right", "catchSome", "pf", "getOrElse", "checkInterruptible", "status", "interruption", "runtimeFlags", "spanSymbol", "originalSymbol", "capture", "obj", "span", "isSome", "Proxy", "has", "target", "p", "spanSymbol", "originalSymbol", "get", "value", "die", "defect", "isObject", "withFiberRuntime", "fiber", "failCause", "currentSpanFromFiber", "dieMessage", "message", "failCauseSync", "RuntimeException", "dieSync", "evaluate", "flatMap", "sync", "either", "self", "matchEffect", "onFailure", "e", "succeed", "left", "onSuccess", "a", "right", "exit", "matchCause", "exitFailCause", "exitSucceed", "fail", "error", "failSync", "cause", "effect", "EffectPrimitiveFailure", "OP_FAILURE", "effect_instruction_i0", "fiberId", "state", "id", "fiberIdWith", "f", "dual", "EffectPrimitive", "OP_ON_SUCCESS", "effect_instruction_i1", "andThen", "b", "isEffect", "isPromiseLike", "async", "resume", "then", "UnknownException", "step", "flatten", "identity", "flip", "options", "matchCauseEffect", "OP_ON_SUCCESS_AND_FAILURE", "effect_instruction_i2", "defects", "length", "electFailures", "failures", "unsafeHead", "forEachSequential", "suspend", "arr", "fromIterable", "ret", "allocate", "i", "as", "whileLoop", "while", "body", "forEachSequentialDiscard", "if_", "args", "onTrue", "onFalse", "interrupt", "interruptWith", "interruptible", "OP_UPDATE_RUNTIME_FLAGS", "enable", "Interruption", "interruptibleMask", "custom", "oldFlags", "interruption", "internalCall", "uninterruptible", "intoDeferred", "deferred", "uninterruptibleMask", "restore", "deferredDone", "map", "mapBoth", "mapError", "failureOrCause", "_tag", "onError", "cleanup", "onExit", "exitIsSuccess", "void_", "cause1", "result", "cause2", "sequential", "success", "zipRight", "onInterrupt", "exitMatch", "isInterruptedOnly", "asVoid", "interruptors", "orElse", "that", "attemptOrElse", "orDie", "orDieWith", "partitionMap", "elements", "reduceRight", "lefts", "rights", "current", "empty", "runtimeFlags", "_", "status", "EffectPrimitiveSuccess", "OP_SUCCESS", "OP_SYNC", "tap", "transplant", "scopeOverride", "getFiberRef", "currentForkScopeOverride", "scope", "pipe", "getOrElse", "fiberRefLocally", "some", "getOrThrow", "keepDefectsAndElectFailures", "disable", "updateRuntimeFlags", "patch", "effect", "EffectPrimitive", "OP_UPDATE_RUNTIME_FLAGS", "effect_instruction_i0", "effect_instruction_i1", "whenEffect", "dual", "self", "condition", "flatMap", "b", "pipe", "map", "some", "succeed", "none", "whileLoop", "options", "OP_WHILE", "while", "body", "effect_instruction_i2", "step", "withConcurrency", "concurrency", "fiberRefLocally", "currentConcurrency", "withRequestBatching", "requestBatching", "currentRequestBatching", "withRuntimeFlags", "update", "withTracerEnabled", "enabled", "currentTracerEnabled", "withTracerTiming", "currentTracerTimingEnabled", "yieldNow", "OP_YIELD", "priority", "withSchedulingPriority", "zip", "that", "a", "zipLeft", "dual", "self", "that", "flatMap", "a", "as", "zipRight", "zipWith", "f", "map", "b", "never", "async", "interval", "setInterval", "sync", "clearInterval", "interruptFiber", "fiberId", "pipe", "interruptAsFiber", "interruptAsFork", "await", "logLevelAll", "_tag", "syslog", "label", "ordinal", "Number", "MIN_SAFE_INTEGER", "pipeArguments", "arguments", "logLevelFatal", "logLevelError", "logLevelWarning", "logLevelInfo", "logLevelDebug", "logLevelTrace", "logLevelNone", "MAX_SAFE_INTEGER", "FiberRefSymbolKey", "FiberRefTypeId", "Symbol", "for", "fiberRefVariance", "_A", "_", "fiberRefGet", "self", "fiberRefModify", "a", "fiberRefGetWith", "dual", "self", "f", "flatMap", "fiberRefGet", "fiberRefSet", "value", "fiberRefModify", "fiberRefModify", "dual", "self", "f", "withFiberRuntime", "state", "b", "a", "getFiberRef", "setFiberRef", "succeed", "RequestResolverSymbolKey", "RequestResolverTypeId", "Symbol", "for", "requestResolverVariance", "_A", "_", "_R", "RequestResolverImpl", "runAll", "target", "constructor", "symbol", "cached", "hash", "random", "that", "isRequestResolver", "equals", "identified", "ids", "fromIterable", "pipe", "pipeArguments", "arguments", "u", "hasProperty", "fiberRefLocally", "dual", "use", "self", "value", "acquireUseRelease", "zipLeft", "fiberRefGet", "fiberRefSet", "oldValue", "fiberRefLocallyWith", "f", "fiberRefGetWith", "a", "fiberRefUnsafeMake", "initial", "options", "fiberRefUnsafeMakePatch", "differ", "update", "fork", "identity", "join", "fiberRefUnsafeMakeHashSet", "hashSet", "empty", "fiberRefUnsafeMakeReadonlyArray", "readonlyArray", "fiberRefUnsafeMakeContext", "environment", "FiberRefTypeId", "fiberRefVariance", "diff", "newValue", "combine", "first", "second", "patch", "_", "n", "pipe", "pipeArguments", "arguments", "fiberRefUnsafeMakeRuntimeFlags", "currentContext", "globalValue", "Symbol", "for", "currentSchedulingPriority", "currentMaxOpsBeforeYield", "currentLogAnnotations", "currentLogLevel", "logLevelInfo", "currentLogSpan", "withSchedulingPriority", "scheduler", "withMaxOpsBeforeYield", "currentConcurrency", "currentRequestBatching", "currentUnhandledErrorLogLevel", "some", "logLevelDebug", "withUnhandledErrorLogLevel", "level", "currentMetricLabels", "metricLabels", "currentForkScopeOverride", "none", "parent", "currentInterruptedCause", "currentTracerEnabled", "currentTracerTimingEnabled", "currentTracerSpanAnnotations", "currentTracerSpanLinks", "ScopeTypeId", "CloseableScopeTypeId", "scopeAddFinalizer", "finalizer", "addFinalizer", "asVoid", "scopeAddFinalizerExit", "scopeClose", "exit", "close", "scopeFork", "strategy", "YieldableError", "globalThis", "Error", "commit", "fail", "toJSON", "NodeInspectSymbol", "toString", "prototype", "stack", "split", "slice", "join", "pretty", "renderErrorCause", "Object", "assign", "StructuralCommitPrototype", "makeException", "proto", "tag", "Base", "_tag", "name", "RuntimeExceptionTypeId", "Symbol", "for", "RuntimeException", "InterruptedExceptionTypeId", "Symbol", "for", "InterruptedException", "makeException", "isInterruptedException", "u", "hasProperty", "IllegalArgumentExceptionTypeId", "IllegalArgumentException", "NoSuchElementExceptionTypeId", "Symbol", "for", "NoSuchElementException", "makeException", "isNoSuchElementException", "u", "hasProperty", "InvalidPubSubCapacityExceptionTypeId", "InvalidPubSubCapacityException", "ExceededCapacityExceptionTypeId", "ExceededCapacityException", "TimeoutExceptionTypeId", "Symbol", "for", "TimeoutException", "makeException", "timeoutExceptionFromDuration", "duration", "format", "UnknownExceptionTypeId", "Symbol", "for", "UnknownException", "YieldableError", "cause", "_tag", "error", "constructor", "message", "Object", "assign", "prototype", "name", "exitIsExit", "u", "isEffect", "_tag", "exitIsFailure", "self", "exitIsSuccess", "exitAs", "dual", "self", "value", "_tag", "OP_FAILURE", "exitFailCause", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "exitAsVoid", "exitCollectAll", "exits", "options", "exitCollectAllInternal", "parallel", "sequential", "exitDie", "defect", "exitFailCause", "die", "exitFail", "error", "exitFailCause", "fail", "cause", "effect", "EffectPrimitiveFailure", "OP_FAILURE", "effect_instruction_i0", "exitFlatMap", "dual", "self", "f", "_tag", "OP_SUCCESS", "exitFlatten", "self", "pipe", "exitFlatMap", "identity", "exitInterrupt", "fiberId", "exitFailCause", "interrupt", "exitMap", "dual", "self", "f", "_tag", "OP_FAILURE", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "exitMatch", "dual", "self", "onFailure", "onSuccess", "_tag", "OP_FAILURE", "effect_instruction_i0", "OP_SUCCESS", "exitMatchEffect", "exitSucceed", "value", "effect", "EffectPrimitiveSuccess", "exitVoid", "exitZipWith", "dual", "self", "that", "onFailure", "onSuccess", "_tag", "OP_FAILURE", "OP_SUCCESS", "exitFailCause", "effect_instruction_i0", "exitSucceed", "exitCollectAllInternal", "exits", "combineCauses", "list", "fromIterable", "isNonEmpty", "pipe", "tailNonEmpty", "reduce", "headNonEmpty", "exitMap", "of", "accumulator", "current", "value", "prepend", "reverse", "chunk", "toReadonlyArray", "some", "none", "deferredUnsafeMake", "fiberId", "DeferredTypeId", "deferredVariance", "state", "make", "pending", "blockingOn", "pipeArguments", "arguments", "deferredMake", "flatMap", "id", "deferredMakeAs", "sync", "deferredAwait", "async", "resume", "get", "OP_STATE_DONE", "effect", "OP_STATE_PENDING", "joiners", "push", "deferredInterruptJoiner", "deferredComplete", "intoDeferred", "deferredCompleteWith", "set", "done", "i", "len", "length", "deferredDone", "exit", "deferredFailCause", "dual", "self", "cause", "deferredCompleteWith", "failCause", "deferredInterrupt", "self", "flatMap", "fiberId", "deferredCompleteWith", "interruptWith", "deferredSucceed", "dual", "self", "value", "deferredCompleteWith", "succeed", "deferredUnsafeDone", "self", "effect", "state", "get", "_tag", "OP_STATE_PENDING", "set", "done", "i", "len", "joiners", "length", "deferredInterruptJoiner", "joiner", "sync", "index", "indexOf", "splice", "constContext", "fiberRefGet", "currentContext", "context", "contextWithEffect", "f", "flatMap", "context", "provideContext", "dual", "self", "fiberRefLocally", "currentContext", "provideSomeContext", "fiberRefLocallyWith", "parent", "merge", "mapInputContext", "currentSpanFromFiber", "fiber", "span", "getFiberRef", "unsafeMap", "get", "spanTag", "key", "undefined", "_tag", "some", "none", "NoopSpanProto", "spanId", "traceId", "name", "sampled", "empty", "status", "startTime", "BigInt", "endTime", "exit", "exitVoid", "attributes", "Map", "links", "kind", "attribute", "event", "end", "noopSpan", "Object", "create", "_await", "deferredAwait", "done", "deferredDone", "interrupt", "deferredInterrupt", "unsafeMake", "deferredUnsafeMake", "init_cjs_shims", "flatten", "exitFlatten", "succeed", "exitSucceed", "init_cjs_shims", "TypeId", "Symbol", "for", "MutableHashMapProto", "iterator", "MutableHashMapIterator", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "self", "referentialIterator", "bucketIterator", "constructor", "referential", "next", "undefined", "result", "done", "BucketIterator", "buckets", "backing", "currentBucket", "value", "empty", "Object", "create", "Map", "bucketsSize", "get", "dual", "self", "key", "isEqual", "referential", "has", "some", "none", "hash", "symbol", "bucket", "buckets", "undefined", "getFromBucket", "remove", "i", "len", "length", "value", "splice", "bucketsSize", "isSome", "set", "removeFromBucket", "push", "remove", "dual", "self", "key", "isEqual", "referential", "delete", "hash", "symbol", "bucket", "buckets", "get", "undefined", "removeFromBucket", "length", "size", "self", "referential", "bucketsSize", "init_cjs_shims", "init_cjs_shims", "TypeId", "Symbol", "for", "MutableListProto", "iterator", "done", "head", "next", "return", "value", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "makeNode", "removed", "prev", "undefined", "empty", "list", "Object", "create", "tail", "_length", "isEmpty", "self", "length", "_length", "append", "dual", "self", "value", "node", "makeNode", "head", "undefined", "tail", "next", "prev", "_length", "shift", "remove", "remove", "self", "node", "removed", "prev", "undefined", "next", "tail", "head", "_length", "TypeId", "Symbol", "for", "EmptyMutableQueue", "MutableQueueProto", "iterator", "Array", "from", "queue", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "capacity", "Object", "create", "empty", "unbounded", "make", "undefined", "offer", "dual", "self", "value", "queueLength", "length", "queue", "capacity", "undefined", "append", "poll", "dual", "self", "def", "isEmpty", "queue", "shift", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "ClockSymbolKey", "ClockTypeId", "Symbol", "for", "clockTag", "GenericTag", "MAX_TIMER_MILLIS", "globalClockScheduler", "unsafeSchedule", "task", "duration", "millis", "toMillis", "constFalse", "completed", "handle", "setTimeout", "clearTimeout", "performanceNowNanos", "bigint1e6", "BigInt", "performance", "Date", "now", "timeOrigin", "Math", "round", "origin", "processOrPerformanceNow", "processHrtime", "process", "hrtime", "bigint", "undefined", "ClockImpl", "unsafeCurrentTimeMillis", "unsafeCurrentTimeNanos", "currentTimeMillis", "sync", "currentTimeNanos", "scheduler", "succeed", "sleep", "async", "resume", "canceler", "void", "asVoid", "make", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "Order", "number", "init_cjs_shims", "escape", "string", "replace", "init_cjs_shims", "init_cjs_shims", "OP_AND", "OP_OR", "OP_INVALID_DATA", "OP_MISSING_DATA", "OP_SOURCE_UNAVAILABLE", "OP_UNSUPPORTED", "ConfigErrorSymbolKey", "ConfigErrorTypeId", "Symbol", "for", "proto", "_tag", "And", "self", "that", "error", "Object", "create", "_op", "OP_AND", "left", "right", "defineProperty", "enumerable", "value", "Or", "OP_OR", "InvalidData", "path", "message", "options", "pathDelim", "OP_INVALID_DATA", "pipe", "join", "MissingData", "OP_MISSING_DATA", "SourceUnavailable", "cause", "OP_SOURCE_UNAVAILABLE", "Unsupported", "OP_UNSUPPORTED", "prefixed", "dual", "self", "prefix", "_op", "OP_AND", "And", "left", "right", "OP_OR", "Or", "OP_INVALID_DATA", "InvalidData", "path", "message", "OP_MISSING_DATA", "MissingData", "OP_SOURCE_UNAVAILABLE", "SourceUnavailable", "cause", "OP_UNSUPPORTED", "Unsupported", "init_cjs_shims", "empty", "_tag", "patch", "dual", "path", "input", "of", "output", "isCons", "head", "_tag", "tail", "cons", "first", "second", "map", "f", "prepend", "name", "pipe", "contains", "tailNonEmpty", "left", "MissingData", "right", "init_cjs_shims", "OP_CONSTANT", "OP_FAIL", "OP_FALLBACK", "OP_DESCRIBED", "OP_LAZY", "OP_MAP_OR_FAIL", "OP_NESTED", "OP_PRIMITIVE", "OP_SEQUENCE", "OP_HASHMAP", "OP_ZIP_WITH", "concat", "l", "r", "ConfigProviderSymbolKey", "ConfigProviderTypeId", "Symbol", "for", "configProviderTag", "GenericTag", "FlatConfigProviderSymbolKey", "FlatConfigProviderTypeId", "make", "options", "pipe", "pipeArguments", "arguments", "makeFlat", "patch", "load", "path", "config", "split", "enumerateChildren", "fromFlat", "flat", "flatMap", "fromFlatLoop", "empty", "chunk", "match", "head", "onNone", "fail", "MissingData", "onSome", "succeed", "flattened", "fromEnv", "pathDelim", "seqDelim", "Object", "assign", "makePathString", "join", "unmakePathString", "pathString", "getEnv", "process", "env", "primitive", "current", "valueOpt", "some", "none", "mapError", "value", "parsePrimitive", "sync", "filteredKeyPaths", "keys", "map", "toUpperCase", "filter", "keyPath", "i", "length", "pathComponent", "unsafeGet", "currentElement", "undefined", "slice", "fromIterable", "extend", "leftDef", "rightDef", "left", "right", "leftPad", "unfold", "length", "index", "none", "some", "rightPad", "leftExtension", "concat", "rightExtension", "appendConfigPath", "path", "config", "op", "_tag", "out", "slice", "push", "name", "fromFlatLoop", "flat", "prefix", "split", "OP_CONSTANT", "succeed", "of", "value", "OP_DESCRIBED", "suspend", "OP_FAIL", "fail", "MissingData", "message", "OP_FALLBACK", "pipe", "first", "catchAll", "error1", "condition", "second", "error2", "Or", "OP_LAZY", "OP_MAP_OR_FAIL", "original", "flatMap", "forEachSequential", "a", "mapOrFail", "mapError", "prefixed", "OP_NESTED", "OP_PRIMITIVE", "patch", "load", "values", "last", "getOrElse", "description", "OP_SEQUENCE", "patchedPrefix", "enumerateChildren", "indicesFrom", "indices", "map", "append", "chunkChunk", "flattened", "flatten", "empty", "OP_HASHMAP", "keys", "key", "valueConfig", "matrix", "transpose", "fromIterable", "zip", "OP_ZIP_WITH", "either", "isLeft", "And", "isRight", "join", "fromFlatLoopFail", "lefts", "rights", "Error", "splitPathString", "text", "delim", "split", "RegExp", "escape", "parsePrimitive", "path", "primitive", "delimiter", "pipe", "forEachSequential", "char", "parse", "trim", "mapError", "prefixed", "mapBoth", "onFailure", "onSuccess", "of", "transpose", "array", "Object", "keys", "map", "column", "row", "indicesFrom", "quotedIndices", "parseQuotedIndex", "empty", "sort", "Order", "either", "merge", "QUOTED_INDEX_REGEX", "parseQuotedIndex", "str", "match", "matchedIndex", "pipe", "undefined", "length", "some", "none", "flatMap", "parseInteger", "parseInteger", "str", "parsedIndex", "Number", "parseInt", "isNaN", "none", "some", "init_cjs_shims", "TypeId", "Symbol", "for", "consoleTag", "GenericTag", "defaultConsole", "assert", "condition", "args", "sync", "console", "clear", "count", "label", "countReset", "debug", "dir", "item", "options", "dirxml", "error", "group", "collapsed", "groupCollapsed", "groupEnd", "info", "log", "table", "tabularData", "properties", "time", "timeEnd", "timeLog", "trace", "warn", "unsafe", "init_cjs_shims", "RandomSymbolKey", "RandomTypeId", "Symbol", "for", "randomTag", "GenericTag", "RandomImpl", "seed", "PRNG", "constructor", "PCGRandom", "next", "sync", "number", "nextBoolean", "map", "n", "nextInt", "integer", "Number", "MAX_SAFE_INTEGER", "nextRange", "min", "max", "nextIntBetween", "shuffle", "elements", "shuffleWith", "nextIntBounded", "suspend", "pipe", "Array", "from", "flatMap", "buffer", "numbers", "i", "length", "push", "forEachSequentialDiscard", "k", "swap", "as", "fromIterable", "index1", "index2", "tmp", "make", "hash", "liveServices", "pipe", "empty", "add", "clockTag", "make", "consoleTag", "defaultConsole", "randomTag", "Math", "random", "configProviderTag", "fromEnv", "tracerTag", "nativeTracer", "currentServices", "globalValue", "Symbol", "for", "fiberRefUnsafeMakeContext", "sleep", "duration", "decodedDuration", "decode", "clockWith", "clock", "f", "fiberRefGetWith", "services", "get", "currentTimeMillis", "currentTimeNanos", "withClock", "dual", "effect", "value", "fiberRefLocallyWith", "withConfigProvider", "configProviderWith", "randomWith", "f", "fiberRefGetWith", "currentServices", "services", "get", "randomTag", "withRandom", "dual", "effect", "value", "fiberRefLocallyWith", "add", "tracerWith", "f", "fiberRefGetWith", "currentServices", "services", "get", "tracerTag", "withTracer", "dual", "effect", "value", "fiberRefLocallyWith", "add", "sleep", "currentTimeMillis", "currentTimeNanos", "clockWith", "Clock", "clockTag", "init_cjs_shims", "init_cjs_shims", "unsafeMake", "fiberRefLocals", "FiberRefsImpl", "empty", "Map", "FiberRefsSym", "Symbol", "for", "locals", "constructor", "pipe", "pipeArguments", "arguments", "findAncestor", "_ref", "_parentStack", "_childStack", "_childModified", "ref", "parentStack", "childStack", "childModified", "ret", "undefined", "isNonEmptyReadonlyArray", "parentFiberId", "headNonEmpty", "parentAncestors", "tailNonEmpty", "childFiberId", "childRefValue", "childAncestors", "startTimeMillis", "id", "initial", "joinAs", "dual", "self", "fiberId", "that", "parentFiberRefs", "forEach", "fiberRef", "childValue", "symbol", "has", "equals", "set", "join", "get", "ancestor", "wasModified", "patch", "diff", "oldValue", "newValue", "newStack", "slice", "forkAs", "childId", "map", "unsafeForkAs", "stack", "fork", "fiberRefs", "fromIterable", "keys", "setAll", "forEachSequentialDiscard", "fiberRefSet", "getOrDefault", "delete_", "delete", "some", "none", "getOrElse", "updateAs", "value", "size", "unsafeUpdateAs", "oldStack", "currentId", "currentValue", "updateManyAs", "entries", "values", "length", "get", "getOrDefault", "joinAs", "setAll", "updateManyAs", "empty", "init_cjs_shims", "All", "logLevelAll", "Fatal", "logLevelFatal", "Error", "logLevelError", "Warning", "logLevelWarning", "Info", "logLevelInfo", "Debug", "logLevelDebug", "Trace", "logLevelTrace", "None", "logLevelNone", "Order", "pipe", "mapInput", "level", "ordinal", "greaterThan", "Order", "fromLiteral", "literal", "All", "Debug", "Error", "Fatal", "Info", "Trace", "None", "Warning", "init_cjs_shims", "init_cjs_shims", "make", "label", "startTime", "render", "now", "self", "replace", "make", "render", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "TypeId", "Symbol", "for", "Proto", "TypeId", "pipe", "pipeArguments", "arguments", "RefTypeId", "Symbol", "for", "refVariance", "_A", "_", "RefImpl", "ref", "TypeId", "constructor", "get", "sync", "modify", "f", "current", "b", "a", "set", "pipe", "pipeArguments", "arguments", "unsafeMake", "value", "make", "self", "dual", "getAndSet", "modify", "dual", "self", "f", "update", "dual", "self", "f", "modify", "a", "make", "get", "getAndSet", "modify", "update", "init_cjs_shims", "tracerWith", "init_cjs_shims", "OP_EMPTY", "OP_ADD", "OP_REMOVE", "OP_UPDATE", "OP_AND_THEN", "empty", "_tag", "diff", "oldValue", "newValue", "missingLocals", "Map", "locals", "patch", "fiberRef", "pairs", "entries", "headNonEmpty", "old", "get", "undefined", "equals", "combine", "value", "delete", "dual", "self", "that", "first", "second", "fiberId", "fiberRefs", "patches", "of", "isNonEmptyReadonlyArray", "head", "tail", "tailNonEmpty", "updateAs", "delete_", "getOrDefault", "prepend", "init_cjs_shims", "MetricLabelSymbolKey", "MetricLabelTypeId", "Symbol", "for", "MetricLabelImpl", "key", "value", "_hash", "constructor", "string", "symbol", "that", "isMetricLabel", "pipe", "pipeArguments", "arguments", "make", "u", "hasProperty", "annotateLogs", "dual", "args", "isEffect", "arguments", "fiberRefLocallyWith", "currentLogAnnotations", "set", "annotations", "Object", "entries", "reduce", "acc", "key", "value", "asSome", "self", "map", "some", "asSomeError", "mapError", "try_", "arg", "evaluate", "onFailure", "try", "catch", "sync", "error", "makeEffectError", "fail", "UnknownException", "_catch", "tag", "options", "catchAll", "e", "hasProperty", "failure", "catchAllDefect", "f", "catchAllCause", "cause", "option", "find", "_", "isDieType", "none", "_tag", "failCause", "defect", "catchSomeCause", "matchCauseEffect", "onSuccess", "succeed", "catchSomeDefect", "pf", "optionEffect", "catchTag", "k", "catchIf", "isTagged", "catchTags", "cases", "keys", "isString", "includes", "matchCause", "identity", "empty", "clockWith", "clock", "delay", "duration", "zipRight", "sleep", "descriptorWith", "withFiberRuntime", "state", "status", "id", "interruptors", "getFiberRef", "currentInterruptedCause", "allowInterrupt", "descriptor", "size", "interrupt", "void", "diffFiberRefs", "summarized", "fiberRefs", "diff", "diffFiberRefsAndRuntimeFlags", "zip", "runtimeFlags", "refs", "flags", "refsNew", "flagsNew", "Do", "bind", "flatMap", "bindTo", "let_", "dropUntil", "elements", "predicate", "suspend", "iterator", "Symbol", "builder", "next", "dropping", "i", "done", "a", "index", "bool", "push", "dropWhile", "d", "b", "contextWith", "context", "eventually", "orElse", "yieldNow", "filterMap", "forEachSequential", "filterOrDie", "orDieWith", "filterOrElse", "dieSync", "filterOrDieMessage", "message", "dieMessage", "liftPredicate", "orFailWith", "filterOrFail", "undefined", "NoSuchElementException", "failSync", "findFirst", "findLoop", "result", "firstSuccessOf", "effects", "list", "fromIterable", "isNonEmpty", "pipe", "tailNonEmpty", "headNonEmpty", "left", "right", "IllegalArgumentException", "flipWith", "flip", "match", "matchEffect", "every", "forAllLoop", "forever", "loop", "gen", "length", "internalCall", "run", "yieldWrapGet", "val", "getFiberRefs", "head", "as", "ignore", "constVoid", "ignoreLogged", "logDebug", "inheritFiberRefs", "childFiberRefs", "updateFiberRefs", "parentFiberId", "parentFiberRefs", "joinAs", "isFailure", "constTrue", "constFalse", "isSuccess", "iterate", "initial", "while", "body", "z2", "logWithLevel", "level", "levelOption", "fromNullable", "len", "msg", "isCause", "sequential", "slice", "fiberState", "log", "logTrace", "Trace", "Debug", "logInfo", "Info", "logWarning", "Warning", "logError", "Error", "logFatal", "Fatal", "withLogSpan", "effect", "label", "currentTimeMillis", "now", "currentLogSpan", "prepend", "make", "logAnnotations", "fiberRefGet", "discard", "loopDiscard", "step", "loopInternal", "cont", "inc", "mapAccum", "zero", "z", "mapErrorCause", "c", "failCauseSync", "memoize", "deferredMake", "deferred", "intoDeferred", "once", "complete", "deferredAwait", "patch", "patchFiberRefs", "updateRuntimeFlags", "merge", "negate", "ref", "asVoid", "whenEffect", "getAndSet", "orElseFail", "orElseSucceed", "parallelErrors", "errors", "failures", "fiberId", "promise", "async", "resolve", "signal", "then", "exitSucceed", "exitDie", "provideService", "service", "contextWithEffect", "env", "provideContext", "add", "provideServiceEffect", "random", "randomWith", "el", "reduceRight", "reduceWhile", "reduceWhileLoop", "nextState", "repeatN", "n", "repeatNLoop", "sandbox", "setFiberRefs", "setAll", "succeedNone", "succeedSome", "summary", "start", "end", "tagMetrics", "labelMetrics", "v", "labels", "currentMetricLabels", "old", "union", "takeUntil", "takeWhile", "taking", "tapBoth", "either", "failureOrCause", "tapDefect", "keepDefects", "onNone", "onSome", "tapError", "tapErrorTag", "tapErrorCause", "timed", "timedWith", "currentTimeNanos", "nanos", "tracerWith", "tracer", "tryPromise", "catcher", "tryMap", "tryMapPromise", "unless", "condition", "unlessEffect", "unsandbox", "flatten", "updateService", "mapInputContext", "unsafeGet", "when", "whenFiberRef", "fiberRef", "s", "whenRef", "get", "withMetric", "metric", "serviceFunctionEffect", "getService", "serviceFunction", "serviceFunctions", "Proxy", "_target", "prop", "_receiver", "serviceConstants", "serviceMembers", "functions", "constants", "serviceOption", "getOption", "serviceOptional", "annotateCurrentSpan", "currentSpan", "span", "attribute", "annotateSpans", "currentTracerSpanAnnotations", "currentParentSpan", "spanTag", "unsafeMap", "linkSpans", "attributes", "currentTracerSpanLinks", "append", "bigint0", "BigInt", "unsafeMakeSpan", "fiber", "name", "currentTracerEnabled", "noopSpan", "currentContext", "services", "currentServices", "tracerTag", "Clock", "timingEnabled", "currentTracerTimingEnabled", "annotationsFromEnv", "linksFromEnv", "parent", "root", "links", "toReadonlyArray", "unsafeCurrentTimeNanos", "kind", "captureStackTrace", "spanToTrace", "forEach", "makeSpan", "addSpanStackTrace", "spanAnnotations", "spanLinks", "endSpan", "exit", "exitIsFailure", "has", "useSpan", "clockTag", "onExit", "withParentSpan", "withSpan", "dataFirst", "functionWithSpan", "limit", "stackTraceLimit", "cache", "stack", "trim", "split", "join", "opts", "apply", "optionFromOptional", "isNoSuchElementException", "init_cjs_shims", "init_cjs_shims", "EffectTypeId", "EffectPrototype", "init_cjs_shims", "init_cjs_shims", "OP_SEQUENTIAL", "OP_PARALLEL", "OP_PARALLEL_N", "sequential", "_tag", "parallel", "parallelN", "parallelism", "isSequential", "self", "isParallel", "sequential", "parallel", "parallelN", "init_cjs_shims", "diff", "patch", "init_cjs_shims", "init_cjs_shims", "FiberStatusSymbolKey", "FiberStatusTypeId", "Symbol", "for", "OP_DONE", "OP_RUNNING", "OP_SUSPENDED", "DoneHash", "string", "Done", "_tag", "symbol", "that", "isFiberStatus", "Running", "runtimeFlags", "constructor", "pipe", "hash", "combine", "cached", "Suspended", "blockingOn", "equals", "done", "running", "suspended", "u", "hasProperty", "isDone", "self", "done", "running", "suspended", "isDone", "init_cjs_shims", "TypeId", "Symbol", "for", "runSymbol", "isMicro", "u", "MicroCauseTypeId", "microCauseVariance", "_E", "identity", "MicroCauseImpl", "globalThis", "Error", "_tag", "traces", "constructor", "originalError", "causeName", "name", "message", "stack", "messageLines", "split", "length", "slice", "join", "toStringUnknown", "pipe", "pipeArguments", "arguments", "toString", "NodeInspectSymbol", "DieImpl", "MicroCauseImpl", "defect", "constructor", "traces", "causeDie", "InterruptImpl", "causeInterrupt", "exitInterrupt", "left", "causeInterrupt", "exitSucceed", "right", "exitDie", "defect", "left", "causeDie", "EnvTypeId", "Symbol", "for", "EnvRefTypeId", "EnvProto", "_R", "identity", "pipe", "pipeArguments", "arguments", "envMake", "refs", "self", "Object", "create", "envUnsafeMakeEmpty", "controller", "AbortController", "currentAbortController", "key", "currentAbortSignal", "signal", "currentScheduler", "MicroSchedulerDefault", "envGet", "dual", "ref", "initial", "envSet", "value", "assign", "envMutate", "f", "setImmediate", "globalThis", "f", "setTimeout", "MicroSchedulerDefault", "tasks", "running", "scheduleTask", "task", "_priority", "push", "afterScheduled", "runTasks", "i", "len", "length", "shouldYield", "_env", "flush", "EnvRefProto", "EnvRefTypeId", "envRefMake", "key", "initial", "globalValue", "self", "Object", "create", "currentAbortController", "currentAbortSignal", "currentContext", "empty", "currentConcurrency", "currentMaxDepthBeforeYield", "currentInterruptible", "currentScheduler", "MicroProto", "EffectPrototype", "_op", "TypeId", "_A", "identity", "_E", "_R", "Symbol", "iterator", "SingleShotGen", "YieldWrap", "microDepthState", "globalValue", "depth", "maxDepthBeforeYield", "currentMaxDepthBeforeYield", "initial", "unsafeMake", "run", "self", "Object", "create", "runSymbol", "unsafeMakeOptions", "checkAbort", "execute", "env", "onExit", "refs", "currentInterruptible", "key", "currentAbortSignal", "aborted", "exitInterrupt", "envGet", "scheduler", "currentScheduler", "shouldYield", "scheduleTask", "err", "exitDie", "make", "fromExit", "_env", "succeed", "a", "fromExit", "exitSucceed", "sync", "evaluate", "make", "_env", "onExit", "exitSucceed", "suspend", "evaluate", "make", "env", "onExit", "runSymbol", "void_", "succeed", "async", "register", "make", "env", "onExit", "resumed", "controller", "length", "AbortController", "undefined", "signal", "envGet", "currentAbortSignal", "cleanup", "onAbort", "resume", "uninterruptible", "andThen", "fromExit", "exitInterrupt", "abort", "effect", "removeEventListener", "runSymbol", "addEventListener", "map", "dual", "self", "f", "make", "env", "onExit", "runSymbol", "exit", "_tag", "exitSucceed", "right", "flatMap", "dual", "self", "f", "make", "env", "onExit", "runSymbol", "exit", "_tag", "right", "andThen", "dual", "self", "f", "make", "env", "onExit", "runSymbol", "exit", "_tag", "envGet", "currentAbortSignal", "aborted", "exitInterrupt", "value", "isMicro", "right", "exitSucceed", "asVoid", "self", "map", "_", "exit", "make", "env", "onExit", "runSymbol", "exitSucceed", "forkSignal", "env", "controller", "AbortController", "parentSignal", "envGet", "currentAbortSignal", "onAbort", "abort", "removeEventListener", "addEventListener", "envMutate", "refs", "currentAbortController", "key", "signal", "MicroScopeTypeId", "Symbol", "for", "MicroScopeImpl", "MicroScopeTypeId", "state", "_tag", "finalizers", "Set", "constructor", "unsafeAddFinalizer", "finalizer", "add", "addFinalizer", "suspend", "void_", "exit", "unsafeRemoveFinalizer", "delete", "close", "microExit", "Array", "from", "reverse", "flatMap", "forEach", "exits", "asVoid", "fromExit", "all", "fork", "sync", "newScope", "fin", "_", "uninterruptible", "self", "unsafeMakeOptions", "env", "onExit", "nextEnv", "envMutate", "currentInterruptible", "key", "currentAbortSignal", "AbortController", "signal", "runSymbol", "forEach", "iterable", "f", "options", "make", "env", "onExit", "concurrencyOption", "concurrency", "envGet", "currentConcurrency", "Number", "POSITIVE_INFINITY", "Math", "max", "envWithSignal", "onAbort", "forkSignal", "result", "items", "Array", "from", "length", "out", "discard", "undefined", "index", "inProgress", "doneCount", "pumping", "pump", "currentIndex", "item", "runSymbol", "exit", "_tag", "right", "err", "exitDie", "HandleTypeId", "Symbol", "for", "HandleImpl", "parentSignal", "HandleTypeId", "observers", "Set", "_exit", "undefined", "_controller", "isRoot", "constructor", "controller", "AbortController", "addEventListener", "unsafeInterrupt", "unsafePoll", "abort", "emit", "exit", "removeEventListener", "forEach", "observer", "clear", "addObserver", "add", "removeObserver", "delete", "await", "suspend", "succeed", "async", "resume", "sync", "join", "flatMap", "fromExit", "interrupt", "init_cjs_shims", "PriorityBuckets", "buckets", "scheduleTask", "task", "priority", "bucket", "index", "length", "push", "newBuckets", "i", "MixedScheduler", "maxNextTickBeforeTimer", "running", "tasks", "constructor", "starveInternal", "depth", "_", "toRun", "starve", "setTimeout", "Promise", "resolve", "then", "shouldYield", "fiber", "currentOpCount", "getFiberRef", "currentMaxOpsBeforeYield", "currentSchedulingPriority", "defaultScheduler", "globalValue", "Symbol", "for", "SyncScheduler", "deferred", "flush", "currentScheduler", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "defaultScheduler", "withScheduler", "dual", "self", "scheduler", "fiberRefLocally", "init_cjs_shims", "currentRequestMap", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "Map", "init_cjs_shims", "match", "concurrency", "sequential", "unbounded", "bounded", "undefined", "fiberRefGetWith", "currentConcurrency", "matchSimple", "concurrent", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "OP_INTERRUPT_SIGNAL", "OP_STATEFUL", "OP_RESUME", "OP_YIELD_NOW", "interruptSignal", "cause", "_tag", "stateful", "onFiber", "resume", "effect", "yieldNow", "FiberScopeSymbolKey", "FiberScopeTypeId", "Symbol", "for", "Global", "fiberId", "none", "roots", "Set", "add", "_runtimeFlags", "child", "addObserver", "delete", "Local", "parent", "constructor", "tell", "stateful", "parentFiber", "addChild", "removeChild", "unsafeMake", "fiber", "id", "globalScope", "globalValue", "FiberSymbolKey", "FiberTypeId", "Symbol", "for", "fiberVariance", "_E", "_", "_A", "fiberProto", "pipe", "pipeArguments", "arguments", "RuntimeFiberSymbolKey", "RuntimeFiberTypeId", "_await", "self", "await", "inheritAll", "self", "interruptAsFork", "dual", "self", "fiberId", "join", "zipLeft", "flatten", "await", "inheritAll", "never", "fiberProto", "id", "none", "await", "children", "succeed", "inheritAll", "poll", "interruptAsFork", "currentFiberURI", "init_cjs_shims", "LoggerSymbolKey", "LoggerTypeId", "Symbol", "for", "loggerVariance", "_Message", "_", "_Output", "makeLogger", "log", "pipe", "pipeArguments", "arguments", "none", "LoggerTypeId", "loggerVariance", "log", "constVoid", "pipe", "pipeArguments", "arguments", "stringLogger", "makeLogger", "annotations", "cause", "date", "fiberId", "logLevel", "message", "spans", "nowMillis", "getTime", "output", "toISOString", "label", "threadName", "join", "messageArr", "ensure", "i", "length", "stringMessage", "toStringUnknown", "appendQuoted", "_tag", "pretty", "renderErrorCause", "isCons", "first", "span", "pipe", "render", "size", "key", "value", "filterKeyName", "escapeDoubleQuotes", "str", "replace", "textOnly", "match", "filterKeyName", "key", "replace", "colors", "bold", "red", "green", "yellow", "blue", "cyan", "white", "gray", "black", "bgBrightRed", "logLevelColors", "None", "All", "Trace", "Debug", "Info", "Warning", "Error", "Fatal", "processStdoutIsTTY", "process", "stdout", "isTTY", "isWorker", "self", "constructor", "name", "includes", "init_cjs_shims", "init_cjs_shims", "MetricBoundariesSymbolKey", "MetricBoundariesTypeId", "Symbol", "for", "MetricBoundariesImpl", "values", "constructor", "_hash", "pipe", "string", "combine", "array", "symbol", "u", "isMetricBoundaries", "equals", "pipeArguments", "arguments", "hasProperty", "fromIterable", "iterable", "appendAll", "of", "Number", "POSITIVE_INFINITY", "dedupe", "exponential", "options", "pipe", "makeBy", "count", "i", "start", "Math", "pow", "factor", "unsafeFromArray", "fromIterable", "init_cjs_shims", "init_cjs_shims", "MetricKeyTypeSymbolKey", "MetricKeyTypeTypeId", "Symbol", "for", "CounterKeyTypeSymbolKey", "CounterKeyTypeTypeId", "FrequencyKeyTypeSymbolKey", "FrequencyKeyTypeTypeId", "GaugeKeyTypeSymbolKey", "GaugeKeyTypeTypeId", "HistogramKeyTypeSymbolKey", "HistogramKeyTypeTypeId", "SummaryKeyTypeSymbolKey", "SummaryKeyTypeTypeId", "metricKeyTypeVariance", "_In", "_", "_Out", "CounterKeyType", "incremental", "bigint", "constructor", "_hash", "string", "symbol", "that", "isCounterKey", "pipe", "pipeArguments", "arguments", "FrequencyKeyTypeHash", "FrequencyKeyType", "preregisteredWords", "isFrequencyKey", "GaugeKeyTypeHash", "GaugeKeyType", "isGaugeKey", "HistogramKeyType", "boundaries", "combine", "hash", "isHistogramKey", "equals", "SummaryKeyType", "maxAge", "maxSize", "error", "quantiles", "array", "isSummaryKey", "counter", "options", "histogram", "boundaries", "HistogramKeyType", "isCounterKey", "u", "hasProperty", "CounterKeyTypeTypeId", "isFrequencyKey", "FrequencyKeyTypeTypeId", "isGaugeKey", "GaugeKeyTypeTypeId", "isHistogramKey", "HistogramKeyTypeTypeId", "isSummaryKey", "SummaryKeyTypeTypeId", "MetricKeySymbolKey", "MetricKeyTypeId", "Symbol", "for", "metricKeyVariance", "_Type", "_", "arrayEquivilence", "getEquivalence", "equals", "MetricKeyImpl", "name", "keyType", "description", "tags", "constructor", "_hash", "pipe", "string", "combine", "hash", "array", "symbol", "u", "isMetricKey", "pipeArguments", "arguments", "hasProperty", "counter", "options", "fromNullable", "histogram", "name", "boundaries", "description", "MetricKeyImpl", "fromNullable", "taggedWithLabels", "dual", "self", "extraTags", "length", "MetricKeyImpl", "name", "keyType", "description", "union", "tags", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "MetricStateSymbolKey", "MetricStateTypeId", "Symbol", "for", "CounterStateSymbolKey", "CounterStateTypeId", "FrequencyStateSymbolKey", "FrequencyStateTypeId", "GaugeStateSymbolKey", "GaugeStateTypeId", "HistogramStateSymbolKey", "HistogramStateTypeId", "SummaryStateSymbolKey", "SummaryStateTypeId", "metricStateVariance", "_A", "_", "CounterState", "count", "constructor", "symbol", "pipe", "hash", "combine", "cached", "that", "isCounterState", "pipeArguments", "arguments", "arrayEquals", "getEquivalence", "equals", "FrequencyState", "occurrences", "_hash", "string", "array", "fromIterable", "entries", "isFrequencyState", "GaugeState", "value", "u", "isGaugeState", "HistogramState", "buckets", "min", "max", "sum", "isHistogramState", "SummaryState", "error", "quantiles", "isSummaryState", "counter", "frequency", "gauge", "histogram", "options", "summary", "isCounterState", "u", "hasProperty", "CounterStateTypeId", "isFrequencyState", "FrequencyStateTypeId", "isGaugeState", "GaugeStateTypeId", "isHistogramState", "HistogramStateTypeId", "isSummaryState", "SummaryStateTypeId", "MetricHookSymbolKey", "MetricHookTypeId", "Symbol", "for", "metricHookVariance", "_In", "_", "_Out", "make", "options", "pipe", "pipeArguments", "arguments", "bigint0", "BigInt", "counter", "key", "sum", "keyType", "bigint", "canUpdate", "incremental", "value", "_value", "make", "get", "update", "frequency", "values", "Map", "word", "preregisteredWords", "set", "slotCount", "gauge", "_key", "startAt", "v", "histogram", "bounds", "boundaries", "size", "length", "Uint32Array", "Float32Array", "count", "min", "Number", "MAX_VALUE", "max", "MIN_VALUE", "pipe", "sort", "Order", "map", "n", "i", "from", "to", "mid", "Math", "floor", "boundary", "getBuckets", "builder", "allocate", "cumulated", "buckets", "summary", "error", "maxAge", "maxSize", "quantiles", "sortedQuantiles", "head", "snapshot", "now", "item", "t", "age", "millis", "greaterThanOrEqualTo", "zero", "push", "calculateQuantiles", "observe", "timestamp", "target", "Date", "sortedSamples", "sampleCount", "isNonEmptyReadonlyArray", "empty", "tail", "slice", "resolvedHead", "resolveQuantile", "none", "resolved", "of", "forEach", "quantile", "consumed", "rest", "rq", "current", "error_1", "sampleCount_1", "current_1", "consumed_1", "quantile_1", "rest_1", "error_2", "sampleCount_2", "current_2", "consumed_2", "quantile_2", "rest_2", "some", "lastNonEmpty", "sameHead", "span", "desired", "allowedError", "candConsumed", "candError", "abs", "_tag", "prevError", "Error", "init_cjs_shims", "MetricPairSymbolKey", "MetricPairTypeId", "Symbol", "for", "metricPairVariance", "_Type", "_", "unsafeMake", "metricKey", "metricState", "MetricPairTypeId", "metricPairVariance", "pipe", "pipeArguments", "arguments", "MetricRegistrySymbolKey", "MetricRegistryTypeId", "Symbol", "for", "MetricRegistryImpl", "map", "empty", "snapshot", "result", "key", "hook", "push", "unsafeMake", "get", "pipe", "getOrUndefined", "isCounterKey", "keyType", "getCounter", "isGaugeKey", "getGauge", "isFrequencyKey", "getFrequency", "isHistogramKey", "getHistogram", "isSummaryKey", "getSummary", "Error", "value", "counter", "has", "set", "frequency", "gauge", "bigint", "BigInt", "histogram", "summary", "make", "MetricSymbolKey", "MetricTypeId", "Symbol", "for", "metricVariance", "_Type", "_", "_In", "_Out", "globalMetricRegistry", "globalValue", "make", "keyType", "unsafeUpdate", "unsafeValue", "metric", "Object", "assign", "effect", "tap", "a", "update", "register", "pipe", "pipeArguments", "arguments", "counter", "name", "options", "fromMetricKey", "fromMetricKey", "key", "untaggedHook", "hookCache", "WeakMap", "hook", "extraTags", "length", "undefined", "globalMetricRegistry", "get", "taggedWithLabels", "set", "make", "keyType", "input", "update", "histogram", "name", "boundaries", "description", "fromMetricKey", "tagged", "dual", "self", "key", "value", "taggedWithLabels", "make", "taggedWithLabels", "dual", "self", "extraTags", "make", "keyType", "input", "extraTags1", "unsafeUpdate", "union", "unsafeValue", "update", "dual", "self", "input", "fiberRefGetWith", "currentMetricLabels", "tags", "sync", "unsafeUpdate", "init_cjs_shims", "RequestSymbolKey", "RequestTypeId", "Symbol", "for", "requestVariance", "_E", "_", "_A", "RequestPrototype", "StructuralPrototype", "isRequest", "u", "hasProperty", "complete", "dual", "self", "result", "fiberRefGetWith", "currentRequestMap", "map", "sync", "has", "entry", "get", "state", "completed", "deferredUnsafeDone", "Listeners", "count", "observers", "Set", "interrupted", "addObserver", "f", "add", "removeObserver", "delete", "increment", "forEach", "decrement", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "Direction", "Forward", "Backward", "RedBlackTreeIterator", "self", "stack", "direction", "count", "constructor", "clone", "slice", "reversed", "next", "entry", "moveNext", "movePrev", "_tag", "done", "value", "key", "length", "some", "none", "map", "last", "node", "index", "idx", "r", "_root", "left", "s", "right", "n", "push", "pop", "hasNext", "hasPrev", "init_cjs_shims", "Color", "Red", "Black", "clone", "color", "count", "key", "left", "right", "value", "swap", "n", "v", "repaint", "recount", "node", "RedBlackTreeSymbolKey", "RedBlackTreeTypeId", "Symbol", "for", "redBlackTreeVariance", "_Key", "_", "_Value", "RedBlackTreeProto", "symbol", "hash", "item", "pipe", "combine", "cached", "that", "isRedBlackTree", "_root", "count", "entries", "Array", "from", "every", "itemSelf", "i", "itemThat", "equals", "iterator", "stack", "n", "push", "left", "RedBlackTreeIterator", "Direction", "Forward", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "makeImpl", "ord", "root", "tree", "Object", "create", "_ord", "u", "hasProperty", "findFirst", "dual", "self", "key", "cmp", "_ord", "node", "_root", "undefined", "d", "equals", "some", "value", "left", "right", "none", "has", "dual", "self", "key", "isSome", "findFirst", "insert", "value", "cmp", "_ord", "n", "_root", "n_stack", "d_stack", "d", "push", "left", "right", "color", "Color", "Red", "undefined", "count", "s", "length", "n2", "p", "n3", "Black", "pp", "y", "repaint", "recount", "ppp", "makeImpl", "keysForward", "keys", "Direction", "Forward", "keys", "self", "direction", "begin", "Symbol", "iterator", "count", "next", "entry", "key", "Direction", "Forward", "moveNext", "movePrev", "_tag", "done", "value", "removeFirst", "dual", "self", "key", "has", "ord", "_ord", "cmp", "node", "_root", "stack", "undefined", "d", "push", "equals", "left", "right", "length", "cstack", "Array", "n", "color", "value", "count", "i", "split", "v", "Color", "Red", "p", "pop", "makeImpl", "swap", "Black", "parent", "fixDoubleBlack", "fixDoubleBlack", "stack", "n", "p", "s", "z", "i", "length", "color", "Color", "Black", "left", "right", "undefined", "Red", "clone", "recount", "pp", "repaint", "push", "has", "insert", "keys", "keysForward", "removeFirst", "TypeId", "Symbol", "for", "SortedSetProto", "_A", "_", "symbol", "pipe", "hash", "keyTree", "combine", "cached", "that", "isSortedSet", "equals", "iterator", "keys", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "fromTree", "a", "Object", "create", "u", "hasProperty", "add", "dual", "self", "value", "has", "keyTree", "fromTree", "insert", "remove", "dual", "self", "value", "fromTree", "removeFirst", "keyTree", "SupervisorSymbolKey", "SupervisorTypeId", "Symbol", "for", "supervisorVariance", "_T", "_", "ProxySupervisor", "underlying", "value0", "constructor", "value", "onStart", "context", "effect", "parent", "fiber", "onEnd", "onEffect", "onSuspend", "onResume", "map", "f", "pipe", "zip", "right", "Zip", "left", "_tag", "isZip", "self", "hasProperty", "isTagged", "Track", "fibers", "Set", "sync", "Array", "from", "_context", "_effect", "_parent", "add", "_value", "delete", "_fiber", "onRun", "execution", "Const", "FibersIn", "ref", "get", "set", "remove", "unsafeTrack", "track", "fromEffect", "none", "globalValue", "void", "init_cjs_shims", "init_cjs_shims", "make", "OP_EMPTY", "OP_ADD_SUPERVISOR", "OP_REMOVE_SUPERVISOR", "OP_AND_THEN", "empty", "_tag", "combine", "self", "that", "first", "second", "patch", "supervisor", "patchLoop", "of", "_supervisor", "_patches", "patches", "isNonEmpty", "head", "headNonEmpty", "tailNonEmpty", "zip", "removeSupervisor", "prepend", "equals", "none", "isZip", "left", "right", "toSet", "pipe", "union", "make", "diff", "oldValue", "newValue", "oldSupervisors", "newSupervisors", "added", "difference", "reduce", "removed", "differ", "fiberStarted", "counter", "incremental", "fiberActive", "fiberSuccesses", "fiberFailures", "fiberLifetimes", "tagged", "histogram", "exponential", "start", "factor", "count", "EvaluationSignalContinue", "EvaluationSignalDone", "EvaluationSignalYieldNow", "runtimeFiberVariance", "_E", "_", "_A", "absurd", "Error", "toStringUnknown", "YieldedOp", "Symbol", "for", "yieldedOpChannel", "globalValue", "currentOp", "contOpSuccess", "OP_ON_SUCCESS", "cont", "value", "internalCall", "effect_instruction_i1", "OnStep", "_cont", "exitSucceed", "OP_ON_SUCCESS_AND_FAILURE", "effect_instruction_i2", "OP_REVERT_FLAGS", "self", "patchRuntimeFlags", "_runtimeFlags", "patch", "interruptible", "isInterrupted", "exitFailCause", "getInterruptedCause", "OP_WHILE", "effect_instruction_i0", "pushStack", "void", "drainQueueWhileRunningTable", "OP_INTERRUPT_SIGNAL", "runtimeFlags", "cur", "message", "processNewInterruptSignal", "cause", "OP_RESUME", "_self", "_cur", "_message", "OP_STATEFUL", "onFiber", "running", "OP_YIELD_NOW", "flatMap", "yieldNow", "runBlockedRequests", "forEachSequentialDiscard", "flatten", "requestsByRequestResolver", "forEachConcurrentDiscard", "sequentialCollectionToChunk", "dataSource", "sequential", "map", "Map", "arr", "block", "push", "toReadonlyArray", "entry", "set", "request", "flat", "fiberRefLocally", "invokeWithInterrupt", "runAll", "forEach", "listeners", "interrupted", "currentRequestMap", "FiberRuntime", "FiberTypeId", "fiberVariance", "RuntimeFiberTypeId", "pipe", "pipeArguments", "arguments", "_fiberRefs", "_fiberId", "_queue", "Array", "_children", "_observers", "_running", "_stack", "_asyncInterruptor", "_asyncBlockingOn", "_exitValue", "_steps", "_supervisor", "_scheduler", "_tracer", "currentOpCount", "isYielding", "constructor", "fiberId", "fiberRefs0", "runtimeFlags0", "getFiberRef", "currentSupervisor", "currentScheduler", "runtimeMetrics", "tags", "currentMetricLabels", "unsafeUpdate", "get", "currentServices", "tracerTag", "id", "resume", "effect", "tell", "status", "ask", "state", "isDone", "scope", "unsafeMake", "children", "fiber", "from", "getChildren", "Set", "currentInterruptedCause", "fiberRefs", "getFiberRefs", "f", "suspend", "deferred", "deferredUnsafeMake", "stateful", "deferredUnsafeDone", "sync", "deferredAwait", "drainQueueLaterOnExecutor", "await", "async", "cb", "exit", "succeed", "addObserver", "removeObserver", "inheritAll", "withFiberRuntime", "parentFiber", "parentStatus", "parentFiberId", "parentFiberRefs", "parentRuntimeFlags", "childFiberRefs", "updatedFiberRefs", "joinAs", "setFiberRefs", "updatedRuntimeFlags", "currentRuntimeFlags", "diff", "exclude", "Interruption", "WindDown", "updateRuntimeFlags", "poll", "fromNullable", "unsafePoll", "interruptAsFork", "interruptSignal", "interrupt", "unsafeInterruptAsFork", "observer", "filter", "o", "setFiberRef", "unsafeDeleteFiberRef", "fiberRef", "delete_", "locals", "has", "initial", "updateAs", "refreshRefCache", "addChild", "child", "add", "removeChild", "delete", "drainQueueOnCurrentThread", "recurse", "evaluationSignal", "prev", "globalThis", "currentFiberURI", "length", "evaluateMessageWhileSuspended", "splice", "scheduleTask", "run", "currentSchedulingPriority", "drainQueueWhileRunning", "cur0", "_tag", "isEmpty", "addInterruptedCause", "oldSC", "sendInterruptSignalToAllChildren", "size", "told", "interruptAllChildren", "it", "values", "whileLoop", "while", "body", "next", "done", "asVoid", "step", "reportExitValue", "startTimeMillis", "endTimeMillis", "Date", "now", "OP_SUCCESS", "OP_FAILURE", "level", "currentUnhandledErrorLogLevel", "isInterruptedOnly", "log", "setExitValue", "i", "getLoggers", "currentLoggers", "overrideLogLevel", "logLevel", "isSome", "currentLogLevel", "minimumLogLevel", "currentMinimumLogLevel", "greaterThan", "spans", "currentLogSpan", "annotations", "currentLogAnnotations", "loggers", "contextMap", "clockService", "clockTag", "date", "unsafeCurrentTimeMillis", "logger", "context", "evaluateEffect", "suspended", "effect0", "onResume", "eff", "runLoop", "op", "_op", "OP_YIELD", "cooperativeYielding", "exitVoid", "OP_ASYNC", "enable", "interruption", "onSuspend", "startFork", "oldRuntimeFlags", "newRuntimeFlags", "initiateAsync", "asyncRegister", "alreadyCalled", "callback", "e", "failCause", "die", "refs", "flags", "popStack", "item", "pop", "getNextSuccessCont", "frame", "OP_ON_FAILURE", "getNextFailCont", "OP_TAG", "fiberRefGet", "currentContext", "unsafeGet", "fail", "left", "NoSuchElementException", "right", "unsafeAsync", "microResume", "env", "envUnsafeMakeEmpty", "envSet", "runSymbol", "result", "none", "error", "defect", "abortResume", "envGet", "currentAbortController", "abort", "OP_SYNC", "undefined", "oldCur", "stripFailures", "OP_WITH_RUNTIME", "frames", "snap", "patchRefs", "patchFlags", "blocked", "newFiber", "uninterruptibleMask", "restore", "forkDaemon", "runRequestBlock", "OP_UPDATE_RUNTIME_FLAGS", "updateFlags", "revertFlags", "RevertFlags", "check", "OP_COMMIT", "commit", "OpSupervision", "onEffect", "shouldYield", "priority", "getCurrentVersion", "EffectTypeId", "_V", "dieMessage", "isEffectError", "isInterruptedException", "fiberRefUnsafeMake", "fromLiteral", "loggerWithConsoleLog", "makeLogger", "opts", "services", "getOrDefault", "consoleTag", "unsafe", "defaultLogger", "globalValue", "Symbol", "for", "loggerWithConsoleLog", "stringLogger", "tracerLogger", "globalValue", "Symbol", "for", "makeLogger", "annotations", "cause", "context", "fiberId", "logLevel", "message", "span", "flatMap", "get", "currentContext", "getOption", "spanTag", "clockService", "map", "currentServices", "_", "clockTag", "_tag", "value", "attributes", "Object", "fromEntries", "toStringUnknown", "threadName", "label", "pretty", "event", "String", "unsafeCurrentTimeNanos", "currentLoggers", "globalValue", "Symbol", "for", "fiberRefUnsafeMakeHashSet", "make", "defaultLogger", "tracerLogger", "annotateLogsScoped", "arguments", "fiberRefLocallyScopedWith", "currentLogAnnotations", "set", "entries", "Object", "mutate", "annotations", "i", "length", "key", "value", "acquireRelease", "dual", "args", "isEffect", "acquire", "release", "uninterruptible", "tap", "a", "addFinalizer", "exit", "acquireReleaseInterruptible", "ensuring", "finalizer", "withFiberRuntime", "runtime", "acquireRefs", "getFiberRefs", "acquireFlags", "_runtimeFlags", "flatMap", "scope", "scopeAddFinalizerExit", "runtimeFinalizer", "preRefs", "preFlags", "patchRefs", "diff", "patchFlags", "inverseRefs", "setFiberRefs", "patch", "id", "withRuntimeFlags", "sync", "daemonChildren", "self", "fiberRefLocally", "currentForkScopeOverride", "some", "globalScope", "_existsParFound", "Symbol", "for", "exists", "isIterable", "elements", "f", "options", "matchSimple", "concurrency", "suspend", "existsLoop", "iterator", "matchEffect", "forEach", "if_", "onTrue", "fail", "onFalse", "void", "onFailure", "e", "succeed", "onSuccess", "index", "next", "done", "pipe", "b", "filter", "predicate", "negate", "map", "not", "fromIterable", "reduceRight", "effect", "zipWith", "list", "Array", "none", "getSomes", "allResolveInput", "input", "isArray", "keys", "size", "k", "values", "res", "allValidate", "effects", "reconcile", "eitherEffects", "push", "either", "identity", "batching", "eithers", "errors", "successes", "errored", "_tag", "left", "right", "discard", "allEither", "all", "arg", "mode", "allWith", "allSuccesses", "filterMap", "exitIsSuccess", "effect_instruction_i0", "replicate", "n", "from", "replicateEffect", "r", "isRequestBatchingEnabled", "getFiberRef", "currentRequestBatching", "match", "finalizersMask", "sequential", "restore", "forEachConcurrentDiscard", "forEachSequentialDiscard", "parallel", "parallelN", "forEachParN", "forEachSequential", "forEachParUnbounded", "as", "array", "zipRight", "fn", "processAll", "uninterruptibleMask", "transplant", "graft", "parent", "todos", "reverse", "target", "counter", "interrupted", "fibersCount", "Math", "min", "fibers", "Set", "results", "interruptAll", "fiber", "_scheduler", "scheduleTask", "unsafeInterruptAsFork", "startOrder", "joinOrder", "residual", "collectExits", "exits", "sort", "exitVoid", "runFiber", "eff", "interruptImmediately", "runnable", "unsafeForkUnstarted", "resume", "onInterruptSignal", "stepOrExit", "step", "processingFiber", "async", "pushResult", "_op", "pop", "returnNextElement", "yieldNow", "onRes", "todo", "add", "addObserver", "wrapped", "delete", "getOrElse", "exitCollectAll", "requests", "blocked", "reduce", "par", "effect_instruction_i1", "asVoid", "onExit", "flatten", "join", "exitMatch", "toPop", "cb", "count", "check", "hitNext", "getOrThrow", "inheritAll", "fork", "state", "status", "unsafeFork", "runtimeFlags", "forkDaemon", "forkWithScopeOverride", "forkWithErrorHandler", "handler", "onError", "cause", "failureOrCause", "failCause", "parentFiber", "parentRuntimeFlags", "overrideScope", "childFiber", "unsafeMakeChildFiber", "childId", "unsafeMake", "parentFiberRefs", "childFiberRefs", "forkAs", "FiberRuntime", "childContext", "getOrDefault", "currentContext", "supervisor", "_supervisor", "onStart", "onEnd", "scopeOverride", "parentStatus", "mergeAll", "isFunction", "zero", "acc", "make", "update", "get", "partition", "chunk", "partitionMap", "validateAll", "es", "bs", "raceAll", "isNonEmpty", "dieSync", "IllegalArgumentException", "headNonEmpty", "tailNonEmpty", "deferredMake", "fails", "interruptible", "head", "unsafeFromArray", "tail", "prepend", "_await", "raceAllArbiter", "await", "onInterrupt", "zipLeft", "interruptFiber", "winner", "deferred", "exitMatchEffect", "modify", "deferredFailCause", "deferredSucceed", "reduceEffect", "elem", "option", "Error", "parallelFinalizers", "contextWithEffect", "context", "getOption", "scopeTag", "onNone", "onSome", "strategy", "scopeFork", "inner", "scopeExtend", "parallelNFinalizers", "parallelism", "sequentialFinalizers", "scopeWith", "scopedEffect", "scopeMake", "scopeUse", "tagMetricsScoped", "labelMetricsScoped", "labels", "currentMetricLabels", "old", "union", "using", "use", "acquireUseRelease", "scopeClose", "validate", "that", "validateWith", "zipWithOptions", "ea", "eb", "exitZipWith", "ca", "concurrent", "validateFirst", "dual", "args", "isIterable", "elements", "f", "options", "flip", "forEach", "a", "i", "withClockScoped", "value", "fiberRefLocallyScopedWith", "currentServices", "add", "clockTag", "withRandomScoped", "randomTag", "withConfigProviderScoped", "configProviderTag", "withEarlyRelease", "self", "scopeWith", "parent", "flatMap", "scopeFork", "sequential", "child", "pipe", "scopeExtend", "map", "fiberIdWith", "fiberId", "scopeClose", "exitInterrupt", "zipOptions", "isEffect", "that", "zipWithOptions", "b", "zipLeftOptions", "concurrent", "batching", "undefined", "zipLeft", "_", "zipRightOptions", "zipRight", "all", "concurrency", "a2", "withRuntimeFlagsScoped", "update", "empty", "void", "runtimeFlags", "updatedRuntimeFlags", "patch", "revertRuntimeFlags", "diff", "updateRuntimeFlags", "addFinalizer", "asVoid", "uninterruptible", "scopeTag", "GenericTag", "scope", "scopeUnsafeAddFinalizer", "fin", "state", "_tag", "finalizers", "ScopeImplProto", "ScopeTypeId", "CloseableScopeTypeId", "pipeArguments", "arguments", "fork", "strategy", "sync", "newScope", "scopeUnsafeMake", "exit", "close", "delete", "suspend", "Array", "from", "values", "reverse", "length", "isSequential", "forEachSequential", "results", "exitCollectAll", "exitAsVoid", "getOrElse", "exitVoid", "isParallel", "forEachParUnbounded", "parallel", "forEachParN", "parallelism", "Object", "create", "Set", "scopeMake", "effect", "mapInputContext", "merge", "make", "scopeUse", "onExit", "fiberRefUnsafeMakeSupervisor", "initial", "fiberRefUnsafeMakePatch", "differ", "fiberRefLocallyScoped", "acquireRelease", "fiberRefGet", "oldValue", "as", "fiberRefSet", "fiberRefGetWith", "currentRuntimeFlags", "fiberRefUnsafeMakeRuntimeFlags", "none", "currentSupervisor", "fiberRefUnsafeMakeSupervisor", "fiberAwaitAll", "fibers", "asVoid", "_await", "fiberAll", "FiberTypeId", "fiberVariance", "id", "fromIterable", "reduce", "fiber", "combine", "await", "exit", "forEachParUnbounded", "flatten", "children", "map", "inheritAll", "forEachSequentialDiscard", "poll", "forEachSequential", "reduceRight", "some", "exitSucceed", "Array", "optionB", "optionA", "_tag", "exitZipWith", "value", "onSuccess", "a", "chunk", "onFailure", "parallel", "interruptAsFork", "fiberId", "pipe", "pipeArguments", "arguments", "raceWith", "dual", "self", "other", "options", "raceFibersWith", "onSelfWin", "winner", "loser", "flatMap", "await", "exit", "_tag", "OP_SUCCESS", "inheritAll", "onSelfDone", "OP_FAILURE", "onOtherWin", "onOtherDone", "disconnect", "uninterruptibleMask", "restore", "fiberIdWith", "fiberId", "forkDaemon", "fiber", "pipe", "join", "onInterrupt", "interruptAsFork", "race", "that", "parentFiberId", "right", "exitMatchEffect", "onFailure", "cause", "mapErrorCause", "cause2", "parallel", "onSuccess", "value", "interruptAsFiber", "as", "left", "withFiberRuntime", "parentFiber", "parentStatus", "parentRuntimeFlags", "runtimeFlags", "raceIndicator", "make", "leftFiber", "unsafeMakeChildFiber", "selfScope", "rightFiber", "otherScope", "async", "cb", "addObserver", "completeRace", "startFork", "combine", "id", "cont", "ab", "compareAndSet", "ensuring", "finalizer", "matchCauseEffect", "cause1", "failCause", "sequential", "a", "invokeWithInterrupt", "entries", "interruptible", "processing", "counts", "map", "_", "listeners", "count", "checkDone", "every", "result", "state", "current", "exitIsExit", "effect", "isInterrupted", "cleanup", "forEach", "f", "interruptFiber", "r", "i", "observer", "removeObserver", "sync", "suspend", "residual", "entry", "completed", "forEachSequentialDiscard", "complete", "request", "exitInterrupt", "makeSpanScoped", "name", "options", "addSpanStackTrace", "uninterruptible", "withFiberRuntime", "fiber", "scope", "unsafeGet", "getFiberRef", "currentContext", "scopeTag", "span", "unsafeMakeSpan", "timingEnabled", "currentTracerTimingEnabled", "clock_", "get", "currentServices", "clockTag", "as", "scopeAddFinalizerExit", "exit", "endSpan", "withTracerScoped", "value", "fiberRefLocallyScopedWith", "add", "tracerTag", "withSpanScoped", "dataFirst", "arguments", "self", "flatMap", "provideService", "spanTag", "complete", "key", "exit", "entryStats", "timeToLiveMillis", "struct", "_tag", "pending", "deferred", "refreshing", "MapKeyTypeId", "Symbol", "for", "MapKeyImpl", "current", "previous", "undefined", "next", "constructor", "symbol", "pipe", "hash", "combine", "cached", "that", "isMapKey", "equals", "makeMapKey", "u", "hasProperty", "KeySetImpl", "head", "tail", "add", "remove", "makeKeySet", "makeCacheState", "map", "keys", "accesses", "updating", "hits", "misses", "initialCacheState", "empty", "unbounded", "make", "CacheSymbolKey", "CacheTypeId", "cacheVariance", "_Key", "_", "_Error", "_Value", "makeCacheStats", "options", "makeEntryStats", "loadedMillis", "CacheImpl", "capacity", "context", "fiberId", "lookup", "timeToLive", "cacheState", "get", "getEither", "merge", "cacheStats", "sync", "size", "getOption", "suspend", "match", "onNone", "mapKey", "trackAccess", "trackMiss", "succeed", "none", "onSome", "value", "resolveMapValue", "getOptionComplete", "contains", "has", "option", "isSome", "loaded", "some", "k", "getOrUndefined", "unsafeMake", "set", "lookupValueOf", "right", "flatMap", "left", "invalidate", "invalidateWhen", "when", "invalidateAll", "refresh", "clockWith", "clock", "asVoid", "hasExpired", "found", "mapValue", "MutableHashMap", "await", "now", "unsafeCurrentTimeMillis", "lookupResult", "toMillis", "decode", "values", "entry", "push", "entries", "ignorePending", "trackHit", "offer", "compareAndSet", "loop", "poll", "EmptyMutableQueue", "input", "provideContext", "stats", "zipRight", "done", "onInterrupt", "interrupt", "unsafeMakeWith", "capacity", "lookup", "timeToLive", "CacheImpl", "empty", "none", "exit", "decode", "init_cjs_shims", "isInterruptedOnly", "reduceWithContext", "Effect_exports", "__export", "Do", "EffectTypeId", "Tag", "acquireRelease", "acquireReleaseInterruptible", "acquireUseRelease", "addFinalizer", "all", "allSuccesses", "allWith", "allowInterrupt", "andThen", "annotateCurrentSpan", "annotateLogs", "annotateLogsScoped", "annotateSpans", "ap", "as", "asSome", "asSomeError", "asVoid", "async", "asyncEffect", "awaitAllChildren", "bind", "bindTo", "blocked", "cacheRequestResult", "cached", "cachedFunction", "cachedInvalidateWithTTL", "cachedWithTTL", "_catch", "catchAll", "catchAllCause", "catchAllDefect", "catchIf", "catchSome", "catchSomeCause", "catchSomeDefect", "catchTag", "catchTags", "cause", "checkInterruptible", "clock", "clockWith", "configProviderWith", "console", "consoleWith", "context", "contextWith", "contextWithEffect", "currentParentSpan", "currentSpan", "custom", "daemonChildren", "delay", "descriptor", "descriptorWith", "die", "dieMessage", "dieSync", "diffFiberRefs", "disconnect", "dropUntil", "dropWhile", "either", "ensuring", "ensuringChild", "ensuringChildren", "eventually", "every", "exists", "exit", "fail", "failCause", "failCauseSync", "failSync", "fiberId", "fiberIdWith", "filter", "filterMap", "filterOrDie", "filterOrDieMessage", "filterOrElse", "filterOrFail", "finalizersMask", "findFirst", "firstSuccessOf", "flatMap", "flatten", "flip", "flipWith", "forEach", "forever", "fork", "forkAll", "forkDaemon", "forkIn", "forkScoped", "forkWithErrorHandler", "fromFiber", "fromFiberEffect", "fromNullable", "functionWithSpan", "gen", "getFiberRefs", "getRuntimeFlags", "head", "if_", "ignore", "ignoreLogged", "inheritFiberRefs", "interrupt", "interruptWith", "interruptible", "interruptibleMask", "intoDeferred", "isEffect", "isFailure", "isSuccess", "iterate", "labelMetrics", "labelMetricsScoped", "let_", "liftPredicate", "linkSpans", "locally", "locallyScoped", "locallyScopedWith", "locallyWith", "log", "logAnnotations", "logDebug", "logError", "logFatal", "logInfo", "logTrace", "logWarning", "logWithLevel", "loop", "makeSemaphore", "makeSpan", "makeSpanScoped", "map", "mapAccum", "mapBoth", "mapError", "mapErrorCause", "mapInputContext", "match", "matchCause", "matchCauseEffect", "matchEffect", "merge", "mergeAll", "metricLabels", "negate", "never", "none", "onError", "onExit", "onInterrupt", "once", "option", "optionFromOptional", "orDie", "orDieWith", "orElse", "orElseFail", "orElseSucceed", "parallelErrors", "parallelFinalizers", "partition", "patchFiberRefs", "patchRuntimeFlags", "promise", "provide", "provideService", "provideServiceEffect", "race", "raceAll", "raceFirst", "raceWith", "random", "randomWith", "reduce", "reduceEffect", "reduceRight", "reduceWhile", "repeat", "repeatN", "repeatOrElse", "replicate", "replicateEffect", "request", "retry", "retryOrElse", "runCallback", "runFork", "runPromise", "runPromiseExit", "runRequestBlock", "runSync", "runSyncExit", "runtime", "sandbox", "schedule", "scheduleForked", "scheduleFrom", "scope", "scopeWith", "scoped", "sequentialFinalizers", "serviceConstants", "serviceFunction", "serviceFunctionEffect", "serviceFunctions", "serviceMembers", "serviceOption", "serviceOptional", "setFiberRefs", "sleep", "spanAnnotations", "spanLinks", "step", "succeed", "succeedNone", "succeedSome", "summarized", "supervised", "suspend", "sync", "tagMetrics", "tagMetricsScoped", "takeUntil", "takeWhile", "tap", "tapBoth", "tapDefect", "tapError", "tapErrorCause", "tapErrorTag", "timed", "timedWith", "timeout", "timeoutFail", "timeoutFailCause", "timeoutOption", "timeoutTo", "tracer", "tracerWith", "transplant", "try_", "tryMap", "tryMapPromise", "tryPromise", "uninterruptible", "uninterruptibleMask", "unless", "unlessEffect", "unsafeMakeSemaphore", "unsandbox", "updateFiberRefs", "updateService", "useSpan", "using", "validate", "validateAll", "validateFirst", "validateWith", "_void", "when", "whenEffect", "whenFiberRef", "whenRef", "whileLoop", "withClock", "withClockScoped", "withConcurrency", "withConfigProvider", "withConfigProviderScoped", "withConsole", "withConsoleScoped", "withEarlyRelease", "withFiberRuntime", "withLogSpan", "withMaxOpsBeforeYield", "withMetric", "withParentSpan", "withRandom", "withRandomScoped", "withRequestBatching", "withRequestCache", "withRequestCaching", "withRuntimeFlagsPatch", "withRuntimeFlagsPatchScoped", "withScheduler", "withSchedulingPriority", "withSpan", "withSpanScoped", "withTracer", "withTracerEnabled", "withTracerScoped", "withTracerTiming", "withUnhandledErrorLogLevel", "yieldNow", "zip", "zipLeft", "zipRight", "zipWith", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "IntervalSymbolKey", "IntervalTypeId", "Symbol", "for", "empty", "startMillis", "endMillis", "make", "lessThan", "dual", "self", "that", "min", "isEmpty", "self", "startMillis", "endMillis", "intersect", "dual", "self", "that", "start", "Math", "max", "startMillis", "end", "min", "endMillis", "make", "after", "startMilliseconds", "make", "Number", "POSITIVE_INFINITY", "empty", "lessThan", "isEmpty", "intersect", "after", "IntervalsSymbolKey", "IntervalsTypeId", "Symbol", "for", "make", "intervals", "intersect", "dual", "self", "that", "intersectLoop", "intervals", "empty", "_left", "_right", "_acc", "left", "right", "acc", "isNonEmpty", "interval", "pipe", "headNonEmpty", "isEmpty", "prepend", "lessThan", "tailNonEmpty", "make", "reverse", "start", "head", "getOrElse", "startMillis", "end", "endMillis", "make", "intersect", "start", "end", "lessThan", "isNonEmpty", "OP_CONTINUE", "OP_DONE", "_continue", "intervals", "_tag", "continueWith", "interval", "make", "of", "done", "isContinue", "self", "isDone", "_continue", "continueWith", "done", "isContinue", "isDone", "init_cjs_shims", "close", "scopeClose", "fork", "scopeFork", "init_cjs_shims", "init_cjs_shims", "ScheduleSymbolKey", "ScheduleTypeId", "Symbol", "for", "isSchedule", "u", "hasProperty", "ScheduleDriverSymbolKey", "ScheduleDriverTypeId", "scheduleVariance", "_Out", "_", "_In", "_R", "scheduleDriverVariance", "ScheduleImpl", "initial", "step", "constructor", "pipe", "pipeArguments", "arguments", "ScheduleDriverImpl", "schedule", "ref", "state", "map", "get", "tuple", "last", "flatMap", "element", "_tag", "failSync", "NoSuchElementException", "succeed", "value", "reset", "set", "none", "next", "input", "currentTimeMillis", "now", "suspend", "out", "decision", "setState", "some", "isDone", "zipRight", "fail", "millis", "start", "intervals", "as", "sleep", "makeWithState", "check", "dual", "self", "test", "checkEffect", "input", "out", "sync", "makeWithState", "initial", "now", "state", "flatMap", "step", "decision", "isDone", "succeed", "done", "map", "cont", "driver", "self", "pipe", "make", "none", "initial", "map", "ref", "ScheduleDriverImpl", "intersect", "dual", "self", "that", "intersectWith", "f", "makeWithState", "initial", "now", "input", "state", "pipe", "zipWith", "step", "a", "b", "flatMap", "lState", "out", "lDecision", "rState", "out2", "rDecision", "isContinue", "intersectWithLoop", "intervals", "succeed", "done", "lInterval", "rInterval", "combined", "isNonEmpty", "continue", "lessThan", "end", "decision", "isDone", "map", "dual", "self", "f", "mapEffect", "out", "sync", "makeWithState", "initial", "now", "input", "state", "flatMap", "step", "decision", "out2", "passthrough", "self", "makeWithState", "initial", "now", "input", "state", "pipe", "step", "map", "_", "decision", "recurs", "n", "whileOutput", "forever", "out", "unfold", "initial", "f", "makeWithState", "now", "_", "state", "sync", "continueWith", "after", "untilInputEffect", "dual", "self", "f", "checkEffect", "input", "_", "negate", "whileInputEffect", "dual", "self", "f", "checkEffect", "input", "_", "whileOutput", "check", "out", "ScheduleDefectTypeId", "Symbol", "for", "ScheduleDefect", "error", "constructor", "isScheduleDefect", "u", "hasProperty", "scheduleDefectWrap", "self", "catchAll", "e", "die", "scheduleDefectRefail", "catchAllCause", "cause", "match", "find", "_", "isDieType", "defect", "some", "none", "onNone", "failCause", "onSome", "fail", "repeat_Effect", "dual", "schedule", "repeatOrElse_Effect", "repeat_combined", "options", "isSchedule", "base", "passthrough", "forever", "withWhile", "while", "whileInputEffect", "a", "applied", "succeed", "withUntil", "until", "untilInputEffect", "withTimes", "times", "intersect", "recurs", "pipe", "map", "intersectionPair", "orElse", "flatMap", "driver", "matchEffect", "onFailure", "onSuccess", "value", "repeatOrElseEffectLoop", "next", "orDie", "last", "b", "retry_Effect", "policy", "retryOrElse_Effect", "retry_combined", "retryOrElse_EffectLoop", "out", "schedule_Effect", "scheduleFrom_Effect", "initial", "scheduleFrom_EffectLoop", "forever", "unfold", "n", "Semaphore", "permits", "waiters", "Set", "taken", "constructor", "free", "take", "n", "async", "resume", "observer", "delete", "succeed", "add", "sync", "updateTaken", "f", "withFiberRuntime", "fiber", "size", "getFiberRef", "currentScheduler", "scheduleTask", "iter", "values", "item", "next", "done", "value", "currentSchedulingPriority", "release", "releaseAll", "_", "withPermits", "self", "uninterruptibleMask", "restore", "flatMap", "ensuring", "unsafeMakeSemaphore", "makeSemaphore", "awaitAllChildren", "ensuringChildren", "fiberAwaitAll", "cached", "dual", "timeToLive", "map", "cachedInvalidateWithTTL", "tuple", "duration", "decode", "context", "env", "makeSynchronized", "none", "cache", "provideContext", "getCachedValue", "invalidateCache", "computeCachedValue", "start", "timeToLiveMillis", "toMillis", "pipe", "deferredMake", "tap", "deferred", "intoDeferred", "some", "clockWith", "clock", "currentTimeMillis", "time", "updateSomeAndGetEffectSynchronized", "option", "_tag", "end", "isNone", "dieMessage", "deferredAwait", "set", "ensuringChild", "children", "fiberAll", "track", "supervisor", "supervised", "forkAll", "args", "isIterable", "effects", "options", "discard", "forEachSequentialDiscard", "fork", "forEachSequential", "forkIn", "scope", "sequential", "child", "onExit", "exit", "close", "forkDaemon", "addFinalizer", "fiberIdWith", "fiberId", "equals", "id", "void", "asVoid", "interruptFiber", "forkScoped", "scopeWith", "fromFiber", "join", "fromFiberEffect", "suspend", "memoKeySymbol", "Symbol", "for", "Key", "a", "eq", "symbol", "that", "hasProperty", "hash", "cachedFunction", "empty", "ref", "modifyEffect", "result", "get", "diffFiberRefs", "patch", "b", "patchFiberRefs", "as", "raceFirst", "race", "effect", "flatten", "scheduleForked", "schedule", "schedule_Effect", "fiberRefLocallyWith", "currentSupervisor", "s", "zip", "timeout", "timeoutFail", "onTimeout", "timeoutExceptionFromDuration", "timeoutTo", "failSync", "onSuccess", "timeoutFailCause", "failCauseSync", "timeoutOption", "parentFiberId", "raceFibersWith", "interruptible", "sleep", "onSelfWin", "winner", "loser", "await", "inheritAll", "interruptAsFiber", "exitFailCause", "cause", "onOtherWin", "otherScope", "globalScope", "SynchronizedSymbolKey", "SynchronizedTypeId", "synchronizedVariance", "_A", "SynchronizedImpl", "withLock", "RefTypeId", "refVariance", "TypeId", "modify", "pipeArguments", "arguments", "unsafeMakeSynchronized", "unsafeMake", "sem", "pf", "init_cjs_shims", "OP_FRESH", "init_cjs_shims", "init_cjs_shims", "interruptAs", "interruptAsFiber", "unsafeFork", "runtime", "self", "options", "fiberId", "unsafeMake", "fiberRefUpdates", "currentContext", "context", "scheduler", "push", "currentScheduler", "fiberRefs", "updateManyAs", "entries", "forkAs", "updateRefs", "fiberRuntime", "FiberRuntime", "runtimeFlags", "effect", "scope", "flatMap", "fork", "sequential", "closeableScope", "zipRight", "scopeAddFinalizer", "fiberIdWith", "id", "equals", "void", "interruptAsFiber", "onExit", "exit", "close", "supervisor", "_supervisor", "none", "onStart", "addObserver", "onEnd", "globalScope", "add", "immediate", "resume", "start", "unsafeRunCallback", "cancelOptions", "pipe", "interruptAs", "flatten", "undefined", "unsafeRunSync", "result", "unsafeRunSyncExit", "_tag", "fiberFailure", "effect_instruction_i0", "AsyncFiberExceptionImpl", "Error", "fiber", "constructor", "name", "stack", "message", "asyncFiberException", "limit", "stackTraceLimit", "error", "FiberFailureId", "Symbol", "for", "FiberFailureCauseId", "FiberFailureImpl", "Error", "constructor", "cause", "prettyErrors", "length", "head", "name", "message", "stack", "undefined", "toJSON", "_id", "toString", "NodeInspectSymbol", "fiberFailure", "limit", "stackTraceLimit", "error", "fastPath", "effect", "op", "_op", "exitFail", "left", "exitSucceed", "right", "value", "NoSuchElementException", "unsafeRunSyncExit", "runtime", "scheduler", "SyncScheduler", "fiberRuntime", "unsafeFork", "flush", "result", "unsafePoll", "asyncFiberException", "unsafeRunPromise", "options", "unsafeRunPromiseExit", "then", "_tag", "OP_SUCCESS", "effect_instruction_i0", "OP_FAILURE", "fiberFailure", "Promise", "resolve", "fiber", "addObserver", "exit", "signal", "undefined", "aborted", "unsafeInterruptAsFork", "id", "addEventListener", "once", "RuntimeImpl", "context", "runtimeFlags", "fiberRefs", "constructor", "pipe", "pipeArguments", "arguments", "make", "withFiberRuntime", "state", "status", "succeed", "getFiberRef", "currentContext", "getFiberRefs", "defaultRuntimeFlags", "Interruption", "CooperativeYielding", "RuntimeMetrics", "defaultRuntime", "empty", "unsafeRunEffect", "unsafeRunCallback", "defaultRuntime", "unsafeForkEffect", "unsafeFork", "unsafeRunPromiseEffect", "unsafeRunPromise", "unsafeRunPromiseExitEffect", "unsafeRunPromiseExit", "unsafeRunSyncEffect", "unsafeRunSync", "unsafeRunSyncExitEffect", "unsafeRunSyncExit", "asyncEffect", "register", "suspend", "cleanup", "flatMap", "deferredMake", "deferred", "runtime", "uninterruptibleMask", "restore", "zipRight", "fork", "matchCauseEffect", "cb", "intoDeferred", "onFailure", "cause", "deferredFailCause", "onSuccess", "cleanup_", "void", "onInterrupt", "deferredAwait", "init_cjs_shims", "modifyEffect", "dual", "self", "f", "LayerSymbolKey", "LayerTypeId", "Symbol", "for", "layerVariance", "_RIn", "_", "_E", "_ROut", "proto", "pipe", "pipeArguments", "arguments", "MemoMapTypeIdKey", "MemoMapTypeId", "isLayer", "u", "hasProperty", "isFresh", "self", "_tag", "OP_FRESH", "MemoMapImpl", "ref", "constructor", "getOrElseMemoize", "layer", "scope", "modifyEffect", "map", "inMap", "get", "undefined", "acquire", "release", "cached", "flatMap", "patch", "b", "patchFiberRefs", "as", "onExit", "exitMatch", "onFailure", "void", "onSuccess", "scopeAddFinalizerExit", "succeed", "make", "observers", "deferredMake", "deferred", "finalizerRef", "resource", "uninterruptibleMask", "restore", "scopeMake", "innerScope", "makeBuilder", "f", "diffFiberRefs", "exit", "OP_FAILURE", "deferredFailCause", "effect_instruction_i0", "zipRight", "scopeClose", "failCause", "OP_SUCCESS", "set", "whenEffect", "modify", "n", "asVoid", "update", "sync", "delete", "finalizer", "deferredSucceed", "memoized", "deferredAwait", "exitMatchEffect", "flatten", "makeMemoMap", "suspend", "makeSynchronized", "Map", "buildWithScope", "dual", "self", "scope", "flatMap", "makeMemoMap", "memoMap", "makeBuilder", "run", "makeBuilder", "self", "scope", "inMemoMap", "op", "_tag", "sync", "memoMap", "f", "getOrElseMemoize", "scopeWith", "layer", "pipe", "matchCauseEffect", "onFailure", "cause", "failureK", "onSuccess", "value", "successK", "_", "buildWithScope", "effect", "first", "flatMap", "env", "second", "provideContext", "scopeExtend", "evaluate", "zipWith", "zipK", "zipWithOptions", "concurrent", "provideSomeLayer", "dual", "self", "layer", "acquireUseRelease", "scopeMake", "scope", "flatMap", "buildWithScope", "context", "provideSomeContext", "exit", "scopeClose", "provideSomeRuntime", "rt", "patchRefs", "diff", "defaultRuntime", "fiberRefs", "patchFlags", "runtimeFlags", "uninterruptibleMask", "restore", "withFiberRuntime", "fiber", "oldContext", "getFiberRef", "currentContext", "oldRefs", "getFiberRefs", "newRefs", "patch", "id", "oldFlags", "_runtimeFlags", "newFlags", "rollbackRefs", "rollbackFlags", "setFiberRefs", "ensuring", "merge", "void", "effect_provide", "source", "isLayer", "isContext", "console", "map", "fiberRefGet", "currentServices", "get", "consoleTag", "consoleWith", "f", "fiberRefGetWith", "services", "withConsole", "dual", "effect", "value", "fiberRefLocallyWith", "add", "withConsoleScoped", "fiberRefLocallyScopedWith", "init_cjs_shims", "currentCache", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "unsafeMakeWith", "map", "deferredMake", "handle", "listeners", "Listeners", "seconds", "currentCacheEnabled", "fromRequest", "request", "dataSource", "flatMap", "isEffect", "succeed", "ds", "fiberIdWith", "id", "proxy", "Proxy", "fiberRefGetWith", "cacheEnabled", "cached", "cache", "getEither", "orNew", "_tag", "left", "interrupted", "invalidateWhen", "entry", "increment", "uninterruptibleMask", "restore", "exit", "blocked", "empty", "deferredAwait", "decrement", "right", "single", "makeEntry", "result", "ownerId", "state", "completed", "ref", "ensuring", "sync", "cacheRequest", "void", "deferredComplete", "withRequestCaching", "dual", "self", "strategy", "fiberRefLocally", "withRequestCache", "init_cjs_shims", "isRequest", "EffectTypeId", "isEffect", "cachedWithTTL", "cached", "cachedInvalidateWithTTL", "memoize", "cachedFunction", "once", "all", "allWith", "allSuccesses", "dropUntil", "dropWhile", "every", "exists", "filter", "filterMap", "findFirst", "firstSuccessOf", "forEach", "head", "mergeAll", "partition", "reduce", "reduceEffect", "reduceRight", "reduceWhile", "replicate", "replicateEffect", "takeUntil", "takeWhile", "validateAll", "validateFirst", "async", "asyncEffect", "custom", "withFiberRuntime", "fail", "failSync", "failCause", "failCauseSync", "die", "dieMessage", "dieSync", "gen", "never", "none", "promise", "succeed", "succeedNone", "succeedSome", "suspend", "sync", "_void", "void", "yieldNow", "_catch", "catchAll", "catchAllCause", "catchAllDefect", "catchIf", "catchSome", "catchSomeCause", "catchSomeDefect", "catchTag", "catchTags", "cause", "eventually", "ignore", "ignoreLogged", "parallelErrors", "sandbox", "retry", "retry_combined", "retryOrElse", "retryOrElse_Effect", "try_", "tryMap", "tryMapPromise", "tryPromise", "unsandbox", "allowInterrupt", "checkInterruptible", "disconnect", "interrupt", "interruptWith", "interruptible", "interruptibleMask", "onInterrupt", "uninterruptible", "uninterruptibleMask", "liftPredicate", "as", "asSome", "asSomeError", "asVoid", "flip", "flipWith", "map", "mapAccum", "mapBoth", "mapError", "mapErrorCause", "merge", "negate", "acquireRelease", "acquireReleaseInterruptible", "acquireUseRelease", "addFinalizer", "ensuring", "onError", "onExit", "parallelFinalizers", "finalizersMask", "sequentialFinalizers", "scope", "scopeWith", "scoped", "scopedEffect", "using", "withEarlyRelease", "awaitAllChildren", "daemonChildren", "descriptor", "descriptorWith", "diffFiberRefs", "ensuringChild", "ensuringChildren", "fiberId", "fiberIdWith", "fork", "forkDaemon", "forkAll", "forkIn", "forkScoped", "forkWithErrorHandler", "fromFiber", "fromFiberEffect", "supervised", "transplant", "withConcurrency", "withScheduler", "withSchedulingPriority", "withMaxOpsBeforeYield", "clock", "clockWith", "withClockScoped", "withClock", "console", "consoleWith", "withConsoleScoped", "withConsole", "delay", "sleep", "timed", "timedWith", "timeout", "timeoutOption", "timeoutFail", "timeoutFailCause", "timeoutTo", "configProviderWith", "withConfigProvider", "withConfigProviderScoped", "context", "contextWith", "contextWithEffect", "mapInputContext", "provide", "effect_provide", "provideService", "provideServiceEffect", "serviceFunction", "serviceFunctionEffect", "serviceFunctions", "serviceConstants", "serviceMembers", "serviceOption", "serviceOptional", "updateService", "Do", "bind", "bindTo", "let_", "either", "exit", "intoDeferred", "option", "if_", "filterOrDie", "filterOrDieMessage", "filterOrElse", "filterOrFail", "unless", "unlessEffect", "when", "whenEffect", "whenFiberRef", "whenRef", "flatMap", "andThen", "flatten", "raceAll", "race", "raceFirst", "raceWith", "summarized", "tap", "tapBoth", "tapDefect", "tapError", "tapErrorTag", "tapErrorCause", "forever", "iterate", "loop", "repeat", "repeat_combined", "repeatN", "repeatOrElse", "repeatOrElse_Effect", "schedule", "schedule_Effect", "scheduleForked", "scheduleFrom", "scheduleFrom_Effect", "whileLoop", "getFiberRefs", "fiberRefs", "inheritFiberRefs", "locally", "fiberRefLocally", "locallyWith", "fiberRefLocallyWith", "locallyScoped", "fiberRefLocallyScoped", "locallyScopedWith", "fiberRefLocallyScopedWith", "patchFiberRefs", "setFiberRefs", "updateFiberRefs", "isFailure", "isSuccess", "match", "matchCause", "matchCauseEffect", "matchEffect", "log", "logWithLevel", "level", "message", "logTrace", "logDebug", "logInfo", "logWarning", "logError", "logFatal", "withLogSpan", "annotateLogs", "annotateLogsScoped", "logAnnotations", "withUnhandledErrorLogLevel", "orDie", "orDieWith", "orElse", "orElseFail", "orElseSucceed", "random", "randomWith", "withRandom", "withRandomScoped", "runtime", "getRuntimeFlags", "runtimeFlags", "patchRuntimeFlags", "updateRuntimeFlags", "withRuntimeFlagsPatch", "withRuntimeFlags", "withRuntimeFlagsPatchScoped", "withRuntimeFlagsScoped", "tagMetrics", "labelMetrics", "tagMetricsScoped", "labelMetricsScoped", "metricLabels", "withMetric", "unsafeMakeSemaphore", "makeSemaphore", "runFork", "unsafeForkEffect", "runCallback", "unsafeRunEffect", "runPromise", "unsafeRunPromiseEffect", "runPromiseExit", "unsafeRunPromiseExitEffect", "runSync", "unsafeRunSyncEffect", "runSyncExit", "unsafeRunSyncExitEffect", "validate", "validateWith", "zip", "zipOptions", "zipLeft", "zipLeftOptions", "zipRight", "zipRightOptions", "zipWith", "zipWithOptions", "ap", "dual", "self", "that", "f", "a", "blocked", "runRequestBlock", "step", "request", "args", "isRequest", "fromRequest", "cacheRequestResult", "cacheRequest", "withRequestBatching", "withRequestCaching", "withRequestCache", "tracer", "tracerWith", "withTracer", "withTracerScoped", "withTracerEnabled", "withTracerTiming", "annotateSpans", "annotateCurrentSpan", "currentSpan", "currentParentSpan", "spanAnnotations", "spanLinks", "linkSpans", "makeSpan", "makeSpanScoped", "useSpan", "withSpan", "functionWithSpan", "withSpanScoped", "withParentSpan", "fromNullable", "optionFromOptional", "Tag", "id", "limit", "Error", "stackTraceLimit", "creationError", "TagClass", "Object", "setPrototypeOf", "TagProto", "key", "defineProperty", "get", "stack", "cache", "Map", "Proxy", "_target", "prop", "_receiver", "body", "has", "fn", "s", "set", "cn", "assign", "getPrototypeOf", "init_cjs_shims", "Error", "plainArgsSymbol", "Symbol", "for", "YieldableError", "constructor", "args", "message", "cause", "undefined", "Object", "assign", "defineProperty", "value", "enumerable", "toJSON", "TaggedError", "tag", "Base", "_tag", "prototype", "name", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "PrettyError", "message", "stack", "span", "isPlainString", "errorType", "init_cjs_shims", "extractErrorDetails", "error", "hasProperty", "isFunction", "message", "maybeWithUnderlyingType", "type", "spanSymbol", "parseError", "error", "span", "hasProperty", "message", "type", "isPlainString", "extractErrorDetails", "PrettyError", "el", "captureErrorsFrom", "cause", "reduceWithContext", "_", "unknownError", "parseError", "error", "l", "r", "init_cjs_shims", "init_cjs_shims", "splitSpansAttributesByTypes", "attributes", "prev", "key", "value", "init_cjs_shims", "stackAtRegex", "sourceFileWithMapPointerRegex", "init_cjs_shims", "cwdRegex", "stripCwdPath", "path", "init_cjs_shims", "init_cjs_shims", "init_cjs_shims", "getErrorLocationFrom", "sourceFile", "regex", "sourceFileWithMapPointerRegex", "filePath", "line", "column", "init_cjs_shims", "init_cjs_shims", "import_fs_extra", "init_cjs_shims", "FsError", "TaggedError", "readFileEffect", "path", "pipe", "Effect_exports", "fs", "e", "FsError", "existsEffect", "readJsonEffect", "numberOflinesToExtract", "getSourceCode", "filePath", "line", "column", "isFromJs", "Effect_exports", "start", "readFileEffect", "currentLine", "index", "currentLineNumber", "actualColumn", "init_cjs_shims", "path", "import_picocolors", "import_source_map_js", "getSourcesFromMapFile", "location", "Effect_exports", "existsEffect", "message", "color", "data", "readJsonEffect", "sources", "absolutePath", "path", "source", "getSourceCode", "getErrorRelatedSources", "sourceFile", "Effect_exports", "location", "getErrorLocationFrom", "filePath", "line", "column", "source", "getSourceCode", "getSourcesFromMapFile", "maybeMapSourcemaps", "stacktrace", "Effect_exports", "stackLine", "chunks", "path", "details", "getErrorRelatedSources", "stackAtRegex", "transformRawError", "reverseSpans", "stripCwd", "message", "maybeStack", "span", "errorType", "isPlainString", "Effect_exports", "sources", "spans", "current", "name", "allAttributes", "status", "attributes", "stacktrace", "splitSpansAttributesByTypes", "errorSources", "maybeMapSourcemaps", "Option_exports", "stack", "stripCwdPath", "stackAtRegex", "captureErrors", "cause", "options", "Effect_exports", "isInterruptedOnly", "rawErrors", "captureErrorsFrom", "transformRawError", "init_cjs_shims", "bigIntReplacer", "_key", "value", "init_cjs_shims", "fileURLToPath", "import_fs_extra", "init_cjs_shims", "FetchError", "TaggedError", "init_cjs_shims", "FileError", "TaggedError", "init_cjs_shims", "cwdRegex", "filename", "path", "Effect_exports", "fileName", "fileURLToPath", "readUser", "Effect_exports", "fs", "FileError", "fetchTask", "userId", "e", "FetchError", "unwrapResponseTask", "response", "fromPromiseTask", "filename", "id", "from_promise_default", "Effect_exports", "pipe", "from_promise_default", "errors", "captureErrors", "bigIntReplacer"]
}
